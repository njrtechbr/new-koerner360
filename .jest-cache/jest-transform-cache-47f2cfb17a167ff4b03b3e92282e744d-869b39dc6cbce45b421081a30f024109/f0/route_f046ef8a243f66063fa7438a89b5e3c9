e7cde87d5ac55270affbf9c6e276782b
"use strict";

/* istanbul ignore next */
function cov_2ghbsfm9s6() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\reset-password\\route.ts";
  var hash = "fdc9451e9ddaee303a38902190ae8604775e10ca";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\reset-password\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 13
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 49
        }
      },
      "6": {
        start: {
          line: 14,
          column: 32
        },
        end: {
          line: 14,
          column: 77
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "8": {
        start: {
          line: 21,
          column: 32
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "9": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "10": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 41
        }
      },
      "11": {
        start: {
          line: 29,
          column: 37
        },
        end: {
          line: 29,
          column: 72
        }
      },
      "12": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 38,
          column: 10
        }
      },
      "13": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "14": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 44,
          column: 15
        }
      },
      "15": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 47,
          column: 69
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "17": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "18": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 62
        }
      },
      "19": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "20": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "21": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 19
          }
        },
        loc: {
          start: {
            line: 25,
            column: 29
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 25
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 38
          }
        }, {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 14
          }
        }, {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 32
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\reset-password\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { prisma } from '@/lib/prisma';\nimport bcrypt from 'bcryptjs';\n\n// Schema de valida\xE7\xE3o para redefini\xE7\xE3o de senha\nconst esquemaRedefinicaoSenha = z.object({\n  token: z.string().min(1, 'Token \xE9 obrigat\xF3rio'),\n  novaSenha: z.string().min(6, 'A senha deve ter pelo menos 6 caracteres'),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validar entrada\n    const { token, novaSenha } = esquemaRedefinicaoSenha.parse(body);\n\n    // Verificar se o token existe e n\xE3o expirou\n    const usuario = await prisma.usuario.findFirst({\n      where: {\n        tokenRecuperacao: token,\n        expiracaoTokenRecuperacao: {\n          gt: new Date(), // Token ainda n\xE3o expirou\n        },\n      },\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { message: 'Token inv\xE1lido ou expirado' },\n        { status: 400 }\n      );\n    }\n\n    // Hash da nova senha\n    const senhaHash = await bcrypt.hash(novaSenha, 12);\n\n    // Atualizar a senha e limpar o token de recupera\xE7\xE3o\n    await prisma.usuario.update({\n      where: { id: usuario.id },\n      data: {\n        senha: senhaHash,\n        tokenRecuperacao: null,\n        expiracaoTokenRecuperacao: null,\n      },\n    });\n\n    return NextResponse.json(\n      { message: 'Senha redefinida com sucesso' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Erro na redefini\xE7\xE3o de senha:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { message: 'Dados inv\xE1lidos', errors: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { message: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["POST", "esquemaRedefinicaoSenha", "z", "object", "token", "string", "min", "novaSenha", "request", "body", "json", "parse", "usuario", "prisma", "findFirst", "where", "tokenRecuperacao", "expiracaoTokenRecuperacao", "gt", "Date", "NextResponse", "message", "status", "senhaHash", "bcrypt", "hash", "update", "id", "data", "senha", "error", "console", "ZodError", "errors"],
      mappings: ";;;;+BAWsBA;;;eAAAA;;;wBAXoB;qBACxB;wBACK;iEACJ;;;;;;AAEnB,gDAAgD;AAChD,MAAMC,0BAA0BC,MAAC,CAACC,MAAM,CAAC;IACvCC,OAAOF,MAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAG;IACzBC,WAAWL,MAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAG;AAC/B;AAEO,eAAeN,KAAKQ,OAAoB;IAC7C,IAAI;QACF,MAAMC,OAAO,MAAMD,QAAQE,IAAI;QAE/B,kBAAkB;QAClB,MAAM,EAAEN,KAAK,EAAEG,SAAS,EAAE,GAAGN,wBAAwBU,KAAK,CAACF;QAE3D,4CAA4C;QAC5C,MAAMG,UAAU,MAAMC,cAAM,CAACD,OAAO,CAACE,SAAS,CAAC;YAC7CC,OAAO;gBACLC,kBAAkBZ;gBAClBa,2BAA2B;oBACzBC,IAAI,IAAIC;gBACV;YACF;QACF;QAEA,IAAI,CAACP,SAAS;YACZ,OAAOQ,oBAAY,CAACV,IAAI,CACtB;gBAAEW,SAAS;YAA6B,GACxC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAMC,YAAY,MAAMC,iBAAM,CAACC,IAAI,CAAClB,WAAW;QAE/C,oDAAoD;QACpD,MAAMM,cAAM,CAACD,OAAO,CAACc,MAAM,CAAC;YAC1BX,OAAO;gBAAEY,IAAIf,QAAQe,EAAE;YAAC;YACxBC,MAAM;gBACJC,OAAON;gBACPP,kBAAkB;gBAClBC,2BAA2B;YAC7B;QACF;QAEA,OAAOG,oBAAY,CAACV,IAAI,CACtB;YAAEW,SAAS;QAA+B,GAC1C;YAAEC,QAAQ;QAAI;IAElB,EAAE,OAAOQ,OAAO;QACdC,QAAQD,KAAK,CAAC,iCAAiCA;QAE/C,IAAIA,iBAAiB5B,MAAC,CAAC8B,QAAQ,EAAE;YAC/B,OAAOZ,oBAAY,CAACV,IAAI,CACtB;gBAAEW,SAAS;gBAAmBY,QAAQH,MAAMG,MAAM;YAAC,GACnD;gBAAEX,QAAQ;YAAI;QAElB;QAEA,OAAOF,oBAAY,CAACV,IAAI,CACtB;YAAEW,SAAS;QAA2B,GACtC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fdc9451e9ddaee303a38902190ae8604775e10ca"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ghbsfm9s6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ghbsfm9s6();
cov_2ghbsfm9s6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ghbsfm9s6().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2ghbsfm9s6().f[0]++;
    cov_2ghbsfm9s6().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2ghbsfm9s6().s[3]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_2ghbsfm9s6().s[4]++, require("zod"));
const _prisma =
/* istanbul ignore next */
(cov_2ghbsfm9s6().s[5]++, require("../../../../lib/prisma"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_2ghbsfm9s6().s[6]++, _interop_require_default(require("bcryptjs")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2ghbsfm9s6().f[1]++;
  cov_2ghbsfm9s6().s[7]++;
  return /* istanbul ignore next */(cov_2ghbsfm9s6().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2ghbsfm9s6().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2ghbsfm9s6().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2ghbsfm9s6().b[0][1]++, {
    default: obj
  });
}
// Schema de validação para redefinição de senha
const esquemaRedefinicaoSenha =
/* istanbul ignore next */
(cov_2ghbsfm9s6().s[8]++, _zod.z.object({
  token: _zod.z.string().min(1, 'Token é obrigatório'),
  novaSenha: _zod.z.string().min(6, 'A senha deve ter pelo menos 6 caracteres')
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_2ghbsfm9s6().f[2]++;
  cov_2ghbsfm9s6().s[9]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2ghbsfm9s6().s[10]++, await request.json());
    // Validar entrada
    const {
      token,
      novaSenha
    } =
    /* istanbul ignore next */
    (cov_2ghbsfm9s6().s[11]++, esquemaRedefinicaoSenha.parse(body));
    // Verificar se o token existe e não expirou
    const usuario =
    /* istanbul ignore next */
    (cov_2ghbsfm9s6().s[12]++, await _prisma.prisma.usuario.findFirst({
      where: {
        tokenRecuperacao: token,
        expiracaoTokenRecuperacao: {
          gt: new Date()
        }
      }
    }));
    /* istanbul ignore next */
    cov_2ghbsfm9s6().s[13]++;
    if (!usuario) {
      /* istanbul ignore next */
      cov_2ghbsfm9s6().b[2][0]++;
      cov_2ghbsfm9s6().s[14]++;
      return _server.NextResponse.json({
        message: 'Token inválido ou expirado'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ghbsfm9s6().b[2][1]++;
    }
    // Hash da nova senha
    const senhaHash =
    /* istanbul ignore next */
    (cov_2ghbsfm9s6().s[15]++, await _bcryptjs.default.hash(novaSenha, 12));
    // Atualizar a senha e limpar o token de recuperação
    /* istanbul ignore next */
    cov_2ghbsfm9s6().s[16]++;
    await _prisma.prisma.usuario.update({
      where: {
        id: usuario.id
      },
      data: {
        senha: senhaHash,
        tokenRecuperacao: null,
        expiracaoTokenRecuperacao: null
      }
    });
    /* istanbul ignore next */
    cov_2ghbsfm9s6().s[17]++;
    return _server.NextResponse.json({
      message: 'Senha redefinida com sucesso'
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ghbsfm9s6().s[18]++;
    console.error('Erro na redefinição de senha:', error);
    /* istanbul ignore next */
    cov_2ghbsfm9s6().s[19]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_2ghbsfm9s6().b[3][0]++;
      cov_2ghbsfm9s6().s[20]++;
      return _server.NextResponse.json({
        message: 'Dados inválidos',
        errors: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ghbsfm9s6().b[3][1]++;
    }
    cov_2ghbsfm9s6().s[21]++;
    return _server.NextResponse.json({
      message: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQT1NUIiwiZXNxdWVtYVJlZGVmaW5pY2FvU2VuaGEiLCJjb3ZfMmdoYnNmbTlzNiIsInMiLCJfem9kIiwieiIsIm9iamVjdCIsInRva2VuIiwic3RyaW5nIiwibWluIiwibm92YVNlbmhhIiwicmVxdWVzdCIsImYiLCJib2R5IiwianNvbiIsInBhcnNlIiwidXN1YXJpbyIsIl9wcmlzbWEiLCJwcmlzbWEiLCJmaW5kRmlyc3QiLCJ3aGVyZSIsInRva2VuUmVjdXBlcmFjYW8iLCJleHBpcmFjYW9Ub2tlblJlY3VwZXJhY2FvIiwiZ3QiLCJEYXRlIiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJtZXNzYWdlIiwic3RhdHVzIiwic2VuaGFIYXNoIiwiX2JjcnlwdGpzIiwiZGVmYXVsdCIsImhhc2giLCJ1cGRhdGUiLCJpZCIsImRhdGEiLCJzZW5oYSIsImVycm9yIiwiY29uc29sZSIsIlpvZEVycm9yIiwiZXJyb3JzIl0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxOZXJldSBKclxcRG9jdW1lbnRzXFxEZXZcXG5ld1xcc3JjXFxhcHBcXGFwaVxcYXV0aFxccmVzZXQtcGFzc3dvcmRcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJ0AvbGliL3ByaXNtYSc7XG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdGpzJztcblxuLy8gU2NoZW1hIGRlIHZhbGlkYcOnw6NvIHBhcmEgcmVkZWZpbmnDp8OjbyBkZSBzZW5oYVxuY29uc3QgZXNxdWVtYVJlZGVmaW5pY2FvU2VuaGEgPSB6Lm9iamVjdCh7XG4gIHRva2VuOiB6LnN0cmluZygpLm1pbigxLCAnVG9rZW4gw6kgb2JyaWdhdMOzcmlvJyksXG4gIG5vdmFTZW5oYTogei5zdHJpbmcoKS5taW4oNiwgJ0Egc2VuaGEgZGV2ZSB0ZXIgcGVsbyBtZW5vcyA2IGNhcmFjdGVyZXMnKSxcbn0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuICAgIC8vIFZhbGlkYXIgZW50cmFkYVxuICAgIGNvbnN0IHsgdG9rZW4sIG5vdmFTZW5oYSB9ID0gZXNxdWVtYVJlZGVmaW5pY2FvU2VuaGEucGFyc2UoYm9keSk7XG5cbiAgICAvLyBWZXJpZmljYXIgc2UgbyB0b2tlbiBleGlzdGUgZSBuw6NvIGV4cGlyb3VcbiAgICBjb25zdCB1c3VhcmlvID0gYXdhaXQgcHJpc21hLnVzdWFyaW8uZmluZEZpcnN0KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIHRva2VuUmVjdXBlcmFjYW86IHRva2VuLFxuICAgICAgICBleHBpcmFjYW9Ub2tlblJlY3VwZXJhY2FvOiB7XG4gICAgICAgICAgZ3Q6IG5ldyBEYXRlKCksIC8vIFRva2VuIGFpbmRhIG7Do28gZXhwaXJvdVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmICghdXN1YXJpbykge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IG1lc3NhZ2U6ICdUb2tlbiBpbnbDoWxpZG8gb3UgZXhwaXJhZG8nIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBIYXNoIGRhIG5vdmEgc2VuaGFcbiAgICBjb25zdCBzZW5oYUhhc2ggPSBhd2FpdCBiY3J5cHQuaGFzaChub3ZhU2VuaGEsIDEyKTtcblxuICAgIC8vIEF0dWFsaXphciBhIHNlbmhhIGUgbGltcGFyIG8gdG9rZW4gZGUgcmVjdXBlcmHDp8Ojb1xuICAgIGF3YWl0IHByaXNtYS51c3VhcmlvLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogdXN1YXJpby5pZCB9LFxuICAgICAgZGF0YToge1xuICAgICAgICBzZW5oYTogc2VuaGFIYXNoLFxuICAgICAgICB0b2tlblJlY3VwZXJhY2FvOiBudWxsLFxuICAgICAgICBleHBpcmFjYW9Ub2tlblJlY3VwZXJhY2FvOiBudWxsLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgbWVzc2FnZTogJ1NlbmhhIHJlZGVmaW5pZGEgY29tIHN1Y2Vzc28nIH0sXG4gICAgICB7IHN0YXR1czogMjAwIH1cbiAgICApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm8gbmEgcmVkZWZpbmnDp8OjbyBkZSBzZW5oYTonLCBlcnJvcik7XG5cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB6LlpvZEVycm9yKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgbWVzc2FnZTogJ0RhZG9zIGludsOhbGlkb3MnLCBlcnJvcnM6IGVycm9yLmVycm9ycyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBtZXNzYWdlOiAnRXJybyBpbnRlcm5vIGRvIHNlcnZpZG9yJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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