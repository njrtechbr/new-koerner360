e2fc4517a170d418c237cfaa59cae831
"use strict";

/* istanbul ignore next */
function cov_l7kl70mq1() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\relatorios\\route.ts";
  var hash = "de1e774e54e5fefb81bc474a39d6c63597df3e2c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\relatorios\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "6": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 69
        }
      },
      "7": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 41
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "9": {
        start: {
          line: 19,
          column: 24
        },
        end: {
          line: 19,
          column: 71
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "11": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 25,
          column: 15
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "14": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 40
        }
      },
      "15": {
        start: {
          line: 37,
          column: 28
        },
        end: {
          line: 37,
          column: 74
        }
      },
      "16": {
        start: {
          line: 38,
          column: 35
        },
        end: {
          line: 38,
          column: 119
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "18": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "19": {
        start: {
          line: 47,
          column: 24
        },
        end: {
          line: 47,
          column: 48
        }
      },
      "20": {
        start: {
          line: 49,
          column: 22
        },
        end: {
          line: 49,
          column: 24
        }
      },
      "21": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "22": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 48
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "24": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 50
        }
      },
      "25": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "26": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 52
        }
      },
      "27": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 37
        }
      },
      "29": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "30": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 71
        }
      },
      "31": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "32": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 68
        }
      },
      "33": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "34": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 32
        }
      },
      "35": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "36": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 53
        }
      },
      "37": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "38": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 67
        }
      },
      "39": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "40": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 53
        }
      },
      "41": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "42": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 54
        }
      },
      "43": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 85
        }
      },
      "44": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 57
        }
      },
      "45": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 57
        }
      },
      "46": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "47": {
        start: {
          line: 101,
          column: 84
        },
        end: {
          line: 141,
          column: 6
        }
      },
      "48": {
        start: {
          line: 143,
          column: 25
        },
        end: {
          line: 155,
          column: 6
        }
      },
      "49": {
        start: {
          line: 146,
          column: 50
        },
        end: {
          line: 146,
          column: 61
        }
      },
      "50": {
        start: {
          line: 156,
          column: 25
        },
        end: {
          line: 174,
          column: 5
        }
      },
      "51": {
        start: {
          line: 159,
          column: 61
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "52": {
        start: {
          line: 164,
          column: 28
        },
        end: {
          line: 164,
          column: 75
        }
      },
      "53": {
        start: {
          line: 164,
          column: 51
        },
        end: {
          line: 164,
          column: 74
        }
      },
      "54": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 172,
          column: 14
        }
      },
      "55": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 177,
          column: 7
        }
      },
      "56": {
        start: {
          line: 181,
          column: 23
        },
        end: {
          line: 219,
          column: 6
        }
      },
      "57": {
        start: {
          line: 220,
          column: 19
        },
        end: {
          line: 233,
          column: 5
        }
      },
      "58": {
        start: {
          line: 222,
          column: 49
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "59": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 236,
          column: 7
        }
      },
      "60": {
        start: {
          line: 240,
          column: 23
        },
        end: {
          line: 292,
          column: 6
        }
      },
      "61": {
        start: {
          line: 294,
          column: 25
        },
        end: {
          line: 294,
          column: 34
        }
      },
      "62": {
        start: {
          line: 295,
          column: 4
        },
        end: {
          line: 320,
          column: 7
        }
      },
      "63": {
        start: {
          line: 296,
          column: 27
        },
        end: {
          line: 296,
          column: 47
        }
      },
      "64": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "65": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 308,
          column: 15
        }
      },
      "66": {
        start: {
          line: 310,
          column: 22
        },
        end: {
          line: 310,
          column: 50
        }
      },
      "67": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "68": {
        start: {
          line: 322,
          column: 31
        },
        end: {
          line: 337,
          column: 6
        }
      },
      "69": {
        start: {
          line: 323,
          column: 22
        },
        end: {
          line: 323,
          column: 84
        }
      },
      "70": {
        start: {
          line: 323,
          column: 51
        },
        end: {
          line: 323,
          column: 66
        }
      },
      "71": {
        start: {
          line: 323,
          column: 77
        },
        end: {
          line: 323,
          column: 83
        }
      },
      "72": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "73": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 73
        }
      },
      "74": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 99
        }
      },
      "75": {
        start: {
          line: 326,
          column: 69
        },
        end: {
          line: 326,
          column: 79
        }
      },
      "76": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 63
        }
      },
      "77": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 63
        }
      },
      "78": {
        start: {
          line: 330,
          column: 33
        },
        end: {
          line: 330,
          column: 35
        }
      },
      "79": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 333,
          column: 15
        }
      },
      "80": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 67
        }
      },
      "81": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 64
        }
      },
      "82": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 21
        }
      },
      "83": {
        start: {
          line: 338,
          column: 4
        },
        end: {
          line: 340,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 18
          }
        },
        loc: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "gerarEstatisticas",
        decl: {
          start: {
            line: 100,
            column: 15
          },
          end: {
            line: 100,
            column: 32
          }
        },
        loc: {
          start: {
            line: 100,
            column: 40
          },
          end: {
            line: 178,
            column: 1
          }
        },
        line: 100
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 146,
            column: 45
          },
          end: {
            line: 146,
            column: 46
          }
        },
        loc: {
          start: {
            line: 146,
            column: 50
          },
          end: {
            line: 146,
            column: 61
          }
        },
        line: 146
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 159,
            column: 52
          },
          end: {
            line: 159,
            column: 53
          }
        },
        loc: {
          start: {
            line: 159,
            column: 61
          },
          end: {
            line: 162,
            column: 13
          }
        },
        line: 159
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 163,
            column: 55
          },
          end: {
            line: 163,
            column: 56
          }
        },
        loc: {
          start: {
            line: 163,
            column: 63
          },
          end: {
            line: 173,
            column: 9
          }
        },
        line: 163
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 164,
            column: 46
          },
          end: {
            line: 164,
            column: 47
          }
        },
        loc: {
          start: {
            line: 164,
            column: 51
          },
          end: {
            line: 164,
            column: 74
          }
        },
        line: 164
      },
      "7": {
        name: "gerarRelatorioResumo",
        decl: {
          start: {
            line: 180,
            column: 15
          },
          end: {
            line: 180,
            column: 35
          }
        },
        loc: {
          start: {
            line: 180,
            column: 43
          },
          end: {
            line: 237,
            column: 1
          }
        },
        line: 180
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 222,
            column: 35
          },
          end: {
            line: 222,
            column: 36
          }
        },
        loc: {
          start: {
            line: 222,
            column: 49
          },
          end: {
            line: 232,
            column: 13
          }
        },
        line: 222
      },
      "9": {
        name: "gerarRelatorioDetalhado",
        decl: {
          start: {
            line: 239,
            column: 15
          },
          end: {
            line: 239,
            column: 38
          }
        },
        loc: {
          start: {
            line: 239,
            column: 63
          },
          end: {
            line: 341,
            column: 1
          }
        },
        line: 239
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 295,
            column: 23
          },
          end: {
            line: 295,
            column: 24
          }
        },
        loc: {
          start: {
            line: 295,
            column: 36
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 295
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 322,
            column: 69
          },
          end: {
            line: 322,
            column: 70
          }
        },
        loc: {
          start: {
            line: 322,
            column: 78
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 322
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 323,
            column: 46
          },
          end: {
            line: 323,
            column: 47
          }
        },
        loc: {
          start: {
            line: 323,
            column: 51
          },
          end: {
            line: 323,
            column: 66
          }
        },
        line: 323
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 323,
            column: 72
          },
          end: {
            line: 323,
            column: 73
          }
        },
        loc: {
          start: {
            line: 323,
            column: 77
          },
          end: {
            line: 323,
            column: 83
          }
        },
        line: 323
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 326,
            column: 56
          },
          end: {
            line: 326,
            column: 57
          }
        },
        loc: {
          start: {
            line: 326,
            column: 69
          },
          end: {
            line: 326,
            column: 79
          }
        },
        line: 326
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 331,
            column: 26
          },
          end: {
            line: 331,
            column: 27
          }
        },
        loc: {
          start: {
            line: 331,
            column: 34
          },
          end: {
            line: 333,
            column: 13
          }
        },
        line: 331
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 54
          }
        }, {
          start: {
            line: 28,
            column: 58
          },
          end: {
            line: 28,
            column: 101
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "8": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 30
          }
        }, {
          start: {
            line: 59,
            column: 34
          },
          end: {
            line: 59,
            column: 49
          }
        }],
        line: 59
      },
      "9": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 63,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "10": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "11": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "12": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 69,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 69,
            column: 25
          }
        }, {
          start: {
            line: 69,
            column: 29
          },
          end: {
            line: 69,
            column: 49
          }
        }, {
          start: {
            line: 69,
            column: 53
          },
          end: {
            line: 69,
            column: 66
          }
        }],
        line: 69
      },
      "13": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "14": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "15": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "16": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 84,
            column: 54
          }
        }, {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 86,
            column: 85
          }
        }, {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 88,
            column: 57
          }
        }],
        line: 82
      },
      "17": {
        loc: {
          start: {
            line: 158,
            column: 19
          },
          end: {
            line: 158,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 19
          },
          end: {
            line: 158,
            column: 38
          }
        }, {
          start: {
            line: 158,
            column: 42
          },
          end: {
            line: 158,
            column: 43
          }
        }],
        line: 158
      },
      "18": {
        loc: {
          start: {
            line: 167,
            column: 29
          },
          end: {
            line: 167,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 29
          },
          end: {
            line: 167,
            column: 42
          }
        }, {
          start: {
            line: 167,
            column: 46
          },
          end: {
            line: 167,
            column: 70
          }
        }],
        line: 167
      },
      "19": {
        loc: {
          start: {
            line: 171,
            column: 27
          },
          end: {
            line: 171,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 27
          },
          end: {
            line: 171,
            column: 41
          }
        }, {
          start: {
            line: 171,
            column: 45
          },
          end: {
            line: 171,
            column: 46
          }
        }],
        line: 171
      },
      "20": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "21": {
        loc: {
          start: {
            line: 314,
            column: 24
          },
          end: {
            line: 314,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 314,
            column: 42
          },
          end: {
            line: 314,
            column: 62
          }
        }, {
          start: {
            line: 314,
            column: 65
          },
          end: {
            line: 314,
            column: 69
          }
        }],
        line: 314
      },
      "22": {
        loc: {
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "23": {
        loc: {
          start: {
            line: 332,
            column: 38
          },
          end: {
            line: 332,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 332,
            column: 38
          },
          end: {
            line: 332,
            column: 56
          }
        }, {
          start: {
            line: 332,
            column: 60
          },
          end: {
            line: 332,
            column: 61
          }
        }],
        line: 332
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\relatorios\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { verificarAutenticacao } from '@/lib/auth';\nimport {\n  filtrosRelatorioSchema,\n  validarQueryParams\n} from '@/lib/validations/avaliacoes';\nimport { TipoUsuario } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// GET /api/avaliacoes/relatorios - Gerar relat\xF3rios de avalia\xE7\xF5es 360\xB0\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const usuario = await verificarAutenticacao(request);\n    if (!usuario) {\n      return NextResponse.json(\n        { erro: 'Token de acesso inv\xE1lido ou expirado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN e GESTOR podem gerar relat\xF3rios)\n    if (usuario.tipo !== TipoUsuario.ADMIN && usuario.tipo !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem gerar relat\xF3rios' },\n        { status: 403 }\n      );\n    }\n\n    // Extrair e validar par\xE2metros de consulta\n    const url = new URL(request.url);\n    const queryParams = Object.fromEntries(url.searchParams.entries());\n    \n    const resultadoValidacao = validarQueryParams(filtrosRelatorioSchema, queryParams);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          erro: 'Par\xE2metros inv\xE1lidos', \n          detalhes: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const filtros = resultadoValidacao.dados;\n\n    // Construir filtros para a consulta\n    const where: any = {};\n\n    if (filtros.periodoId) {\n      where.periodoId = filtros.periodoId;\n    }\n\n    if (filtros.avaliadoId) {\n      where.avaliadoId = filtros.avaliadoId;\n    }\n\n    if (filtros.avaliadorId) {\n      where.avaliadorId = filtros.avaliadorId;\n    }\n\n    if (filtros.dataInicio || filtros.dataFim) {\n      where.dataAvaliacao = {};\n      if (filtros.dataInicio) {\n        where.dataAvaliacao.gte = new Date(filtros.dataInicio);\n      }\n      if (filtros.dataFim) {\n        where.dataAvaliacao.lte = new Date(filtros.dataFim);\n      }\n    }\n\n    // Filtros por caracter\xEDsticas do atendente\n    if (filtros.setor || filtros.departamento || filtros.cargo) {\n      where.avaliado = {};\n      if (filtros.setor) {\n        where.avaliado.setor = filtros.setor;\n      }\n      if (filtros.departamento) {\n        where.avaliado.departamento = filtros.departamento;\n      }\n      if (filtros.cargo) {\n        where.avaliado.cargo = filtros.cargo;\n      }\n    }\n\n    // Gerar relat\xF3rio baseado no formato solicitado\n    switch (filtros.formato) {\n      case 'estatisticas':\n        return await gerarEstatisticas(where);\n      case 'detalhado':\n        return await gerarRelatorioDetalhado(where, filtros.incluirDetalhes);\n      default:\n        return await gerarRelatorioResumo(where);\n    }\n\n  } catch (error) {\n    console.error('Erro ao gerar relat\xF3rio:', error);\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// Fun\xE7\xE3o para gerar estat\xEDsticas gerais\nasync function gerarEstatisticas(where: any) {\n  const [totalAvaliacoes, avaliacoesPorStatus, mediaNota, avaliacoesPorPeriodo] = await Promise.all([\n    // Total de avalia\xE7\xF5es\n    prisma.avaliacao.count({ where }),\n    \n    // Avalia\xE7\xF5es por status\n    prisma.avaliacao.groupBy({\n      by: ['status'],\n      where,\n      _count: {\n        id: true\n      }\n    }),\n    \n    // M\xE9dia geral das notas\n    prisma.avaliacao.aggregate({\n      where: {\n        ...where,\n        nota: { not: null }\n      },\n      _avg: {\n        nota: true\n      }\n    }),\n    \n    // Avalia\xE7\xF5es por per\xEDodo\n    prisma.avaliacao.groupBy({\n      by: ['periodoId'],\n      where,\n      _count: {\n        id: true\n      },\n      _avg: {\n        nota: true\n      }\n    })\n  ]);\n\n  // Buscar informa\xE7\xF5es dos per\xEDodos\n  const periodosInfo = await prisma.periodoAvaliacao.findMany({\n    where: {\n      id: {\n        in: avaliacoesPorPeriodo.map(p => p.periodoId)\n      }\n    },\n    select: {\n      id: true,\n      nome: true,\n      dataInicio: true,\n      dataFim: true\n    }\n  });\n\n  const estatisticas = {\n    totalAvaliacoes,\n    mediaNota: mediaNota._avg.nota || 0,\n    distribuicaoStatus: avaliacoesPorStatus.map(item => ({\n      status: item.status,\n      quantidade: item._count.id\n    })),\n    avaliacoesPorPeriodo: avaliacoesPorPeriodo.map(item => {\n      const periodo = periodosInfo.find(p => p.id === item.periodoId);\n      return {\n        periodoId: item.periodoId,\n        nomePeriodo: periodo?.nome || 'Per\xEDodo n\xE3o encontrado',\n        dataInicio: periodo?.dataInicio,\n        dataFim: periodo?.dataFim,\n        quantidade: item._count.id,\n        mediaNota: item._avg.nota || 0\n      };\n    })\n  };\n\n  return NextResponse.json({ estatisticas });\n}\n\n// Fun\xE7\xE3o para gerar relat\xF3rio resumido\nasync function gerarRelatorioResumo(where: any) {\n  const avaliacoes = await prisma.avaliacao.findMany({\n    where,\n    select: {\n      id: true,\n      nota: true,\n      status: true,\n      dataAvaliacao: true,\n      avaliador: {\n        select: {\n          id: true,\n          nome: true,\n          email: true\n        }\n      },\n      avaliado: {\n        select: {\n          id: true,\n          usuario: {\n            select: {\n              nome: true,\n              email: true\n            }\n          },\n          cargo: true,\n          setor: true,\n          departamento: true\n        }\n      },\n      periodo: {\n        select: {\n          id: true,\n          nome: true\n        }\n      }\n    },\n    orderBy: {\n      dataAvaliacao: 'desc'\n    }\n  });\n\n  const resumo = {\n    totalAvaliacoes: avaliacoes.length,\n    avaliacoes: avaliacoes.map(avaliacao => ({\n      id: avaliacao.id,\n      nota: avaliacao.nota,\n      status: avaliacao.status,\n      dataAvaliacao: avaliacao.dataAvaliacao,\n      avaliador: avaliacao.avaliador.nome,\n      avaliado: avaliacao.avaliado.usuario.nome,\n      cargo: avaliacao.avaliado.cargo,\n      setor: avaliacao.avaliado.setor,\n      periodo: avaliacao.periodo.nome\n    }))\n  };\n\n  return NextResponse.json({ resumo });\n}\n\n// Fun\xE7\xE3o para gerar relat\xF3rio detalhado\nasync function gerarRelatorioDetalhado(where: any, incluirDetalhes: boolean) {\n  const avaliacoes = await prisma.avaliacao.findMany({\n    where,\n    include: {\n      avaliador: {\n        select: {\n          id: true,\n          nome: true,\n          email: true,\n          userType: true\n        }\n      },\n      avaliado: {\n        select: {\n          id: true,\n          usuario: {\n            select: {\n              nome: true,\n              email: true\n            }\n          },\n          cargo: true,\n          setor: true,\n          departamento: true,\n          dataAdmissao: true,\n          status: true\n        }\n      },\n      periodo: {\n        select: {\n          id: true,\n          nome: true,\n          descricao: true,\n          dataInicio: true,\n          dataFim: true,\n          status: true\n        }\n      }\n    },\n    orderBy: [\n      { periodo: { dataInicio: 'desc' } },\n      { avaliado: { usuario: { nome: 'asc' } } }\n    ]\n  });\n\n  // Agrupar por avaliado para an\xE1lise\n  const avaliadosMap = new Map();\n  \n  avaliacoes.forEach(avaliacao => {\n    const avaliadoId = avaliacao.avaliadoId;\n    if (!avaliadosMap.has(avaliadoId)) {\n      avaliadosMap.set(avaliadoId, {\n        avaliado: avaliacao.avaliado,\n        avaliacoes: [],\n        estatisticas: {\n          totalAvaliacoes: 0,\n          mediaNota: 0,\n          notaMinima: null,\n          notaMaxima: null,\n          distribuicaoNotas: {}\n        }\n      });\n    }\n    \n    const dados = avaliadosMap.get(avaliadoId);\n    dados.avaliacoes.push({\n      id: avaliacao.id,\n      nota: avaliacao.nota,\n      comentario: incluirDetalhes ? avaliacao.comentario : null,\n      status: avaliacao.status,\n      dataAvaliacao: avaliacao.dataAvaliacao,\n      avaliador: avaliacao.avaliador,\n      periodo: avaliacao.periodo\n    });\n  });\n\n  // Calcular estat\xEDsticas para cada avaliado\n  const relatorioDetalhado = Array.from(avaliadosMap.values()).map(dados => {\n    const notas = dados.avaliacoes\n      .filter(a => a.nota !== null)\n      .map(a => a.nota);\n    \n    if (notas.length > 0) {\n      dados.estatisticas.totalAvaliacoes = dados.avaliacoes.length;\n      dados.estatisticas.mediaNota = notas.reduce((sum, nota) => sum + nota, 0) / notas.length;\n      dados.estatisticas.notaMinima = Math.min(...notas);\n      dados.estatisticas.notaMaxima = Math.max(...notas);\n      \n      // Distribui\xE7\xE3o de notas\n      const distribuicao = {};\n      notas.forEach(nota => {\n        distribuicao[nota] = (distribuicao[nota] || 0) + 1;\n      });\n      dados.estatisticas.distribuicaoNotas = distribuicao;\n    }\n    \n    return dados;\n  });\n\n  return NextResponse.json({ relatorioDetalhado });\n}"],
      names: ["GET", "prisma", "PrismaClient", "request", "usuario", "verificarAutenticacao", "NextResponse", "json", "erro", "status", "tipo", "TipoUsuario", "ADMIN", "GESTOR", "url", "URL", "queryParams", "Object", "fromEntries", "searchParams", "entries", "resultadoValidacao", "validarQueryParams", "filtrosRelatorioSchema", "sucesso", "detalhes", "details", "filtros", "dados", "where", "periodoId", "avaliadoId", "avaliadorId", "dataInicio", "dataFim", "dataAvaliacao", "gte", "Date", "lte", "setor", "departamento", "cargo", "avaliado", "formato", "gerarEstatisticas", "gerarRelatorioDetalhado", "incluirDetalhes", "gerarRelatorioResumo", "error", "console", "totalAvaliacoes", "avaliacoesPorStatus", "mediaNota", "avaliacoesPorPeriodo", "Promise", "all", "avaliacao", "count", "groupBy", "by", "_count", "id", "aggregate", "nota", "not", "_avg", "periodosInfo", "periodoAvaliacao", "findMany", "in", "map", "p", "select", "nome", "estatisticas", "distribuicaoStatus", "item", "quantidade", "periodo", "find", "nomePeriodo", "avaliacoes", "avaliador", "email", "orderBy", "resumo", "length", "include", "userType", "dataAdmissao", "descricao", "avaliadosMap", "Map", "forEach", "has", "set", "notaMinima", "notaMaxima", "distribuicaoNotas", "get", "push", "comentario", "relatorioDetalhado", "Array", "from", "values", "notas", "filter", "a", "reduce", "sum", "Math", "min", "max", "distribuicao"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "de1e774e54e5fefb81bc474a39d6c63597df3e2c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_l7kl70mq1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_l7kl70mq1();
cov_l7kl70mq1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_l7kl70mq1().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_l7kl70mq1().f[0]++;
    cov_l7kl70mq1().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_l7kl70mq1().s[3]++, require("next/server"));
const _client =
/* istanbul ignore next */
(cov_l7kl70mq1().s[4]++, require("@prisma/client"));
const _auth =
/* istanbul ignore next */
(cov_l7kl70mq1().s[5]++, require("../../../../lib/auth"));
const _avaliacoes =
/* istanbul ignore next */
(cov_l7kl70mq1().s[6]++, require("../../../../lib/validations/avaliacoes"));
const prisma =
/* istanbul ignore next */
(cov_l7kl70mq1().s[7]++, new _client.PrismaClient());
async function GET(request) {
  /* istanbul ignore next */
  cov_l7kl70mq1().f[1]++;
  cov_l7kl70mq1().s[8]++;
  try {
    // Verificar autenticação
    const usuario =
    /* istanbul ignore next */
    (cov_l7kl70mq1().s[9]++, await (0, _auth.verificarAutenticacao)(request));
    /* istanbul ignore next */
    cov_l7kl70mq1().s[10]++;
    if (!usuario) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[0][0]++;
      cov_l7kl70mq1().s[11]++;
      return _server.NextResponse.json({
        erro: 'Token de acesso inválido ou expirado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[0][1]++;
    }
    // Verificar permissões (apenas ADMIN e GESTOR podem gerar relatórios)
    cov_l7kl70mq1().s[12]++;
    if (
    /* istanbul ignore next */
    (cov_l7kl70mq1().b[2][0]++, usuario.tipo !== _client.TipoUsuario.ADMIN) &&
    /* istanbul ignore next */
    (cov_l7kl70mq1().b[2][1]++, usuario.tipo !== _client.TipoUsuario.GESTOR)) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[1][0]++;
      cov_l7kl70mq1().s[13]++;
      return _server.NextResponse.json({
        erro: 'Acesso negado. Apenas administradores e gestores podem gerar relatórios'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[1][1]++;
    }
    // Extrair e validar parâmetros de consulta
    const url =
    /* istanbul ignore next */
    (cov_l7kl70mq1().s[14]++, new URL(request.url));
    const queryParams =
    /* istanbul ignore next */
    (cov_l7kl70mq1().s[15]++, Object.fromEntries(url.searchParams.entries()));
    const resultadoValidacao =
    /* istanbul ignore next */
    (cov_l7kl70mq1().s[16]++, (0, _avaliacoes.validarQueryParams)(_avaliacoes.filtrosRelatorioSchema, queryParams));
    /* istanbul ignore next */
    cov_l7kl70mq1().s[17]++;
    if (!resultadoValidacao.sucesso) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[3][0]++;
      cov_l7kl70mq1().s[18]++;
      return _server.NextResponse.json({
        erro: 'Parâmetros inválidos',
        detalhes: resultadoValidacao.erro?.details
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[3][1]++;
    }
    const filtros =
    /* istanbul ignore next */
    (cov_l7kl70mq1().s[19]++, resultadoValidacao.dados);
    // Construir filtros para a consulta
    const where =
    /* istanbul ignore next */
    (cov_l7kl70mq1().s[20]++, {});
    /* istanbul ignore next */
    cov_l7kl70mq1().s[21]++;
    if (filtros.periodoId) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[4][0]++;
      cov_l7kl70mq1().s[22]++;
      where.periodoId = filtros.periodoId;
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[4][1]++;
    }
    cov_l7kl70mq1().s[23]++;
    if (filtros.avaliadoId) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[5][0]++;
      cov_l7kl70mq1().s[24]++;
      where.avaliadoId = filtros.avaliadoId;
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[5][1]++;
    }
    cov_l7kl70mq1().s[25]++;
    if (filtros.avaliadorId) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[6][0]++;
      cov_l7kl70mq1().s[26]++;
      where.avaliadorId = filtros.avaliadorId;
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[6][1]++;
    }
    cov_l7kl70mq1().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_l7kl70mq1().b[8][0]++, filtros.dataInicio) ||
    /* istanbul ignore next */
    (cov_l7kl70mq1().b[8][1]++, filtros.dataFim)) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[7][0]++;
      cov_l7kl70mq1().s[28]++;
      where.dataAvaliacao = {};
      /* istanbul ignore next */
      cov_l7kl70mq1().s[29]++;
      if (filtros.dataInicio) {
        /* istanbul ignore next */
        cov_l7kl70mq1().b[9][0]++;
        cov_l7kl70mq1().s[30]++;
        where.dataAvaliacao.gte = new Date(filtros.dataInicio);
      } else
      /* istanbul ignore next */
      {
        cov_l7kl70mq1().b[9][1]++;
      }
      cov_l7kl70mq1().s[31]++;
      if (filtros.dataFim) {
        /* istanbul ignore next */
        cov_l7kl70mq1().b[10][0]++;
        cov_l7kl70mq1().s[32]++;
        where.dataAvaliacao.lte = new Date(filtros.dataFim);
      } else
      /* istanbul ignore next */
      {
        cov_l7kl70mq1().b[10][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[7][1]++;
    }
    // Filtros por características do atendente
    cov_l7kl70mq1().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_l7kl70mq1().b[12][0]++, filtros.setor) ||
    /* istanbul ignore next */
    (cov_l7kl70mq1().b[12][1]++, filtros.departamento) ||
    /* istanbul ignore next */
    (cov_l7kl70mq1().b[12][2]++, filtros.cargo)) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[11][0]++;
      cov_l7kl70mq1().s[34]++;
      where.avaliado = {};
      /* istanbul ignore next */
      cov_l7kl70mq1().s[35]++;
      if (filtros.setor) {
        /* istanbul ignore next */
        cov_l7kl70mq1().b[13][0]++;
        cov_l7kl70mq1().s[36]++;
        where.avaliado.setor = filtros.setor;
      } else
      /* istanbul ignore next */
      {
        cov_l7kl70mq1().b[13][1]++;
      }
      cov_l7kl70mq1().s[37]++;
      if (filtros.departamento) {
        /* istanbul ignore next */
        cov_l7kl70mq1().b[14][0]++;
        cov_l7kl70mq1().s[38]++;
        where.avaliado.departamento = filtros.departamento;
      } else
      /* istanbul ignore next */
      {
        cov_l7kl70mq1().b[14][1]++;
      }
      cov_l7kl70mq1().s[39]++;
      if (filtros.cargo) {
        /* istanbul ignore next */
        cov_l7kl70mq1().b[15][0]++;
        cov_l7kl70mq1().s[40]++;
        where.avaliado.cargo = filtros.cargo;
      } else
      /* istanbul ignore next */
      {
        cov_l7kl70mq1().b[15][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[11][1]++;
    }
    // Gerar relatório baseado no formato solicitado
    cov_l7kl70mq1().s[41]++;
    switch (filtros.formato) {
      case 'estatisticas':
        /* istanbul ignore next */
        cov_l7kl70mq1().b[16][0]++;
        cov_l7kl70mq1().s[42]++;
        return await gerarEstatisticas(where);
      case 'detalhado':
        /* istanbul ignore next */
        cov_l7kl70mq1().b[16][1]++;
        cov_l7kl70mq1().s[43]++;
        return await gerarRelatorioDetalhado(where, filtros.incluirDetalhes);
      default:
        /* istanbul ignore next */
        cov_l7kl70mq1().b[16][2]++;
        cov_l7kl70mq1().s[44]++;
        return await gerarRelatorioResumo(where);
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_l7kl70mq1().s[45]++;
    console.error('Erro ao gerar relatório:', error);
    /* istanbul ignore next */
    cov_l7kl70mq1().s[46]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
// Função para gerar estatísticas gerais
async function gerarEstatisticas(where) {
  /* istanbul ignore next */
  cov_l7kl70mq1().f[2]++;
  const [totalAvaliacoes, avaliacoesPorStatus, mediaNota, avaliacoesPorPeriodo] =
  /* istanbul ignore next */
  (cov_l7kl70mq1().s[47]++, await Promise.all([
  // Total de avaliações
  prisma.avaliacao.count({
    where
  }),
  // Avaliações por status
  prisma.avaliacao.groupBy({
    by: ['status'],
    where,
    _count: {
      id: true
    }
  }),
  // Média geral das notas
  prisma.avaliacao.aggregate({
    where: {
      ...where,
      nota: {
        not: null
      }
    },
    _avg: {
      nota: true
    }
  }),
  // Avaliações por período
  prisma.avaliacao.groupBy({
    by: ['periodoId'],
    where,
    _count: {
      id: true
    },
    _avg: {
      nota: true
    }
  })]));
  // Buscar informações dos períodos
  const periodosInfo =
  /* istanbul ignore next */
  (cov_l7kl70mq1().s[48]++, await prisma.periodoAvaliacao.findMany({
    where: {
      id: {
        in: avaliacoesPorPeriodo.map(p => {
          /* istanbul ignore next */
          cov_l7kl70mq1().f[3]++;
          cov_l7kl70mq1().s[49]++;
          return p.periodoId;
        })
      }
    },
    select: {
      id: true,
      nome: true,
      dataInicio: true,
      dataFim: true
    }
  }));
  const estatisticas =
  /* istanbul ignore next */
  (cov_l7kl70mq1().s[50]++, {
    totalAvaliacoes,
    mediaNota:
    /* istanbul ignore next */
    (cov_l7kl70mq1().b[17][0]++, mediaNota._avg.nota) ||
    /* istanbul ignore next */
    (cov_l7kl70mq1().b[17][1]++, 0),
    distribuicaoStatus: avaliacoesPorStatus.map(item => {
      /* istanbul ignore next */
      cov_l7kl70mq1().f[4]++;
      cov_l7kl70mq1().s[51]++;
      return {
        status: item.status,
        quantidade: item._count.id
      };
    }),
    avaliacoesPorPeriodo: avaliacoesPorPeriodo.map(item => {
      /* istanbul ignore next */
      cov_l7kl70mq1().f[5]++;
      const periodo =
      /* istanbul ignore next */
      (cov_l7kl70mq1().s[52]++, periodosInfo.find(p => {
        /* istanbul ignore next */
        cov_l7kl70mq1().f[6]++;
        cov_l7kl70mq1().s[53]++;
        return p.id === item.periodoId;
      }));
      /* istanbul ignore next */
      cov_l7kl70mq1().s[54]++;
      return {
        periodoId: item.periodoId,
        nomePeriodo:
        /* istanbul ignore next */
        (cov_l7kl70mq1().b[18][0]++, periodo?.nome) ||
        /* istanbul ignore next */
        (cov_l7kl70mq1().b[18][1]++, 'Período não encontrado'),
        dataInicio: periodo?.dataInicio,
        dataFim: periodo?.dataFim,
        quantidade: item._count.id,
        mediaNota:
        /* istanbul ignore next */
        (cov_l7kl70mq1().b[19][0]++, item._avg.nota) ||
        /* istanbul ignore next */
        (cov_l7kl70mq1().b[19][1]++, 0)
      };
    })
  });
  /* istanbul ignore next */
  cov_l7kl70mq1().s[55]++;
  return _server.NextResponse.json({
    estatisticas
  });
}
// Função para gerar relatório resumido
async function gerarRelatorioResumo(where) {
  /* istanbul ignore next */
  cov_l7kl70mq1().f[7]++;
  const avaliacoes =
  /* istanbul ignore next */
  (cov_l7kl70mq1().s[56]++, await prisma.avaliacao.findMany({
    where,
    select: {
      id: true,
      nota: true,
      status: true,
      dataAvaliacao: true,
      avaliador: {
        select: {
          id: true,
          nome: true,
          email: true
        }
      },
      avaliado: {
        select: {
          id: true,
          usuario: {
            select: {
              nome: true,
              email: true
            }
          },
          cargo: true,
          setor: true,
          departamento: true
        }
      },
      periodo: {
        select: {
          id: true,
          nome: true
        }
      }
    },
    orderBy: {
      dataAvaliacao: 'desc'
    }
  }));
  const resumo =
  /* istanbul ignore next */
  (cov_l7kl70mq1().s[57]++, {
    totalAvaliacoes: avaliacoes.length,
    avaliacoes: avaliacoes.map(avaliacao => {
      /* istanbul ignore next */
      cov_l7kl70mq1().f[8]++;
      cov_l7kl70mq1().s[58]++;
      return {
        id: avaliacao.id,
        nota: avaliacao.nota,
        status: avaliacao.status,
        dataAvaliacao: avaliacao.dataAvaliacao,
        avaliador: avaliacao.avaliador.nome,
        avaliado: avaliacao.avaliado.usuario.nome,
        cargo: avaliacao.avaliado.cargo,
        setor: avaliacao.avaliado.setor,
        periodo: avaliacao.periodo.nome
      };
    })
  });
  /* istanbul ignore next */
  cov_l7kl70mq1().s[59]++;
  return _server.NextResponse.json({
    resumo
  });
}
// Função para gerar relatório detalhado
async function gerarRelatorioDetalhado(where, incluirDetalhes) {
  /* istanbul ignore next */
  cov_l7kl70mq1().f[9]++;
  const avaliacoes =
  /* istanbul ignore next */
  (cov_l7kl70mq1().s[60]++, await prisma.avaliacao.findMany({
    where,
    include: {
      avaliador: {
        select: {
          id: true,
          nome: true,
          email: true,
          userType: true
        }
      },
      avaliado: {
        select: {
          id: true,
          usuario: {
            select: {
              nome: true,
              email: true
            }
          },
          cargo: true,
          setor: true,
          departamento: true,
          dataAdmissao: true,
          status: true
        }
      },
      periodo: {
        select: {
          id: true,
          nome: true,
          descricao: true,
          dataInicio: true,
          dataFim: true,
          status: true
        }
      }
    },
    orderBy: [{
      periodo: {
        dataInicio: 'desc'
      }
    }, {
      avaliado: {
        usuario: {
          nome: 'asc'
        }
      }
    }]
  }));
  // Agrupar por avaliado para análise
  const avaliadosMap =
  /* istanbul ignore next */
  (cov_l7kl70mq1().s[61]++, new Map());
  /* istanbul ignore next */
  cov_l7kl70mq1().s[62]++;
  avaliacoes.forEach(avaliacao => {
    /* istanbul ignore next */
    cov_l7kl70mq1().f[10]++;
    const avaliadoId =
    /* istanbul ignore next */
    (cov_l7kl70mq1().s[63]++, avaliacao.avaliadoId);
    /* istanbul ignore next */
    cov_l7kl70mq1().s[64]++;
    if (!avaliadosMap.has(avaliadoId)) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[20][0]++;
      cov_l7kl70mq1().s[65]++;
      avaliadosMap.set(avaliadoId, {
        avaliado: avaliacao.avaliado,
        avaliacoes: [],
        estatisticas: {
          totalAvaliacoes: 0,
          mediaNota: 0,
          notaMinima: null,
          notaMaxima: null,
          distribuicaoNotas: {}
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[20][1]++;
    }
    const dados =
    /* istanbul ignore next */
    (cov_l7kl70mq1().s[66]++, avaliadosMap.get(avaliadoId));
    /* istanbul ignore next */
    cov_l7kl70mq1().s[67]++;
    dados.avaliacoes.push({
      id: avaliacao.id,
      nota: avaliacao.nota,
      comentario: incluirDetalhes ?
      /* istanbul ignore next */
      (cov_l7kl70mq1().b[21][0]++, avaliacao.comentario) :
      /* istanbul ignore next */
      (cov_l7kl70mq1().b[21][1]++, null),
      status: avaliacao.status,
      dataAvaliacao: avaliacao.dataAvaliacao,
      avaliador: avaliacao.avaliador,
      periodo: avaliacao.periodo
    });
  });
  // Calcular estatísticas para cada avaliado
  const relatorioDetalhado =
  /* istanbul ignore next */
  (cov_l7kl70mq1().s[68]++, Array.from(avaliadosMap.values()).map(dados => {
    /* istanbul ignore next */
    cov_l7kl70mq1().f[11]++;
    const notas =
    /* istanbul ignore next */
    (cov_l7kl70mq1().s[69]++, dados.avaliacoes.filter(a => {
      /* istanbul ignore next */
      cov_l7kl70mq1().f[12]++;
      cov_l7kl70mq1().s[70]++;
      return a.nota !== null;
    }).map(a => {
      /* istanbul ignore next */
      cov_l7kl70mq1().f[13]++;
      cov_l7kl70mq1().s[71]++;
      return a.nota;
    }));
    /* istanbul ignore next */
    cov_l7kl70mq1().s[72]++;
    if (notas.length > 0) {
      /* istanbul ignore next */
      cov_l7kl70mq1().b[22][0]++;
      cov_l7kl70mq1().s[73]++;
      dados.estatisticas.totalAvaliacoes = dados.avaliacoes.length;
      /* istanbul ignore next */
      cov_l7kl70mq1().s[74]++;
      dados.estatisticas.mediaNota = notas.reduce((sum, nota) => {
        /* istanbul ignore next */
        cov_l7kl70mq1().f[14]++;
        cov_l7kl70mq1().s[75]++;
        return sum + nota;
      }, 0) / notas.length;
      /* istanbul ignore next */
      cov_l7kl70mq1().s[76]++;
      dados.estatisticas.notaMinima = Math.min(...notas);
      /* istanbul ignore next */
      cov_l7kl70mq1().s[77]++;
      dados.estatisticas.notaMaxima = Math.max(...notas);
      // Distribuição de notas
      const distribuicao =
      /* istanbul ignore next */
      (cov_l7kl70mq1().s[78]++, {});
      /* istanbul ignore next */
      cov_l7kl70mq1().s[79]++;
      notas.forEach(nota => {
        /* istanbul ignore next */
        cov_l7kl70mq1().f[15]++;
        cov_l7kl70mq1().s[80]++;
        distribuicao[nota] = (
        /* istanbul ignore next */
        (cov_l7kl70mq1().b[23][0]++, distribuicao[nota]) ||
        /* istanbul ignore next */
        (cov_l7kl70mq1().b[23][1]++, 0)) + 1;
      });
      /* istanbul ignore next */
      cov_l7kl70mq1().s[81]++;
      dados.estatisticas.distribuicaoNotas = distribuicao;
    } else
    /* istanbul ignore next */
    {
      cov_l7kl70mq1().b[22][1]++;
    }
    cov_l7kl70mq1().s[82]++;
    return dados;
  }));
  /* istanbul ignore next */
  cov_l7kl70mq1().s[83]++;
  return _server.NextResponse.json({
    relatorioDetalhado
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,