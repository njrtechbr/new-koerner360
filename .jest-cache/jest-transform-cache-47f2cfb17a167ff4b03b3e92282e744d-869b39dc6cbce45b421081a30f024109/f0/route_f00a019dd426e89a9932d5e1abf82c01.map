{"version":3,"names":["cov_l7kl70mq1","actualCoverage","s","GET","prisma","_client","PrismaClient","request","f","usuario","_auth","verificarAutenticacao","b","_server","NextResponse","json","erro","status","tipo","TipoUsuario","ADMIN","GESTOR","url","URL","queryParams","Object","fromEntries","searchParams","entries","resultadoValidacao","_avaliacoes","validarQueryParams","filtrosRelatorioSchema","sucesso","detalhes","details","filtros","dados","where","periodoId","avaliadoId","avaliadorId","dataInicio","dataFim","dataAvaliacao","gte","Date","lte","setor","departamento","cargo","avaliado","formato","gerarEstatisticas","gerarRelatorioDetalhado","incluirDetalhes","gerarRelatorioResumo","error","console","totalAvaliacoes","avaliacoesPorStatus","mediaNota","avaliacoesPorPeriodo","Promise","all","avaliacao","count","groupBy","by","_count","id","aggregate","nota","not","_avg","periodosInfo","periodoAvaliacao","findMany","in","map","p","select","nome","estatisticas","distribuicaoStatus","item","quantidade","periodo","find","nomePeriodo","avaliacoes","avaliador","email","orderBy","resumo","length","include","userType","dataAdmissao","descricao","avaliadosMap","Map","forEach","has","set","notaMinima","notaMaxima","distribuicaoNotas","get","push","comentario","relatorioDetalhado","Array","from","values","notas","filter","a","reduce","sum","Math","min","max","distribuicao"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\relatorios\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\nimport { verificarAutenticacao } from '@/lib/auth';\nimport {\n  filtrosRelatorioSchema,\n  validarQueryParams\n} from '@/lib/validations/avaliacoes';\nimport { TipoUsuario } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// GET /api/avaliacoes/relatorios - Gerar relatórios de avaliações 360°\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const usuario = await verificarAutenticacao(request);\n    if (!usuario) {\n      return NextResponse.json(\n        { erro: 'Token de acesso inválido ou expirado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN e GESTOR podem gerar relatórios)\n    if (usuario.tipo !== TipoUsuario.ADMIN && usuario.tipo !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem gerar relatórios' },\n        { status: 403 }\n      );\n    }\n\n    // Extrair e validar parâmetros de consulta\n    const url = new URL(request.url);\n    const queryParams = Object.fromEntries(url.searchParams.entries());\n    \n    const resultadoValidacao = validarQueryParams(filtrosRelatorioSchema, queryParams);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          erro: 'Parâmetros inválidos', \n          detalhes: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const filtros = resultadoValidacao.dados;\n\n    // Construir filtros para a consulta\n    const where: any = {};\n\n    if (filtros.periodoId) {\n      where.periodoId = filtros.periodoId;\n    }\n\n    if (filtros.avaliadoId) {\n      where.avaliadoId = filtros.avaliadoId;\n    }\n\n    if (filtros.avaliadorId) {\n      where.avaliadorId = filtros.avaliadorId;\n    }\n\n    if (filtros.dataInicio || filtros.dataFim) {\n      where.dataAvaliacao = {};\n      if (filtros.dataInicio) {\n        where.dataAvaliacao.gte = new Date(filtros.dataInicio);\n      }\n      if (filtros.dataFim) {\n        where.dataAvaliacao.lte = new Date(filtros.dataFim);\n      }\n    }\n\n    // Filtros por características do atendente\n    if (filtros.setor || filtros.departamento || filtros.cargo) {\n      where.avaliado = {};\n      if (filtros.setor) {\n        where.avaliado.setor = filtros.setor;\n      }\n      if (filtros.departamento) {\n        where.avaliado.departamento = filtros.departamento;\n      }\n      if (filtros.cargo) {\n        where.avaliado.cargo = filtros.cargo;\n      }\n    }\n\n    // Gerar relatório baseado no formato solicitado\n    switch (filtros.formato) {\n      case 'estatisticas':\n        return await gerarEstatisticas(where);\n      case 'detalhado':\n        return await gerarRelatorioDetalhado(where, filtros.incluirDetalhes);\n      default:\n        return await gerarRelatorioResumo(where);\n    }\n\n  } catch (error) {\n    console.error('Erro ao gerar relatório:', error);\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// Função para gerar estatísticas gerais\nasync function gerarEstatisticas(where: any) {\n  const [totalAvaliacoes, avaliacoesPorStatus, mediaNota, avaliacoesPorPeriodo] = await Promise.all([\n    // Total de avaliações\n    prisma.avaliacao.count({ where }),\n    \n    // Avaliações por status\n    prisma.avaliacao.groupBy({\n      by: ['status'],\n      where,\n      _count: {\n        id: true\n      }\n    }),\n    \n    // Média geral das notas\n    prisma.avaliacao.aggregate({\n      where: {\n        ...where,\n        nota: { not: null }\n      },\n      _avg: {\n        nota: true\n      }\n    }),\n    \n    // Avaliações por período\n    prisma.avaliacao.groupBy({\n      by: ['periodoId'],\n      where,\n      _count: {\n        id: true\n      },\n      _avg: {\n        nota: true\n      }\n    })\n  ]);\n\n  // Buscar informações dos períodos\n  const periodosInfo = await prisma.periodoAvaliacao.findMany({\n    where: {\n      id: {\n        in: avaliacoesPorPeriodo.map(p => p.periodoId)\n      }\n    },\n    select: {\n      id: true,\n      nome: true,\n      dataInicio: true,\n      dataFim: true\n    }\n  });\n\n  const estatisticas = {\n    totalAvaliacoes,\n    mediaNota: mediaNota._avg.nota || 0,\n    distribuicaoStatus: avaliacoesPorStatus.map(item => ({\n      status: item.status,\n      quantidade: item._count.id\n    })),\n    avaliacoesPorPeriodo: avaliacoesPorPeriodo.map(item => {\n      const periodo = periodosInfo.find(p => p.id === item.periodoId);\n      return {\n        periodoId: item.periodoId,\n        nomePeriodo: periodo?.nome || 'Período não encontrado',\n        dataInicio: periodo?.dataInicio,\n        dataFim: periodo?.dataFim,\n        quantidade: item._count.id,\n        mediaNota: item._avg.nota || 0\n      };\n    })\n  };\n\n  return NextResponse.json({ estatisticas });\n}\n\n// Função para gerar relatório resumido\nasync function gerarRelatorioResumo(where: any) {\n  const avaliacoes = await prisma.avaliacao.findMany({\n    where,\n    select: {\n      id: true,\n      nota: true,\n      status: true,\n      dataAvaliacao: true,\n      avaliador: {\n        select: {\n          id: true,\n          nome: true,\n          email: true\n        }\n      },\n      avaliado: {\n        select: {\n          id: true,\n          usuario: {\n            select: {\n              nome: true,\n              email: true\n            }\n          },\n          cargo: true,\n          setor: true,\n          departamento: true\n        }\n      },\n      periodo: {\n        select: {\n          id: true,\n          nome: true\n        }\n      }\n    },\n    orderBy: {\n      dataAvaliacao: 'desc'\n    }\n  });\n\n  const resumo = {\n    totalAvaliacoes: avaliacoes.length,\n    avaliacoes: avaliacoes.map(avaliacao => ({\n      id: avaliacao.id,\n      nota: avaliacao.nota,\n      status: avaliacao.status,\n      dataAvaliacao: avaliacao.dataAvaliacao,\n      avaliador: avaliacao.avaliador.nome,\n      avaliado: avaliacao.avaliado.usuario.nome,\n      cargo: avaliacao.avaliado.cargo,\n      setor: avaliacao.avaliado.setor,\n      periodo: avaliacao.periodo.nome\n    }))\n  };\n\n  return NextResponse.json({ resumo });\n}\n\n// Função para gerar relatório detalhado\nasync function gerarRelatorioDetalhado(where: any, incluirDetalhes: boolean) {\n  const avaliacoes = await prisma.avaliacao.findMany({\n    where,\n    include: {\n      avaliador: {\n        select: {\n          id: true,\n          nome: true,\n          email: true,\n          userType: true\n        }\n      },\n      avaliado: {\n        select: {\n          id: true,\n          usuario: {\n            select: {\n              nome: true,\n              email: true\n            }\n          },\n          cargo: true,\n          setor: true,\n          departamento: true,\n          dataAdmissao: true,\n          status: true\n        }\n      },\n      periodo: {\n        select: {\n          id: true,\n          nome: true,\n          descricao: true,\n          dataInicio: true,\n          dataFim: true,\n          status: true\n        }\n      }\n    },\n    orderBy: [\n      { periodo: { dataInicio: 'desc' } },\n      { avaliado: { usuario: { nome: 'asc' } } }\n    ]\n  });\n\n  // Agrupar por avaliado para análise\n  const avaliadosMap = new Map();\n  \n  avaliacoes.forEach(avaliacao => {\n    const avaliadoId = avaliacao.avaliadoId;\n    if (!avaliadosMap.has(avaliadoId)) {\n      avaliadosMap.set(avaliadoId, {\n        avaliado: avaliacao.avaliado,\n        avaliacoes: [],\n        estatisticas: {\n          totalAvaliacoes: 0,\n          mediaNota: 0,\n          notaMinima: null,\n          notaMaxima: null,\n          distribuicaoNotas: {}\n        }\n      });\n    }\n    \n    const dados = avaliadosMap.get(avaliadoId);\n    dados.avaliacoes.push({\n      id: avaliacao.id,\n      nota: avaliacao.nota,\n      comentario: incluirDetalhes ? avaliacao.comentario : null,\n      status: avaliacao.status,\n      dataAvaliacao: avaliacao.dataAvaliacao,\n      avaliador: avaliacao.avaliador,\n      periodo: avaliacao.periodo\n    });\n  });\n\n  // Calcular estatísticas para cada avaliado\n  const relatorioDetalhado = Array.from(avaliadosMap.values()).map(dados => {\n    const notas = dados.avaliacoes\n      .filter(a => a.nota !== null)\n      .map(a => a.nota);\n    \n    if (notas.length > 0) {\n      dados.estatisticas.totalAvaliacoes = dados.avaliacoes.length;\n      dados.estatisticas.mediaNota = notas.reduce((sum, nota) => sum + nota, 0) / notas.length;\n      dados.estatisticas.notaMinima = Math.min(...notas);\n      dados.estatisticas.notaMaxima = Math.max(...notas);\n      \n      // Distribuição de notas\n      const distribuicao = {};\n      notas.forEach(nota => {\n        distribuicao[nota] = (distribuicao[nota] || 0) + 1;\n      });\n      dados.estatisticas.distribuicaoNotas = distribuicao;\n    }\n    \n    return dados;\n  });\n\n  return NextResponse.json({ relatorioDetalhado });\n}"],"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","ignoreList":[]}