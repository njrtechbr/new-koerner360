{"version":3,"names":["GET","cov_10k1q9aos9","f","s","POST","envioEmailSchema","_zod","z","object","tipo","enum","destinatarios","array","usuarioId","string","email","nome","min","dadosPersonalizacao","avaliacaoId","optional","nomeAvaliacao","prazoVencimento","diasRestantes","number","urlAvaliacao","estatisticas","totalPendentes","totalVencidas","totalConcluidas","agendarPara","datetime","prioridade","default","envioLoteSchema","envios","max","processarEmLote","boolean","aguardarConclusao","request","session","_auth","auth","user","id","b","_server","NextResponse","json","erro","status","body","searchParams","URL","url","isLote","get","temPermissao","_permissoes","verificarPermissao","gerenciadorEmail","_emailnotificacoes","obterGerenciadorEmail","dadosValidados","parse","resultados","erros","i","length","envio","destinatariosValidos","destinatario","configuracao","_prisma","prisma","configuracaoEmailNotificacao","findUnique","where","emailsAtivos","ativo","tipoHabilitado","tiposNotificacao","avaliacaoPendente","lembreteVencimento","avaliacaoVencida","resumoSemanal","push","indice","resultado","enviarAvaliacaoPendente","Date","now","enviarLembretePrazo","enviarAvaliacaoVencida","diasVencimento","Math","abs","enviarResumoSemanal","Error","sucesso","destinatariosEnviados","sucessos","destinatariosFalha","falhas","error","message","Promise","resolve","setTimeout","totalEnvios","destinatariosTotal","reduce","acc","r","mensagem","ZodError","detalhes","errors","map","err","campo","path","join","console","obterEstatisticas"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\notificacoes\\email\\envio\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { auth } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { verificarPermissao } from '@/lib/utils/permissoes';\nimport { obterGerenciadorEmail } from '@/lib/utils/email-notificacoes';\n\n// Schema de validação para envio de e-mail\nconst envioEmailSchema = z.object({\n  tipo: z.enum(['avaliacao_pendente', 'lembrete_prazo', 'avaliacao_vencida', 'resumo_semanal']),\n  destinatarios: z.array(z.object({\n    usuarioId: z.string(),\n    email: z.string().email(),\n    nome: z.string(),\n  })).min(1),\n  dadosPersonalizacao: z.object({\n    avaliacaoId: z.string().optional(),\n    nomeAvaliacao: z.string().optional(),\n    prazoVencimento: z.string().optional(),\n    diasRestantes: z.number().optional(),\n    urlAvaliacao: z.string().optional(),\n    estatisticas: z.object({\n      totalPendentes: z.number().optional(),\n      totalVencidas: z.number().optional(),\n      totalConcluidas: z.number().optional(),\n    }).optional(),\n  }).optional(),\n  agendarPara: z.string().datetime().optional(),\n  prioridade: z.enum(['baixa', 'normal', 'alta', 'urgente']).default('normal'),\n});\n\n// Schema para envio em lote\nconst envioLoteSchema = z.object({\n  envios: z.array(envioEmailSchema).min(1).max(50),\n  processarEmLote: z.boolean().default(true),\n  aguardarConclusao: z.boolean().default(false),\n});\n\n// POST - Enviar e-mail de notificação\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { searchParams } = new URL(request.url);\n    const isLote = searchParams.get('lote') === 'true';\n\n    // Verificar permissões para envio de e-mails\n    const temPermissao = await verificarPermissao(\n      session.user.id,\n      ['ADMIN', 'GESTOR']\n    );\n    \n    if (!temPermissao) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para enviar e-mails de notificação' },\n        { status: 403 }\n      );\n    }\n\n    const gerenciadorEmail = obterGerenciadorEmail();\n\n    if (isLote) {\n      // Envio em lote\n      const dadosValidados = envioLoteSchema.parse(body);\n      const { envios, processarEmLote, aguardarConclusao } = dadosValidados;\n\n      const resultados = [];\n      const erros = [];\n\n      for (let i = 0; i < envios.length; i++) {\n        const envio = envios[i];\n        \n        try {\n          // Verificar configurações de e-mail dos destinatários\n          const destinatariosValidos = [];\n          \n          for (const destinatario of envio.destinatarios) {\n            const configuracao = await prisma.configuracaoEmailNotificacao.findUnique({\n              where: { usuarioId: destinatario.usuarioId },\n            });\n\n            // Se não tem configuração ou e-mails desativados, pular\n            if (!configuracao || !configuracao.emailsAtivos || !configuracao.ativo) {\n              continue;\n            }\n\n            // Verificar se o tipo de notificação está habilitado\n            const tipoHabilitado = {\n              'avaliacao_pendente': configuracao.tiposNotificacao.avaliacaoPendente,\n              'lembrete_prazo': configuracao.tiposNotificacao.lembreteVencimento,\n              'avaliacao_vencida': configuracao.tiposNotificacao.avaliacaoVencida,\n              'resumo_semanal': configuracao.tiposNotificacao.resumoSemanal,\n            }[envio.tipo];\n\n            if (!tipoHabilitado) {\n              continue;\n            }\n\n            destinatariosValidos.push({\n              ...destinatario,\n              configuracao,\n            });\n          }\n\n          if (destinatariosValidos.length === 0) {\n            erros.push({\n              indice: i,\n              erro: 'Nenhum destinatário válido encontrado',\n            });\n            continue;\n          }\n\n          // Enviar e-mail\n          let resultado;\n          \n          switch (envio.tipo) {\n            case 'avaliacao_pendente':\n              resultado = await gerenciadorEmail.enviarAvaliacaoPendente(\n                destinatariosValidos,\n                {\n                  avaliacaoId: envio.dadosPersonalizacao?.avaliacaoId || '',\n                  nomeAvaliacao: envio.dadosPersonalizacao?.nomeAvaliacao || '',\n                  prazoVencimento: new Date(envio.dadosPersonalizacao?.prazoVencimento || Date.now()),\n                  urlAvaliacao: envio.dadosPersonalizacao?.urlAvaliacao || '',\n                }\n              );\n              break;\n              \n            case 'lembrete_prazo':\n              resultado = await gerenciadorEmail.enviarLembretePrazo(\n                destinatariosValidos,\n                {\n                  avaliacaoId: envio.dadosPersonalizacao?.avaliacaoId || '',\n                  nomeAvaliacao: envio.dadosPersonalizacao?.nomeAvaliacao || '',\n                  diasRestantes: envio.dadosPersonalizacao?.diasRestantes || 0,\n                  prazoVencimento: new Date(envio.dadosPersonalizacao?.prazoVencimento || Date.now()),\n                  urlAvaliacao: envio.dadosPersonalizacao?.urlAvaliacao || '',\n                }\n              );\n              break;\n              \n            case 'avaliacao_vencida':\n              resultado = await gerenciadorEmail.enviarAvaliacaoVencida(\n                destinatariosValidos,\n                {\n                  avaliacaoId: envio.dadosPersonalizacao?.avaliacaoId || '',\n                  nomeAvaliacao: envio.dadosPersonalizacao?.nomeAvaliacao || '',\n                  diasVencimento: Math.abs(envio.dadosPersonalizacao?.diasRestantes || 0),\n                  urlAvaliacao: envio.dadosPersonalizacao?.urlAvaliacao || '',\n                }\n              );\n              break;\n              \n            case 'resumo_semanal':\n              resultado = await gerenciadorEmail.enviarResumoSemanal(\n                destinatariosValidos,\n                envio.dadosPersonalizacao?.estatisticas || {\n                  totalPendentes: 0,\n                  totalVencidas: 0,\n                  totalConcluidas: 0,\n                }\n              );\n              break;\n              \n            default:\n              throw new Error(`Tipo de e-mail não suportado: ${envio.tipo}`);\n          }\n\n          resultados.push({\n            indice: i,\n            sucesso: resultado.sucesso,\n            destinatariosEnviados: resultado.sucessos,\n            destinatariosFalha: resultado.falhas,\n            estatisticas: resultado.estatisticas,\n          });\n\n        } catch (error) {\n          erros.push({\n            indice: i,\n            erro: error instanceof Error ? error.message : 'Erro desconhecido',\n          });\n        }\n\n        // Delay entre envios para evitar spam\n        if (i < envios.length - 1 && processarEmLote) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n\n      return NextResponse.json({\n        resultados,\n        erros,\n        estatisticas: {\n          totalEnvios: envios.length,\n          sucessos: resultados.length,\n          falhas: erros.length,\n          destinatariosTotal: resultados.reduce((acc, r) => acc + r.destinatariosEnviados, 0),\n        },\n        mensagem: `Processamento em lote concluído: ${resultados.length} sucessos, ${erros.length} falhas`,\n      });\n\n    } else {\n      // Envio único\n      const dadosValidados = envioEmailSchema.parse(body);\n      const { tipo, destinatarios, dadosPersonalizacao, prioridade } = dadosValidados;\n\n      // Verificar configurações de e-mail dos destinatários\n      const destinatariosValidos = [];\n      \n      for (const destinatario of destinatarios) {\n        const configuracao = await prisma.configuracaoEmailNotificacao.findUnique({\n          where: { usuarioId: destinatario.usuarioId },\n        });\n\n        // Se não tem configuração ou e-mails desativados, pular\n        if (!configuracao || !configuracao.emailsAtivos || !configuracao.ativo) {\n          continue;\n        }\n\n        // Verificar se o tipo de notificação está habilitado\n        const tipoHabilitado = {\n          'avaliacao_pendente': configuracao.tiposNotificacao.avaliacaoPendente,\n          'lembrete_prazo': configuracao.tiposNotificacao.lembreteVencimento,\n          'avaliacao_vencida': configuracao.tiposNotificacao.avaliacaoVencida,\n          'resumo_semanal': configuracao.tiposNotificacao.resumoSemanal,\n        }[tipo];\n\n        if (!tipoHabilitado) {\n          continue;\n        }\n\n        destinatariosValidos.push({\n          ...destinatario,\n          configuracao,\n        });\n      }\n\n      if (destinatariosValidos.length === 0) {\n        return NextResponse.json(\n          { erro: 'Nenhum destinatário válido encontrado' },\n          { status: 400 }\n        );\n      }\n\n      // Enviar e-mail\n      let resultado;\n      \n      switch (tipo) {\n        case 'avaliacao_pendente':\n          resultado = await gerenciadorEmail.enviarAvaliacaoPendente(\n            destinatariosValidos,\n            {\n              avaliacaoId: dadosPersonalizacao?.avaliacaoId || '',\n              nomeAvaliacao: dadosPersonalizacao?.nomeAvaliacao || '',\n              prazoVencimento: new Date(dadosPersonalizacao?.prazoVencimento || Date.now()),\n              urlAvaliacao: dadosPersonalizacao?.urlAvaliacao || '',\n            }\n          );\n          break;\n          \n        case 'lembrete_prazo':\n          resultado = await gerenciadorEmail.enviarLembretePrazo(\n            destinatariosValidos,\n            {\n              avaliacaoId: dadosPersonalizacao?.avaliacaoId || '',\n              nomeAvaliacao: dadosPersonalizacao?.nomeAvaliacao || '',\n              diasRestantes: dadosPersonalizacao?.diasRestantes || 0,\n              prazoVencimento: new Date(dadosPersonalizacao?.prazoVencimento || Date.now()),\n              urlAvaliacao: dadosPersonalizacao?.urlAvaliacao || '',\n            }\n          );\n          break;\n          \n        case 'avaliacao_vencida':\n          resultado = await gerenciadorEmail.enviarAvaliacaoVencida(\n            destinatariosValidos,\n            {\n              avaliacaoId: dadosPersonalizacao?.avaliacaoId || '',\n              nomeAvaliacao: dadosPersonalizacao?.nomeAvaliacao || '',\n              diasVencimento: Math.abs(dadosPersonalizacao?.diasRestantes || 0),\n              urlAvaliacao: dadosPersonalizacao?.urlAvaliacao || '',\n            }\n          );\n          break;\n          \n        case 'resumo_semanal':\n          resultado = await gerenciadorEmail.enviarResumoSemanal(\n            destinatariosValidos,\n            dadosPersonalizacao?.estatisticas || {\n              totalPendentes: 0,\n              totalVencidas: 0,\n              totalConcluidas: 0,\n            }\n          );\n          break;\n          \n        default:\n          return NextResponse.json(\n            { erro: `Tipo de e-mail não suportado: ${tipo}` },\n            { status: 400 }\n          );\n      }\n\n      return NextResponse.json({\n        resultado,\n        mensagem: resultado.sucesso \n          ? `E-mail enviado com sucesso para ${resultado.sucessos} destinatários`\n          : `Falha no envio: ${resultado.falhas} destinatários com erro`,\n      });\n    }\n\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        {\n          erro: 'Dados inválidos',\n          detalhes: error.errors.map(err => ({\n            campo: err.path.join('.'),\n            mensagem: err.message,\n          })),\n        },\n        { status: 400 }\n      );\n    }\n\n    console.error('Erro ao enviar e-mail de notificação:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET - Obter estatísticas de envio de e-mails\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões\n    const temPermissao = await verificarPermissao(\n      session.user.id,\n      ['ADMIN', 'GESTOR']\n    );\n    \n    if (!temPermissao) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para visualizar estatísticas de e-mail' },\n        { status: 403 }\n      );\n    }\n\n    const gerenciadorEmail = obterGerenciadorEmail();\n    const estatisticas = await gerenciadorEmail.obterEstatisticas();\n\n    return NextResponse.json({\n      estatisticas,\n      mensagem: 'Estatísticas de e-mail obtidas com sucesso',\n    });\n\n  } catch (error) {\n    console.error('Erro ao obter estatísticas de e-mail:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}