{"version":3,"names":["POST","request","cov_18l3tg43w7","f","s","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","_atendentes","MENSAGENS_ERRO_ATENDENTES","SEM_PERMISSAO","dadosRequisicao","parametrosValidados","buscarAtendentesSchema","parse","pagina","limite","busca","setor","cargo","departamento","dataAdmissaoInicio","dataAdmissaoFim","ordenarPor","ordem","filtrosAvancados","filtros","OR","usuario","nome","contains","mode","cpf","replace","email","dataAdmissao","gte","Date","lte","ativo","undefined","temFoto","foto","not","salarioMinimo","salarioMaximo","salario","ordenacao","offset","atendentes","total","Promise","all","_prisma","prisma","atendente","findMany","where","include","select","id","criadoEm","atualizadoEm","_count","documentos","historicoAlteracoes","orderBy","skip","take","count","atendentesFiltrados","filter","idadeMinima","idadeMaxima","dataNascimento","idade","validacaoAtendentes","calcularIdade","tempoEmpresaMinimo","tempoEmpresaMaximo","tempoEmpresa","calcularTempoEmpresa","atendentesPaginados","slice","totalFiltrado","length","totalPaginas","Math","ceil","temProximaPagina","temPaginaAnterior","atendentesComEstatisticas","map","rg","telefone","celular","endereco","cep","cidade","estado","observacoes","estatisticas","tempoEmpresaMeses","totalDocumentos","totalAlteracoes","paginacao","paginaAtual","totalItens","itensPorPagina","filtrosAplicados","basicos","avancados","estatisticasBusca","totalEncontrados","totalGeral","percentualFiltrado","round","error","console","_zod","ZodError","DADOS_INVALIDOS","detalhes","errors","ERRO_INTERNO"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\buscar\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport {\n  buscarAtendentesSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n  validacaoAtendentes,\n} from '@/lib/validations/atendentes';\nimport { ZodError } from 'zod';\n\n/**\n * POST /api/atendentes/buscar\n * Busca avançada de atendentes com filtros complexos\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Extrair dados do corpo da requisição\n    const dadosRequisicao = await request.json();\n\n    // Validar parâmetros\n    const parametrosValidados = buscarAtendentesSchema.parse(dadosRequisicao);\n\n    const {\n      pagina,\n      limite,\n      busca,\n      status,\n      setor,\n      cargo,\n      departamento,\n      dataAdmissaoInicio,\n      dataAdmissaoFim,\n      ordenarPor,\n      ordem,\n      filtrosAvancados,\n    } = parametrosValidados;\n\n    // Construir filtros básicos\n    const filtros: any = {};\n\n    // Filtro de busca (nome, CPF, email)\n    if (busca) {\n      filtros.OR = [\n        {\n          usuario: {\n            nome: {\n              contains: busca,\n              mode: 'insensitive',\n            },\n          },\n        },\n        {\n          cpf: {\n            contains: busca.replace(/\\D/g, ''),\n          },\n        },\n        {\n          usuario: {\n            email: {\n              contains: busca,\n              mode: 'insensitive',\n            },\n          },\n        },\n      ];\n    }\n\n    // Filtros específicos\n    if (status) {\n      filtros.status = status;\n    }\n\n    if (setor) {\n      filtros.setor = {\n        contains: setor,\n        mode: 'insensitive',\n      };\n    }\n\n    if (cargo) {\n      filtros.cargo = {\n        contains: cargo,\n        mode: 'insensitive',\n      };\n    }\n\n    if (departamento) {\n      filtros.departamento = {\n        contains: departamento,\n        mode: 'insensitive',\n      };\n    }\n\n    // Filtro de data de admissão\n    if (dataAdmissaoInicio || dataAdmissaoFim) {\n      filtros.dataAdmissao = {};\n      if (dataAdmissaoInicio) {\n        filtros.dataAdmissao.gte = new Date(dataAdmissaoInicio);\n      }\n      if (dataAdmissaoFim) {\n        filtros.dataAdmissao.lte = new Date(dataAdmissaoFim);\n      }\n    }\n\n    // Aplicar filtros avançados\n    if (filtrosAvancados) {\n      // Filtro de usuário ativo\n      if (filtrosAvancados.ativo !== undefined) {\n        filtros.usuario = {\n          ...filtros.usuario,\n          ativo: filtrosAvancados.ativo,\n        };\n      }\n\n      // Filtro de foto\n      if (filtrosAvancados.temFoto !== undefined) {\n        if (filtrosAvancados.temFoto) {\n          filtros.foto = { not: null };\n        } else {\n          filtros.foto = null;\n        }\n      }\n\n      // Filtro de salário\n      if (filtrosAvancados.salarioMinimo || filtrosAvancados.salarioMaximo) {\n        filtros.salario = {};\n        if (filtrosAvancados.salarioMinimo) {\n          filtros.salario.gte = filtrosAvancados.salarioMinimo;\n        }\n        if (filtrosAvancados.salarioMaximo) {\n          filtros.salario.lte = filtrosAvancados.salarioMaximo;\n        }\n      }\n\n      // Filtros de idade e tempo de empresa serão aplicados após a busca\n      // pois requerem cálculos que não podem ser feitos diretamente no Prisma\n    }\n\n    // Configurar ordenação\n    const ordenacao: any = {};\n    if (ordenarPor === 'nome') {\n      ordenacao.usuario = { nome: ordem };\n    } else {\n      ordenacao[ordenarPor] = ordem;\n    }\n\n    // Calcular offset\n    const offset = (pagina - 1) * limite;\n\n    // Buscar atendentes\n    const [atendentes, total] = await Promise.all([\n      prisma.atendente.findMany({\n        where: filtros,\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n              ativo: true,\n              criadoEm: true,\n              atualizadoEm: true,\n            },\n          },\n          _count: {\n            select: {\n              documentos: true,\n              historicoAlteracoes: true,\n            },\n          },\n        },\n        orderBy: ordenacao,\n        skip: offset,\n        take: limite * 2, // Buscar mais para aplicar filtros de idade/tempo\n      }),\n      prisma.atendente.count({ where: filtros }),\n    ]);\n\n    // Aplicar filtros de idade e tempo de empresa\n    let atendentesFiltrados = atendentes;\n\n    if (filtrosAvancados) {\n      atendentesFiltrados = atendentes.filter(atendente => {\n        // Filtro de idade\n        if (filtrosAvancados.idadeMinima || filtrosAvancados.idadeMaxima) {\n          if (!atendente.dataNascimento) return false;\n\n          const idade = validacaoAtendentes.calcularIdade(\n            atendente.dataNascimento\n          );\n\n          if (\n            filtrosAvancados.idadeMinima &&\n            idade < filtrosAvancados.idadeMinima\n          ) {\n            return false;\n          }\n\n          if (\n            filtrosAvancados.idadeMaxima &&\n            idade > filtrosAvancados.idadeMaxima\n          ) {\n            return false;\n          }\n        }\n\n        // Filtro de tempo de empresa\n        if (\n          filtrosAvancados.tempoEmpresaMinimo ||\n          filtrosAvancados.tempoEmpresaMaximo\n        ) {\n          const tempoEmpresa = validacaoAtendentes.calcularTempoEmpresa(\n            atendente.dataAdmissao\n          );\n\n          if (\n            filtrosAvancados.tempoEmpresaMinimo &&\n            tempoEmpresa < filtrosAvancados.tempoEmpresaMinimo\n          ) {\n            return false;\n          }\n\n          if (\n            filtrosAvancados.tempoEmpresaMaximo &&\n            tempoEmpresa > filtrosAvancados.tempoEmpresaMaximo\n          ) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    }\n\n    // Aplicar paginação aos resultados filtrados\n    const atendentesPaginados = atendentesFiltrados.slice(0, limite);\n    const totalFiltrado = atendentesFiltrados.length;\n\n    // Calcular metadados de paginação\n    const totalPaginas = Math.ceil(totalFiltrado / limite);\n    const temProximaPagina = pagina < totalPaginas;\n    const temPaginaAnterior = pagina > 1;\n\n    // Preparar resposta com estatísticas adicionais\n    const atendentesComEstatisticas = atendentesPaginados.map(atendente => {\n      const idade = atendente.dataNascimento\n        ? validacaoAtendentes.calcularIdade(atendente.dataNascimento)\n        : null;\n\n      const tempoEmpresa = validacaoAtendentes.calcularTempoEmpresa(\n        atendente.dataAdmissao\n      );\n\n      return {\n        id: atendente.id,\n        cpf: atendente.cpf,\n        rg: atendente.rg,\n        dataNascimento: atendente.dataNascimento,\n        telefone: atendente.telefone,\n        celular: atendente.celular,\n        endereco: atendente.endereco,\n        cep: atendente.cep,\n        cidade: atendente.cidade,\n        estado: atendente.estado,\n        dataAdmissao: atendente.dataAdmissao,\n        cargo: atendente.cargo,\n        setor: atendente.setor,\n        departamento: atendente.departamento,\n        salario: atendente.salario,\n        status: atendente.status,\n        observacoes: atendente.observacoes,\n        foto: atendente.foto,\n        criadoEm: atendente.criadoEm,\n        atualizadoEm: atendente.atualizadoEm,\n        usuario: atendente.usuario,\n        estatisticas: {\n          idade,\n          tempoEmpresaMeses: tempoEmpresa,\n          totalDocumentos: atendente._count.documentos,\n          totalAlteracoes: atendente._count.historicoAlteracoes,\n        },\n      };\n    });\n\n    return NextResponse.json({\n      atendentes: atendentesComEstatisticas,\n      paginacao: {\n        paginaAtual: pagina,\n        totalPaginas,\n        totalItens: totalFiltrado,\n        itensPorPagina: limite,\n        temProximaPagina,\n        temPaginaAnterior,\n      },\n      filtrosAplicados: {\n        basicos: {\n          busca,\n          status,\n          setor,\n          cargo,\n          departamento,\n          dataAdmissaoInicio,\n          dataAdmissaoFim,\n        },\n        avancados: filtrosAvancados,\n      },\n      estatisticasBusca: {\n        totalEncontrados: totalFiltrado,\n        totalGeral: total,\n        percentualFiltrado:\n          total > 0 ? Math.round((totalFiltrado / total) * 100) : 0,\n      },\n    });\n  } catch (error) {\n    console.error('Erro na busca avançada de atendentes:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}