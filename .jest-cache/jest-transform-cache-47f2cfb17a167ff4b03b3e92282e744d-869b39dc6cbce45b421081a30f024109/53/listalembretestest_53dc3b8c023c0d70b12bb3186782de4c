88d53cb988ea2eb57d6bcac6dc6ec363
"use strict";
// Tipos são importados do hook use-lembretes
// Mock dos hooks
jest.mock('../../../hooks/use-lembretes');
jest.mock('../../../hooks/use-toast');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _listalembretes = require("../../lembretes/lista-lembretes");
const _uselembretes = require("../../../hooks/use-lembretes");
const _usetoast = require("../../../hooks/use-toast");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dos lembretes de teste
const mockLembretes = [
    {
        id: '1',
        usuarioId: 'user1',
        avaliacaoId: 'aval1',
        tipo: 'lembrete',
        dataEnvio: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        enviado: false,
        tentativas: 0,
        ultimaTentativa: undefined,
        dataEnvioReal: undefined,
        erro: undefined,
        observacoes: undefined,
        criadoEm: new Date().toISOString(),
        atualizadoEm: new Date().toISOString(),
        usuario: {
            id: 'user1',
            nome: 'João Silva',
            email: 'joao@empresa.com',
            cargo: 'Analista'
        },
        avaliacao: {
            id: 'aval1',
            prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            status: 'pendente',
            avaliado: {
                id: 'avaliado1',
                nome: 'Pedro Avaliado',
                cargo: 'Desenvolvedor',
                email: 'pedro@empresa.com'
            },
            avaliador: {
                id: 'avaliador1',
                nome: 'Maria Avaliadora',
                email: 'maria@empresa.com'
            },
            periodo: {
                id: 'periodo1',
                nome: 'Período Anual 2024',
                dataInicio: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
                dataFim: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
            }
        }
    },
    {
        id: '2',
        usuarioId: 'user2',
        avaliacaoId: 'aval2',
        tipo: 'vencimento',
        dataEnvio: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        enviado: true,
        tentativas: 1,
        ultimaTentativa: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        dataEnvioReal: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        erro: undefined,
        observacoes: undefined,
        criadoEm: new Date().toISOString(),
        atualizadoEm: new Date().toISOString(),
        usuario: {
            id: 'user2',
            nome: 'Maria Santos',
            email: 'maria@empresa.com',
            cargo: 'Gerente'
        },
        avaliacao: {
            id: 'aval2',
            prazo: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
            status: 'em_andamento',
            avaliado: {
                id: 'avaliado2',
                nome: 'Ana Avaliada',
                cargo: 'Designer',
                email: 'ana@empresa.com'
            },
            avaliador: {
                id: 'avaliador2',
                nome: 'Carlos Avaliador',
                email: 'carlos@empresa.com'
            },
            periodo: {
                id: 'periodo2',
                nome: 'Período Trimestral Q4',
                dataInicio: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
                dataFim: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
            }
        }
    },
    {
        id: '3',
        usuarioId: 'user3',
        avaliacaoId: 'aval3',
        tipo: 'lembrete',
        dataEnvio: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
        enviado: false,
        tentativas: 3,
        ultimaTentativa: new Date(Date.now() - 60 * 60 * 1000).toISOString(),
        dataEnvioReal: undefined,
        erro: 'Falha no envio de e-mail',
        observacoes: 'Múltiplas tentativas falharam',
        criadoEm: new Date().toISOString(),
        atualizadoEm: new Date().toISOString(),
        usuario: {
            id: 'user3',
            nome: 'Pedro Costa',
            email: 'pedro@empresa.com',
            cargo: 'Coordenador'
        },
        avaliacao: {
            id: 'aval3',
            prazo: new Date().toISOString(),
            status: 'atrasada',
            avaliado: {
                id: 'avaliado3',
                nome: 'Lucas Avaliado',
                cargo: 'Analista Jr',
                email: 'lucas@empresa.com'
            },
            avaliador: {
                id: 'avaliador3',
                nome: 'Fernanda Avaliadora',
                email: 'fernanda@empresa.com'
            },
            periodo: {
                id: 'periodo3',
                nome: 'Período de Desempenho 2024',
                dataInicio: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
                dataFim: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
            }
        }
    }
];
const mockPaginacao = {
    paginaAtual: 1,
    totalPaginas: 1,
    totalItens: 3,
    itensPorPagina: 10,
    temProximaPagina: false,
    temPaginaAnterior: false
};
const mockHookReturn = {
    lembretes: mockLembretes,
    paginacao: mockPaginacao,
    carregando: false,
    erro: null,
    buscarLembretes: jest.fn(),
    executarAcaoLembrete: jest.fn(),
    removerLembrete: jest.fn()
};
const mockToast = jest.fn();
(0, _globals.describe)('ListaLembretes', ()=>{
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
        _uselembretes.useLembretes.mockReturnValue(mockHookReturn);
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.describe)('Renderização', ()=>{
        (0, _globals.it)('deve renderizar lista de lembretes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Lembretes de Avaliação')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('João Silva')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Maria Santos')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Pedro Costa')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir estado de carregamento', ()=>{
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                carregando: true,
                lembretes: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Carregando lembretes...')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir mensagem quando não há lembretes', ()=>{
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                lembretes: [],
                paginacao: {
                    ...mockPaginacao,
                    total: 0
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Nenhum lembrete encontrado')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir erro quando houver falha', ()=>{
            const errorMessage = 'Erro ao carregar lembretes';
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                erro: errorMessage,
                lembretes: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText(errorMessage)).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('Filtros', ()=>{
        (0, _globals.it)('deve filtrar por tipo de lembrete', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroTipo = _react1.screen.getByLabelText('Tipo de lembrete');
            _react1.fireEvent.change(filtroTipo, {
                target: {
                    value: 'urgente'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    tipo: 'urgente'
                }));
            });
        });
        (0, _globals.it)('deve filtrar por status', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroStatus = _react1.screen.getByLabelText('Status');
            _react1.fireEvent.change(filtroStatus, {
                target: {
                    value: 'pendente'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    status: 'pendente'
                }));
            });
        });
        (0, _globals.it)('deve filtrar por usuário', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroUsuario = _react1.screen.getByLabelText('Usuário');
            _react1.fireEvent.change(filtroUsuario, {
                target: {
                    value: 'user1'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    usuarioId: 'user1'
                }));
            });
        });
        (0, _globals.it)('deve filtrar por avaliação', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroAvaliacao = _react1.screen.getByLabelText('Avaliação');
            _react1.fireEvent.change(filtroAvaliacao, {
                target: {
                    value: 'aval1'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    avaliacaoId: 'aval1'
                }));
            });
        });
        (0, _globals.it)('deve filtrar por período de data', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const dataInicio = _react1.screen.getByLabelText('Data início');
            const dataFim = _react1.screen.getByLabelText('Data fim');
            _react1.fireEvent.change(dataInicio, {
                target: {
                    value: '2024-01-01'
                }
            });
            _react1.fireEvent.change(dataFim, {
                target: {
                    value: '2024-12-31'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    dataInicio: '2024-01-01',
                    dataFim: '2024-12-31'
                }));
            });
        });
        (0, _globals.it)('deve limpar filtros', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Aplicar filtros primeiro
            const filtroTipo = _react1.screen.getByLabelText('Tipo de lembrete');
            _react1.fireEvent.change(filtroTipo, {
                target: {
                    value: 'urgente'
                }
            });
            // Limpar filtros
            const botaoLimpar = _react1.screen.getByText('Limpar Filtros');
            _react1.fireEvent.click(botaoLimpar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith({});
            });
        });
    });
    (0, _globals.describe)('Busca', ()=>{
        (0, _globals.it)('deve buscar lembretes por texto', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const campoBusca = _react1.screen.getByPlaceholderText('Buscar lembretes...');
            _react1.fireEvent.change(campoBusca, {
                target: {
                    value: 'João'
                }
            });
            // Simular debounce
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    busca: 'João'
                }));
            }, {
                timeout: 1000
            });
        });
        (0, _globals.it)('deve limpar busca', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const campoBusca = _react1.screen.getByPlaceholderText('Buscar lembretes...');
            _react1.fireEvent.change(campoBusca, {
                target: {
                    value: 'João'
                }
            });
            _react1.fireEvent.change(campoBusca, {
                target: {
                    value: ''
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    busca: ''
                }));
            });
        });
    });
    (0, _globals.describe)('Ações de Lembrete', ()=>{
        (0, _globals.it)('deve reenviar lembrete', async ()=>{
            mockHookReturn.reenviarLembrete.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoReenviar = _react1.screen.getAllByText('Reenviar')[0];
            _react1.fireEvent.click(botaoReenviar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.reenviarLembrete).toHaveBeenCalledWith('1');
            });
        });
        (0, _globals.it)('deve marcar como enviado', async ()=>{
            mockHookReturn.marcarComoEnviado.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoMarcar = _react1.screen.getAllByText('Marcar como Enviado')[0];
            _react1.fireEvent.click(botaoMarcar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.marcarComoEnviado).toHaveBeenCalledWith('1');
            });
        });
        (0, _globals.it)('deve reagendar lembrete', async ()=>{
            mockHookReturn.reagendarLembrete.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoReagendar = _react1.screen.getAllByText('Reagendar')[0];
            _react1.fireEvent.click(botaoReagendar);
            // Preencher nova data
            const inputData = _react1.screen.getByLabelText('Nova data de envio');
            _react1.fireEvent.change(inputData, {
                target: {
                    value: '2024-12-31T10:00'
                }
            });
            const botaoConfirmar = _react1.screen.getByText('Confirmar');
            _react1.fireEvent.click(botaoConfirmar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.reagendarLembrete).toHaveBeenCalledWith('1', '2024-12-31T10:00');
            });
        });
        (0, _globals.it)('deve remover lembrete', async ()=>{
            mockHookReturn.removerLembrete.mockResolvedValueOnce(true);
            window.confirm = vi.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoRemover = _react1.screen.getAllByText('Remover')[0];
            _react1.fireEvent.click(botaoRemover);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.removerLembrete).toHaveBeenCalledWith('1');
            });
        });
        (0, _globals.it)('deve cancelar remoção se usuário não confirmar', async ()=>{
            window.confirm = vi.fn(()=>false);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoRemover = _react1.screen.getAllByText('Remover')[0];
            _react1.fireEvent.click(botaoRemover);
            (0, _globals.expect)(mockHookReturn.removerLembrete).not.toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('Ações em Lote', ()=>{
        (0, _globals.it)('deve selecionar lembretes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const checkbox1 = _react1.screen.getByLabelText('Selecionar lembrete 1');
            const checkbox2 = _react1.screen.getByLabelText('Selecionar lembrete 2');
            _react1.fireEvent.click(checkbox1);
            _react1.fireEvent.click(checkbox2);
            (0, _globals.expect)(checkbox1).toBeChecked();
            (0, _globals.expect)(checkbox2).toBeChecked();
        });
        (0, _globals.it)('deve selecionar todos os lembretes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const checkboxTodos = _react1.screen.getByLabelText('Selecionar todos');
            _react1.fireEvent.click(checkboxTodos);
            const checkboxes = _react1.screen.getAllByRole('checkbox');
            checkboxes.forEach((checkbox)=>{
                (0, _globals.expect)(checkbox).toBeChecked();
            });
        });
        (0, _globals.it)('deve remover lembretes selecionados', async ()=>{
            mockHookReturn.removerLembretes.mockResolvedValueOnce({
                removidos: 2
            });
            window.confirm = vi.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Selecionar lembretes
            const checkbox1 = _react1.screen.getByLabelText('Selecionar lembrete 1');
            const checkbox2 = _react1.screen.getByLabelText('Selecionar lembrete 2');
            _react1.fireEvent.click(checkbox1);
            _react1.fireEvent.click(checkbox2);
            // Remover selecionados
            const botaoRemoverSelecionados = _react1.screen.getByText('Remover Selecionados');
            _react1.fireEvent.click(botaoRemoverSelecionados);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.removerLembretes).toHaveBeenCalledWith([
                    '1',
                    '2'
                ]);
            });
        });
        (0, _globals.it)('deve reenviar lembretes selecionados', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Selecionar lembretes
            const checkbox1 = _react1.screen.getByLabelText('Selecionar lembrete 1');
            _react1.fireEvent.click(checkbox1);
            // Reenviar selecionados
            const botaoReenviarSelecionados = _react1.screen.getByText('Reenviar Selecionados');
            _react1.fireEvent.click(botaoReenviarSelecionados);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.reenviarLembrete).toHaveBeenCalledWith('1');
            });
        });
    });
    (0, _globals.describe)('Paginação', ()=>{
        (0, _globals.it)('deve navegar para próxima página', async ()=>{
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                paginacao: {
                    ...mockPaginacao,
                    pagina: 1,
                    totalPaginas: 3
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoProxima = _react1.screen.getByText('Próxima');
            _react1.fireEvent.click(botaoProxima);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    pagina: 2
                }));
            });
        });
        (0, _globals.it)('deve navegar para página anterior', async ()=>{
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                paginacao: {
                    ...mockPaginacao,
                    pagina: 2,
                    totalPaginas: 3
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoAnterior = _react1.screen.getByText('Anterior');
            _react1.fireEvent.click(botaoAnterior);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    pagina: 1
                }));
            });
        });
        (0, _globals.it)('deve alterar limite por página', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const seletorLimite = _react1.screen.getByLabelText('Itens por página');
            _react1.fireEvent.change(seletorLimite, {
                target: {
                    value: '25'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    limite: 25,
                    pagina: 1
                }));
            });
        });
    });
    (0, _globals.describe)('Ordenação', ()=>{
        (0, _globals.it)('deve ordenar por data de envio', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const cabecalhoData = _react1.screen.getByText('Data de Envio');
            _react1.fireEvent.click(cabecalhoData);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ordenarPor: 'dataEnvio',
                    ordem: 'asc'
                }));
            });
        });
        (0, _globals.it)('deve alternar ordem de classificação', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const cabecalhoData = _react1.screen.getByText('Data de Envio');
            // Primeira clique - ASC
            _react1.fireEvent.click(cabecalhoData);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ordem: 'asc'
                }));
            });
            // Segunda clique - DESC
            _react1.fireEvent.click(cabecalhoData);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ordem: 'desc'
                }));
            });
        });
        (0, _globals.it)('deve ordenar por diferentes campos', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const cabecalhoUsuario = _react1.screen.getByText('Usuário');
            _react1.fireEvent.click(cabecalhoUsuario);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ordenarPor: 'nomeUsuario'
                }));
            });
        });
    });
    (0, _globals.describe)('Exibição de Dados', ()=>{
        (0, _globals.it)('deve exibir informações do lembrete corretamente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Verificar dados do primeiro lembrete
            (0, _globals.expect)(_react1.screen.getByText('João Silva')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('joao@empresa.com')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Avaliação Anual 2024')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Aviso')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Pendente')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir badges de status corretamente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Pendente')).toHaveClass('badge-warning');
            (0, _globals.expect)(_react1.screen.getByText('Enviado')).toHaveClass('badge-success');
            (0, _globals.expect)(_react1.screen.getByText('Falhou')).toHaveClass('badge-destructive');
        });
        (0, _globals.it)('deve exibir badges de tipo corretamente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Aviso')).toHaveClass('badge-secondary');
            (0, _globals.expect)(_react1.screen.getByText('Urgente')).toHaveClass('badge-warning');
            (0, _globals.expect)(_react1.screen.getByText('Crítico')).toHaveClass('badge-destructive');
        });
        (0, _globals.it)('deve exibir informações de tentativas', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('0 tentativas')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('1 tentativa')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('3 tentativas')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir mensagem de erro quando presente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Falha no envio de e-mail')).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('Atualização Automática', ()=>{
        (0, _globals.it)('deve atualizar lista após ações', async ()=>{
            mockHookReturn.reenviarLembrete.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoReenviar = _react1.screen.getAllByText('Reenviar')[0];
            _react1.fireEvent.click(botaoReenviar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledTimes(2); // Initial + after action
            });
        });
        (0, _globals.it)('deve atualizar automaticamente a cada 30 segundos', async ()=>{
            vi.useFakeTimers();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Avançar 30 segundos
            vi.advanceTimersByTime(30000);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledTimes(2);
            });
            vi.useRealTimers();
        });
    });
    (0, _globals.describe)('Estados de Erro', ()=>{
        (0, _globals.it)('deve exibir erro ao falhar ao reenviar', async ()=>{
            mockHookReturn.reenviarLembrete.mockRejectedValueOnce(new Error('Erro de rede'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoReenviar = _react1.screen.getAllByText('Reenviar')[0];
            _react1.fireEvent.click(botaoReenviar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
        (0, _globals.it)('deve exibir erro ao falhar ao remover', async ()=>{
            mockHookReturn.removerLembrete.mockRejectedValueOnce(new Error('Erro de rede'));
            window.confirm = vi.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoRemover = _react1.screen.getAllByText('Remover')[0];
            _react1.fireEvent.click(botaoRemover);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
    });
    (0, _globals.describe)('Acessibilidade', ()=>{
        (0, _globals.it)('deve ter labels apropriados para screen readers', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByLabelText('Tipo de lembrete')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByLabelText('Status')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByLabelText('Selecionar todos')).toBeInTheDocument();
        });
        (0, _globals.it)('deve ter navegação por teclado funcional', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroTipo = _react1.screen.getByLabelText('Tipo de lembrete');
            filtroTipo.focus();
            (0, _globals.expect)(document.activeElement).toBe(filtroTipo);
        });
        (0, _globals.it)('deve ter descrições adequadas para ações', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByLabelText('Reenviar lembrete para João Silva')).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('Responsividade', ()=>{
        (0, _globals.it)('deve adaptar layout para telas pequenas', ()=>{
            // Mock window.innerWidth
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 768
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Verificar se colunas menos importantes estão ocultas
            (0, _globals.expect)(_react1.screen.queryByText('Tentativas')).not.toBeInTheDocument();
        });
        (0, _globals.it)('deve mostrar todas as colunas em telas grandes', ()=>{
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 1200
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Tentativas')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Última Tentativa')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,