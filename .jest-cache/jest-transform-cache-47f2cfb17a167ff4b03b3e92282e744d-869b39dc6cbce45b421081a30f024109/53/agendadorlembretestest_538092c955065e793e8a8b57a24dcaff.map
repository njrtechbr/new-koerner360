{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\__tests__\\agendador-lembretes.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { AgendadorLembretesService } from '../agendador-lembretes';\nimport { TipoLembrete } from '../../types/lembrete';\n\n// Mock do Prisma\nconst mockPrisma = {\n  configuracaoAgendador: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    upsert: jest.fn(),\n  },\n  statusAgendador: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    upsert: jest.fn(),\n  },\n  lembrete: {\n    findMany: jest.fn(),\n    create: jest.fn(),\n    deleteMany: jest.fn(),\n    count: jest.fn(),\n  },\n  avaliacao: {\n    findMany: jest.fn(),\n  },\n  usuario: {\n    findMany: jest.fn(),\n  },\n};\n\n// Mock do serviço de lembretes\nconst mockLembretesService = {\n  criarLembrete: jest.fn(),\n  buscarLembretesPendentes: jest.fn(),\n  processarFilaEnvio: jest.fn(),\n  limparLembretesAntigos: jest.fn(),\n};\n\n// Mock do serviço de e-mail\nconst mockEmailService = {\n  enviarEmail: jest.fn(),\n  enviarLembrete: jest.fn(),\n};\n\n// Dados de teste\nconst mockConfiguracao = {\n  id: '1',\n  ativo: true,\n  intervaloVerificacao: 60,\n  horariosEnvio: ['09:00', '14:00', '18:00'],\n  diasAntecedencia: {\n    prazo_vencimento: [7, 3, 1],\n    avaliacao_pendente: [14, 7, 3],\n    followup: [7],\n  },\n  tiposNotificacao: {\n    prazo_vencimento: true,\n    avaliacao_pendente: true,\n    followup: false,\n    personalizado: false,\n  },\n  filtros: {\n    incluirFinsDeSemanaSemana: false,\n    incluirFeriados: false,\n    avaliacoesUsuario: true,\n    avaliacoesQueAvalia: true,\n  },\n  configuracaoEmail: {\n    assunto: 'Lembrete de Avaliação - {nomeAvaliacao}',\n    template: 'lembrete-avaliacao',\n    incluirDetalhes: true,\n    incluirLinkDireto: true,\n  },\n  criadaEm: new Date().toISOString(),\n  atualizadaEm: new Date().toISOString(),\n};\n\nconst mockStatus = {\n  id: '1',\n  ativo: false,\n  ultimaExecucao: null,\n  proximaExecucao: new Date(Date.now() + 60 * 60 * 1000).toISOString(),\n  ultimoErro: null,\n  estatisticas: {\n    totalExecucoes: 0,\n    sucessos: 0,\n    falhas: 0,\n    lembretesGerados: 0,\n    lembretesEnviados: 0,\n    ultimaLimpeza: null,\n  },\n  criadoEm: new Date().toISOString(),\n  atualizadoEm: new Date().toISOString(),\n};\n\nconst mockEstatisticas = {\n  totalExecucoes: 150,\n  sucessos: 145,\n  falhas: 5,\n  lembretesGerados: 1250,\n  lembretesEnviados: 1200,\n  taxaSucesso: 96.7,\n  mediaLembretesPorExecucao: 8.3,\n  ultimaExecucao: new Date().toISOString(),\n  proximaExecucao: new Date(Date.now() + 60 * 60 * 1000).toISOString(),\n  tempoMedioExecucao: 2.5,\n  porTipo: {\n    prazo_vencimento: 800,\n    avaliacao_pendente: 350,\n    followup: 100,\n    personalizado: 0,\n  },\n  porPeriodo: {\n    hoje: 25,\n    ontem: 30,\n    ultimaSemana: 180,\n    ultimoMes: 750,\n  },\n};\n\ndescribe('AgendadorLembretesService', () => {\n  let service: AgendadorLembretesService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    service = new AgendadorLembretesService(\n      mockPrisma as any,\n      mockLembretesService as any,\n      mockEmailService as any\n    );\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('buscarConfiguracao', () => {\n    it('deve buscar configuração existente', async () => {\n      mockPrisma.configuracaoAgendador.findUnique.mockResolvedValueOnce(mockConfiguracao);\n\n      const resultado = await service.buscarConfiguracao();\n\n      expect(mockPrisma.configuracaoAgendador.findUnique).toHaveBeenCalledWith({\n        where: { id: '1' },\n      });\n\n      expect(resultado).toEqual(mockConfiguracao);\n    });\n\n    it('deve retornar configuração padrão se não existir', async () => {\n      mockPrisma.configuracaoAgendador.findUnique.mockResolvedValueOnce(null);\n\n      const resultado = await service.buscarConfiguracao();\n\n      expect(resultado).toEqual({\n        id: '1',\n        ativo: false,\n        intervaloVerificacao: 60,\n        horariosEnvio: ['09:00', '14:00', '18:00'],\n        diasAntecedencia: {\n          prazo_vencimento: [7, 3, 1],\n          avaliacao_pendente: [14, 7, 3],\n          followup: [7],\n          personalizado: [],\n        },\n        tiposNotificacao: {\n          prazo_vencimento: true,\n          avaliacao_pendente: true,\n          followup: false,\n          personalizado: false,\n        },\n        filtros: {\n          incluirFinsDeSemanaSemana: false,\n          incluirFeriados: false,\n          avaliacoesUsuario: true,\n          avaliacoesQueAvalia: true,\n        },\n        configuracaoEmail: {\n          assunto: 'Lembrete de Avaliação - {nomeAvaliacao}',\n          template: 'lembrete-avaliacao',\n          incluirDetalhes: true,\n          incluirLinkDireto: true,\n        },\n      });\n    });\n  });\n\n  describe('atualizarConfiguracao', () => {\n    it('deve atualizar configuração existente', async () => {\n      const novaConfiguracao = {\n        ativo: true,\n        intervaloVerificacao: 30,\n        horariosEnvio: ['08:00', '16:00'],\n      };\n\n      const configuracaoAtualizada = {\n        ...mockConfiguracao,\n        ...novaConfiguracao,\n      };\n\n      mockPrisma.configuracaoAgendador.upsert.mockResolvedValueOnce(configuracaoAtualizada);\n\n      const resultado = await service.atualizarConfiguracao(novaConfiguracao);\n\n      expect(mockPrisma.configuracaoAgendador.upsert).toHaveBeenCalledWith({\n        where: { id: '1' },\n        create: expect.objectContaining({\n          id: '1',\n          ...novaConfiguracao,\n        }),\n        update: novaConfiguracao,\n      });\n\n      expect(resultado.ativo).toBe(true);\n      expect(resultado.intervaloVerificacao).toBe(30);\n    });\n\n    it('deve validar horários de envio', async () => {\n      const configuracaoInvalida = {\n        horariosEnvio: ['25:00', '14:00'], // Horário inválido\n      };\n\n      await expect(\n        service.atualizarConfiguracao(configuracaoInvalida)\n      ).rejects.toThrow('Horário inválido');\n    });\n\n    it('deve validar intervalo de verificação', async () => {\n      const configuracaoInvalida = {\n        intervaloVerificacao: 0, // Intervalo inválido\n      };\n\n      await expect(\n        service.atualizarConfiguracao(configuracaoInvalida)\n      ).rejects.toThrow('Intervalo deve ser maior que 0');\n    });\n  });\n\n  describe('buscarStatus', () => {\n    it('deve buscar status existente', async () => {\n      mockPrisma.statusAgendador.findUnique.mockResolvedValueOnce(mockStatus);\n\n      const resultado = await service.buscarStatus();\n\n      expect(mockPrisma.statusAgendador.findUnique).toHaveBeenCalledWith({\n        where: { id: '1' },\n      });\n\n      expect(resultado).toEqual(mockStatus);\n    });\n\n    it('deve retornar status padrão se não existir', async () => {\n      mockPrisma.statusAgendador.findUnique.mockResolvedValueOnce(null);\n\n      const resultado = await service.buscarStatus();\n\n      expect(resultado).toEqual({\n        id: '1',\n        ativo: false,\n        ultimaExecucao: null,\n        proximaExecucao: null,\n        ultimoErro: null,\n        estatisticas: {\n          totalExecucoes: 0,\n          sucessos: 0,\n          falhas: 0,\n          lembretesGerados: 0,\n          lembretesEnviados: 0,\n          ultimaLimpeza: null,\n        },\n      });\n    });\n  });\n\n  describe('iniciarAgendador', () => {\n    it('deve iniciar agendador com sucesso', async () => {\n      mockPrisma.configuracaoAgendador.findUnique.mockResolvedValueOnce(mockConfiguracao);\n      mockPrisma.statusAgendador.upsert.mockResolvedValueOnce({\n        ...mockStatus,\n        ativo: true,\n        proximaExecucao: new Date(Date.now() + 60 * 60 * 1000),\n      });\n\n      const resultado = await service.iniciarAgendador();\n\n      expect(mockPrisma.statusAgendador.upsert).toHaveBeenCalledWith({\n        where: { id: '1' },\n        create: expect.objectContaining({\n          id: '1',\n          ativo: true,\n          proximaExecucao: expect.any(Date),\n        }),\n        update: {\n          ativo: true,\n          proximaExecucao: expect.any(Date),\n          ultimoErro: null,\n        },\n      });\n\n      expect(resultado.ativo).toBe(true);\n      expect(resultado.proximaExecucao).toBeTruthy();\n    });\n\n    it('deve falhar se configuração não estiver ativa', async () => {\n      const configuracaoInativa = {\n        ...mockConfiguracao,\n        ativo: false,\n      };\n\n      mockPrisma.configuracaoAgendador.findUnique.mockResolvedValueOnce(configuracaoInativa);\n\n      await expect(service.iniciarAgendador()).rejects.toThrow(\n        'Configuração do agendador não está ativa'\n      );\n    });\n  });\n\n  describe('pararAgendador', () => {\n    it('deve parar agendador', async () => {\n      mockPrisma.statusAgendador.upsert.mockResolvedValueOnce({\n        ...mockStatus,\n        ativo: false,\n        proximaExecucao: null,\n      });\n\n      const resultado = await service.pararAgendador();\n\n      expect(mockPrisma.statusAgendador.upsert).toHaveBeenCalledWith({\n        where: { id: '1' },\n        create: expect.objectContaining({\n          id: '1',\n          ativo: false,\n          proximaExecucao: null,\n        }),\n        update: {\n          ativo: false,\n          proximaExecucao: null,\n        },\n      });\n\n      expect(resultado.ativo).toBe(false);\n      expect(resultado.proximaExecucao).toBeNull();\n    });\n  });\n\n  describe('forcarVerificacao', () => {\n    it('deve executar verificação manual', async () => {\n      mockPrisma.configuracaoAgendador.findUnique.mockResolvedValueOnce(mockConfiguracao);\n      mockPrisma.avaliacao.findMany.mockResolvedValueOnce([\n        {\n          id: 'aval1',\n          titulo: 'Avaliação Teste',\n          prazo: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n          status: 'pendente',\n          usuarioId: 'user1',\n        },\n      ]);\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce([]);\n      mockLembretesService.criarLembrete.mockResolvedValueOnce({ id: 'lembrete1' });\n      mockPrisma.statusAgendador.upsert.mockResolvedValueOnce({\n        ...mockStatus,\n        ultimaExecucao: new Date(),\n        estatisticas: {\n          ...mockStatus.estatisticas,\n          totalExecucoes: 1,\n          sucessos: 1,\n          lembretesGerados: 1,\n        },\n      });\n\n      const resultado = await service.forcarVerificacao();\n\n      expect(mockLembretesService.criarLembrete).toHaveBeenCalled();\n      expect(resultado.lembretesGerados).toBe(1);\n      expect(resultado.sucessos).toBe(1);\n    });\n\n    it('deve tratar erros na verificação', async () => {\n      mockPrisma.configuracaoAgendador.findUnique.mockRejectedValueOnce(\n        new Error('Erro de configuração')\n      );\n      mockPrisma.statusAgendador.upsert.mockResolvedValueOnce({\n        ...mockStatus,\n        ultimoErro: 'Erro de configuração',\n        estatisticas: {\n          ...mockStatus.estatisticas,\n          totalExecucoes: 1,\n          falhas: 1,\n        },\n      });\n\n      const resultado = await service.forcarVerificacao();\n\n      expect(resultado.ultimoErro).toBe('Erro de configuração');\n      expect(resultado.estatisticas.falhas).toBe(1);\n    });\n  });\n\n  describe('limparLembretesPendentes', () => {\n    it('deve limpar lembretes pendentes', async () => {\n      mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({ count: 10 });\n\n      const resultado = await service.limparLembretesPendentes();\n\n      expect(mockPrisma.lembrete.deleteMany).toHaveBeenCalledWith({\n        where: {\n          status: 'pendente',\n        },\n      });\n\n      expect(resultado.removidos).toBe(10);\n    });\n\n    it('deve limpar lembretes com filtros', async () => {\n      mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({ count: 5 });\n\n      const filtros = {\n        tipo: 'prazo_vencimento' as TipoLembrete,\n        usuarioId: 'user1',\n      };\n\n      await service.limparLembretesPendentes(filtros);\n\n      expect(mockPrisma.lembrete.deleteMany).toHaveBeenCalledWith({\n        where: {\n          status: 'pendente',\n          tipo: 'prazo_vencimento',\n          usuarioId: 'user1',\n        },\n      });\n    });\n  });\n\n  describe('resetarConfiguracao', () => {\n    it('deve resetar configuração para padrões', async () => {\n      const configuracaoPadrao = {\n        id: '1',\n        ativo: false,\n        intervaloVerificacao: 60,\n        horariosEnvio: ['09:00', '14:00', '18:00'],\n        diasAntecedencia: {\n          prazo_vencimento: [7, 3, 1],\n          avaliacao_pendente: [14, 7, 3],\n          followup: [7],\n          personalizado: [],\n        },\n        tiposNotificacao: {\n          prazo_vencimento: true,\n          avaliacao_pendente: true,\n          followup: false,\n          personalizado: false,\n        },\n        filtros: {\n          incluirFinsDeSemanaSemana: false,\n          incluirFeriados: false,\n          avaliacoesUsuario: true,\n          avaliacoesQueAvalia: true,\n        },\n        configuracaoEmail: {\n          assunto: 'Lembrete de Avaliação - {nomeAvaliacao}',\n          template: 'lembrete-avaliacao',\n          incluirDetalhes: true,\n          incluirLinkDireto: true,\n        },\n      };\n\n      mockPrisma.configuracaoAgendador.upsert.mockResolvedValueOnce(configuracaoPadrao);\n      mockPrisma.statusAgendador.upsert.mockResolvedValueOnce({\n        ...mockStatus,\n        ativo: false,\n        proximaExecucao: null,\n        ultimoErro: null,\n        estatisticas: {\n          totalExecucoes: 0,\n          sucessos: 0,\n          falhas: 0,\n          lembretesGerados: 0,\n          lembretesEnviados: 0,\n          ultimaLimpeza: null,\n        },\n      });\n\n      const resultado = await service.resetarConfiguracao();\n\n      expect(resultado.configuracao.ativo).toBe(false);\n      expect(resultado.status.ativo).toBe(false);\n      expect(resultado.status.estatisticas.totalExecucoes).toBe(0);\n    });\n  });\n\n  describe('buscarEstatisticas', () => {\n    it('deve buscar estatísticas básicas', async () => {\n      mockPrisma.statusAgendador.findUnique.mockResolvedValueOnce({\n        ...mockStatus,\n        estatisticas: mockEstatisticas,\n      });\n      mockPrisma.lembrete.count.mockImplementation(({ where }) => {\n        if (where?.tipo === 'prazo_vencimento') return Promise.resolve(800);\n        if (where?.tipo === 'avaliacao_pendente') return Promise.resolve(350);\n        if (where?.tipo === 'followup') return Promise.resolve(100);\n        return Promise.resolve(1250);\n      });\n\n      const resultado = await service.buscarEstatisticas();\n\n      expect(resultado.totalExecucoes).toBe(150);\n      expect(resultado.sucessos).toBe(145);\n      expect(resultado.falhas).toBe(5);\n      expect(resultado.taxaSucesso).toBeCloseTo(96.7, 1);\n    });\n\n    it('deve buscar estatísticas com filtros', async () => {\n      const filtros = {\n        dataInicio: '2024-01-01',\n        dataFim: '2024-12-31',\n        tipo: 'prazo_vencimento' as TipoLembrete,\n      };\n\n      mockPrisma.lembrete.count.mockResolvedValueOnce(500);\n\n      await service.buscarEstatisticas(filtros);\n\n      expect(mockPrisma.lembrete.count).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: {\n            tipo: 'prazo_vencimento',\n            criadoEm: {\n              gte: new Date('2024-01-01'),\n              lte: new Date('2024-12-31'),\n            },\n          },\n        })\n      );\n    });\n  });\n\n  describe('gerarLembretes', () => {\n    it('deve gerar lembretes para avaliações próximas do vencimento', async () => {\n      const avaliacoes = [\n        {\n          id: 'aval1',\n          titulo: 'Avaliação Anual 2024',\n          prazo: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 dias\n          status: 'pendente',\n          usuarioId: 'user1',\n          usuario: {\n            id: 'user1',\n            nome: 'João Silva',\n            email: 'joao@empresa.com',\n          },\n        },\n      ];\n\n      mockPrisma.avaliacao.findMany.mockResolvedValueOnce(avaliacoes);\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce([]);\n      mockLembretesService.criarLembrete.mockResolvedValueOnce({ id: 'lembrete1' });\n\n      const resultado = await service.gerarLembretes(mockConfiguracao);\n\n      expect(mockLembretesService.criarLembrete).toHaveBeenCalledWith({\n        usuarioId: 'user1',\n        avaliacaoId: 'aval1',\n        tipo: 'prazo_vencimento',\n        titulo: expect.stringContaining('Lembrete'),\n        mensagem: expect.any(String),\n        dataEnvio: expect.any(Date),\n        metadados: expect.objectContaining({\n          nomeAvaliacao: 'Avaliação Anual 2024',\n          diasAntecedencia: 3,\n        }),\n      });\n\n      expect(resultado.gerados).toBe(1);\n    });\n\n    it('deve evitar duplicar lembretes existentes', async () => {\n      const avaliacoes = [\n        {\n          id: 'aval1',\n          titulo: 'Avaliação Anual 2024',\n          prazo: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n          status: 'pendente',\n          usuarioId: 'user1',\n          usuario: {\n            id: 'user1',\n            nome: 'João Silva',\n            email: 'joao@empresa.com',\n          },\n        },\n      ];\n\n      const lembretesExistentes = [\n        {\n          id: 'lembrete1',\n          usuarioId: 'user1',\n          avaliacaoId: 'aval1',\n          tipo: 'prazo_vencimento',\n          metadados: { diasAntecedencia: 3 },\n        },\n      ];\n\n      mockPrisma.avaliacao.findMany.mockResolvedValueOnce(avaliacoes);\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesExistentes);\n\n      const resultado = await service.gerarLembretes(mockConfiguracao);\n\n      expect(mockLembretesService.criarLembrete).not.toHaveBeenCalled();\n      expect(resultado.gerados).toBe(0);\n      expect(resultado.duplicados).toBe(1);\n    });\n\n    it('deve respeitar filtros de configuração', async () => {\n      const configuracaoComFiltros = {\n        ...mockConfiguracao,\n        filtros: {\n          incluirFinsDeSemanaSemana: false,\n          incluirFeriados: false,\n          avaliacoesUsuario: true,\n          avaliacoesQueAvalia: false, // Não incluir avaliações que o usuário avalia\n        },\n      };\n\n      await service.gerarLembretes(configuracaoComFiltros);\n\n      expect(mockPrisma.avaliacao.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            status: 'pendente',\n            // Deve incluir apenas avaliações do usuário\n          }),\n        })\n      );\n    });\n\n    it('deve calcular data de envio corretamente', async () => {\n      const avaliacoes = [\n        {\n          id: 'aval1',\n          titulo: 'Avaliação Teste',\n          prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 dias\n          status: 'pendente',\n          usuarioId: 'user1',\n          usuario: {\n            id: 'user1',\n            nome: 'João Silva',\n            email: 'joao@empresa.com',\n          },\n        },\n      ];\n\n      mockPrisma.avaliacao.findMany.mockResolvedValueOnce(avaliacoes);\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce([]);\n      mockLembretesService.criarLembrete.mockResolvedValueOnce({ id: 'lembrete1' });\n\n      await service.gerarLembretes(mockConfiguracao);\n\n      // Verificar se a data de envio foi calculada corretamente\n      // Para 7 dias de antecedência, deve enviar hoje\n      const chamada = mockLembretesService.criarLembrete.mock.calls[0][0];\n      const dataEnvio = new Date(chamada.dataEnvio);\n      const hoje = new Date();\n      \n      expect(dataEnvio.getDate()).toBe(hoje.getDate());\n    });\n  });\n\n  describe('calcularProximaExecucao', () => {\n    it('deve calcular próxima execução baseada no intervalo', () => {\n      const agora = new Date();\n      const proximaExecucao = service.calcularProximaExecucao(60); // 60 minutos\n\n      const diferencaMinutos = (proximaExecucao.getTime() - agora.getTime()) / (1000 * 60);\n      expect(diferencaMinutos).toBeCloseTo(60, 1);\n    });\n\n    it('deve usar horário específico se fornecido', () => {\n      const proximaExecucao = service.calcularProximaExecucao(60, '14:30');\n\n      expect(proximaExecucao.getHours()).toBe(14);\n      expect(proximaExecucao.getMinutes()).toBe(30);\n    });\n  });\n\n  describe('validarConfiguracao', () => {\n    it('deve validar configuração válida', () => {\n      expect(() => service.validarConfiguracao(mockConfiguracao)).not.toThrow();\n    });\n\n    it('deve rejeitar intervalo inválido', () => {\n      const configuracaoInvalida = {\n        ...mockConfiguracao,\n        intervaloVerificacao: -1,\n      };\n\n      expect(() => service.validarConfiguracao(configuracaoInvalida)).toThrow(\n        'Intervalo deve ser maior que 0'\n      );\n    });\n\n    it('deve rejeitar horários inválidos', () => {\n      const configuracaoInvalida = {\n        ...mockConfiguracao,\n        horariosEnvio: ['25:00'],\n      };\n\n      expect(() => service.validarConfiguracao(configuracaoInvalida)).toThrow(\n        'Horário inválido'\n      );\n    });\n\n    it('deve rejeitar dias de antecedência inválidos', () => {\n      const configuracaoInvalida = {\n        ...mockConfiguracao,\n        diasAntecedencia: {\n          prazo_vencimento: [-1, 0], // Valores inválidos\n        },\n      };\n\n      expect(() => service.validarConfiguracao(configuracaoInvalida)).toThrow(\n        'Dias de antecedência devem ser positivos'\n      );\n    });\n  });\n\n  describe('Tratamento de Erros', () => {\n    it('deve tratar erro de conexão com banco', async () => {\n      mockPrisma.configuracaoAgendador.findUnique.mockRejectedValueOnce(\n        new Error('Database connection failed')\n      );\n\n      await expect(service.buscarConfiguracao()).rejects.toThrow(\n        'Database connection failed'\n      );\n    });\n\n    it('deve tratar erro na geração de lembretes', async () => {\n      mockPrisma.avaliacao.findMany.mockRejectedValueOnce(\n        new Error('Query failed')\n      );\n\n      await expect(\n        service.gerarLembretes(mockConfiguracao)\n      ).rejects.toThrow('Query failed');\n    });\n  });\n\n  describe('Performance', () => {\n    it('deve usar índices apropriados para consultas', async () => {\n      await service.gerarLembretes(mockConfiguracao);\n\n      // Verificar se as consultas usam campos indexados\n      expect(mockPrisma.avaliacao.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            status: 'pendente', // Campo indexado\n            prazo: expect.any(Object), // Campo indexado\n          }),\n        })\n      );\n    });\n\n    it('deve limitar resultados para evitar sobrecarga', async () => {\n      await service.gerarLembretes(mockConfiguracao);\n\n      // Verificar se há limite nas consultas\n      expect(mockPrisma.avaliacao.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          take: expect.any(Number),\n        })\n      );\n    });\n  });\n\n  describe('Integração', () => {\n    it('deve integrar com serviço de lembretes', async () => {\n      const avaliacoes = [\n        {\n          id: 'aval1',\n          titulo: 'Avaliação Teste',\n          prazo: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n          status: 'pendente',\n          usuarioId: 'user1',\n          usuario: {\n            id: 'user1',\n            nome: 'João Silva',\n            email: 'joao@empresa.com',\n          },\n        },\n      ];\n\n      mockPrisma.avaliacao.findMany.mockResolvedValueOnce(avaliacoes);\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce([]);\n      mockLembretesService.criarLembrete.mockResolvedValueOnce({ id: 'lembrete1' });\n\n      await service.gerarLembretes(mockConfiguracao);\n\n      expect(mockLembretesService.criarLembrete).toHaveBeenCalledWith(\n        expect.objectContaining({\n          usuarioId: 'user1',\n          avaliacaoId: 'aval1',\n          tipo: 'prazo_vencimento',\n        })\n      );\n    });\n\n    it('deve integrar com serviço de e-mail', async () => {\n      mockLembretesService.processarFilaEnvio.mockResolvedValueOnce({\n        processados: 5,\n        enviados: 4,\n        falhados: 1,\n      });\n\n      const resultado = await service.processarFilaEnvio();\n\n      expect(mockLembretesService.processarFilaEnvio).toHaveBeenCalled();\n      expect(resultado.enviados).toBe(4);\n    });\n  });\n});"],"names":["mockPrisma","configuracaoAgendador","findUnique","jest","fn","create","update","upsert","statusAgendador","lembrete","findMany","deleteMany","count","avaliacao","usuario","mockLembretesService","criarLembrete","buscarLembretesPendentes","processarFilaEnvio","limparLembretesAntigos","mockEmailService","enviarEmail","enviarLembrete","mockConfiguracao","id","ativo","intervaloVerificacao","horariosEnvio","diasAntecedencia","prazo_vencimento","avaliacao_pendente","followup","tiposNotificacao","personalizado","filtros","incluirFinsDeSemanaSemana","incluirFeriados","avaliacoesUsuario","avaliacoesQueAvalia","configuracaoEmail","assunto","template","incluirDetalhes","incluirLinkDireto","criadaEm","Date","toISOString","atualizadaEm","mockStatus","ultimaExecucao","proximaExecucao","now","ultimoErro","estatisticas","totalExecucoes","sucessos","falhas","lembretesGerados","lembretesEnviados","ultimaLimpeza","criadoEm","atualizadoEm","mockEstatisticas","taxaSucesso","mediaLembretesPorExecucao","tempoMedioExecucao","porTipo","porPeriodo","hoje","ontem","ultimaSemana","ultimoMes","describe","service","beforeEach","clearAllMocks","AgendadorLembretesService","afterEach","resetAllMocks","it","mockResolvedValueOnce","resultado","buscarConfiguracao","expect","toHaveBeenCalledWith","where","toEqual","novaConfiguracao","configuracaoAtualizada","atualizarConfiguracao","objectContaining","toBe","configuracaoInvalida","rejects","toThrow","buscarStatus","iniciarAgendador","any","toBeTruthy","configuracaoInativa","pararAgendador","toBeNull","titulo","prazo","status","usuarioId","forcarVerificacao","toHaveBeenCalled","mockRejectedValueOnce","Error","limparLembretesPendentes","removidos","tipo","configuracaoPadrao","resetarConfiguracao","configuracao","mockImplementation","Promise","resolve","buscarEstatisticas","toBeCloseTo","dataInicio","dataFim","gte","lte","avaliacoes","nome","email","gerarLembretes","avaliacaoId","stringContaining","mensagem","String","dataEnvio","metadados","nomeAvaliacao","gerados","lembretesExistentes","not","duplicados","configuracaoComFiltros","chamada","mock","calls","getDate","agora","calcularProximaExecucao","diferencaMinutos","getTime","getHours","getMinutes","validarConfiguracao","Object","take","Number","processados","enviados","falhados"],"mappings":"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"}