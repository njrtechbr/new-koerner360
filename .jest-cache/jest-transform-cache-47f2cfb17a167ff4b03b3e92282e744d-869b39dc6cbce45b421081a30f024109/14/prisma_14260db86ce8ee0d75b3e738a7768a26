e5f47538fd2fc9633ceb7be0c96ba61c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get checkDatabaseConnection () {
        return checkDatabaseConnection;
    },
    get // Exportar o cliente como padr√£o e nomeado
    default () {
        return _default;
    },
    get disconnect () {
        return disconnect;
    },
    get executeWithMonitoring () {
        return executeWithMonitoring;
    },
    get getConnectionPoolStats () {
        return getConnectionPoolStats;
    },
    get performHealthCheck () {
        return performHealthCheck;
    },
    get prisma () {
        return prisma;
    }
});
const _prisma = require("../generated/prisma");
const _databaseconfig = require("./database-config");
// Validar configura√ß√µes antes de inicializar
const configValidation = (0, _databaseconfig.validateDatabaseConfig)();
if (!configValidation.valid) {
    console.error('‚ùå Configura√ß√£o de banco inv√°lida:', configValidation.errors);
    throw new Error(`Configura√ß√£o de banco inv√°lida: ${configValidation.errors.join(', ')}`);
}
// Monitor de conex√µes (apenas em desenvolvimento)
const connectionMonitor = globalThis.connectionMonitor || (process.env.NODE_ENV === 'development' ? (0, _databaseconfig.createConnectionPoolMonitor)() : null);
if (process.env.NODE_ENV === 'development') {
    globalThis.connectionMonitor = connectionMonitor;
}
// Configura√ß√£o do cliente Prisma com otimiza√ß√µes e connection pooling
const prisma = globalThis.prisma || new _prisma.PrismaClient({
    log: (0, _databaseconfig.getLogConfig)(),
    errorFormat: 'pretty',
    datasources: {
        db: {
            url: (0, _databaseconfig.buildDatabaseUrl)()
        }
    }
});
// Em desenvolvimento, reutilizar a inst√¢ncia para evitar m√∫ltiplas conex√µes
if (process.env.NODE_ENV === 'development') {
    globalThis.prisma = prisma;
}
const _default = prisma;
const disconnect = async ()=>{
    try {
        await prisma.$disconnect();
        console.log('üîå Desconectado do banco de dados com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao desconectar do banco:', error);
    }
};
const checkDatabaseConnection = async ()=>{
    try {
        const startTime = Date.now();
        await prisma.$queryRaw`SELECT 1 as connection_test`;
        const duration = Date.now() - startTime;
        return {
            success: true,
            message: 'Conex√£o com o banco de dados estabelecida com sucesso',
            duration: `${duration}ms`,
            timestamp: new Date().toISOString()
        };
    } catch (error) {
        return {
            success: false,
            message: 'Erro ao conectar com o banco de dados',
            error: error instanceof Error ? error.message : 'Erro desconhecido',
            timestamp: new Date().toISOString()
        };
    }
};
const getConnectionPoolStats = ()=>{
    if (connectionMonitor) {
        return connectionMonitor.getStats();
    }
    return {
        message: 'Monitor de conex√µes n√£o dispon√≠vel neste ambiente',
        environment: process.env.NODE_ENV || 'unknown'
    };
};
const performHealthCheck = async ()=>{
    const healthCheck = {
        database: await checkDatabaseConnection(),
        connectionPool: getConnectionPoolStats(),
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development'
    };
    return healthCheck;
};
const executeWithMonitoring = async (queryFn, queryName = 'unknown')=>{
    const startTime = Date.now();
    try {
        const result = await queryFn();
        const duration = Date.now() - startTime;
        if (process.env.NODE_ENV === 'development' && duration > 1000) {
            console.warn(`üêå Query lenta detectada: ${queryName} (${duration}ms)`);
        }
        return {
            result,
            duration,
            queryName
        };
    } catch (error) {
        const duration = Date.now() - startTime;
        console.error(`‚ùå Erro na query: ${queryName} (${duration}ms)`, error);
        throw error;
    }
};

//# sourceMappingURL=data:application/json;base64,