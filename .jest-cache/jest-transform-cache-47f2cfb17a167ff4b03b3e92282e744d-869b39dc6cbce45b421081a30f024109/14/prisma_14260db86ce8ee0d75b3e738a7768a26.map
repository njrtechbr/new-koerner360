{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\prisma.ts"],"sourcesContent":["import { PrismaClient } from '../generated/prisma';\nimport {\n  buildDatabaseUrl,\n  getLogConfig,\n  createConnectionPoolMonitor,\n  validateDatabaseConfig,\n} from './database-config';\n\n// Declara√ß√£o global para evitar m√∫ltiplas inst√¢ncias em desenvolvimento\ndeclare global {\n  var prisma: PrismaClient | undefined;\n  var connectionMonitor:\n    | ReturnType<typeof createConnectionPoolMonitor>\n    | undefined;\n}\n\n// Validar configura√ß√µes antes de inicializar\nconst configValidation = validateDatabaseConfig();\nif (!configValidation.valid) {\n  console.error('‚ùå Configura√ß√£o de banco inv√°lida:', configValidation.errors);\n  throw new Error(\n    `Configura√ß√£o de banco inv√°lida: ${configValidation.errors.join(', ')}`\n  );\n}\n\n// Monitor de conex√µes (apenas em desenvolvimento)\nconst connectionMonitor =\n  globalThis.connectionMonitor ||\n  (process.env.NODE_ENV === 'development'\n    ? createConnectionPoolMonitor()\n    : null);\n\nif (process.env.NODE_ENV === 'development') {\n  globalThis.connectionMonitor = connectionMonitor;\n}\n\n// Configura√ß√£o do cliente Prisma com otimiza√ß√µes e connection pooling\nconst prisma =\n  globalThis.prisma ||\n  new PrismaClient({\n    log: getLogConfig() as any,\n    errorFormat: 'pretty',\n    datasources: {\n      db: {\n        url: buildDatabaseUrl(),\n      },\n    },\n  });\n\n// Em desenvolvimento, reutilizar a inst√¢ncia para evitar m√∫ltiplas conex√µes\nif (process.env.NODE_ENV === 'development') {\n  globalThis.prisma = prisma;\n}\n\n// Exportar o cliente como padr√£o e nomeado\nexport default prisma;\nexport { prisma };\n\n// Fun√ß√£o para desconectar do banco\nexport const disconnect = async () => {\n  try {\n    await prisma.$disconnect();\n    console.log('üîå Desconectado do banco de dados com sucesso');\n  } catch (error) {\n    console.error('‚ùå Erro ao desconectar do banco:', error);\n  }\n};\n\n// Fun√ß√£o para verificar a conex√£o com o banco\nexport const checkDatabaseConnection = async () => {\n  try {\n    const startTime = Date.now();\n    await prisma.$queryRaw`SELECT 1 as connection_test`;\n    const duration = Date.now() - startTime;\n\n    return {\n      success: true,\n      message: 'Conex√£o com o banco de dados estabelecida com sucesso',\n      duration: `${duration}ms`,\n      timestamp: new Date().toISOString(),\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Erro ao conectar com o banco de dados',\n      error: error instanceof Error ? error.message : 'Erro desconhecido',\n      timestamp: new Date().toISOString(),\n    };\n  }\n};\n\n// Fun√ß√£o para obter estat√≠sticas do pool de conex√µes\nexport const getConnectionPoolStats = () => {\n  if (connectionMonitor) {\n    return connectionMonitor.getStats();\n  }\n\n  return {\n    message: 'Monitor de conex√µes n√£o dispon√≠vel neste ambiente',\n    environment: process.env.NODE_ENV || 'unknown',\n  };\n};\n\n// Fun√ß√£o para executar health check completo\nexport const performHealthCheck = async () => {\n  const healthCheck = {\n    database: await checkDatabaseConnection(),\n    connectionPool: getConnectionPoolStats(),\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV || 'development',\n  };\n\n  return healthCheck;\n};\n\n// Fun√ß√£o para executar query com monitoramento de performance\nexport const executeWithMonitoring = async <T>(\n  queryFn: () => Promise<T>,\n  queryName: string = 'unknown'\n): Promise<{ result: T; duration: number; queryName: string }> => {\n  const startTime = Date.now();\n\n  try {\n    const result = await queryFn();\n    const duration = Date.now() - startTime;\n\n    if (process.env.NODE_ENV === 'development' && duration > 1000) {\n      console.warn(`üêå Query lenta detectada: ${queryName} (${duration}ms)`);\n    }\n\n    return { result, duration, queryName };\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    console.error(`‚ùå Erro na query: ${queryName} (${duration}ms)`, error);\n    throw error;\n  }\n};\n"],"names":["checkDatabaseConnection","disconnect","executeWithMonitoring","getConnectionPoolStats","performHealthCheck","prisma","configValidation","validateDatabaseConfig","valid","console","error","errors","Error","join","connectionMonitor","globalThis","process","env","NODE_ENV","createConnectionPoolMonitor","PrismaClient","log","getLogConfig","errorFormat","datasources","db","url","buildDatabaseUrl","$disconnect","startTime","Date","now","$queryRaw","duration","success","message","timestamp","toISOString","getStats","environment","healthCheck","database","connectionPool","queryFn","queryName","result","warn"],"mappings":"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"}