a9bb1a39342b0721ce87dca3ebdc7453
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AgendadorLembretes () {
        return AgendadorLembretes;
    },
    get lembretesUtils () {
        return lembretesUtils;
    },
    get obterAgendadorLembretes () {
        return obterAgendadorLembretes;
    }
});
const _prisma = require("../prisma");
const _agendadoremail = require("./agendador-email");
const _emailnotificacoes = require("../utils/email-notificacoes");
const _datefns = require("date-fns");
class AgendadorLembretes {
    constructor(){
        this.gerenciadorEmail = (0, _emailnotificacoes.obterGerenciadorEmail)();
        this.intervalos = new Map();
        this.ativo = false;
        this.configuracao = {
            diasAntecedencia: [
                7,
                3,
                1
            ],
            horarioEnvio: '09:00',
            ativo: true,
            incluirFimDeSemana: false,
            incluirFeriados: false
        };
        this.agendadorEmail = new _agendadoremail.AgendadorEmail();
    }
    /**
   * Inicia o agendador de lembretes
   */ async iniciar() {
        if (this.ativo) {
            console.log('Agendador de lembretes já está ativo');
            return;
        }
        this.ativo = true;
        console.log('Iniciando agendador de lembretes...');
        // Agendar verificação a cada hora
        const intervalo = setInterval(()=>{
            this.verificarLembretesPendentes().catch(console.error);
        }, 60 * 60 * 1000); // 1 hora
        this.intervalos.set('verificacao-principal', intervalo);
        // Executar verificação inicial
        await this.verificarLembretesPendentes();
        console.log('Agendador de lembretes iniciado com sucesso');
    }
    /**
   * Para o agendador de lembretes
   */ parar() {
        if (!this.ativo) {
            console.log('Agendador de lembretes já está parado');
            return;
        }
        this.ativo = false;
        // Limpar todos os intervalos
        this.intervalos.forEach((intervalo)=>{
            clearInterval(intervalo);
        });
        this.intervalos.clear();
        console.log('Agendador de lembretes parado');
    }
    /**
   * Atualiza a configuração do agendador
   */ async atualizarConfiguracao(novaConfiguracao) {
        this.configuracao = {
            ...this.configuracao,
            ...novaConfiguracao
        };
        // Reagendar lembretes se necessário
        if (this.ativo) {
            await this.reagendarTodosLembretes();
        }
        console.log('Configuração do agendador atualizada:', this.configuracao);
    }
    /**
   * Verifica e processa lembretes pendentes
   */ async verificarLembretesPendentes() {
        if (!this.configuracao.ativo) {
            return;
        }
        try {
            console.log('Verificando lembretes pendentes...');
            // Buscar avaliações que precisam de lembretes
            const avaliacoesPendentes = await this.buscarAvaliacoesPendentes();
            for (const avaliacao of avaliacoesPendentes){
                await this.processarLembretesAvaliacao(avaliacao);
            }
            // Enviar lembretes agendados para agora
            await this.enviarLembretesAgendados();
        } catch (error) {
            console.error('Erro ao verificar lembretes pendentes:', error);
        }
    }
    /**
   * Busca avaliações que precisam de lembretes
   */ async buscarAvaliacoesPendentes() {
        const agora = new Date();
        const em30Dias = (0, _datefns.addDays)(agora, 30); // Buscar avaliações com prazo nos próximos 30 dias
        return await _prisma.prisma.avaliacao.findMany({
            where: {
                status: 'PENDENTE',
                prazo: {
                    gte: agora,
                    lte: em30Dias
                }
            },
            include: {
                avaliado: true,
                avaliador: true,
                periodo: true
            }
        });
    }
    /**
   * Processa lembretes para uma avaliação específica
   */ async processarLembretesAvaliacao(avaliacao) {
        const agora = new Date();
        const prazoAvaliacao = new Date(avaliacao.prazo);
        // Verificar se já passou do prazo
        if ((0, _datefns.isBefore)(prazoAvaliacao, agora)) {
            await this.agendarLembreteVencimento(avaliacao);
            return;
        }
        // Agendar lembretes de antecedência
        for (const dias of this.configuracao.diasAntecedencia){
            const dataLembrete = (0, _datefns.addDays)(prazoAvaliacao, -dias);
            if ((0, _datefns.isAfter)(dataLembrete, agora)) {
                await this.agendarLembrete(avaliacao, dataLembrete, 'lembrete');
            }
        }
    }
    /**
   * Agenda um lembrete específico
   */ async agendarLembrete(avaliacao, dataEnvio, tipo) {
        // Verificar se já existe um lembrete agendado
        const lembreteExistente = await this.buscarLembreteExistente(avaliacao.id, avaliacao.avaliadorId, tipo, dataEnvio);
        if (lembreteExistente) {
            return; // Já existe
        }
        // Ajustar horário de envio
        const dataEnvioComHorario = this.ajustarHorarioEnvio(dataEnvio);
        // Verificar se é dia útil (se configurado)
        if (!this.configuracao.incluirFimDeSemana && this.isFimDeSemana(dataEnvioComHorario)) {
            return; // Pular fim de semana
        }
        // Criar registro do lembrete
        await this.criarRegistroLembrete({
            avaliacaoId: avaliacao.id,
            usuarioId: avaliacao.avaliadorId,
            tipo,
            dataEnvio: dataEnvioComHorario,
            enviado: false,
            tentativas: 0
        });
        console.log(`Lembrete ${tipo} agendado para ${dataEnvioComHorario.toISOString()}`);
    }
    /**
   * Agenda lembrete de vencimento
   */ async agendarLembreteVencimento(avaliacao) {
        const agora = new Date();
        await this.agendarLembrete(avaliacao, agora, 'vencimento');
    }
    /**
   * Envia lembretes que estão agendados para agora
   */ async enviarLembretesAgendados() {
        const agora = new Date();
        const inicioHora = (0, _datefns.startOfDay)(agora);
        const fimHora = (0, _datefns.endOfDay)(agora);
        // Buscar lembretes agendados para hoje
        const lembretesParaEnviar = await this.buscarLembretesParaEnvio(inicioHora, fimHora);
        for (const lembrete of lembretesParaEnviar){
            await this.enviarLembrete(lembrete);
        }
    }
    /**
   * Envia um lembrete específico
   */ async enviarLembrete(lembrete) {
        try {
            console.log(`Enviando lembrete ${lembrete.tipo} para usuário ${lembrete.usuarioId}`);
            // Buscar dados da avaliação
            const avaliacao = await _prisma.prisma.avaliacao.findUnique({
                where: {
                    id: lembrete.avaliacaoId
                },
                include: {
                    avaliado: true,
                    avaliador: true,
                    periodo: true
                }
            });
            if (!avaliacao) {
                throw new Error('Avaliação não encontrada');
            }
            // Enviar e-mail
            const resultado = await this.gerenciadorEmail.enviarEmailAvaliacaoPendente(avaliacao.avaliador.email, {
                nomeAvaliador: avaliacao.avaliador.nome,
                nomeAvaliado: avaliacao.avaliado.nome,
                cargoAvaliado: avaliacao.avaliado.cargo || 'Não informado',
                prazo: avaliacao.prazo,
                linkAvaliacao: `/avaliacoes/${avaliacao.id}`,
                periodo: avaliacao.periodo.nome
            });
            // Atualizar registro do lembrete
            await this.atualizarRegistroLembrete(lembrete.id, {
                enviado: resultado.sucesso,
                tentativas: lembrete.tentativas + 1,
                ultimaTentativa: new Date(),
                erro: resultado.sucesso ? undefined : resultado.erro
            });
            // Criar notificação no sistema
            await this.criarNotificacaoLembrete(avaliacao, lembrete.tipo);
            console.log(`Lembrete ${lembrete.tipo} enviado com sucesso`);
        } catch (error) {
            console.error(`Erro ao enviar lembrete ${lembrete.id}:`, error);
            // Atualizar registro com erro
            await this.atualizarRegistroLembrete(lembrete.id, {
                tentativas: lembrete.tentativas + 1,
                ultimaTentativa: new Date(),
                erro: error instanceof Error ? error.message : 'Erro desconhecido'
            });
        }
    }
    /**
   * Cria notificação no sistema para o lembrete
   */ async criarNotificacaoLembrete(avaliacao, tipo) {
        const titulo = tipo === 'lembrete' ? 'Lembrete: Avaliação Pendente' : 'Avaliação Vencida';
        const descricao = tipo === 'lembrete' ? `Você tem uma avaliação pendente de ${avaliacao.avaliado.nome}` : `A avaliação de ${avaliacao.avaliado.nome} está vencida`;
        await _prisma.prisma.notificacao.create({
            data: {
                titulo,
                descricao,
                tipo: tipo === 'lembrete' ? 'lembrete' : 'vencida',
                urgencia: tipo === 'lembrete' ? 'media' : 'alta',
                usuarioId: avaliacao.avaliadorId,
                avaliacaoId: avaliacao.id,
                lida: false,
                prazo: avaliacao.prazo
            }
        });
    }
    /**
   * Reagenda todos os lembretes
   */ async reagendarTodosLembretes() {
        console.log('Reagendando todos os lembretes...');
        // Limpar lembretes não enviados
        await this.limparLembretesNaoEnviados();
        // Reprocessar avaliações pendentes
        await this.verificarLembretesPendentes();
    }
    /**
   * Utilitários
   */ ajustarHorarioEnvio(data) {
        const [horas, minutos] = this.configuracao.horarioEnvio.split(':').map(Number);
        const novaData = new Date(data);
        novaData.setHours(horas, minutos, 0, 0);
        return novaData;
    }
    isFimDeSemana(data) {
        const diaSemana = data.getDay();
        return diaSemana === 0 || diaSemana === 6; // Domingo ou Sábado
    }
    /**
   * Métodos de banco de dados
   */ async buscarLembreteExistente(avaliacaoId, usuarioId, tipo, dataEnvio) {
        // Implementar busca no banco de dados
        // Por enquanto, retorna null (assumindo que não existe)
        return null;
    }
    async criarRegistroLembrete(dados) {
        // Implementar criação no banco de dados
        console.log('Criando registro de lembrete:', dados);
    }
    async atualizarRegistroLembrete(id, dados) {
        // Implementar atualização no banco de dados
        console.log('Atualizando registro de lembrete:', id, dados);
    }
    async buscarLembretesParaEnvio(inicio, fim) {
        // Implementar busca no banco de dados
        // Por enquanto, retorna array vazio
        return [];
    }
    async limparLembretesNaoEnviados() {
        // Implementar limpeza no banco de dados
        console.log('Limpando lembretes não enviados');
    }
    /**
   * Métodos públicos para estatísticas e controle
   */ async obterEstatisticas() {
        // Implementar busca de estatísticas
        return {
            totalAgendados: 0,
            totalEnviados: 0,
            totalPendentes: 0,
            totalFalhas: 0,
            proximosEnvios: [],
            ultimosEnviados: []
        };
    }
    obterConfiguracao() {
        return {
            ...this.configuracao
        };
    }
    estaAtivo() {
        return this.ativo;
    }
    async forcarVerificacao() {
        await this.verificarLembretesPendentes();
    }
    async reagendarAvaliacao(avaliacaoId) {
        const avaliacao = await _prisma.prisma.avaliacao.findUnique({
            where: {
                id: avaliacaoId
            },
            include: {
                avaliado: true,
                avaliador: true,
                periodo: true
            }
        });
        if (avaliacao) {
            await this.processarLembretesAvaliacao(avaliacao);
        }
    }
}
// Instância singleton
let instanciaAgendador = null;
function obterAgendadorLembretes() {
    if (!instanciaAgendador) {
        instanciaAgendador = new AgendadorLembretes();
    }
    return instanciaAgendador;
}
const lembretesUtils = {
    /**
   * Inicia o agendador automaticamente
   */ async iniciarAutomatico () {
        const agendador = obterAgendadorLembretes();
        await agendador.iniciar();
    },
    /**
   * Para o agendador
   */ pararAgendador () {
        const agendador = obterAgendadorLembretes();
        agendador.parar();
    },
    /**
   * Força verificação de lembretes
   */ async forcarVerificacao () {
        const agendador = obterAgendadorLembretes();
        await agendador.forcarVerificacao();
    },
    /**
   * Reagenda lembretes para uma avaliação específica
   */ async reagendarAvaliacao (avaliacaoId) {
        const agendador = obterAgendadorLembretes();
        await agendador.reagendarAvaliacao(avaliacaoId);
    }
};

//# sourceMappingURL=data:application/json;base64,