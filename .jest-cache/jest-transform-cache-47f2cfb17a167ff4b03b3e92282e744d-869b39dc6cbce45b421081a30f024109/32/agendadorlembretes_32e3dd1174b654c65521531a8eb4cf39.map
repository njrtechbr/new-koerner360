{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\agendador-lembretes.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma';\nimport { AgendadorEmail } from './agendador-email';\nimport { obterGerenciadorEmail } from '@/lib/utils/email-notificacoes';\nimport { addDays, isAfter, isBefore, startOfDay, endOfDay } from 'date-fns';\n\ninterface ConfiguracaoLembrete {\n  diasAntecedencia: number[];\n  horarioEnvio: string; // HH:mm\n  ativo: boolean;\n  incluirFimDeSemana: boolean;\n  incluirFeriados: boolean;\n}\n\ninterface LembreteAgendado {\n  id: string;\n  avaliacaoId: string;\n  usuarioId: string;\n  tipo: 'lembrete' | 'vencimento';\n  dataEnvio: Date;\n  enviado: boolean;\n  tentativas: number;\n  ultimaTentativa?: Date;\n  erro?: string;\n}\n\ninterface EstatisticasLembretes {\n  totalAgendados: number;\n  totalEnviados: number;\n  totalPendentes: number;\n  totalFalhas: number;\n  proximosEnvios: LembreteAgendado[];\n  ultimosEnviados: LembreteAgendado[];\n}\n\nclass AgendadorLembretes {\n  private agendadorEmail: AgendadorEmail;\n  private gerenciadorEmail = obterGerenciadorEmail();\n  private intervalos: Map<string, NodeJS.Timeout> = new Map();\n  private ativo = false;\n  private configuracao: ConfiguracaoLembrete = {\n    diasAntecedencia: [7, 3, 1], // 7, 3 e 1 dia antes do vencimento\n    horarioEnvio: '09:00',\n    ativo: true,\n    incluirFimDeSemana: false,\n    incluirFeriados: false,\n  };\n\n  constructor() {\n    this.agendadorEmail = new AgendadorEmail();\n  }\n\n  /**\n   * Inicia o agendador de lembretes\n   */\n  async iniciar(): Promise<void> {\n    if (this.ativo) {\n      console.log('Agendador de lembretes já está ativo');\n      return;\n    }\n\n    this.ativo = true;\n    console.log('Iniciando agendador de lembretes...');\n\n    // Agendar verificação a cada hora\n    const intervalo = setInterval(() => {\n      this.verificarLembretesPendentes().catch(console.error);\n    }, 60 * 60 * 1000); // 1 hora\n\n    this.intervalos.set('verificacao-principal', intervalo);\n\n    // Executar verificação inicial\n    await this.verificarLembretesPendentes();\n\n    console.log('Agendador de lembretes iniciado com sucesso');\n  }\n\n  /**\n   * Para o agendador de lembretes\n   */\n  parar(): void {\n    if (!this.ativo) {\n      console.log('Agendador de lembretes já está parado');\n      return;\n    }\n\n    this.ativo = false;\n    \n    // Limpar todos os intervalos\n    this.intervalos.forEach((intervalo) => {\n      clearInterval(intervalo);\n    });\n    this.intervalos.clear();\n\n    console.log('Agendador de lembretes parado');\n  }\n\n  /**\n   * Atualiza a configuração do agendador\n   */\n  async atualizarConfiguracao(novaConfiguracao: Partial<ConfiguracaoLembrete>): Promise<void> {\n    this.configuracao = { ...this.configuracao, ...novaConfiguracao };\n    \n    // Reagendar lembretes se necessário\n    if (this.ativo) {\n      await this.reagendarTodosLembretes();\n    }\n\n    console.log('Configuração do agendador atualizada:', this.configuracao);\n  }\n\n  /**\n   * Verifica e processa lembretes pendentes\n   */\n  private async verificarLembretesPendentes(): Promise<void> {\n    if (!this.configuracao.ativo) {\n      return;\n    }\n\n    try {\n      console.log('Verificando lembretes pendentes...');\n\n      // Buscar avaliações que precisam de lembretes\n      const avaliacoesPendentes = await this.buscarAvaliacoesPendentes();\n      \n      for (const avaliacao of avaliacoesPendentes) {\n        await this.processarLembretesAvaliacao(avaliacao);\n      }\n\n      // Enviar lembretes agendados para agora\n      await this.enviarLembretesAgendados();\n\n    } catch (error) {\n      console.error('Erro ao verificar lembretes pendentes:', error);\n    }\n  }\n\n  /**\n   * Busca avaliações que precisam de lembretes\n   */\n  private async buscarAvaliacoesPendentes() {\n    const agora = new Date();\n    const em30Dias = addDays(agora, 30); // Buscar avaliações com prazo nos próximos 30 dias\n\n    return await prisma.avaliacao.findMany({\n      where: {\n        status: 'PENDENTE',\n        prazo: {\n          gte: agora,\n          lte: em30Dias,\n        },\n      },\n      include: {\n        avaliado: true,\n        avaliador: true,\n        periodo: true,\n      },\n    });\n  }\n\n  /**\n   * Processa lembretes para uma avaliação específica\n   */\n  private async processarLembretesAvaliacao(avaliacao: any): Promise<void> {\n    const agora = new Date();\n    const prazoAvaliacao = new Date(avaliacao.prazo);\n\n    // Verificar se já passou do prazo\n    if (isBefore(prazoAvaliacao, agora)) {\n      await this.agendarLembreteVencimento(avaliacao);\n      return;\n    }\n\n    // Agendar lembretes de antecedência\n    for (const dias of this.configuracao.diasAntecedencia) {\n      const dataLembrete = addDays(prazoAvaliacao, -dias);\n      \n      if (isAfter(dataLembrete, agora)) {\n        await this.agendarLembrete(avaliacao, dataLembrete, 'lembrete');\n      }\n    }\n  }\n\n  /**\n   * Agenda um lembrete específico\n   */\n  private async agendarLembrete(\n    avaliacao: any,\n    dataEnvio: Date,\n    tipo: 'lembrete' | 'vencimento'\n  ): Promise<void> {\n    // Verificar se já existe um lembrete agendado\n    const lembreteExistente = await this.buscarLembreteExistente(\n      avaliacao.id,\n      avaliacao.avaliadorId,\n      tipo,\n      dataEnvio\n    );\n\n    if (lembreteExistente) {\n      return; // Já existe\n    }\n\n    // Ajustar horário de envio\n    const dataEnvioComHorario = this.ajustarHorarioEnvio(dataEnvio);\n\n    // Verificar se é dia útil (se configurado)\n    if (!this.configuracao.incluirFimDeSemana && this.isFimDeSemana(dataEnvioComHorario)) {\n      return; // Pular fim de semana\n    }\n\n    // Criar registro do lembrete\n    await this.criarRegistroLembrete({\n      avaliacaoId: avaliacao.id,\n      usuarioId: avaliacao.avaliadorId,\n      tipo,\n      dataEnvio: dataEnvioComHorario,\n      enviado: false,\n      tentativas: 0,\n    });\n\n    console.log(`Lembrete ${tipo} agendado para ${dataEnvioComHorario.toISOString()}`);\n  }\n\n  /**\n   * Agenda lembrete de vencimento\n   */\n  private async agendarLembreteVencimento(avaliacao: any): Promise<void> {\n    const agora = new Date();\n    await this.agendarLembrete(avaliacao, agora, 'vencimento');\n  }\n\n  /**\n   * Envia lembretes que estão agendados para agora\n   */\n  private async enviarLembretesAgendados(): Promise<void> {\n    const agora = new Date();\n    const inicioHora = startOfDay(agora);\n    const fimHora = endOfDay(agora);\n\n    // Buscar lembretes agendados para hoje\n    const lembretesParaEnviar = await this.buscarLembretesParaEnvio(inicioHora, fimHora);\n\n    for (const lembrete of lembretesParaEnviar) {\n      await this.enviarLembrete(lembrete);\n    }\n  }\n\n  /**\n   * Envia um lembrete específico\n   */\n  private async enviarLembrete(lembrete: any): Promise<void> {\n    try {\n      console.log(`Enviando lembrete ${lembrete.tipo} para usuário ${lembrete.usuarioId}`);\n\n      // Buscar dados da avaliação\n      const avaliacao = await prisma.avaliacao.findUnique({\n        where: { id: lembrete.avaliacaoId },\n        include: {\n          avaliado: true,\n          avaliador: true,\n          periodo: true,\n        },\n      });\n\n      if (!avaliacao) {\n        throw new Error('Avaliação não encontrada');\n      }\n\n      // Enviar e-mail\n      const resultado = await this.gerenciadorEmail.enviarEmailAvaliacaoPendente(\n        avaliacao.avaliador.email,\n        {\n          nomeAvaliador: avaliacao.avaliador.nome,\n          nomeAvaliado: avaliacao.avaliado.nome,\n          cargoAvaliado: avaliacao.avaliado.cargo || 'Não informado',\n          prazo: avaliacao.prazo,\n          linkAvaliacao: `/avaliacoes/${avaliacao.id}`,\n          periodo: avaliacao.periodo.nome,\n        }\n      );\n\n      // Atualizar registro do lembrete\n      await this.atualizarRegistroLembrete(lembrete.id, {\n        enviado: resultado.sucesso,\n        tentativas: lembrete.tentativas + 1,\n        ultimaTentativa: new Date(),\n        erro: resultado.sucesso ? undefined : resultado.erro,\n      });\n\n      // Criar notificação no sistema\n      await this.criarNotificacaoLembrete(avaliacao, lembrete.tipo);\n\n      console.log(`Lembrete ${lembrete.tipo} enviado com sucesso`);\n\n    } catch (error) {\n      console.error(`Erro ao enviar lembrete ${lembrete.id}:`, error);\n      \n      // Atualizar registro com erro\n      await this.atualizarRegistroLembrete(lembrete.id, {\n        tentativas: lembrete.tentativas + 1,\n        ultimaTentativa: new Date(),\n        erro: error instanceof Error ? error.message : 'Erro desconhecido',\n      });\n    }\n  }\n\n  /**\n   * Cria notificação no sistema para o lembrete\n   */\n  private async criarNotificacaoLembrete(avaliacao: any, tipo: 'lembrete' | 'vencimento'): Promise<void> {\n    const titulo = tipo === 'lembrete' \n      ? 'Lembrete: Avaliação Pendente'\n      : 'Avaliação Vencida';\n    \n    const descricao = tipo === 'lembrete'\n      ? `Você tem uma avaliação pendente de ${avaliacao.avaliado.nome}`\n      : `A avaliação de ${avaliacao.avaliado.nome} está vencida`;\n\n    await prisma.notificacao.create({\n      data: {\n        titulo,\n        descricao,\n        tipo: tipo === 'lembrete' ? 'lembrete' : 'vencida',\n        urgencia: tipo === 'lembrete' ? 'media' : 'alta',\n        usuarioId: avaliacao.avaliadorId,\n        avaliacaoId: avaliacao.id,\n        lida: false,\n        prazo: avaliacao.prazo,\n      },\n    });\n  }\n\n  /**\n   * Reagenda todos os lembretes\n   */\n  private async reagendarTodosLembretes(): Promise<void> {\n    console.log('Reagendando todos os lembretes...');\n    \n    // Limpar lembretes não enviados\n    await this.limparLembretesNaoEnviados();\n    \n    // Reprocessar avaliações pendentes\n    await this.verificarLembretesPendentes();\n  }\n\n  /**\n   * Utilitários\n   */\n  private ajustarHorarioEnvio(data: Date): Date {\n    const [horas, minutos] = this.configuracao.horarioEnvio.split(':').map(Number);\n    const novaData = new Date(data);\n    novaData.setHours(horas, minutos, 0, 0);\n    return novaData;\n  }\n\n  private isFimDeSemana(data: Date): boolean {\n    const diaSemana = data.getDay();\n    return diaSemana === 0 || diaSemana === 6; // Domingo ou Sábado\n  }\n\n  /**\n   * Métodos de banco de dados\n   */\n  private async buscarLembreteExistente(\n    avaliacaoId: string,\n    usuarioId: string,\n    tipo: string,\n    dataEnvio: Date\n  ) {\n    // Implementar busca no banco de dados\n    // Por enquanto, retorna null (assumindo que não existe)\n    return null;\n  }\n\n  private async criarRegistroLembrete(dados: Omit<LembreteAgendado, 'id'>): Promise<void> {\n    // Implementar criação no banco de dados\n    console.log('Criando registro de lembrete:', dados);\n  }\n\n  private async atualizarRegistroLembrete(id: string, dados: Partial<LembreteAgendado>): Promise<void> {\n    // Implementar atualização no banco de dados\n    console.log('Atualizando registro de lembrete:', id, dados);\n  }\n\n  private async buscarLembretesParaEnvio(inicio: Date, fim: Date): Promise<any[]> {\n    // Implementar busca no banco de dados\n    // Por enquanto, retorna array vazio\n    return [];\n  }\n\n  private async limparLembretesNaoEnviados(): Promise<void> {\n    // Implementar limpeza no banco de dados\n    console.log('Limpando lembretes não enviados');\n  }\n\n  /**\n   * Métodos públicos para estatísticas e controle\n   */\n  async obterEstatisticas(): Promise<EstatisticasLembretes> {\n    // Implementar busca de estatísticas\n    return {\n      totalAgendados: 0,\n      totalEnviados: 0,\n      totalPendentes: 0,\n      totalFalhas: 0,\n      proximosEnvios: [],\n      ultimosEnviados: [],\n    };\n  }\n\n  obterConfiguracao(): ConfiguracaoLembrete {\n    return { ...this.configuracao };\n  }\n\n  estaAtivo(): boolean {\n    return this.ativo;\n  }\n\n  async forcarVerificacao(): Promise<void> {\n    await this.verificarLembretesPendentes();\n  }\n\n  async reagendarAvaliacao(avaliacaoId: string): Promise<void> {\n    const avaliacao = await prisma.avaliacao.findUnique({\n      where: { id: avaliacaoId },\n      include: {\n        avaliado: true,\n        avaliador: true,\n        periodo: true,\n      },\n    });\n\n    if (avaliacao) {\n      await this.processarLembretesAvaliacao(avaliacao);\n    }\n  }\n}\n\n// Instância singleton\nlet instanciaAgendador: AgendadorLembretes | null = null;\n\n/**\n * Obtém a instância singleton do agendador de lembretes\n */\nexport function obterAgendadorLembretes(): AgendadorLembretes {\n  if (!instanciaAgendador) {\n    instanciaAgendador = new AgendadorLembretes();\n  }\n  return instanciaAgendador;\n}\n\n/**\n * Utilitários para agendamento de lembretes\n */\nexport const lembretesUtils = {\n  /**\n   * Inicia o agendador automaticamente\n   */\n  async iniciarAutomatico(): Promise<void> {\n    const agendador = obterAgendadorLembretes();\n    await agendador.iniciar();\n  },\n\n  /**\n   * Para o agendador\n   */\n  pararAgendador(): void {\n    const agendador = obterAgendadorLembretes();\n    agendador.parar();\n  },\n\n  /**\n   * Força verificação de lembretes\n   */\n  async forcarVerificacao(): Promise<void> {\n    const agendador = obterAgendadorLembretes();\n    await agendador.forcarVerificacao();\n  },\n\n  /**\n   * Reagenda lembretes para uma avaliação específica\n   */\n  async reagendarAvaliacao(avaliacaoId: string): Promise<void> {\n    const agendador = obterAgendadorLembretes();\n    await agendador.reagendarAvaliacao(avaliacaoId);\n  },\n};\n\nexport type {\n  ConfiguracaoLembrete,\n  LembreteAgendado,\n  EstatisticasLembretes,\n};\n\nexport { AgendadorLembretes };"],"names":["AgendadorLembretes","lembretesUtils","obterAgendadorLembretes","gerenciadorEmail","obterGerenciadorEmail","intervalos","Map","ativo","configuracao","diasAntecedencia","horarioEnvio","incluirFimDeSemana","incluirFeriados","agendadorEmail","AgendadorEmail","iniciar","console","log","intervalo","setInterval","verificarLembretesPendentes","catch","error","set","parar","forEach","clearInterval","clear","atualizarConfiguracao","novaConfiguracao","reagendarTodosLembretes","avaliacoesPendentes","buscarAvaliacoesPendentes","avaliacao","processarLembretesAvaliacao","enviarLembretesAgendados","agora","Date","em30Dias","addDays","prisma","findMany","where","status","prazo","gte","lte","include","avaliado","avaliador","periodo","prazoAvaliacao","isBefore","agendarLembreteVencimento","dias","dataLembrete","isAfter","agendarLembrete","dataEnvio","tipo","lembreteExistente","buscarLembreteExistente","id","avaliadorId","dataEnvioComHorario","ajustarHorarioEnvio","isFimDeSemana","criarRegistroLembrete","avaliacaoId","usuarioId","enviado","tentativas","toISOString","inicioHora","startOfDay","fimHora","endOfDay","lembretesParaEnviar","buscarLembretesParaEnvio","lembrete","enviarLembrete","findUnique","Error","resultado","enviarEmailAvaliacaoPendente","email","nomeAvaliador","nome","nomeAvaliado","cargoAvaliado","cargo","linkAvaliacao","atualizarRegistroLembrete","sucesso","ultimaTentativa","erro","undefined","criarNotificacaoLembrete","message","titulo","descricao","notificacao","create","data","urgencia","lida","limparLembretesNaoEnviados","horas","minutos","split","map","Number","novaData","setHours","diaSemana","getDay","dados","inicio","fim","obterEstatisticas","totalAgendados","totalEnviados","totalPendentes","totalFalhas","proximosEnvios","ultimosEnviados","obterConfiguracao","estaAtivo","forcarVerificacao","reagendarAvaliacao","instanciaAgendador","iniciarAutomatico","agendador","pararAgendador"],"mappings":"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"}