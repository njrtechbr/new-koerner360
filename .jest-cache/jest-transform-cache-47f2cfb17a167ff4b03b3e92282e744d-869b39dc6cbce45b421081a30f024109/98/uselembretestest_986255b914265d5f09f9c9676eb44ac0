f6501ccdaff031870f2e91d4388bd245
"use strict";
jest.mock('@/hooks/use-toast', ()=>({
        useToast: ()=>({
                toast: mockToast
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _uselembretes = require("../use-lembretes");
// Mock do hook useToast
const mockToast = jest.fn();
// Mock do fetch global
const mockFetch = jest.fn();
global.fetch = mockFetch;
// Mock dos dados de teste
const mockResultadoLembretes = {
    dados: [
        {
            id: '1',
            avaliacaoId: '1',
            usuarioId: '1',
            tipo: 'lembrete',
            dataEnvio: new Date().toISOString(),
            enviado: false,
            tentativas: 0,
            ultimaTentativa: null,
            erro: null,
            criadoEm: new Date().toISOString(),
            usuario: {
                id: '1',
                nome: 'João Silva',
                email: 'joao@teste.com'
            },
            avaliacao: {
                id: '1',
                prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
                status: 'pendente',
                avaliado: {
                    id: '1',
                    nome: 'João Silva',
                    email: 'joao@teste.com'
                },
                avaliador: {
                    id: '2',
                    nome: 'Maria Santos',
                    email: 'maria@teste.com'
                },
                periodo: {
                    id: '1',
                    nome: 'Q1 2024',
                    dataInicio: '2024-01-01',
                    dataFim: '2024-03-31'
                }
            }
        }
    ],
    paginacao: {
        paginaAtual: 1,
        totalPaginas: 1,
        totalItens: 1,
        itensPorPagina: 50,
        temProximaPagina: false,
        temPaginaAnterior: false
    }
};
(0, _globals.describe)('useLembretes', ()=>{
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
        // Mock inicial para useEffect
        mockFetch.mockResolvedValue({
            ok: true,
            json: async ()=>mockResultadoLembretes
        });
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.describe)('inicialização', ()=>{
        (0, _globals.it)('deve carregar lembretes na inicialização', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar o useEffect executar
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            (0, _globals.expect)(result.current.lembretes).toEqual(mockResultadoLembretes.dados);
            (0, _globals.expect)(result.current.erro).toBeNull();
            (0, _globals.expect)(mockFetch).toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('buscarLembretes', ()=>{
        (0, _globals.it)('deve buscar lembretes com sucesso', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            // Fazer nova busca
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            await (0, _react.act)(async ()=>{
                await result.current.buscarLembretes();
            });
            (0, _globals.expect)(result.current.lembretes).toEqual(mockResultadoLembretes.dados);
            (0, _globals.expect)(result.current.carregando).toBe(false);
            (0, _globals.expect)(result.current.erro).toBeNull();
        });
        (0, _globals.it)('deve lidar com erro na busca', async ()=>{
            const errorMessage = 'Erro ao buscar lembretes';
            // Forçar todas as chamadas a retornarem erro neste teste (evita corrida com StrictMode)
            mockFetch.mockImplementation(()=>Promise.resolve({
                    ok: false,
                    json: async ()=>({
                            erro: errorMessage
                        })
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguarda estado ser atualizado pelo fluxo de erro
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
                (0, _globals.expect)(result.current.erro).toBe(errorMessage);
            }, {
                timeout: 15000
            });
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro ao buscar lembretes',
                description: errorMessage,
                variant: 'destructive'
            });
            // Não afirmar contagem exata devido a possíveis chamadas duplicadas em StrictMode
            (0, _globals.expect)(mockFetch).toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('buscarLembrete', ()=>{
        (0, _globals.it)('deve buscar lembrete específico com sucesso', async ()=>{
            // Configurar mocks separadamente para evitar interferência e cobrir chamadas duplicadas
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            // Mock para buscarLembrete específico
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        dados: mockResultadoLembretes.dados[0]
                    })
            });
            let lembrete;
            await (0, _react.act)(async ()=>{
                lembrete = await result.current.buscarLembrete('1');
            });
            // Verifica se retorna o objeto direto
            (0, _globals.expect)(lembrete).toEqual(mockResultadoLembretes.dados[0]);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/lembretes/1');
        });
        (0, _globals.it)('deve lidar com erro ao buscar lembrete específico', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            const errorMessage = 'Lembrete não encontrado';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            let lembrete;
            await (0, _react.act)(async ()=>{
                lembrete = await result.current.buscarLembrete('999');
            });
            (0, _globals.expect)(lembrete).toBeNull();
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro ao buscar lembrete',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('criarLembrete', ()=>{
        (0, _globals.it)('deve criar lembrete com sucesso', async ()=>{
            const novoLembrete = {
                avaliacaoId: '1',
                usuarioId: '1',
                tipo: 'lembrete',
                dataEnvio: new Date().toISOString()
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        dados: {
                            ...novoLembrete,
                            id: '2'
                        }
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.criarLembrete(novoLembrete);
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Lembrete criado',
                description: 'Lembrete criado com sucesso'
            });
        });
        (0, _globals.it)('deve lidar com erro ao criar lembrete', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            const errorMessage = 'Erro ao criar lembrete';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const novoLembrete = {
                avaliacaoId: '1',
                usuarioId: '1',
                tipo: 'lembrete',
                dataEnvio: new Date().toISOString()
            };
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.criarLembrete(novoLembrete);
            });
            (0, _globals.expect)(sucesso).toBe(false);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro ao criar lembrete',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('atualizarLembrete', ()=>{
        (0, _globals.it)('deve atualizar lembrete com sucesso', async ()=>{
            const dadosAtualizacao = {
                dataEnvio: new Date().toISOString(),
                observacoes: 'Observação atualizada'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        dados: {
                            ...mockResultadoLembretes.dados[0],
                            ...dadosAtualizacao
                        }
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.atualizarLembrete('1', dadosAtualizacao);
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Lembrete atualizado',
                description: 'Lembrete atualizado com sucesso'
            });
        });
    });
    (0, _globals.describe)('removerLembrete', ()=>{
        (0, _globals.it)('deve remover lembrete com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.removerLembrete('1');
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Lembrete removido',
                description: 'Lembrete removido com sucesso'
            });
        });
    });
    (0, _globals.describe)('executarAcaoLembrete', ()=>{
        (0, _globals.it)('deve executar ação no lembrete com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        mensagem: 'Ação executada com sucesso'
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.executarAcaoLembrete('1', 'reenviar');
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Ação executada',
                description: 'Ação executada com sucesso'
            });
        });
    });
    (0, _globals.describe)('removerLembretesLote', ()=>{
        (0, _globals.it)('deve remover lembretes em lote com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        mensagem: 'Lembretes removidos com sucesso'
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.removerLembretesLote('limpeza', {
                    dias: 30
                });
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Lembretes removidos',
                description: 'Lembretes removidos com sucesso'
            });
        });
    });
    (0, _globals.describe)('estados', ()=>{
        (0, _globals.it)('deve gerenciar estado de carregamento corretamente', async ()=>{
            let resolvePromise;
            const promise = new Promise((resolve)=>{
                resolvePromise = resolve;
            });
            // Mock fetch para simular delay
            mockFetch.mockImplementationOnce(()=>promise);
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Inicialmente deve estar carregando (buscarLembretes é chamado no useEffect)
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(true);
            }, {
                timeout: 15000
            });
            // Resolve promise para finalizar carregamento
            resolvePromise({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            // Aguarda o carregamento terminar
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            }, {
                timeout: 15000
            });
        }, 20000);
        (0, _globals.it)('deve gerenciar paginação corretamente', async ()=>{
            const resultadoComPaginacao = {
                ...mockResultadoLembretes,
                paginacao: {
                    paginaAtual: 1,
                    totalPaginas: 3,
                    totalItens: 25,
                    itensPorPagina: 10
                }
            };
            // Mock dinâmico baseado na URL para ser resiliente a chamadas extras
            mockFetch.mockImplementation((input)=>{
                // Extrai a URL de forma robusta (suporta string, URL e Request)
                let urlStr;
                if (typeof input === 'string') {
                    urlStr = input;
                } else if (input instanceof URL) {
                    urlStr = input.toString();
                } else {
                    // Pode ser um Request-like com propriedade url
                    // @ts-ignore - ambiente de teste pode não ter tipo Request completo
                    urlStr = input?.url ?? String(input);
                }
                // Garante URL absoluta para usar URLSearchParams
                let paginaParam = 1;
                try {
                    const parsed = new URL(urlStr, 'http://localhost');
                    const p = parsed.searchParams.get('pagina');
                    paginaParam = p ? Number(p) : 1;
                } catch  {
                    // Se não conseguir parsear, mantém página 1
                    paginaParam = 1;
                }
                const resposta = {
                    ...resultadoComPaginacao,
                    paginacao: {
                        ...resultadoComPaginacao.paginacao,
                        paginaAtual: paginaParam
                    }
                };
                return Promise.resolve({
                    ok: true,
                    json: async ()=>resposta
                });
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguarda a páginação real ser aplicada após a busca inicial
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.paginacao.totalPaginas).toBe(3);
            }, {
                timeout: 15000
            });
            // Verifica estado inicial da paginação (após a busca)
            (0, _globals.expect)(result.current.paginacao.paginaAtual).toBe(1);
            (0, _globals.expect)(result.current.paginacao.totalPaginas).toBe(3);
            // Testa navegação para próxima página usando a API real do hook
            await (0, _react.act)(async ()=>{
                await result.current.buscarLembretes({
                    pagina: 2
                });
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.paginacao.paginaAtual).toBe(2);
            }, {
                timeout: 15000
            });
        }, 20000);
    });
});

//# sourceMappingURL=data:application/json;base64,