{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\__tests__\\use-lembretes.test.ts"],"sourcesContent":["import { renderHook, act, waitFor } from '@testing-library/react';\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { useLembretes } from '../use-lembretes';\n\n// Mock do hook useToast\nconst mockToast = jest.fn();\njest.mock('@/hooks/use-toast', () => ({\n  useToast: () => ({\n    toast: mockToast,\n  }),\n}));\n\n// Mock do fetch global\nconst mockFetch = jest.fn();\n(global as any).fetch = mockFetch;\n\n// Mock dos dados de teste\nconst mockResultadoLembretes = {\n  dados: [\n    {\n      id: '1',\n      avaliacaoId: '1',\n      usuarioId: '1',\n      tipo: 'lembrete',\n      dataEnvio: new Date().toISOString(),\n      enviado: false,\n      tentativas: 0,\n      ultimaTentativa: null,\n      erro: null,\n      criadoEm: new Date().toISOString(),\n      usuario: {\n        id: '1',\n        nome: 'João Silva',\n        email: 'joao@teste.com',\n      },\n      avaliacao: {\n        id: '1',\n        prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n        status: 'pendente',\n        avaliado: {\n          id: '1',\n          nome: 'João Silva',\n          email: 'joao@teste.com',\n        },\n        avaliador: {\n          id: '2',\n          nome: 'Maria Santos',\n          email: 'maria@teste.com',\n        },\n        periodo: {\n          id: '1',\n          nome: 'Q1 2024',\n          dataInicio: '2024-01-01',\n          dataFim: '2024-03-31',\n        },\n      },\n    },\n  ],\n  paginacao: {\n    paginaAtual: 1,\n    totalPaginas: 1,\n    totalItens: 1,\n    itensPorPagina: 50,\n    temProximaPagina: false,\n    temPaginaAnterior: false,\n  },\n};\n\ndescribe('useLembretes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Mock inicial para useEffect\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => mockResultadoLembretes,\n    });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('inicialização', () => {\n    it('deve carregar lembretes na inicialização', async () => {\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar o useEffect executar\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      expect(result.current.lembretes).toEqual(mockResultadoLembretes.dados);\n      expect(result.current.erro).toBeNull();\n      expect(mockFetch).toHaveBeenCalled();\n    });\n  });\n\n  describe('buscarLembretes', () => {\n    it('deve buscar lembretes com sucesso', async () => {\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      // Fazer nova busca\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResultadoLembretes,\n      });\n\n      await act(async () => {\n        await result.current.buscarLembretes();\n      });\n\n      expect(result.current.lembretes).toEqual(mockResultadoLembretes.dados);\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBeNull();\n    });\n\n    it('deve lidar com erro na busca', async () => {\n      const errorMessage = 'Erro ao buscar lembretes';\n\n      // Forçar todas as chamadas a retornarem erro neste teste (evita corrida com StrictMode)\n      mockFetch.mockImplementation(() => Promise.resolve({\n        ok: false,\n        json: async () => ({ erro: errorMessage }),\n      } as any));\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguarda estado ser atualizado pelo fluxo de erro\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n        expect(result.current.erro).toBe(errorMessage);\n      }, { timeout: 15000 });\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro ao buscar lembretes',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n      // Não afirmar contagem exata devido a possíveis chamadas duplicadas em StrictMode\n      expect(mockFetch).toHaveBeenCalled();\n    });\n  });\n\n  describe('buscarLembrete', () => {\n    it('deve buscar lembrete específico com sucesso', async () => {\n      // Configurar mocks separadamente para evitar interferência e cobrir chamadas duplicadas\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResultadoLembretes,\n      } as any);\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResultadoLembretes,\n      } as any);\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      // Mock para buscarLembrete específico\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ dados: mockResultadoLembretes.dados[0] }),\n      } as any);\n\n      let lembrete;\n      await act(async () => {\n        lembrete = await result.current.buscarLembrete('1');\n      });\n\n      // Verifica se retorna o objeto direto\n      expect(lembrete).toEqual(mockResultadoLembretes.dados[0]);\n      expect(mockFetch).toHaveBeenCalledWith('/api/lembretes/1');\n    });\n\n    it('deve lidar com erro ao buscar lembrete específico', async () => {\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      const errorMessage = 'Lembrete não encontrado';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      let lembrete;\n      await act(async () => {\n        lembrete = await result.current.buscarLembrete('999');\n      });\n\n      expect(lembrete).toBeNull();\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro ao buscar lembrete',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('criarLembrete', () => {\n    it('deve criar lembrete com sucesso', async () => {\n      const novoLembrete = {\n        avaliacaoId: '1',\n        usuarioId: '1',\n        tipo: 'lembrete' as const,\n        dataEnvio: new Date().toISOString(),\n      };\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ dados: { ...novoLembrete, id: '2' } }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.criarLembrete(novoLembrete);\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Lembrete criado',\n        description: 'Lembrete criado com sucesso',\n      });\n    });\n\n    it('deve lidar com erro ao criar lembrete', async () => {\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      const errorMessage = 'Erro ao criar lembrete';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const novoLembrete = {\n        avaliacaoId: '1',\n        usuarioId: '1',\n        tipo: 'lembrete' as const,\n        dataEnvio: new Date().toISOString(),\n      };\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.criarLembrete(novoLembrete);\n      });\n\n      expect(sucesso).toBe(false);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro ao criar lembrete',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('atualizarLembrete', () => {\n    it('deve atualizar lembrete com sucesso', async () => {\n      const dadosAtualizacao = {\n        dataEnvio: new Date().toISOString(),\n        observacoes: 'Observação atualizada',\n      };\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ dados: { ...mockResultadoLembretes.dados[0], ...dadosAtualizacao } }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.atualizarLembrete('1', dadosAtualizacao);\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Lembrete atualizado',\n        description: 'Lembrete atualizado com sucesso',\n      });\n    });\n  });\n\n  describe('removerLembrete', () => {\n    it('deve remover lembrete com sucesso', async () => {\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ success: true }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.removerLembrete('1');\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Lembrete removido',\n        description: 'Lembrete removido com sucesso',\n      });\n    });\n  });\n\n  describe('executarAcaoLembrete', () => {\n    it('deve executar ação no lembrete com sucesso', async () => {\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ mensagem: 'Ação executada com sucesso' }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.executarAcaoLembrete('1', 'reenviar');\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Ação executada',\n        description: 'Ação executada com sucesso',\n      });\n    });\n  });\n\n  describe('removerLembretesLote', () => {\n    it('deve remover lembretes em lote com sucesso', async () => {\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ mensagem: 'Lembretes removidos com sucesso' }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.removerLembretesLote('limpeza', { dias: 30 });\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Lembretes removidos',\n        description: 'Lembretes removidos com sucesso',\n      });\n    });\n  });\n\n  describe('estados', () => {\n    it('deve gerenciar estado de carregamento corretamente', async () => {\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n\n      // Mock fetch para simular delay\n      mockFetch.mockImplementationOnce(() => promise as any);\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Inicialmente deve estar carregando (buscarLembretes é chamado no useEffect)\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(true);\n      }, { timeout: 15000 });\n\n      // Resolve promise para finalizar carregamento\n      resolvePromise({\n        ok: true,\n        json: async () => mockResultadoLembretes\n      });\n\n      // Aguarda o carregamento terminar\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      }, { timeout: 15000 });\n    }, 20000);\n\n    it('deve gerenciar paginação corretamente', async () => {\n      const resultadoComPaginacao = {\n        ...mockResultadoLembretes,\n        paginacao: {\n          paginaAtual: 1,\n          totalPaginas: 3,\n          totalItens: 25,\n          itensPorPagina: 10\n        }\n      };\n\n      // Mock dinâmico baseado na URL para ser resiliente a chamadas extras\n      mockFetch.mockImplementation((input: RequestInfo | URL) => {\n        // Extrai a URL de forma robusta (suporta string, URL e Request)\n        let urlStr: string;\n        if (typeof input === 'string') {\n          urlStr = input;\n        } else if (input instanceof URL) {\n          urlStr = input.toString();\n        } else {\n          // Pode ser um Request-like com propriedade url\n          // @ts-ignore - ambiente de teste pode não ter tipo Request completo\n          urlStr = input?.url ?? String(input);\n        }\n\n        // Garante URL absoluta para usar URLSearchParams\n        let paginaParam = 1;\n        try {\n          const parsed = new URL(urlStr, 'http://localhost');\n          const p = parsed.searchParams.get('pagina');\n          paginaParam = p ? Number(p) : 1;\n        } catch {\n          // Se não conseguir parsear, mantém página 1\n          paginaParam = 1;\n        }\n\n        const resposta = {\n          ...resultadoComPaginacao,\n          paginacao: { ...resultadoComPaginacao.paginacao, paginaAtual: paginaParam }\n        };\n\n        return Promise.resolve({\n          ok: true,\n          json: async () => resposta\n        } as any);\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguarda a páginação real ser aplicada após a busca inicial\n      await waitFor(() => {\n        expect(result.current.paginacao.totalPaginas).toBe(3);\n      }, { timeout: 15000 });\n\n      // Verifica estado inicial da paginação (após a busca)\n      expect(result.current.paginacao.paginaAtual).toBe(1);\n      expect(result.current.paginacao.totalPaginas).toBe(3);\n\n      // Testa navegação para próxima página usando a API real do hook\n      await act(async () => {\n        await result.current.buscarLembretes({ pagina: 2 });\n      });\n\n      await waitFor(() => {\n        expect(result.current.paginacao.paginaAtual).toBe(2);\n      }, { timeout: 15000 });\n    }, 20000);\n  });\n});"],"names":["jest","mock","useToast","toast","mockToast","fn","mockFetch","global","fetch","mockResultadoLembretes","dados","id","avaliacaoId","usuarioId","tipo","dataEnvio","Date","toISOString","enviado","tentativas","ultimaTentativa","erro","criadoEm","usuario","nome","email","avaliacao","prazo","now","status","avaliado","avaliador","periodo","dataInicio","dataFim","paginacao","paginaAtual","totalPaginas","totalItens","itensPorPagina","temProximaPagina","temPaginaAnterior","describe","beforeEach","clearAllMocks","mockResolvedValue","ok","json","afterEach","resetAllMocks","it","result","renderHook","useLembretes","waitFor","expect","current","carregando","toBe","lembretes","toEqual","toBeNull","toHaveBeenCalled","mockResolvedValueOnce","act","buscarLembretes","errorMessage","mockImplementation","Promise","resolve","timeout","toHaveBeenCalledWith","title","description","variant","lembrete","buscarLembrete","mockRejectedValueOnce","Error","novoLembrete","sucesso","criarLembrete","dadosAtualizacao","observacoes","atualizarLembrete","success","removerLembrete","mensagem","executarAcaoLembrete","removerLembretesLote","dias","resolvePromise","promise","mockImplementationOnce","resultadoComPaginacao","input","urlStr","URL","toString","url","String","paginaParam","parsed","p","searchParams","get","Number","resposta","pagina"],"mappings":"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"}