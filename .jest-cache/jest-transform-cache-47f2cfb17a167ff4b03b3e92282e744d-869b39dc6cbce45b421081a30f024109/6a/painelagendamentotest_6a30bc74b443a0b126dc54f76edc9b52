954a5b33a4c3b081e6d807db0d88e377
"use strict";
// Mock dos hooks
jest.mock('../../../hooks/use-agendador-lembretes');
jest.mock('../../../hooks/use-toast');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _painelagendamento = require("../../lembretes/painel-agendamento");
const _useagendadorlembretes = require("../../../hooks/use-agendador-lembretes");
const _usetoast = require("../../../hooks/use-toast");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock das configurações de teste
const mockConfiguracoes = {
    id: '1',
    ativo: true,
    intervaloVerificacao: 60,
    horariosVerificacao: [
        '09:00',
        '14:00',
        '18:00'
    ],
    diasAntecedencia: {
        aviso: 3,
        urgente: 1,
        critico: 0
    },
    tiposNotificacao: {
        email: true,
        sistema: true,
        push: false
    },
    filtros: {
        apenasAtivos: true,
        ignorarFinsDeSemanaSemana: false,
        ignorarFeriados: false
    },
    configuracaoEmail: {
        remetente: 'sistema@empresa.com',
        assunto: 'Lembrete de Avaliação',
        template: 'default'
    },
    criadaEm: new Date().toISOString(),
    atualizadaEm: new Date().toISOString()
};
const mockStatus = {
    ativo: true,
    ultimaVerificacao: new Date().toISOString(),
    proximaVerificacao: new Date(Date.now() + 60 * 60 * 1000).toISOString(),
    lembretesPendentes: 5,
    erros: []
};
const mockEstatisticas = {
    totalLembretes: 25,
    lembretesPendentes: 5,
    lembretesEnviados: 15,
    lembretesFalharam: 2,
    lembretesReagendados: 3,
    porTipo: {
        aviso: 10,
        urgente: 8,
        critico: 7
    },
    porStatus: {
        pendente: 5,
        enviado: 15,
        falhou: 2,
        reagendado: 3
    },
    ultimosPeriodos: {
        hoje: 3,
        ontem: 5,
        ultimaSemana: 18,
        ultimoMes: 25
    }
};
const mockHookReturn = {
    configuracoes: mockConfiguracoes,
    status: mockStatus,
    estatisticas: mockEstatisticas,
    carregando: false,
    erro: null,
    buscarConfiguracoes: jest.fn(),
    atualizarConfiguracoes: jest.fn(),
    buscarStatus: jest.fn(),
    buscarEstatisticas: jest.fn(),
    iniciarAgendador: jest.fn(),
    pararAgendador: jest.fn(),
    forcarVerificacao: jest.fn(),
    limparLembretesPendentes: jest.fn(),
    resetarConfiguracao: jest.fn()
};
const mockToast = jest.fn();
(0, _globals.describe)('PainelAgendamento', ()=>{
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
        _useagendadorlembretes.useAgendadorLembretes.mockReturnValue(mockHookReturn);
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.describe)('Renderização', ()=>{
        (0, _globals.it)('deve renderizar painel de agendamento', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByText('Agendamento de Lembretes')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Status do Agendador')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Configurações')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Estatísticas')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir estado de carregamento', ()=>{
            _useagendadorlembretes.useAgendadorLembretes.mockReturnValue({
                ...mockHookReturn,
                carregando: true,
                configuracoes: null,
                status: null,
                estatisticas: null
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByText('Carregando...')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir erro quando houver falha', ()=>{
            const errorMessage = 'Erro ao carregar dados';
            _useagendadorlembretes.useAgendadorLembretes.mockReturnValue({
                ...mockHookReturn,
                erro: errorMessage,
                configuracoes: null
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByText(errorMessage)).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('Status do Agendador', ()=>{
        (0, _globals.it)('deve exibir status ativo', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByText('Ativo')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('5 lembretes pendentes')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir status inativo', ()=>{
            _useagendadorlembretes.useAgendadorLembretes.mockReturnValue({
                ...mockHookReturn,
                status: {
                    ...mockStatus,
                    ativo: false
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByText('Inativo')).toBeInTheDocument();
        });
        (0, _globals.it)('deve iniciar agendador', async ()=>{
            _useagendadorlembretes.useAgendadorLembretes.mockReturnValue({
                ...mockHookReturn,
                status: {
                    ...mockStatus,
                    ativo: false
                }
            });
            mockHookReturn.iniciarAgendador.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoIniciar = _react1.screen.getByText('Iniciar Agendador');
            _react1.fireEvent.click(botaoIniciar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.iniciarAgendador).toHaveBeenCalled();
            });
        });
        (0, _globals.it)('deve parar agendador', async ()=>{
            mockHookReturn.pararAgendador.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoParar = _react1.screen.getByText('Parar Agendador');
            _react1.fireEvent.click(botaoParar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.pararAgendador).toHaveBeenCalled();
            });
        });
        (0, _globals.it)('deve forçar verificação', async ()=>{
            mockHookReturn.forcarVerificacao.mockResolvedValueOnce({
                processados: 3
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoForcar = _react1.screen.getByText('Forçar Verificação');
            _react1.fireEvent.click(botaoForcar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.forcarVerificacao).toHaveBeenCalled();
            });
        });
        (0, _globals.it)('deve limpar lembretes pendentes', async ()=>{
            mockHookReturn.limparLembretesPendentes.mockResolvedValueOnce({
                removidos: 5
            });
            window.confirm = vi.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoLimpar = _react1.screen.getByText('Limpar Pendentes');
            _react1.fireEvent.click(botaoLimpar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.limparLembretesPendentes).toHaveBeenCalled();
            });
        });
        (0, _globals.it)('deve cancelar limpeza se usuário não confirmar', async ()=>{
            window.confirm = vi.fn(()=>false);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoLimpar = _react1.screen.getByText('Limpar Pendentes');
            _react1.fireEvent.click(botaoLimpar);
            (0, _globals.expect)(mockHookReturn.limparLembretesPendentes).not.toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('Configurações', ()=>{
        (0, _globals.it)('deve alterar ativação do agendador', async ()=>{
            mockHookReturn.atualizarConfiguracoes.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const switchAtivo = _react1.screen.getByLabelText('Ativar agendador');
            _react1.fireEvent.click(switchAtivo);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarConfiguracoes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ativo: false
                }));
            });
        });
        (0, _globals.it)('deve alterar intervalo de verificação', async ()=>{
            mockHookReturn.atualizarConfiguracoes.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const inputIntervalo = _react1.screen.getByLabelText('Intervalo de verificação (minutos)');
            _react1.fireEvent.change(inputIntervalo, {
                target: {
                    value: '30'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarConfiguracoes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    intervaloVerificacao: 30
                }));
            });
        });
        (0, _globals.it)('deve alterar horários de verificação', async ()=>{
            mockHookReturn.atualizarConfiguracoes.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const inputHorarios = _react1.screen.getByLabelText('Horários de verificação');
            _react1.fireEvent.change(inputHorarios, {
                target: {
                    value: '08:00,12:00,16:00,20:00'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarConfiguracoes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    horariosVerificacao: [
                        '08:00',
                        '12:00',
                        '16:00',
                        '20:00'
                    ]
                }));
            });
        });
        (0, _globals.it)('deve alterar dias de antecedência', async ()=>{
            mockHookReturn.atualizarConfiguracoes.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const inputAviso = _react1.screen.getByLabelText('Dias para aviso');
            _react1.fireEvent.change(inputAviso, {
                target: {
                    value: '5'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarConfiguracoes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    diasAntecedencia: _globals.expect.objectContaining({
                        aviso: 5
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar tipos de notificação', async ()=>{
            mockHookReturn.atualizarConfiguracoes.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const switchEmail = _react1.screen.getByLabelText('Notificação por e-mail');
            _react1.fireEvent.click(switchEmail);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarConfiguracoes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    tiposNotificacao: _globals.expect.objectContaining({
                        email: false
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar filtros', async ()=>{
            mockHookReturn.atualizarConfiguracoes.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const switchAtivos = _react1.screen.getByLabelText('Apenas usuários ativos');
            _react1.fireEvent.click(switchAtivos);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarConfiguracoes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    filtros: _globals.expect.objectContaining({
                        apenasAtivos: false
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar configuração de e-mail', async ()=>{
            mockHookReturn.atualizarConfiguracoes.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const inputRemetente = _react1.screen.getByLabelText('E-mail remetente');
            _react1.fireEvent.change(inputRemetente, {
                target: {
                    value: 'novo@empresa.com'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarConfiguracoes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    configuracaoEmail: _globals.expect.objectContaining({
                        remetente: 'novo@empresa.com'
                    })
                }));
            });
        });
        (0, _globals.it)('deve resetar configurações', async ()=>{
            mockHookReturn.resetarConfiguracao.mockResolvedValueOnce(true);
            window.confirm = vi.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoReset = _react1.screen.getByText('Restaurar Padrões');
            _react1.fireEvent.click(botaoReset);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.resetarConfiguracao).toHaveBeenCalled();
            });
        });
    });
    (0, _globals.describe)('Estatísticas', ()=>{
        (0, _globals.it)('deve exibir estatísticas gerais', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByText('25')).toBeInTheDocument(); // Total
            (0, _globals.expect)(_react1.screen.getByText('5')).toBeInTheDocument(); // Pendentes
            (0, _globals.expect)(_react1.screen.getByText('15')).toBeInTheDocument(); // Enviados
            (0, _globals.expect)(_react1.screen.getByText('2')).toBeInTheDocument(); // Falharam
        });
        (0, _globals.it)('deve exibir estatísticas por tipo', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByText('10')).toBeInTheDocument(); // Aviso
            (0, _globals.expect)(_react1.screen.getByText('8')).toBeInTheDocument(); // Urgente
            (0, _globals.expect)(_react1.screen.getByText('7')).toBeInTheDocument(); // Crítico
        });
        (0, _globals.it)('deve exibir estatísticas por período', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByText('3')).toBeInTheDocument(); // Hoje
            (0, _globals.expect)(_react1.screen.getByText('18')).toBeInTheDocument(); // Última semana
        });
        (0, _globals.it)('deve atualizar estatísticas', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoAtualizar = _react1.screen.getByText('Atualizar Estatísticas');
            _react1.fireEvent.click(botaoAtualizar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarEstatisticas).toHaveBeenCalled();
            });
        });
    });
    (0, _globals.describe)('Filtros de Estatísticas', ()=>{
        (0, _globals.it)('deve aplicar filtro por período', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const seletorPeriodo = _react1.screen.getByLabelText('Período');
            _react1.fireEvent.change(seletorPeriodo, {
                target: {
                    value: 'ultima_semana'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarEstatisticas).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    periodo: 'ultima_semana'
                }));
            });
        });
        (0, _globals.it)('deve aplicar filtro por tipo', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const seletorTipo = _react1.screen.getByLabelText('Tipo de lembrete');
            _react1.fireEvent.change(seletorTipo, {
                target: {
                    value: 'urgente'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarEstatisticas).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    tipo: 'urgente'
                }));
            });
        });
        (0, _globals.it)('deve aplicar filtro por status', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const seletorStatus = _react1.screen.getByLabelText('Status');
            _react1.fireEvent.change(seletorStatus, {
                target: {
                    value: 'enviado'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarEstatisticas).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    status: 'enviado'
                }));
            });
        });
        (0, _globals.it)('deve limpar filtros', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            // Aplicar filtros primeiro
            const seletorPeriodo = _react1.screen.getByLabelText('Período');
            _react1.fireEvent.change(seletorPeriodo, {
                target: {
                    value: 'ultima_semana'
                }
            });
            // Limpar filtros
            const botaoLimpar = _react1.screen.getByText('Limpar Filtros');
            _react1.fireEvent.click(botaoLimpar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarEstatisticas).toHaveBeenCalledWith({});
            });
        });
    });
    (0, _globals.describe)('Validações', ()=>{
        (0, _globals.it)('deve validar intervalo de verificação mínimo', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const inputIntervalo = _react1.screen.getByLabelText('Intervalo de verificação (minutos)');
            _react1.fireEvent.change(inputIntervalo, {
                target: {
                    value: '0'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    description: 'Intervalo deve ser maior que 0',
                    variant: 'destructive'
                }));
            });
        });
        (0, _globals.it)('deve validar formato de horários', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const inputHorarios = _react1.screen.getByLabelText('Horários de verificação');
            _react1.fireEvent.change(inputHorarios, {
                target: {
                    value: '25:00,invalid'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    description: _globals.expect.stringContaining('Formato de horário inválido'),
                    variant: 'destructive'
                }));
            });
        });
        (0, _globals.it)('deve validar e-mail remetente', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const inputRemetente = _react1.screen.getByLabelText('E-mail remetente');
            _react1.fireEvent.change(inputRemetente, {
                target: {
                    value: 'email-invalido'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    description: 'E-mail inválido',
                    variant: 'destructive'
                }));
            });
        });
    });
    (0, _globals.describe)('Estados de Erro', ()=>{
        (0, _globals.it)('deve exibir erro ao falhar ao atualizar configurações', async ()=>{
            mockHookReturn.atualizarConfiguracoes.mockRejectedValueOnce(new Error('Erro de rede'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const switchAtivo = _react1.screen.getByLabelText('Ativar agendador');
            _react1.fireEvent.click(switchAtivo);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
        (0, _globals.it)('deve exibir erro ao falhar ao iniciar agendador', async ()=>{
            _useagendadorlembretes.useAgendadorLembretes.mockReturnValue({
                ...mockHookReturn,
                status: {
                    ...mockStatus,
                    ativo: false
                }
            });
            mockHookReturn.iniciarAgendador.mockRejectedValueOnce(new Error('Erro de rede'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoIniciar = _react1.screen.getByText('Iniciar Agendador');
            _react1.fireEvent.click(botaoIniciar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
        (0, _globals.it)('deve exibir erro ao falhar ao forçar verificação', async ()=>{
            mockHookReturn.forcarVerificacao.mockRejectedValueOnce(new Error('Erro de rede'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoForcar = _react1.screen.getByText('Forçar Verificação');
            _react1.fireEvent.click(botaoForcar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
    });
    (0, _globals.describe)('Acessibilidade', ()=>{
        (0, _globals.it)('deve ter labels apropriados para screen readers', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByLabelText('Ativar agendador')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByLabelText('Intervalo de verificação (minutos)')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByLabelText('Horários de verificação')).toBeInTheDocument();
        });
        (0, _globals.it)('deve ter navegação por teclado funcional', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const switchAtivo = _react1.screen.getByLabelText('Ativar agendador');
            switchAtivo.focus();
            (0, _globals.expect)(document.activeElement).toBe(switchAtivo);
        });
        (0, _globals.it)('deve ter descrições adequadas para campos complexos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            (0, _globals.expect)(_react1.screen.getByText(/Configurações do agendador automático/)).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('Atualização Automática', ()=>{
        (0, _globals.it)('deve atualizar dados após ações', async ()=>{
            mockHookReturn.iniciarAgendador.mockResolvedValueOnce(true);
            _useagendadorlembretes.useAgendadorLembretes.mockReturnValue({
                ...mockHookReturn,
                status: {
                    ...mockStatus,
                    ativo: false
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_painelagendamento.PainelAgendamento, {}));
            const botaoIniciar = _react1.screen.getByText('Iniciar Agendador');
            _react1.fireEvent.click(botaoIniciar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarStatus).toHaveBeenCalledTimes(2); // Initial + after action
                (0, _globals.expect)(mockHookReturn.buscarEstatisticas).toHaveBeenCalledTimes(2);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,