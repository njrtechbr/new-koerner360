{"version":3,"names":["cov_2k3nryz9fp","actualCoverage","s","usePreferenciasNotificacao","f","preferencias","setPreferencias","_react","useState","carregando","setCarregando","erro","setErro","toast","_usetoast","useToast","buscarPreferencias","useCallback","response","fetch","data","json","ok","b","Error","error","mensagem","message","title","description","variant","atualizarPreferencias","dados","method","headers","body","JSON","stringify","resetarPreferencias","pausarNotificacoes","dataFim","dataInicio","motivo","toISOString","retomarNotificacoes","verificarNotificacoesPausadas","pausadas","console","useEffect"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-preferencias-notificacao.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  PreferenciasNotificacao, \n  PreferenciasNotificacaoInput \n} from '@/lib/types/preferencias-notificacao';\n\ninterface UsePreferenciasNotificacaoReturn {\n  // Estado\n  preferencias: PreferenciasNotificacao | null;\n  carregando: boolean;\n  erro: string | null;\n  \n  // Ações\n  buscarPreferencias: () => Promise<void>;\n  atualizarPreferencias: (dados: PreferenciasNotificacaoInput) => Promise<boolean>;\n  resetarPreferencias: () => Promise<boolean>;\n  pausarNotificacoes: (dataFim: Date, dataInicio?: Date, motivo?: string) => Promise<boolean>;\n  retomarNotificacoes: () => Promise<boolean>;\n  verificarNotificacoesPausadas: () => Promise<boolean>;\n}\n\nexport function usePreferenciasNotificacao(): UsePreferenciasNotificacaoReturn {\n  const [preferencias, setPreferencias] = useState<PreferenciasNotificacao | null>(null);\n  const [carregando, setCarregando] = useState(false);\n  const [erro, setErro] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  /**\n   * Busca as preferências do usuário\n   */\n  const buscarPreferencias = useCallback(async () => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const response = await fetch('/api/preferencias-notificacao');\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao buscar preferências');\n      }\n\n      setPreferencias(data.data);\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao carregar preferências: ${mensagem}`,\n        variant: 'destructive',\n      });\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Atualiza as preferências do usuário\n   */\n  const atualizarPreferencias = useCallback(async (\n    dados: PreferenciasNotificacaoInput\n  ): Promise<boolean> => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const response = await fetch('/api/preferencias-notificacao', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(dados),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao atualizar preferências');\n      }\n\n      setPreferencias(data.data);\n      toast({\n        title: 'Sucesso',\n        description: data.message || 'Preferências atualizadas com sucesso',\n      });\n\n      return true;\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao atualizar preferências: ${mensagem}`,\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Reseta as preferências para os valores padrão\n   */\n  const resetarPreferencias = useCallback(async (): Promise<boolean> => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const response = await fetch('/api/preferencias-notificacao', {\n        method: 'DELETE',\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao resetar preferências');\n      }\n\n      setPreferencias(data.data);\n      toast({\n        title: 'Sucesso',\n        description: data.message || 'Preferências resetadas com sucesso',\n      });\n\n      return true;\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao resetar preferências: ${mensagem}`,\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Pausa as notificações por um período\n   */\n  const pausarNotificacoes = useCallback(async (\n    dataFim: Date,\n    dataInicio?: Date,\n    motivo?: string\n  ): Promise<boolean> => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const body: any = {\n        dataFim: dataFim.toISOString(),\n      };\n\n      if (dataInicio) {\n        body.dataInicio = dataInicio.toISOString();\n      }\n\n      if (motivo) {\n        body.motivo = motivo;\n      }\n\n      const response = await fetch('/api/preferencias-notificacao/pausar', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao pausar notificações');\n      }\n\n      setPreferencias(data.data);\n      toast({\n        title: 'Sucesso',\n        description: data.message || 'Notificações pausadas com sucesso',\n      });\n\n      return true;\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao pausar notificações: ${mensagem}`,\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Retoma as notificações (remove pausa)\n   */\n  const retomarNotificacoes = useCallback(async (): Promise<boolean> => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const response = await fetch('/api/preferencias-notificacao/pausar', {\n        method: 'DELETE',\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao retomar notificações');\n      }\n\n      setPreferencias(data.data);\n      toast({\n        title: 'Sucesso',\n        description: data.message || 'Notificações retomadas com sucesso',\n      });\n\n      return true;\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao retomar notificações: ${mensagem}`,\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Verifica se as notificações estão pausadas\n   */\n  const verificarNotificacoesPausadas = useCallback(async (): Promise<boolean> => {\n    try {\n      const response = await fetch('/api/preferencias-notificacao/pausar');\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao verificar status');\n      }\n\n      return data.data.pausadas;\n    } catch (error) {\n      console.error('Erro ao verificar notificações pausadas:', error);\n      return false;\n    }\n  }, []);\n\n  // Carrega preferências ao montar o componente\n  useEffect(() => {\n    buscarPreferencias();\n  }, [buscarPreferencias]);\n\n  return {\n    // Estado\n    preferencias,\n    carregando,\n    erro,\n    \n    // Ações\n    buscarPreferencias,\n    atualizarPreferencias,\n    resetarPreferencias,\n    pausarNotificacoes,\n    retomarNotificacoes,\n    verificarNotificacoesPausadas,\n  };\n}"],"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","ignoreList":[]}