1195e010d23463ebb394b7f8c271c414
'use client';
"use strict";

/* istanbul ignore next */
function cov_1w4tjt31f3() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-toast.ts";
  var hash = "bde1bd9a7333a7ac49e3bc4fd0a2d1f8da1885b6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-toast.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 23
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 21
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 24
        }
      },
      "7": {
        start: {
          line: 23,
          column: 29
        },
        end: {
          line: 23,
          column: 72
        }
      },
      "8": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 51
        }
      },
      "9": {
        start: {
          line: 25,
          column: 39
        },
        end: {
          line: 25,
          column: 51
        }
      },
      "10": {
        start: {
          line: 26,
          column: 28
        },
        end: {
          line: 26,
          column: 41
        }
      },
      "11": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 27,
          column: 40
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 20
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 66
        }
      },
      "14": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "16": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 39,
          column: 10
        }
      },
      "18": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 53
        }
      },
      "19": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "20": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 30
        }
      },
      "21": {
        start: {
          line: 45,
          column: 17
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "22": {
        start: {
          line: 48,
          column: 32
        },
        end: {
          line: 48,
          column: 88
        }
      },
      "23": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "24": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "25": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 95
        }
      },
      "26": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "27": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 57
        }
      },
      "28": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 39
        }
      },
      "29": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 25
        }
      },
      "30": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "31": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 31
        }
      },
      "32": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 18
        }
      },
      "33": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 21
        }
      },
      "34": {
        start: {
          line: 66,
          column: 27
        },
        end: {
          line: 66,
          column: 34
        }
      },
      "35": {
        start: {
          line: 67,
          column: 20
        },
        end: {
          line: 72,
          column: 1
        }
      },
      "36": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "37": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 50
        }
      },
      "38": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 28
        }
      },
      "39": {
        start: {
          line: 78,
          column: 22
        },
        end: {
          line: 78,
          column: 31
        }
      },
      "40": {
        start: {
          line: 79,
          column: 25
        },
        end: {
          line: 91,
          column: 1
        }
      },
      "41": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "42": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "43": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 89,
          column: 26
        }
      },
      "44": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 38
        }
      },
      "45": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "46": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 90,
          column: 40
        }
      },
      "47": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 142,
          column: 1
        }
      },
      "48": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "49": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 101,
          column: 14
        }
      },
      "50": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "51": {
        start: {
          line: 105,
          column: 46
        },
        end: {
          line: 108,
          column: 25
        }
      },
      "52": {
        start: {
          line: 112,
          column: 36
        },
        end: {
          line: 112,
          column: 42
        }
      },
      "53": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 121,
          column: 17
        }
      },
      "54": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 116,
          column: 46
        }
      },
      "55": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 120,
          column: 23
        }
      },
      "56": {
        start: {
          line: 119,
          column: 24
        },
        end: {
          line: 119,
          column: 51
        }
      },
      "57": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 128,
          column: 18
        }
      },
      "58": {
        start: {
          line: 124,
          column: 50
        },
        end: {
          line: 127,
          column: 29
        }
      },
      "59": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "60": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 135,
          column: 18
        }
      },
      "61": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 140,
          column: 14
        }
      },
      "62": {
        start: {
          line: 139,
          column: 49
        },
        end: {
          line: 139,
          column: 72
        }
      },
      "63": {
        start: {
          line: 143,
          column: 18
        },
        end: {
          line: 143,
          column: 20
        }
      },
      "64": {
        start: {
          line: 144,
          column: 18
        },
        end: {
          line: 146,
          column: 1
        }
      },
      "65": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 148,
          column: 47
        }
      },
      "66": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 151,
          column: 7
        }
      },
      "67": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 30
        }
      },
      "68": {
        start: {
          line: 154,
          column: 15
        },
        end: {
          line: 154,
          column: 22
        }
      },
      "69": {
        start: {
          line: 155,
          column: 19
        },
        end: {
          line: 161,
          column: 10
        }
      },
      "70": {
        start: {
          line: 155,
          column: 28
        },
        end: {
          line: 161,
          column: 10
        }
      },
      "71": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 165,
          column: 10
        }
      },
      "72": {
        start: {
          line: 162,
          column: 24
        },
        end: {
          line: 165,
          column: 10
        }
      },
      "73": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 176,
          column: 7
        }
      },
      "74": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 37
        }
      },
      "75": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 37
        }
      },
      "76": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 181,
          column: 6
        }
      },
      "77": {
        start: {
          line: 184,
          column: 30
        },
        end: {
          line: 184,
          column: 58
        }
      },
      "78": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 195,
          column: 7
        }
      },
      "79": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 33
        }
      },
      "80": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 192,
          column: 10
        }
      },
      "81": {
        start: {
          line: 188,
          column: 26
        },
        end: {
          line: 188,
          column: 53
        }
      },
      "82": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "83": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 43
        }
      },
      "84": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 203,
          column: 6
        }
      },
      "85": {
        start: {
          line: 199,
          column: 28
        },
        end: {
          line: 202,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 19
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 17
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 24,
            column: 9
          },
          end: {
            line: 24,
            column: 33
          }
        },
        loc: {
          start: {
            line: 24,
            column: 47
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 28,
            column: 39
          },
          end: {
            line: 28,
            column: 40
          }
        },
        loc: {
          start: {
            line: 28,
            column: 61
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "6": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 32,
            column: 34
          }
        },
        loc: {
          start: {
            line: 32,
            column: 53
          },
          end: {
            line: 64,
            column: 1
          }
        },
        line: 32
      },
      "7": {
        name: "genId",
        decl: {
          start: {
            line: 74,
            column: 9
          },
          end: {
            line: 74,
            column: 14
          }
        },
        loc: {
          start: {
            line: 74,
            column: 17
          },
          end: {
            line: 77,
            column: 1
          }
        },
        line: 74
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 79,
            column: 25
          },
          end: {
            line: 79,
            column: 26
          }
        },
        loc: {
          start: {
            line: 79,
            column: 36
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 79
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 83,
            column: 31
          },
          end: {
            line: 83,
            column: 32
          }
        },
        loc: {
          start: {
            line: 83,
            column: 35
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 83
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        },
        loc: {
          start: {
            line: 92,
            column: 33
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 92
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 105,
            column: 41
          },
          end: {
            line: 105,
            column: 42
          }
        },
        loc: {
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 108,
            column: 25
          }
        },
        line: 105
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 118,
            column: 41
          },
          end: {
            line: 118,
            column: 42
          }
        },
        loc: {
          start: {
            line: 118,
            column: 50
          },
          end: {
            line: 120,
            column: 21
          }
        },
        line: 118
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 124,
            column: 45
          },
          end: {
            line: 124,
            column: 46
          }
        },
        loc: {
          start: {
            line: 124,
            column: 50
          },
          end: {
            line: 127,
            column: 29
          }
        },
        line: 124
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 139,
            column: 44
          },
          end: {
            line: 139,
            column: 45
          }
        },
        loc: {
          start: {
            line: 139,
            column: 49
          },
          end: {
            line: 139,
            column: 72
          }
        },
        line: 139
      },
      "15": {
        name: "dispatch",
        decl: {
          start: {
            line: 147,
            column: 9
          },
          end: {
            line: 147,
            column: 17
          }
        },
        loc: {
          start: {
            line: 147,
            column: 26
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 147
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 149,
            column: 22
          },
          end: {
            line: 149,
            column: 23
          }
        },
        loc: {
          start: {
            line: 149,
            column: 34
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 149
      },
      "17": {
        name: "toast",
        decl: {
          start: {
            line: 153,
            column: 9
          },
          end: {
            line: 153,
            column: 14
          }
        },
        loc: {
          start: {
            line: 153,
            column: 29
          },
          end: {
            line: 182,
            column: 1
          }
        },
        line: 153
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 155,
            column: 19
          },
          end: {
            line: 155,
            column: 20
          }
        },
        loc: {
          start: {
            line: 155,
            column: 28
          },
          end: {
            line: 161,
            column: 10
          }
        },
        line: 155
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 162,
            column: 20
          },
          end: {
            line: 162,
            column: 21
          }
        },
        loc: {
          start: {
            line: 162,
            column: 24
          },
          end: {
            line: 165,
            column: 10
          }
        },
        line: 162
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 172,
            column: 26
          },
          end: {
            line: 172,
            column: 27
          }
        },
        loc: {
          start: {
            line: 172,
            column: 34
          },
          end: {
            line: 174,
            column: 13
          }
        },
        line: 172
      },
      "21": {
        name: "useToast",
        decl: {
          start: {
            line: 183,
            column: 9
          },
          end: {
            line: 183,
            column: 17
          }
        },
        loc: {
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 204,
            column: 1
          }
        },
        line: 183
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 185,
            column: 21
          },
          end: {
            line: 185,
            column: 22
          }
        },
        loc: {
          start: {
            line: 185,
            column: 25
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 185
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 187,
            column: 15
          },
          end: {
            line: 187,
            column: 16
          }
        },
        loc: {
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 192,
            column: 9
          }
        },
        line: 187
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 199,
            column: 17
          },
          end: {
            line: 199,
            column: 18
          }
        },
        loc: {
          start: {
            line: 199,
            column: 28
          },
          end: {
            line: 202,
            column: 14
          }
        },
        line: 199
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 29
          },
          end: {
            line: 29,
            column: 45
          }
        }, {
          start: {
            line: 29,
            column: 48
          },
          end: {
            line: 29,
            column: 65
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 20
          }
        }, {
          start: {
            line: 33,
            column: 24
          },
          end: {
            line: 33,
            column: 27
          }
        }, {
          start: {
            line: 33,
            column: 31
          },
          end: {
            line: 33,
            column: 45
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "5": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 20
          }
        }, {
          start: {
            line: 36,
            column: 24
          },
          end: {
            line: 36,
            column: 47
          }
        }, {
          start: {
            line: 36,
            column: 51
          },
          end: {
            line: 36,
            column: 76
          }
        }],
        line: 36
      },
      "6": {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "7": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: 42,
            column: 17
          },
          end: {
            line: 42,
            column: 31
          }
        }],
        line: 42
      },
      "8": {
        loc: {
          start: {
            line: 48,
            column: 32
          },
          end: {
            line: 48,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 32
          },
          end: {
            line: 48,
            column: 53
          }
        }, {
          start: {
            line: 48,
            column: 57
          },
          end: {
            line: 48,
            column: 88
          }
        }],
        line: 48
      },
      "9": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "10": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 29
          }
        }, {
          start: {
            line: 50,
            column: 33
          },
          end: {
            line: 50,
            column: 79
          }
        }],
        line: 50
      },
      "11": {
        loc: {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 51,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 47
          },
          end: {
            line: 51,
            column: 88
          }
        }, {
          start: {
            line: 51,
            column: 91
          },
          end: {
            line: 51,
            column: 95
          }
        }],
        line: 51
      },
      "12": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: 54,
            column: 19
          },
          end: {
            line: 56,
            column: 13
          }
        }],
        line: 52
      },
      "13": {
        loc: {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 52,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 52,
            column: 20
          }
        }, {
          start: {
            line: 52,
            column: 25
          },
          end: {
            line: 52,
            column: 33
          }
        }, {
          start: {
            line: 52,
            column: 37
          },
          end: {
            line: 52,
            column: 45
          }
        }],
        line: 52
      },
      "14": {
        loc: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "15": {
        loc: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "16": {
        loc: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 101,
            column: 14
          }
        }, {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 109,
            column: 14
          }
        }, {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 140,
            column: 14
          }
        }],
        line: 93
      },
      "17": {
        loc: {
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 108,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 73
          },
          end: {
            line: 108,
            column: 21
          }
        }, {
          start: {
            line: 108,
            column: 24
          },
          end: {
            line: 108,
            column: 25
          }
        }],
        line: 105
      },
      "18": {
        loc: {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        }, {
          start: {
            line: 117,
            column: 23
          },
          end: {
            line: 121,
            column: 17
          }
        }],
        line: 115
      },
      "19": {
        loc: {
          start: {
            line: 124,
            column: 50
          },
          end: {
            line: 127,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 94
          },
          end: {
            line: 127,
            column: 25
          }
        }, {
          start: {
            line: 127,
            column: 28
          },
          end: {
            line: 127,
            column: 29
          }
        }],
        line: 124
      },
      "20": {
        loc: {
          start: {
            line: 124,
            column: 50
          },
          end: {
            line: 124,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 50
          },
          end: {
            line: 124,
            column: 66
          }
        }, {
          start: {
            line: 124,
            column: 70
          },
          end: {
            line: 124,
            column: 91
          }
        }],
        line: 124
      },
      "21": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "22": {
        loc: {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 173,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 173,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "23": {
        loc: {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-toast.ts"],
      sourcesContent: ["'use client';\n\nimport * as React from 'react';\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from '@/components/ui/toast';\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST'];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType['UPDATE_TOAST'];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType['DISMISS_TOAST'];\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: ActionType['REMOVE_TOAST'];\n      toastId?: ToasterToast['id'];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  };\n}\n\nexport { useToast, toast };"],
      names: ["reducer", "toast", "useToast", "TOAST_LIMIT", "TOAST_REMOVE_DELAY", "actionTypes", "ADD_TOAST", "UPDATE_TOAST", "DISMISS_TOAST", "REMOVE_TOAST", "count", "genId", "Number", "MAX_SAFE_INTEGER", "toString", "toastTimeouts", "Map", "addToRemoveQueue", "toastId", "has", "timeout", "setTimeout", "delete", "dispatch", "type", "set", "state", "action", "toasts", "slice", "map", "t", "id", "forEach", "undefined", "open", "filter", "listeners", "memoryState", "listener", "props", "update", "dismiss", "onOpenChange", "setState", "React", "useState", "useEffect", "push", "index", "indexOf", "splice"],
      mappings: "AAAA;;;;;;;;;;;;QA0EaA;eAAAA;;QAqHMC;eAAAA;;QAAVC;eAAAA;;;+DA7Lc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMvB,MAAMC,cAAc;AACpB,MAAMC,qBAAqB;AAS3B,MAAMC,cAAc;IAClBC,WAAW;IACXC,cAAc;IACdC,eAAe;IACfC,cAAc;AAChB;AAEA,IAAIC,QAAQ;AAEZ,SAASC;IACPD,QAAQ,AAACA,CAAAA,QAAQ,CAAA,IAAKE,OAAOC,gBAAgB;IAC7C,OAAOH,MAAMI,QAAQ;AACvB;AA0BA,MAAMC,gBAAgB,IAAIC;AAE1B,MAAMC,mBAAmB,CAACC;IACxB,IAAIH,cAAcI,GAAG,CAACD,UAAU;QAC9B;IACF;IAEA,MAAME,UAAUC,WAAW;QACzBN,cAAcO,MAAM,CAACJ;QACrBK,SAAS;YACPC,MAAM;YACNN,SAASA;QACX;IACF,GAAGd;IAEHW,cAAcU,GAAG,CAACP,SAASE;AAC7B;AAEO,MAAMpB,UAAU,CAAC0B,OAAcC;IACpC,OAAQA,OAAOH,IAAI;QACjB,KAAK;YACH,OAAO;gBACL,GAAGE,KAAK;gBACRE,QAAQ;oBAACD,OAAO1B,KAAK;uBAAKyB,MAAME,MAAM;iBAAC,CAACC,KAAK,CAAC,GAAG1B;YACnD;QAEF,KAAK;YACH,OAAO;gBACL,GAAGuB,KAAK;gBACRE,QAAQF,MAAME,MAAM,CAACE,GAAG,CAAC,CAACC,IACxBA,EAAEC,EAAE,KAAKL,OAAO1B,KAAK,CAAC+B,EAAE,GAAG;wBAAE,GAAGD,CAAC;wBAAE,GAAGJ,OAAO1B,KAAK;oBAAC,IAAI8B;YAE3D;QAEF,KAAK;YAAiB;gBACpB,MAAM,EAAEb,OAAO,EAAE,GAAGS;gBAEpB,2EAA2E;gBAC3E,uCAAuC;gBACvC,IAAIT,SAAS;oBACXD,iBAAiBC;gBACnB,OAAO;oBACLQ,MAAME,MAAM,CAACK,OAAO,CAAC,CAAChC;wBACpBgB,iBAAiBhB,MAAM+B,EAAE;oBAC3B;gBACF;gBAEA,OAAO;oBACL,GAAGN,KAAK;oBACRE,QAAQF,MAAME,MAAM,CAACE,GAAG,CAAC,CAACC,IACxBA,EAAEC,EAAE,KAAKd,WAAWA,YAAYgB,YAC5B;4BACE,GAAGH,CAAC;4BACJI,MAAM;wBACR,IACAJ;gBAER;YACF;QACA,KAAK;YACH,IAAIJ,OAAOT,OAAO,KAAKgB,WAAW;gBAChC,OAAO;oBACL,GAAGR,KAAK;oBACRE,QAAQ,EAAE;gBACZ;YACF;YACA,OAAO;gBACL,GAAGF,KAAK;gBACRE,QAAQF,MAAME,MAAM,CAACQ,MAAM,CAAC,CAACL,IAAMA,EAAEC,EAAE,KAAKL,OAAOT,OAAO;YAC5D;IACJ;AACF;AAEA,MAAMmB,YAA2C,EAAE;AAEnD,IAAIC,cAAqB;IAAEV,QAAQ,EAAE;AAAC;AAEtC,SAASL,SAASI,MAAc;IAC9BW,cAActC,QAAQsC,aAAaX;IACnCU,UAAUJ,OAAO,CAAC,CAACM;QACjBA,SAASD;IACX;AACF;AAIA,SAASrC,MAAM,EAAE,GAAGuC,OAAc;IAChC,MAAMR,KAAKrB;IAEX,MAAM8B,SAAS,CAACD,QACdjB,SAAS;YACPC,MAAM;YACNvB,OAAO;gBAAE,GAAGuC,KAAK;gBAAER;YAAG;QACxB;IACF,MAAMU,UAAU,IAAMnB,SAAS;YAAEC,MAAM;YAAiBN,SAASc;QAAG;IAEpET,SAAS;QACPC,MAAM;QACNvB,OAAO;YACL,GAAGuC,KAAK;YACRR;YACAG,MAAM;YACNQ,cAAc,CAACR;gBACb,IAAI,CAACA,MAAMO;YACb;QACF;IACF;IAEA,OAAO;QACLV,IAAIA;QACJU;QACAD;IACF;AACF;AAEA,SAASvC;IACP,MAAM,CAACwB,OAAOkB,SAAS,GAAGC,OAAMC,QAAQ,CAAQR;IAEhDO,OAAME,SAAS,CAAC;QACdV,UAAUW,IAAI,CAACJ;QACf,OAAO;YACL,MAAMK,QAAQZ,UAAUa,OAAO,CAACN;YAChC,IAAIK,QAAQ,CAAC,GAAG;gBACdZ,UAAUc,MAAM,CAACF,OAAO;YAC1B;QACF;IACF,GAAG;QAACvB;KAAM;IAEV,OAAO;QACL,GAAGA,KAAK;QACRzB;QACAyC,SAAS,CAACxB,UAAqBK,SAAS;gBAAEC,MAAM;gBAAiBN;YAAQ;IAC3E;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bde1bd9a7333a7ac49e3bc4fd0a2d1f8da1885b6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1w4tjt31f3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1w4tjt31f3();
cov_1w4tjt31f3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1w4tjt31f3().f[0]++;
  cov_1w4tjt31f3().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1w4tjt31f3().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1w4tjt31f3().s[3]++;
_export(exports, {
  get reducer() {
    /* istanbul ignore next */
    cov_1w4tjt31f3().f[1]++;
    cov_1w4tjt31f3().s[4]++;
    return reducer;
  },
  get toast() {
    /* istanbul ignore next */
    cov_1w4tjt31f3().f[2]++;
    cov_1w4tjt31f3().s[5]++;
    return toast;
  },
  get useToast() {
    /* istanbul ignore next */
    cov_1w4tjt31f3().f[3]++;
    cov_1w4tjt31f3().s[6]++;
    return useToast;
  }
});
const _react =
/* istanbul ignore next */
(/*#__PURE__*/cov_1w4tjt31f3().s[7]++, _interop_require_wildcard(require("react")));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_1w4tjt31f3().f[4]++;
  cov_1w4tjt31f3().s[8]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_1w4tjt31f3().b[0][0]++;
    cov_1w4tjt31f3().s[9]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1w4tjt31f3().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_1w4tjt31f3().s[10]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_1w4tjt31f3().s[11]++, new WeakMap());
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[12]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_1w4tjt31f3().f[5]++;
    cov_1w4tjt31f3().s[13]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_1w4tjt31f3().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_1w4tjt31f3().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_1w4tjt31f3().f[6]++;
  cov_1w4tjt31f3().s[14]++;
  if (
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_1w4tjt31f3().b[2][0]++;
    cov_1w4tjt31f3().s[15]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_1w4tjt31f3().b[2][1]++;
  }
  cov_1w4tjt31f3().s[16]++;
  if (
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_1w4tjt31f3().b[4][0]++;
    cov_1w4tjt31f3().s[17]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_1w4tjt31f3().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_1w4tjt31f3().s[18]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[19]++;
  if (
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_1w4tjt31f3().b[6][0]++;
    cov_1w4tjt31f3().s[20]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_1w4tjt31f3().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_1w4tjt31f3().s[21]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_1w4tjt31f3().s[22]++,
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_1w4tjt31f3().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[23]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_1w4tjt31f3().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1w4tjt31f3().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_1w4tjt31f3().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_1w4tjt31f3().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_1w4tjt31f3().s[25]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_1w4tjt31f3().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_1w4tjt31f3().b[11][1]++, null));
      /* istanbul ignore next */
      cov_1w4tjt31f3().s[26]++;
      if (
      /* istanbul ignore next */
      (cov_1w4tjt31f3().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_1w4tjt31f3().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_1w4tjt31f3().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_1w4tjt31f3().b[12][0]++;
        cov_1w4tjt31f3().s[27]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_1w4tjt31f3().b[12][1]++;
        cov_1w4tjt31f3().s[28]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_1w4tjt31f3().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[29]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[30]++;
  if (cache) {
    /* istanbul ignore next */
    cov_1w4tjt31f3().b[14][0]++;
    cov_1w4tjt31f3().s[31]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_1w4tjt31f3().b[14][1]++;
  }
  cov_1w4tjt31f3().s[32]++;
  return newObj;
}
const TOAST_LIMIT =
/* istanbul ignore next */
(cov_1w4tjt31f3().s[33]++, 1);
const TOAST_REMOVE_DELAY =
/* istanbul ignore next */
(cov_1w4tjt31f3().s[34]++, 1000000);
const actionTypes =
/* istanbul ignore next */
(cov_1w4tjt31f3().s[35]++, {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST'
});
let count =
/* istanbul ignore next */
(cov_1w4tjt31f3().s[36]++, 0);
function genId() {
  /* istanbul ignore next */
  cov_1w4tjt31f3().f[7]++;
  cov_1w4tjt31f3().s[37]++;
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[38]++;
  return count.toString();
}
const toastTimeouts =
/* istanbul ignore next */
(cov_1w4tjt31f3().s[39]++, new Map());
/* istanbul ignore next */
cov_1w4tjt31f3().s[40]++;
const addToRemoveQueue = toastId => {
  /* istanbul ignore next */
  cov_1w4tjt31f3().f[8]++;
  cov_1w4tjt31f3().s[41]++;
  if (toastTimeouts.has(toastId)) {
    /* istanbul ignore next */
    cov_1w4tjt31f3().b[15][0]++;
    cov_1w4tjt31f3().s[42]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_1w4tjt31f3().b[15][1]++;
  }
  const timeout =
  /* istanbul ignore next */
  (cov_1w4tjt31f3().s[43]++, setTimeout(() => {
    /* istanbul ignore next */
    cov_1w4tjt31f3().f[9]++;
    cov_1w4tjt31f3().s[44]++;
    toastTimeouts.delete(toastId);
    /* istanbul ignore next */
    cov_1w4tjt31f3().s[45]++;
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId
    });
  }, TOAST_REMOVE_DELAY));
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[46]++;
  toastTimeouts.set(toastId, timeout);
};
/* istanbul ignore next */
cov_1w4tjt31f3().s[47]++;
const reducer = (state, action) => {
  /* istanbul ignore next */
  cov_1w4tjt31f3().f[10]++;
  cov_1w4tjt31f3().s[48]++;
  switch (action.type) {
    case 'ADD_TOAST':
      /* istanbul ignore next */
      cov_1w4tjt31f3().b[16][0]++;
      cov_1w4tjt31f3().s[49]++;
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT)
      };
    case 'UPDATE_TOAST':
      /* istanbul ignore next */
      cov_1w4tjt31f3().b[16][1]++;
      cov_1w4tjt31f3().s[50]++;
      return {
        ...state,
        toasts: state.toasts.map(t => {
          /* istanbul ignore next */
          cov_1w4tjt31f3().f[11]++;
          cov_1w4tjt31f3().s[51]++;
          return t.id === action.toast.id ?
          /* istanbul ignore next */
          (cov_1w4tjt31f3().b[17][0]++, {
            ...t,
            ...action.toast
          }) :
          /* istanbul ignore next */
          (cov_1w4tjt31f3().b[17][1]++, t);
        })
      };
    case 'DISMISS_TOAST':
      /* istanbul ignore next */
      cov_1w4tjt31f3().b[16][2]++;
      {
        const {
          toastId
        } =
        /* istanbul ignore next */
        (cov_1w4tjt31f3().s[52]++, action);
        // ! Side effects ! - This could be extracted into a dismissToast() action,
        // but I'll keep it here for simplicity
        /* istanbul ignore next */
        cov_1w4tjt31f3().s[53]++;
        if (toastId) {
          /* istanbul ignore next */
          cov_1w4tjt31f3().b[18][0]++;
          cov_1w4tjt31f3().s[54]++;
          addToRemoveQueue(toastId);
        } else {
          /* istanbul ignore next */
          cov_1w4tjt31f3().b[18][1]++;
          cov_1w4tjt31f3().s[55]++;
          state.toasts.forEach(toast => {
            /* istanbul ignore next */
            cov_1w4tjt31f3().f[12]++;
            cov_1w4tjt31f3().s[56]++;
            addToRemoveQueue(toast.id);
          });
        }
        /* istanbul ignore next */
        cov_1w4tjt31f3().s[57]++;
        return {
          ...state,
          toasts: state.toasts.map(t => {
            /* istanbul ignore next */
            cov_1w4tjt31f3().f[13]++;
            cov_1w4tjt31f3().s[58]++;
            return /* istanbul ignore next */(cov_1w4tjt31f3().b[20][0]++, t.id === toastId) ||
            /* istanbul ignore next */
            (cov_1w4tjt31f3().b[20][1]++, toastId === undefined) ?
            /* istanbul ignore next */
            (cov_1w4tjt31f3().b[19][0]++, {
              ...t,
              open: false
            }) :
            /* istanbul ignore next */
            (cov_1w4tjt31f3().b[19][1]++, t);
          })
        };
      }
    case 'REMOVE_TOAST':
      /* istanbul ignore next */
      cov_1w4tjt31f3().b[16][3]++;
      cov_1w4tjt31f3().s[59]++;
      if (action.toastId === undefined) {
        /* istanbul ignore next */
        cov_1w4tjt31f3().b[21][0]++;
        cov_1w4tjt31f3().s[60]++;
        return {
          ...state,
          toasts: []
        };
      } else
      /* istanbul ignore next */
      {
        cov_1w4tjt31f3().b[21][1]++;
      }
      cov_1w4tjt31f3().s[61]++;
      return {
        ...state,
        toasts: state.toasts.filter(t => {
          /* istanbul ignore next */
          cov_1w4tjt31f3().f[14]++;
          cov_1w4tjt31f3().s[62]++;
          return t.id !== action.toastId;
        })
      };
  }
};
const listeners =
/* istanbul ignore next */
(cov_1w4tjt31f3().s[63]++, []);
let memoryState =
/* istanbul ignore next */
(cov_1w4tjt31f3().s[64]++, {
  toasts: []
});
function dispatch(action) {
  /* istanbul ignore next */
  cov_1w4tjt31f3().f[15]++;
  cov_1w4tjt31f3().s[65]++;
  memoryState = reducer(memoryState, action);
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[66]++;
  listeners.forEach(listener => {
    /* istanbul ignore next */
    cov_1w4tjt31f3().f[16]++;
    cov_1w4tjt31f3().s[67]++;
    listener(memoryState);
  });
}
function toast({
  ...props
}) {
  /* istanbul ignore next */
  cov_1w4tjt31f3().f[17]++;
  const id =
  /* istanbul ignore next */
  (cov_1w4tjt31f3().s[68]++, genId());
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[69]++;
  const update = props => {
    /* istanbul ignore next */
    cov_1w4tjt31f3().f[18]++;
    cov_1w4tjt31f3().s[70]++;
    return dispatch({
      type: 'UPDATE_TOAST',
      toast: {
        ...props,
        id
      }
    });
  };
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[71]++;
  const dismiss = () => {
    /* istanbul ignore next */
    cov_1w4tjt31f3().f[19]++;
    cov_1w4tjt31f3().s[72]++;
    return dispatch({
      type: 'DISMISS_TOAST',
      toastId: id
    });
  };
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[73]++;
  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: open => {
        /* istanbul ignore next */
        cov_1w4tjt31f3().f[20]++;
        cov_1w4tjt31f3().s[74]++;
        if (!open) {
          /* istanbul ignore next */
          cov_1w4tjt31f3().b[22][0]++;
          cov_1w4tjt31f3().s[75]++;
          dismiss();
        } else
        /* istanbul ignore next */
        {
          cov_1w4tjt31f3().b[22][1]++;
        }
      }
    }
  });
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[76]++;
  return {
    id: id,
    dismiss,
    update
  };
}
function useToast() {
  /* istanbul ignore next */
  cov_1w4tjt31f3().f[21]++;
  const [state, setState] =
  /* istanbul ignore next */
  (cov_1w4tjt31f3().s[77]++, _react.useState(memoryState));
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[78]++;
  _react.useEffect(() => {
    /* istanbul ignore next */
    cov_1w4tjt31f3().f[22]++;
    cov_1w4tjt31f3().s[79]++;
    listeners.push(setState);
    /* istanbul ignore next */
    cov_1w4tjt31f3().s[80]++;
    return () => {
      /* istanbul ignore next */
      cov_1w4tjt31f3().f[23]++;
      const index =
      /* istanbul ignore next */
      (cov_1w4tjt31f3().s[81]++, listeners.indexOf(setState));
      /* istanbul ignore next */
      cov_1w4tjt31f3().s[82]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_1w4tjt31f3().b[23][0]++;
        cov_1w4tjt31f3().s[83]++;
        listeners.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_1w4tjt31f3().b[23][1]++;
      }
    };
  }, [state]);
  /* istanbul ignore next */
  cov_1w4tjt31f3().s[84]++;
  return {
    ...state,
    toast,
    dismiss: toastId => {
      /* istanbul ignore next */
      cov_1w4tjt31f3().f[24]++;
      cov_1w4tjt31f3().s[85]++;
      return dispatch({
        type: 'DISMISS_TOAST',
        toastId
      });
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,