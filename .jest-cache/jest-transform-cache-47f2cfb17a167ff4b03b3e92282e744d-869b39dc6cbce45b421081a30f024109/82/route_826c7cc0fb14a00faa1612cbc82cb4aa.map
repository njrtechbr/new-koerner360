{"version":3,"names":["GET","cov_25va4lkym","f","s","POST","criarDocumentoSchema","_zod","z","object","tipo","enum","numero","string","min","max","dataEmissao","datetime","optional","orgaoEmissor","arquivo","url","nomeArquivo","tamanhoArquivo","number","tipoMime","observacoes","atualizarDocumentoSchema","request","params","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","_atendentes","MENSAGENS_ERRO_ATENDENTES","SEM_PERMISSAO","atendenteId","idAtendenteSchema","parse","id","atendente","_prisma","prisma","findUnique","where","select","usuarioId","ATENDENTE_NAO_ENCONTRADO","documentos","documentoAtendente","findMany","orderBy","criadoEm","map","doc","atualizadoEm","error","console","ZodError","DADOS_INVALIDOS","detalhes","errors","ERRO_INTERNO","dadosRequisicao","dadosValidados","documentoExistente","findFirst","novoDocumento","create","data","Date","historicoAlteracaoAtendente","descricao","valorNovo","JSON","stringify","documentoId","criadoPorId","mensagem","documento"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\documentos\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { z } from 'zod';\nimport {\n  idAtendenteSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n} from '@/lib/validations/atendentes';\nimport { ZodError } from 'zod';\nimport { saveFile, deleteFile, validateFile } from '@/lib/upload';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * Schema para validação de documento\n */\nconst criarDocumentoSchema = z.object({\n  tipo: z.enum([\n    'RG',\n    'CPF',\n    'CNH',\n    'CTPS',\n    'TITULO_ELEITOR',\n    'CERTIFICADO',\n    'DIPLOMA',\n    'OUTRO',\n  ]),\n  numero: z\n    .string()\n    .min(1, 'Número do documento é obrigatório')\n    .max(50, 'Número deve ter no máximo 50 caracteres'),\n  dataEmissao: z\n    .string()\n    .datetime('Data de emissão deve ser uma data válida')\n    .optional(),\n  orgaoEmissor: z\n    .string()\n    .max(100, 'Órgão emissor deve ter no máximo 100 caracteres')\n    .optional(),\n  arquivo: z.string().url('URL do arquivo deve ser válida').optional(),\n  nomeArquivo: z.string().optional(),\n  tamanhoArquivo: z.number().optional(),\n  tipoMime: z.string().optional(),\n  observacoes: z\n    .string()\n    .max(500, 'Observações devem ter no máximo 500 caracteres')\n    .optional(),\n});\n\n/**\n * Schema para atualização de documento\n */\nconst atualizarDocumentoSchema = z.object({\n  tipo: z\n    .enum([\n      'RG',\n      'CPF',\n      'CNH',\n      'CTPS',\n      'TITULO_ELEITOR',\n      'CERTIFICADO',\n      'DIPLOMA',\n      'OUTRO',\n    ])\n    .optional(),\n  numero: z\n    .string()\n    .min(1, 'Número do documento é obrigatório')\n    .max(50, 'Número deve ter no máximo 50 caracteres')\n    .optional(),\n  dataEmissao: z\n    .string()\n    .datetime('Data de emissão deve ser uma data válida')\n    .optional(),\n  orgaoEmissor: z\n    .string()\n    .max(100, 'Órgão emissor deve ter no máximo 100 caracteres')\n    .optional(),\n  arquivo: z.string().url('URL do arquivo deve ser válida').optional(),\n  nomeArquivo: z.string().optional(),\n  tamanhoArquivo: z.number().optional(),\n  tipoMime: z.string().optional(),\n  observacoes: z\n    .string()\n    .max(500, 'Observações devem ter no máximo 500 caracteres')\n    .optional(),\n});\n\n/**\n * GET /api/atendentes/[id]/documentos\n * Lista documentos de um atendente\n */\nexport async function GET(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões\n    if (!['ADMIN', 'GERENTE', 'ATENDENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Verificar se o atendente existe\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      select: { id: true, usuarioId: true },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o atendente pode ver apenas seus próprios documentos\n    if (\n      session.user.userType === 'ATENDENTE' &&\n      atendente.usuarioId !== session.user.id\n    ) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Buscar documentos\n    const documentos = await prisma.documentoAtendente.findMany({\n      where: { atendenteId },\n      orderBy: {\n        criadoEm: 'desc',\n      },\n    });\n\n    return NextResponse.json({\n      documentos: documentos.map(doc => ({\n        id: doc.id,\n        tipo: doc.tipo,\n        numero: doc.numero,\n        dataEmissao: doc.dataEmissao,\n        orgaoEmissor: doc.orgaoEmissor,\n        arquivo: doc.arquivo,\n        observacoes: doc.observacoes,\n        criadoEm: doc.criadoEm,\n        atualizadoEm: doc.atualizadoEm,\n      })),\n    });\n  } catch (error) {\n    console.error('Erro ao listar documentos do atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/atendentes/[id]/documentos\n * Adiciona um novo documento ao atendente\n */\nexport async function POST(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN e GERENTE podem adicionar documentos)\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Verificar se o atendente existe\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      select: { id: true },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Extrair dados do corpo da requisição\n    const dadosRequisicao = await request.json();\n\n    // Validar dados\n    const dadosValidados = criarDocumentoSchema.parse(dadosRequisicao);\n\n    // Verificar se já existe um documento do mesmo tipo e número\n    const documentoExistente = await prisma.documentoAtendente.findFirst({\n      where: {\n        atendenteId,\n        tipo: dadosValidados.tipo,\n        numero: dadosValidados.numero,\n      },\n    });\n\n    if (documentoExistente) {\n      return NextResponse.json(\n        {\n          erro: `Documento ${dadosValidados.tipo} com número ${dadosValidados.numero} já existe para este atendente`,\n        },\n        { status: 409 }\n      );\n    }\n\n    // Criar documento\n    const novoDocumento = await prisma.documentoAtendente.create({\n      data: {\n        atendenteId,\n        tipo: dadosValidados.tipo,\n        numero: dadosValidados.numero,\n        dataEmissao: dadosValidados.dataEmissao\n          ? new Date(dadosValidados.dataEmissao)\n          : null,\n        orgaoEmissor: dadosValidados.orgaoEmissor,\n        arquivo: dadosValidados.arquivo,\n        nomeArquivo: dadosValidados.nomeArquivo,\n        tamanhoArquivo: dadosValidados.tamanhoArquivo,\n        tipoMime: dadosValidados.tipoMime,\n        observacoes: dadosValidados.observacoes,\n      },\n    });\n\n    // Registrar no histórico de alterações\n    await prisma.historicoAlteracaoAtendente.create({\n      data: {\n        atendenteId,\n        tipo: 'UPLOAD_DOCUMENTO',\n        descricao: `Documento ${novoDocumento.tipo} foi adicionado`,\n        valorNovo: JSON.stringify({\n          documentoId: novoDocumento.id,\n          tipo: novoDocumento.tipo,\n          numero: novoDocumento.numero,\n        }),\n        criadoPorId: session.user.id,\n      },\n    });\n\n    return NextResponse.json(\n      {\n        mensagem: 'Documento adicionado com sucesso',\n        documento: {\n          id: novoDocumento.id,\n          tipo: novoDocumento.tipo,\n          numero: novoDocumento.numero,\n          dataEmissao: novoDocumento.dataEmissao,\n          orgaoEmissor: novoDocumento.orgaoEmissor,\n          arquivo: novoDocumento.arquivo,\n          observacoes: novoDocumento.observacoes,\n          criadoEm: novoDocumento.criadoEm,\n          atualizadoEm: novoDocumento.atualizadoEm,\n        },\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Erro ao adicionar documento do atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}