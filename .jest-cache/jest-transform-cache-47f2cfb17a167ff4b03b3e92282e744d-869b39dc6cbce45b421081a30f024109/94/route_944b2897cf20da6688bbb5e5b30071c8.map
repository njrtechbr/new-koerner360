{"version":3,"names":["DELETE","cov_7txbbm2yy","f","s","GET","PUT","request","params","session","_nextauth","getServerSession","_auth","authOptions","user","id","b","_server","NextResponse","json","error","status","resultadoValidacao","_avaliacoes","validarDados","idParamSchema","sucesso","details","erro","dados","usuario","_prisma","prisma","findUnique","where","select","userType","atendente","_periodostatusupdater","middlewareAtualizacaoStatus","avaliacao","include","avaliador","nome","email","avaliado","cargo","setor","departamento","periodo","descricao","dataInicio","dataFim","podeVer","_client","TipoUsuario","ADMIN","GESTOR","avaliadorId","avaliadoId","console","resultadoValidacaoId","body","validarBody","atualizarAvaliacaoSchema","dadosValidados","avaliacaoExistente","podeEditar","StatusAvaliacao","PENDENTE","ATENDENTE","agora","Date","avaliacaoAtualizada","update","data","atualizadoEm","delete","message"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\[id]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { TipoUsuario, StatusAvaliacao } from '@prisma/client';\nimport {\n  atualizarAvaliacaoSchema,\n  idParamSchema,\n  validarBody,\n  validarDados\n} from '@/lib/validations/avaliacoes';\nimport { middlewareAtualizacaoStatus } from '@/lib/utils/periodo-status-updater';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n// GET /api/avaliacoes/[id] - Buscar avaliação específica\nexport async function GET(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Validar parâmetro ID\n    const resultadoValidacao = validarDados(idParamSchema, params);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'ID inválido', \n          details: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n\n    const { id } = resultadoValidacao.dados;\n\n    // Verificar permissões do usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true, atendente: { select: { id: true } } }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos períodos antes de buscar avaliação\n    await middlewareAtualizacaoStatus();\n\n    // Buscar a avaliação\n    const avaliacao = await prisma.avaliacao.findUnique({\n      where: { id },\n      include: {\n        avaliador: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliado: {\n          select: {\n            id: true,\n            usuario: {\n              select: {\n                nome: true,\n                email: true\n              }\n            },\n            cargo: true,\n            setor: true,\n            departamento: true\n          }\n        },\n        periodo: {\n          select: {\n            id: true,\n            nome: true,\n            descricao: true,\n            dataInicio: true,\n            dataFim: true,\n            status: true\n          }\n        }\n      }\n    });\n\n    if (!avaliacao) {\n      return NextResponse.json(\n        { error: 'Avaliação não encontrada' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o usuário tem permissão para ver esta avaliação\n    const podeVer = \n      usuario.userType === TipoUsuario.ADMIN ||\n      usuario.userType === TipoUsuario.GESTOR ||\n      avaliacao.avaliadorId === session.user.id ||\n      (usuario.atendente && avaliacao.avaliadoId === usuario.atendente.id);\n\n    if (!podeVer) {\n      return NextResponse.json(\n        { error: 'Sem permissão para visualizar esta avaliação' },\n        { status: 403 }\n      );\n    }\n\n    return NextResponse.json(avaliacao);\n\n  } catch (error) {\n    console.error('Erro ao buscar avaliação:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/avaliacoes/[id] - Atualizar avaliação\nexport async function PUT(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Validar parâmetro ID\n    const resultadoValidacaoId = validarDados(idParamSchema, params);\n    if (!resultadoValidacaoId.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'ID inválido', \n          details: resultadoValidacaoId.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n\n    const { id } = resultadoValidacaoId.dados;\n    const body = await request.json();\n    \n    // Validar dados de atualização\n    const resultadoValidacao = validarBody(atualizarAvaliacaoSchema, body);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'Dados inválidos', \n          details: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const dadosValidados = resultadoValidacao.dados;\n\n    // Atualizar automaticamente os status dos períodos antes de verificar avaliação\n    await middlewareAtualizacaoStatus();\n\n    // Verificar se a avaliação existe\n    const avaliacaoExistente = await prisma.avaliacao.findUnique({\n      where: { id },\n      include: {\n        periodo: {\n          select: {\n            status: true,\n            dataInicio: true,\n            dataFim: true\n          }\n        }\n      }\n    });\n\n    if (!avaliacaoExistente) {\n      return NextResponse.json(\n        { error: 'Avaliação não encontrada' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar permissões do usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o usuário tem permissão para editar esta avaliação\n    const podeEditar = \n      usuario.userType === TipoUsuario.ADMIN ||\n      usuario.userType === TipoUsuario.GESTOR ||\n      (avaliacaoExistente.avaliadorId === session.user.id && avaliacaoExistente.status === StatusAvaliacao.PENDENTE);\n\n    if (!podeEditar) {\n      return NextResponse.json(\n        { error: 'Sem permissão para editar esta avaliação' },\n        { status: 403 }\n      );\n    }\n\n    // Verificar se o período ainda está ativo (para avaliadores comuns)\n    if (usuario.userType === TipoUsuario.ATENDENTE) {\n      if (avaliacaoExistente.periodo.status !== 'ATIVO') {\n        return NextResponse.json(\n          { error: 'Período de avaliação não está mais ativo' },\n          { status: 400 }\n        );\n      }\n\n      const agora = new Date();\n      if (agora < avaliacaoExistente.periodo.dataInicio || agora > avaliacaoExistente.periodo.dataFim) {\n        return NextResponse.json(\n          { error: 'Fora do período de avaliação' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Atualizar a avaliação\n    const avaliacaoAtualizada = await prisma.avaliacao.update({\n      where: { id },\n      data: {\n        ...dadosValidados,\n        atualizadoEm: new Date()\n      },\n      include: {\n        avaliador: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliado: {\n          select: {\n            id: true,\n            usuario: {\n              select: {\n                nome: true,\n                email: true\n              }\n            },\n            cargo: true,\n            setor: true\n          }\n        },\n        periodo: {\n          select: {\n            id: true,\n            nome: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json(avaliacaoAtualizada);\n\n  } catch (error) {\n    console.error('Erro ao atualizar avaliação:', error);\n    \n\n\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/avaliacoes/[id] - Deletar avaliação\nexport async function DELETE(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Validar parâmetro ID\n    const resultadoValidacao = validarDados(idParamSchema, params);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'ID inválido', \n          details: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n\n    const { id } = resultadoValidacao.dados;\n\n    // Verificar permissões do usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN e GESTOR podem deletar avaliações\n    if (usuario.userType !== TipoUsuario.ADMIN && usuario.userType !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { error: 'Sem permissão para deletar avaliações' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos períodos antes de deletar avaliação\n    await middlewareAtualizacaoStatus();\n\n    // Verificar se a avaliação existe\n    const avaliacaoExistente = await prisma.avaliacao.findUnique({\n      where: { id },\n      select: { id: true }\n    });\n\n    if (!avaliacaoExistente) {\n      return NextResponse.json(\n        { error: 'Avaliação não encontrada' },\n        { status: 404 }\n      );\n    }\n\n    // Deletar a avaliação\n    await prisma.avaliacao.delete({\n      where: { id }\n    });\n\n    return NextResponse.json(\n      { message: 'Avaliação deletada com sucesso' },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('Erro ao deletar avaliação:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}