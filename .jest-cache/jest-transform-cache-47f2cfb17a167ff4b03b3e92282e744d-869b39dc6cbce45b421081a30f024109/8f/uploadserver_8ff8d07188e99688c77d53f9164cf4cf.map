{"version":3,"names":["UPLOAD_CONFIG","cov_1uh46hctoo","f","s","cleanupTempFiles","deleteFile","fileExists","getFileInfo","listFiles","saveFile","validateFile","MAX_FILE_SIZE","DOCUMENT","IMAGE","VIDEO","AUDIO","ALLOWED_TYPES","UPLOAD_DIRS","DOCUMENTS","IMAGES","VIDEOS","AUDIOS","TEMP","file","tipoEsperado","tipo","b","includes","type","valido","erro","size","maxSizeMB","error","Error","message","subdiretorio","validacao","sucesso","fileId","_crypto","randomUUID","extensao","name","split","pop","nomeArquivo","diretorioBase","diretorioCompleto","_path","join","process","cwd","_promises","mkdir","recursive","caminhoArquivo","arrayBuffer","buffer","Buffer","from","writeFile","urlPublica","arquivo","id","nome","nomeOriginal","tamanho","caminho","url","access","_fs","constants","F_OK","unlink","code","absolutePath","stats","Promise","resolve","then","_interop_require_wildcard","require","fs","stat","existe","criadoEm","birthtime","modificadoEm","mtime","ehArquivo","isFile","ehDiretorio","isDirectory","diretorio","readdir","items","arquivos","item","itemPath","push","idadeMaximaHoras","tempDir","agora","Date","idadeMaximaMs","removidos","idade","getTime"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\upload-server.ts"],"sourcesContent":["import { writeFile, mkdir, unlink, access } from 'fs/promises';\nimport { join } from 'path';\nimport { randomUUID } from 'crypto';\nimport { constants } from 'fs';\n\n// Configurações de upload\nexport const UPLOAD_CONFIG = {\n  // Tamanhos máximos em bytes\n  MAX_FILE_SIZE: {\n    DOCUMENT: 10 * 1024 * 1024, // 10MB para documentos\n    IMAGE: 5 * 1024 * 1024, // 5MB para imagens\n    VIDEO: 50 * 1024 * 1024, // 50MB para vídeos\n    AUDIO: 20 * 1024 * 1024, // 20MB para áudios\n  },\n\n  // Tipos de arquivo permitidos\n  ALLOWED_TYPES: {\n    DOCUMENT: [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'text/plain',\n      'text/csv',\n    ],\n    IMAGE: [\n      'image/jpeg',\n      'image/png',\n      'image/gif',\n      'image/webp',\n      'image/svg+xml',\n    ],\n    VIDEO: ['video/mp4', 'video/mpeg', 'video/quicktime', 'video/x-msvideo'],\n    AUDIO: ['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp4'],\n  },\n\n  // Diretórios de upload\n  UPLOAD_DIRS: {\n    DOCUMENTS: 'uploads/documents',\n    IMAGES: 'uploads/images',\n    VIDEOS: 'uploads/videos',\n    AUDIOS: 'uploads/audios',\n    TEMP: 'uploads/temp',\n  },\n};\n\n// Tipos de arquivo\nexport type TipoArquivo = 'DOCUMENT' | 'IMAGE' | 'VIDEO' | 'AUDIO';\n\n// Interface para resultado de upload\nexport interface ResultadoUpload {\n  sucesso: boolean;\n  arquivo?: {\n    id: string;\n    nome: string;\n    nomeOriginal: string;\n    tamanho: number;\n    tipo: string;\n    caminho: string;\n    url: string;\n  };\n  erro?: string;\n}\n\n// Interface para validação de arquivo\nexport interface ResultadoValidacao {\n  valido: boolean;\n  erro?: string;\n  tipo?: TipoArquivo;\n}\n\n/**\n * Valida um arquivo baseado no tipo e configurações\n */\nexport function validateFile(\n  file: File,\n  tipoEsperado?: TipoArquivo\n): ResultadoValidacao {\n  try {\n    // Determinar tipo do arquivo\n    let tipo: TipoArquivo;\n\n    if (tipoEsperado) {\n      tipo = tipoEsperado;\n    } else {\n      // Auto-detectar tipo baseado no MIME type\n      if (UPLOAD_CONFIG.ALLOWED_TYPES.DOCUMENT.includes(file.type)) {\n        tipo = 'DOCUMENT';\n      } else if (UPLOAD_CONFIG.ALLOWED_TYPES.IMAGE.includes(file.type)) {\n        tipo = 'IMAGE';\n      } else if (UPLOAD_CONFIG.ALLOWED_TYPES.VIDEO.includes(file.type)) {\n        tipo = 'VIDEO';\n      } else if (UPLOAD_CONFIG.ALLOWED_TYPES.AUDIO.includes(file.type)) {\n        tipo = 'AUDIO';\n      } else {\n        return {\n          valido: false,\n          erro: `Tipo de arquivo não suportado: ${file.type}`,\n        };\n      }\n    }\n\n    // Verificar se o tipo MIME é permitido\n    if (!UPLOAD_CONFIG.ALLOWED_TYPES[tipo].includes(file.type)) {\n      return {\n        valido: false,\n        erro: `Tipo de arquivo não permitido para categoria ${tipo}: ${file.type}`,\n      };\n    }\n\n    // Verificar tamanho do arquivo\n    if (file.size > UPLOAD_CONFIG.MAX_FILE_SIZE[tipo]) {\n      const maxSizeMB = UPLOAD_CONFIG.MAX_FILE_SIZE[tipo] / (1024 * 1024);\n      return {\n        valido: false,\n        erro: `Arquivo muito grande. Tamanho máximo permitido: ${maxSizeMB}MB`,\n      };\n    }\n\n    // Verificar se o arquivo não está vazio\n    if (file.size === 0) {\n      return {\n        valido: false,\n        erro: 'Arquivo está vazio',\n      };\n    }\n\n    return {\n      valido: true,\n      tipo,\n    };\n  } catch (error) {\n    return {\n      valido: false,\n      erro: `Erro ao validar arquivo: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n    };\n  }\n}\n\n/**\n * Salva um arquivo no sistema de arquivos\n */\nexport async function saveFile(\n  file: File,\n  tipo: TipoArquivo,\n  subdiretorio?: string\n): Promise<ResultadoUpload> {\n  try {\n    // Validar arquivo\n    const validacao = validateFile(file, tipo);\n    if (!validacao.valido) {\n      return {\n        sucesso: false,\n        erro: validacao.erro,\n      };\n    }\n\n    // Gerar ID único para o arquivo\n    const fileId = randomUUID();\n\n    // Obter extensão do arquivo\n    const extensao = file.name.split('.').pop() || '';\n\n    // Gerar nome único para o arquivo\n    const nomeArquivo = `${fileId}.${extensao}`;\n\n    // Determinar diretório de destino\n    let diretorioBase: string;\n    switch (tipo) {\n      case 'DOCUMENT':\n        diretorioBase = UPLOAD_CONFIG.UPLOAD_DIRS.DOCUMENTS;\n        break;\n      case 'IMAGE':\n        diretorioBase = UPLOAD_CONFIG.UPLOAD_DIRS.IMAGES;\n        break;\n      case 'VIDEO':\n        diretorioBase = UPLOAD_CONFIG.UPLOAD_DIRS.VIDEOS;\n        break;\n      case 'AUDIO':\n        diretorioBase = UPLOAD_CONFIG.UPLOAD_DIRS.AUDIOS;\n        break;\n      default:\n        diretorioBase = UPLOAD_CONFIG.UPLOAD_DIRS.TEMP;\n    }\n\n    // Adicionar subdiretório se especificado\n    const diretorioCompleto = subdiretorio\n      ? join(process.cwd(), 'public', diretorioBase, subdiretorio)\n      : join(process.cwd(), 'public', diretorioBase);\n\n    // Criar diretório se não existir\n    await mkdir(diretorioCompleto, { recursive: true });\n\n    // Caminho completo do arquivo\n    const caminhoArquivo = join(diretorioCompleto, nomeArquivo);\n\n    // Converter File para Buffer\n    const arrayBuffer = await file.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n\n    // Salvar arquivo\n    await writeFile(caminhoArquivo, buffer);\n\n    // Gerar URL pública\n    const urlPublica = subdiretorio\n      ? `/${diretorioBase}/${subdiretorio}/${nomeArquivo}`\n      : `/${diretorioBase}/${nomeArquivo}`;\n\n    return {\n      sucesso: true,\n      arquivo: {\n        id: fileId,\n        nome: nomeArquivo,\n        nomeOriginal: file.name,\n        tamanho: file.size,\n        tipo: file.type,\n        caminho: caminhoArquivo,\n        url: urlPublica,\n      },\n    };\n  } catch (error) {\n    return {\n      sucesso: false,\n      erro: `Erro ao salvar arquivo: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n    };\n  }\n}\n\n/**\n * Remove um arquivo do sistema de arquivos\n */\nexport async function deleteFile(\n  caminho: string\n): Promise<{ sucesso: boolean; erro?: string }> {\n  try {\n    // Verificar se o arquivo existe\n    await access(caminho, constants.F_OK);\n\n    // Remover arquivo\n    await unlink(caminho);\n\n    return { sucesso: true };\n  } catch (error) {\n    if (error instanceof Error && 'code' in error && error.code === 'ENOENT') {\n      // Arquivo não existe, considerar como sucesso\n      return { sucesso: true };\n    }\n\n    return {\n      sucesso: false,\n      erro: `Erro ao remover arquivo: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n    };\n  }\n}\n\n/**\n * Verifica se um arquivo existe\n */\nexport async function fileExists(caminho: string): Promise<boolean> {\n  try {\n    await access(caminho, constants.F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Obtém informações de um arquivo\n */\nexport async function getFileInfo(caminho: string) {\n  try {\n    const absolutePath = join(process.cwd(), 'public', caminho);\n    const stats = await import('fs/promises').then(fs => fs.stat(absolutePath));\n\n    return {\n      existe: true,\n      tamanho: stats.size,\n      criadoEm: stats.birthtime,\n      modificadoEm: stats.mtime,\n      ehArquivo: stats.isFile(),\n      ehDiretorio: stats.isDirectory(),\n    };\n  } catch {\n    return {\n      existe: false,\n    };\n  }\n}\n\n/**\n * Lista arquivos em um diretório\n */\nexport async function listFiles(diretorio: string) {\n  try {\n    const absolutePath = join(process.cwd(), 'public', diretorio);\n    const { readdir, stat } = await import('fs/promises');\n\n    const items = await readdir(absolutePath);\n    const arquivos = [];\n\n    for (const item of items) {\n      const itemPath = join(absolutePath, item);\n      const stats = await stat(itemPath);\n\n      if (stats.isFile()) {\n        arquivos.push({\n          nome: item,\n          tamanho: stats.size,\n          criadoEm: stats.birthtime,\n          modificadoEm: stats.mtime,\n          caminho: join(diretorio, item),\n        });\n      }\n    }\n\n    return {\n      sucesso: true,\n      arquivos,\n    };\n  } catch (error) {\n    return {\n      sucesso: false,\n      erro: `Erro ao listar arquivos: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n      arquivos: [],\n    };\n  }\n}\n\n/**\n * Limpa arquivos temporários antigos\n */\nexport async function cleanupTempFiles(idadeMaximaHoras: number = 24) {\n  try {\n    const tempDir = join(\n      process.cwd(),\n      'public',\n      UPLOAD_CONFIG.UPLOAD_DIRS.TEMP\n    );\n    const { readdir, stat, unlink } = await import('fs/promises');\n\n    const agora = new Date();\n    const idadeMaximaMs = idadeMaximaHoras * 60 * 60 * 1000;\n\n    const items = await readdir(tempDir);\n    let removidos = 0;\n\n    for (const item of items) {\n      const itemPath = join(tempDir, item);\n      const stats = await stat(itemPath);\n\n      if (stats.isFile()) {\n        const idade = agora.getTime() - stats.mtime.getTime();\n\n        if (idade > idadeMaximaMs) {\n          await unlink(itemPath);\n          removidos++;\n        }\n      }\n    }\n\n    return {\n      sucesso: true,\n      removidos,\n    };\n  } catch (error) {\n    return {\n      sucesso: false,\n      erro: `Erro ao limpar arquivos temporários: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n      removidos: 0,\n    };\n  }\n}\n"],"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","ignoreList":[]}