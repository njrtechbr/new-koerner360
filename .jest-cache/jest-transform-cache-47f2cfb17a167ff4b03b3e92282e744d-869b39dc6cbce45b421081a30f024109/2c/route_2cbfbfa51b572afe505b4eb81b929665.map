{"version":3,"names":["GET","cov_27d08n9r2k","f","s","POST","comparativoSchema","_zod","z","object","filtros","periodoIds","array","string","optional","atendenteIds","setores","departamentos","dataInicio","transform","str","b","Date","undefined","dataFim","notaMinima","number","min","max","notaMaxima","periodos","id","nome","request","session","_nextauth","getServerSession","_auth","authOptions","_server","NextResponse","json","error","status","includes","user","userType","body","validacao","safeParse","success","details","errors","data","i","length","j","periodo1","periodo2","comparativo","_metricasavaliacoes","gerarComparativoTemporal","message","meta","totalPeriodos","map","p","toISOString","console","searchParams","URL","url","periodo1Id","get","periodo2Id"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\metricas\\comparativo\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { gerarComparativoTemporal, FiltrosMetricas } from '@/lib/utils/metricas-avaliacoes';\nimport { z } from 'zod';\n\n// Schema de validação para os filtros e parâmetros\nconst comparativoSchema = z.object({\n  filtros: z.object({\n    periodoIds: z.array(z.string()).optional(),\n    atendenteIds: z.array(z.string()).optional(),\n    setores: z.array(z.string()).optional(),\n    departamentos: z.array(z.string()).optional(),\n    dataInicio: z.string().transform(str => str ? new Date(str) : undefined).optional(),\n    dataFim: z.string().transform(str => str ? new Date(str) : undefined).optional(),\n    notaMinima: z.number().min(1).max(5).optional(),\n    notaMaxima: z.number().min(1).max(5).optional()\n  }).optional(),\n  periodos: z.array(z.object({\n    id: z.string(),\n    nome: z.string(),\n    dataInicio: z.string().transform(str => new Date(str)),\n    dataFim: z.string().transform(str => new Date(str))\n  })).min(2, 'É necessário pelo menos 2 períodos para comparação')\n});\n\n/**\n * POST /api/avaliacoes/metricas/comparativo\n * Gera comparativo temporal entre diferentes períodos\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN e GESTOR podem acessar métricas)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { error: 'Acesso negado. Apenas administradores e gestores podem acessar métricas.' },\n        { status: 403 }\n      );\n    }\n\n    // Validar dados da requisição\n    const body = await request.json();\n    const validacao = comparativoSchema.safeParse(body);\n    \n    if (!validacao.success) {\n      return NextResponse.json(\n        { \n          error: 'Dados inválidos',\n          details: validacao.error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    const { filtros = {}, periodos } = validacao.data;\n\n    // Validar se os períodos não se sobrepõem\n    for (let i = 0; i < periodos.length - 1; i++) {\n      for (let j = i + 1; j < periodos.length; j++) {\n        const periodo1 = periodos[i];\n        const periodo2 = periodos[j];\n        \n        // Verificar sobreposição\n        if (\n          (periodo1.dataInicio <= periodo2.dataFim && periodo1.dataFim >= periodo2.dataInicio) ||\n          (periodo2.dataInicio <= periodo1.dataFim && periodo2.dataFim >= periodo1.dataInicio)\n        ) {\n          return NextResponse.json(\n            { \n              error: 'Períodos não podem se sobrepor',\n              details: `Período '${periodo1.nome}' se sobrepõe com '${periodo2.nome}'`\n            },\n            { status: 400 }\n          );\n        }\n      }\n    }\n\n    // Gerar comparativo temporal\n    const comparativo = await gerarComparativoTemporal(periodos, filtros);\n\n    return NextResponse.json({\n      success: true,\n      data: comparativo,\n      message: `Comparativo temporal entre ${periodos.length} períodos gerado com sucesso`,\n      meta: {\n        totalPeriodos: periodos.length,\n        periodos: periodos.map(p => ({\n          id: p.id,\n          nome: p.nome,\n          dataInicio: p.dataInicio.toISOString(),\n          dataFim: p.dataFim.toISOString()\n        }))\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao gerar comparativo temporal:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        message: 'Não foi possível gerar o comparativo temporal'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/avaliacoes/metricas/comparativo\n * Busca comparativo temporal com parâmetros de query (versão simplificada)\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões\n    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { error: 'Acesso negado. Apenas administradores e gestores podem acessar métricas.' },\n        { status: 403 }\n      );\n    }\n\n    // Extrair parâmetros de query\n    const { searchParams } = new URL(request.url);\n    const periodo1Id = searchParams.get('periodo1');\n    const periodo2Id = searchParams.get('periodo2');\n\n    if (!periodo1Id || !periodo2Id) {\n      return NextResponse.json(\n        { error: 'É necessário informar pelo menos 2 períodos (periodo1 e periodo2)' },\n        { status: 400 }\n      );\n    }\n\n    if (periodo1Id === periodo2Id) {\n      return NextResponse.json(\n        { error: 'Os períodos devem ser diferentes' },\n        { status: 400 }\n      );\n    }\n\n    // Buscar informações dos períodos no banco de dados\n    // Nota: Aqui seria necessário implementar a busca real dos períodos\n    // Por enquanto, retornamos um erro informativo\n    return NextResponse.json(\n      { \n        error: 'Funcionalidade não implementada',\n        message: 'Use o método POST com os dados completos dos períodos'\n      },\n      { status: 501 }\n    );\n\n  } catch (error) {\n    console.error('Erro ao buscar comparativo temporal:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        message: 'Não foi possível buscar o comparativo temporal'\n      },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}