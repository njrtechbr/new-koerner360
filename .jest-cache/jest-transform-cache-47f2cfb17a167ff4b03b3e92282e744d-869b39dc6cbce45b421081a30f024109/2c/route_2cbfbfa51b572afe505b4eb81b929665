468acbc132cc9daa8f2e8f764304b64e
"use strict";

/* istanbul ignore next */
function cov_27d08n9r2k() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\metricas\\comparativo\\route.ts";
  var hash = "7c4565bf20b284185e9df49fff8dddd4b1f70b06";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\metricas\\comparativo\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 48
        }
      },
      "9": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 83
        }
      },
      "10": {
        start: {
          line: 23,
          column: 13
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "11": {
        start: {
          line: 25,
          column: 26
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "12": {
        start: {
          line: 31,
          column: 53
        },
        end: {
          line: 31,
          column: 84
        }
      },
      "13": {
        start: {
          line: 32,
          column: 50
        },
        end: {
          line: 32,
          column: 81
        }
      },
      "14": {
        start: {
          line: 39,
          column: 53
        },
        end: {
          line: 39,
          column: 66
        }
      },
      "15": {
        start: {
          line: 40,
          column: 50
        },
        end: {
          line: 40,
          column: 63
        }
      },
      "16": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "17": {
        start: {
          line: 46,
          column: 24
        },
        end: {
          line: 46,
          column: 80
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "19": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "20": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "21": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "22": {
        start: {
          line: 66,
          column: 21
        },
        end: {
          line: 66,
          column: 41
        }
      },
      "23": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 59
        }
      },
      "24": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "25": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 74,
          column: 15
        }
      },
      "26": {
        start: {
          line: 76,
          column: 43
        },
        end: {
          line: 76,
          column: 57
        }
      },
      "27": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "28": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 21
        }
      },
      "29": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "30": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 79,
          column: 29
        }
      },
      "31": {
        start: {
          line: 80,
          column: 33
        },
        end: {
          line: 80,
          column: 44
        }
      },
      "32": {
        start: {
          line: 81,
          column: 33
        },
        end: {
          line: 81,
          column: 44
        }
      },
      "33": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 90,
          column: 17
        }
      },
      "34": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 89,
          column: 23
        }
      },
      "35": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 94,
          column: 102
        }
      },
      "36": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "37": {
        start: {
          line: 101,
          column: 45
        },
        end: {
          line: 106,
          column: 21
        }
      },
      "38": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 68
        }
      },
      "39": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "40": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "41": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 122,
          column: 80
        }
      },
      "42": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "43": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 128,
          column: 15
        }
      },
      "44": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "45": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "46": {
        start: {
          line: 142,
          column: 33
        },
        end: {
          line: 142,
          column: 53
        }
      },
      "47": {
        start: {
          line: 143,
          column: 27
        },
        end: {
          line: 143,
          column: 55
        }
      },
      "48": {
        start: {
          line: 144,
          column: 27
        },
        end: {
          line: 144,
          column: 55
        }
      },
      "49": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "50": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "51": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "52": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "53": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 167,
          column: 11
        }
      },
      "54": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 69
        }
      },
      "55": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 46
          },
          end: {
            line: 31,
            column: 47
          }
        },
        loc: {
          start: {
            line: 31,
            column: 53
          },
          end: {
            line: 31,
            column: 84
          }
        },
        line: 31
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 32,
            column: 43
          },
          end: {
            line: 32,
            column: 44
          }
        },
        loc: {
          start: {
            line: 32,
            column: 50
          },
          end: {
            line: 32,
            column: 81
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 39,
            column: 46
          },
          end: {
            line: 39,
            column: 47
          }
        },
        loc: {
          start: {
            line: 39,
            column: 53
          },
          end: {
            line: 39,
            column: 66
          }
        },
        line: 39
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 40,
            column: 43
          },
          end: {
            line: 40,
            column: 44
          }
        },
        loc: {
          start: {
            line: 40,
            column: 50
          },
          end: {
            line: 40,
            column: 63
          }
        },
        line: 40
      },
      "7": {
        name: "POST",
        decl: {
          start: {
            line: 43,
            column: 15
          },
          end: {
            line: 43,
            column: 19
          }
        },
        loc: {
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 43
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 101,
            column: 39
          },
          end: {
            line: 101,
            column: 40
          }
        },
        loc: {
          start: {
            line: 101,
            column: 45
          },
          end: {
            line: 106,
            column: 21
          }
        },
        line: 101
      },
      "9": {
        name: "GET",
        decl: {
          start: {
            line: 119,
            column: 15
          },
          end: {
            line: 119,
            column: 18
          }
        },
        loc: {
          start: {
            line: 119,
            column: 28
          },
          end: {
            line: 177,
            column: 1
          }
        },
        line: 119
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 53
          },
          end: {
            line: 31,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 59
          },
          end: {
            line: 31,
            column: 72
          }
        }, {
          start: {
            line: 31,
            column: 75
          },
          end: {
            line: 31,
            column: 84
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 50
          },
          end: {
            line: 32,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 56
          },
          end: {
            line: 32,
            column: 69
          }
        }, {
          start: {
            line: 32,
            column: 72
          },
          end: {
            line: 32,
            column: 81
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 76,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 76,
            column: 26
          },
          end: {
            line: 76,
            column: 28
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 90,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 90,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 83,
            column: 188
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 83,
            column: 59
          }
        }, {
          start: {
            line: 83,
            column: 63
          },
          end: {
            line: 83,
            column: 102
          }
        }, {
          start: {
            line: 83,
            column: 106
          },
          end: {
            line: 83,
            column: 145
          }
        }, {
          start: {
            line: 83,
            column: 149
          },
          end: {
            line: 83,
            column: 188
          }
        }],
        line: 83
      },
      "8": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "9": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "10": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "11": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 145,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 145,
            column: 23
          }
        }, {
          start: {
            line: 145,
            column: 27
          },
          end: {
            line: 145,
            column: 38
          }
        }],
        line: 145
      },
      "12": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\metricas\\comparativo\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { gerarComparativoTemporal, FiltrosMetricas } from '@/lib/utils/metricas-avaliacoes';\nimport { z } from 'zod';\n\n// Schema de valida\xE7\xE3o para os filtros e par\xE2metros\nconst comparativoSchema = z.object({\n  filtros: z.object({\n    periodoIds: z.array(z.string()).optional(),\n    atendenteIds: z.array(z.string()).optional(),\n    setores: z.array(z.string()).optional(),\n    departamentos: z.array(z.string()).optional(),\n    dataInicio: z.string().transform(str => str ? new Date(str) : undefined).optional(),\n    dataFim: z.string().transform(str => str ? new Date(str) : undefined).optional(),\n    notaMinima: z.number().min(1).max(5).optional(),\n    notaMaxima: z.number().min(1).max(5).optional()\n  }).optional(),\n  periodos: z.array(z.object({\n    id: z.string(),\n    nome: z.string(),\n    dataInicio: z.string().transform(str => new Date(str)),\n    dataFim: z.string().transform(str => new Date(str))\n  })).min(2, '\xC9 necess\xE1rio pelo menos 2 per\xEDodos para compara\xE7\xE3o')\n});\n\n/**\n * POST /api/avaliacoes/metricas/comparativo\n * Gera comparativo temporal entre diferentes per\xEDodos\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session) {\n      return NextResponse.json(\n        { error: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN e GESTOR podem acessar m\xE9tricas)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { error: 'Acesso negado. Apenas administradores e gestores podem acessar m\xE9tricas.' },\n        { status: 403 }\n      );\n    }\n\n    // Validar dados da requisi\xE7\xE3o\n    const body = await request.json();\n    const validacao = comparativoSchema.safeParse(body);\n    \n    if (!validacao.success) {\n      return NextResponse.json(\n        { \n          error: 'Dados inv\xE1lidos',\n          details: validacao.error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    const { filtros = {}, periodos } = validacao.data;\n\n    // Validar se os per\xEDodos n\xE3o se sobrep\xF5em\n    for (let i = 0; i < periodos.length - 1; i++) {\n      for (let j = i + 1; j < periodos.length; j++) {\n        const periodo1 = periodos[i];\n        const periodo2 = periodos[j];\n        \n        // Verificar sobreposi\xE7\xE3o\n        if (\n          (periodo1.dataInicio <= periodo2.dataFim && periodo1.dataFim >= periodo2.dataInicio) ||\n          (periodo2.dataInicio <= periodo1.dataFim && periodo2.dataFim >= periodo1.dataInicio)\n        ) {\n          return NextResponse.json(\n            { \n              error: 'Per\xEDodos n\xE3o podem se sobrepor',\n              details: `Per\xEDodo '${periodo1.nome}' se sobrep\xF5e com '${periodo2.nome}'`\n            },\n            { status: 400 }\n          );\n        }\n      }\n    }\n\n    // Gerar comparativo temporal\n    const comparativo = await gerarComparativoTemporal(periodos, filtros);\n\n    return NextResponse.json({\n      success: true,\n      data: comparativo,\n      message: `Comparativo temporal entre ${periodos.length} per\xEDodos gerado com sucesso`,\n      meta: {\n        totalPeriodos: periodos.length,\n        periodos: periodos.map(p => ({\n          id: p.id,\n          nome: p.nome,\n          dataInicio: p.dataInicio.toISOString(),\n          dataFim: p.dataFim.toISOString()\n        }))\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao gerar comparativo temporal:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        message: 'N\xE3o foi poss\xEDvel gerar o comparativo temporal'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/avaliacoes/metricas/comparativo\n * Busca comparativo temporal com par\xE2metros de query (vers\xE3o simplificada)\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session) {\n      return NextResponse.json(\n        { error: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es\n    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { error: 'Acesso negado. Apenas administradores e gestores podem acessar m\xE9tricas.' },\n        { status: 403 }\n      );\n    }\n\n    // Extrair par\xE2metros de query\n    const { searchParams } = new URL(request.url);\n    const periodo1Id = searchParams.get('periodo1');\n    const periodo2Id = searchParams.get('periodo2');\n\n    if (!periodo1Id || !periodo2Id) {\n      return NextResponse.json(\n        { error: '\xC9 necess\xE1rio informar pelo menos 2 per\xEDodos (periodo1 e periodo2)' },\n        { status: 400 }\n      );\n    }\n\n    if (periodo1Id === periodo2Id) {\n      return NextResponse.json(\n        { error: 'Os per\xEDodos devem ser diferentes' },\n        { status: 400 }\n      );\n    }\n\n    // Buscar informa\xE7\xF5es dos per\xEDodos no banco de dados\n    // Nota: Aqui seria necess\xE1rio implementar a busca real dos per\xEDodos\n    // Por enquanto, retornamos um erro informativo\n    return NextResponse.json(\n      { \n        error: 'Funcionalidade n\xE3o implementada',\n        message: 'Use o m\xE9todo POST com os dados completos dos per\xEDodos'\n      },\n      { status: 501 }\n    );\n\n  } catch (error) {\n    console.error('Erro ao buscar comparativo temporal:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        message: 'N\xE3o foi poss\xEDvel buscar o comparativo temporal'\n      },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "comparativoSchema", "z", "object", "filtros", "periodoIds", "array", "string", "optional", "atendenteIds", "setores", "departamentos", "dataInicio", "transform", "str", "Date", "undefined", "dataFim", "notaMinima", "number", "min", "max", "notaMaxima", "periodos", "id", "nome", "request", "session", "getServerSession", "authOptions", "NextResponse", "json", "error", "status", "includes", "user", "userType", "body", "validacao", "safeParse", "success", "details", "errors", "data", "i", "length", "j", "periodo1", "periodo2", "comparativo", "gerarComparativoTemporal", "message", "meta", "totalPeriodos", "map", "p", "toISOString", "console", "searchParams", "URL", "url", "periodo1Id", "get", "periodo2Id"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7c4565bf20b284185e9df49fff8dddd4b1f70b06"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_27d08n9r2k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_27d08n9r2k();
cov_27d08n9r2k().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_27d08n9r2k().f[0]++;
  cov_27d08n9r2k().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_27d08n9r2k().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_27d08n9r2k().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_27d08n9r2k().f[1]++;
    cov_27d08n9r2k().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_27d08n9r2k().f[2]++;
    cov_27d08n9r2k().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_27d08n9r2k().s[6]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_27d08n9r2k().s[7]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_27d08n9r2k().s[8]++, require("../../../../../lib/auth"));
const _metricasavaliacoes =
/* istanbul ignore next */
(cov_27d08n9r2k().s[9]++, require("../../../../../lib/utils/metricas-avaliacoes"));
const _zod =
/* istanbul ignore next */
(cov_27d08n9r2k().s[10]++, require("zod"));
// Schema de validação para os filtros e parâmetros
const comparativoSchema =
/* istanbul ignore next */
(cov_27d08n9r2k().s[11]++, _zod.z.object({
  filtros: _zod.z.object({
    periodoIds: _zod.z.array(_zod.z.string()).optional(),
    atendenteIds: _zod.z.array(_zod.z.string()).optional(),
    setores: _zod.z.array(_zod.z.string()).optional(),
    departamentos: _zod.z.array(_zod.z.string()).optional(),
    dataInicio: _zod.z.string().transform(str => {
      /* istanbul ignore next */
      cov_27d08n9r2k().f[3]++;
      cov_27d08n9r2k().s[12]++;
      return str ?
      /* istanbul ignore next */
      (cov_27d08n9r2k().b[0][0]++, new Date(str)) :
      /* istanbul ignore next */
      (cov_27d08n9r2k().b[0][1]++, undefined);
    }).optional(),
    dataFim: _zod.z.string().transform(str => {
      /* istanbul ignore next */
      cov_27d08n9r2k().f[4]++;
      cov_27d08n9r2k().s[13]++;
      return str ?
      /* istanbul ignore next */
      (cov_27d08n9r2k().b[1][0]++, new Date(str)) :
      /* istanbul ignore next */
      (cov_27d08n9r2k().b[1][1]++, undefined);
    }).optional(),
    notaMinima: _zod.z.number().min(1).max(5).optional(),
    notaMaxima: _zod.z.number().min(1).max(5).optional()
  }).optional(),
  periodos: _zod.z.array(_zod.z.object({
    id: _zod.z.string(),
    nome: _zod.z.string(),
    dataInicio: _zod.z.string().transform(str => {
      /* istanbul ignore next */
      cov_27d08n9r2k().f[5]++;
      cov_27d08n9r2k().s[14]++;
      return new Date(str);
    }),
    dataFim: _zod.z.string().transform(str => {
      /* istanbul ignore next */
      cov_27d08n9r2k().f[6]++;
      cov_27d08n9r2k().s[15]++;
      return new Date(str);
    })
  })).min(2, 'É necessário pelo menos 2 períodos para comparação')
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_27d08n9r2k().f[7]++;
  cov_27d08n9r2k().s[16]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[17]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_27d08n9r2k().s[18]++;
    if (!session) {
      /* istanbul ignore next */
      cov_27d08n9r2k().b[2][0]++;
      cov_27d08n9r2k().s[19]++;
      return _server.NextResponse.json({
        error: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_27d08n9r2k().b[2][1]++;
    }
    // Verificar permissões (apenas ADMIN e GESTOR podem acessar métricas)
    cov_27d08n9r2k().s[20]++;
    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {
      /* istanbul ignore next */
      cov_27d08n9r2k().b[3][0]++;
      cov_27d08n9r2k().s[21]++;
      return _server.NextResponse.json({
        error: 'Acesso negado. Apenas administradores e gestores podem acessar métricas.'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_27d08n9r2k().b[3][1]++;
    }
    // Validar dados da requisição
    const body =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[22]++, await request.json());
    const validacao =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[23]++, comparativoSchema.safeParse(body));
    /* istanbul ignore next */
    cov_27d08n9r2k().s[24]++;
    if (!validacao.success) {
      /* istanbul ignore next */
      cov_27d08n9r2k().b[4][0]++;
      cov_27d08n9r2k().s[25]++;
      return _server.NextResponse.json({
        error: 'Dados inválidos',
        details: validacao.error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_27d08n9r2k().b[4][1]++;
    }
    const {
      filtros =
      /* istanbul ignore next */
      (cov_27d08n9r2k().b[5][0]++, {}),
      periodos
    } =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[26]++, validacao.data);
    // Validar se os períodos não se sobrepõem
    /* istanbul ignore next */
    cov_27d08n9r2k().s[27]++;
    for (let i =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[28]++, 0); i < periodos.length - 1; i++) {
      /* istanbul ignore next */
      cov_27d08n9r2k().s[29]++;
      for (let j =
      /* istanbul ignore next */
      (cov_27d08n9r2k().s[30]++, i + 1); j < periodos.length; j++) {
        const periodo1 =
        /* istanbul ignore next */
        (cov_27d08n9r2k().s[31]++, periodos[i]);
        const periodo2 =
        /* istanbul ignore next */
        (cov_27d08n9r2k().s[32]++, periodos[j]);
        // Verificar sobreposição
        /* istanbul ignore next */
        cov_27d08n9r2k().s[33]++;
        if (
        /* istanbul ignore next */
        (cov_27d08n9r2k().b[7][0]++, periodo1.dataInicio <= periodo2.dataFim) &&
        /* istanbul ignore next */
        (cov_27d08n9r2k().b[7][1]++, periodo1.dataFim >= periodo2.dataInicio) ||
        /* istanbul ignore next */
        (cov_27d08n9r2k().b[7][2]++, periodo2.dataInicio <= periodo1.dataFim) &&
        /* istanbul ignore next */
        (cov_27d08n9r2k().b[7][3]++, periodo2.dataFim >= periodo1.dataInicio)) {
          /* istanbul ignore next */
          cov_27d08n9r2k().b[6][0]++;
          cov_27d08n9r2k().s[34]++;
          return _server.NextResponse.json({
            error: 'Períodos não podem se sobrepor',
            details: `Período '${periodo1.nome}' se sobrepõe com '${periodo2.nome}'`
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_27d08n9r2k().b[6][1]++;
        }
      }
    }
    // Gerar comparativo temporal
    const comparativo =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[35]++, await (0, _metricasavaliacoes.gerarComparativoTemporal)(periodos, filtros));
    /* istanbul ignore next */
    cov_27d08n9r2k().s[36]++;
    return _server.NextResponse.json({
      success: true,
      data: comparativo,
      message: `Comparativo temporal entre ${periodos.length} períodos gerado com sucesso`,
      meta: {
        totalPeriodos: periodos.length,
        periodos: periodos.map(p => {
          /* istanbul ignore next */
          cov_27d08n9r2k().f[8]++;
          cov_27d08n9r2k().s[37]++;
          return {
            id: p.id,
            nome: p.nome,
            dataInicio: p.dataInicio.toISOString(),
            dataFim: p.dataFim.toISOString()
          };
        })
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_27d08n9r2k().s[38]++;
    console.error('Erro ao gerar comparativo temporal:', error);
    /* istanbul ignore next */
    cov_27d08n9r2k().s[39]++;
    return _server.NextResponse.json({
      error: 'Erro interno do servidor',
      message: 'Não foi possível gerar o comparativo temporal'
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_27d08n9r2k().f[9]++;
  cov_27d08n9r2k().s[40]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[41]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_27d08n9r2k().s[42]++;
    if (!session) {
      /* istanbul ignore next */
      cov_27d08n9r2k().b[8][0]++;
      cov_27d08n9r2k().s[43]++;
      return _server.NextResponse.json({
        error: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_27d08n9r2k().b[8][1]++;
    }
    // Verificar permissões
    cov_27d08n9r2k().s[44]++;
    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {
      /* istanbul ignore next */
      cov_27d08n9r2k().b[9][0]++;
      cov_27d08n9r2k().s[45]++;
      return _server.NextResponse.json({
        error: 'Acesso negado. Apenas administradores e gestores podem acessar métricas.'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_27d08n9r2k().b[9][1]++;
    }
    // Extrair parâmetros de query
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[46]++, new URL(request.url));
    const periodo1Id =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[47]++, searchParams.get('periodo1'));
    const periodo2Id =
    /* istanbul ignore next */
    (cov_27d08n9r2k().s[48]++, searchParams.get('periodo2'));
    /* istanbul ignore next */
    cov_27d08n9r2k().s[49]++;
    if (
    /* istanbul ignore next */
    (cov_27d08n9r2k().b[11][0]++, !periodo1Id) ||
    /* istanbul ignore next */
    (cov_27d08n9r2k().b[11][1]++, !periodo2Id)) {
      /* istanbul ignore next */
      cov_27d08n9r2k().b[10][0]++;
      cov_27d08n9r2k().s[50]++;
      return _server.NextResponse.json({
        error: 'É necessário informar pelo menos 2 períodos (periodo1 e periodo2)'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_27d08n9r2k().b[10][1]++;
    }
    cov_27d08n9r2k().s[51]++;
    if (periodo1Id === periodo2Id) {
      /* istanbul ignore next */
      cov_27d08n9r2k().b[12][0]++;
      cov_27d08n9r2k().s[52]++;
      return _server.NextResponse.json({
        error: 'Os períodos devem ser diferentes'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_27d08n9r2k().b[12][1]++;
    }
    // Buscar informações dos períodos no banco de dados
    // Nota: Aqui seria necessário implementar a busca real dos períodos
    // Por enquanto, retornamos um erro informativo
    cov_27d08n9r2k().s[53]++;
    return _server.NextResponse.json({
      error: 'Funcionalidade não implementada',
      message: 'Use o método POST com os dados completos dos períodos'
    }, {
      status: 501
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_27d08n9r2k().s[54]++;
    console.error('Erro ao buscar comparativo temporal:', error);
    /* istanbul ignore next */
    cov_27d08n9r2k().s[55]++;
    return _server.NextResponse.json({
      error: 'Erro interno do servidor',
      message: 'Não foi possível buscar o comparativo temporal'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,