e0c710c6891e7cdcc173dcc544e1d5ce
"use strict";

/* istanbul ignore next */
function cov_k67apmuj7() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\metricas\\ranking\\route.ts";
  var hash = "b8a0a7d66f85c45a2635ebceffd3725615763491";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\metricas\\ranking\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 48
        }
      },
      "9": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 83
        }
      },
      "10": {
        start: {
          line: 23,
          column: 13
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "11": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 37,
          column: 2
        }
      },
      "12": {
        start: {
          line: 31,
          column: 53
        },
        end: {
          line: 31,
          column: 84
        }
      },
      "13": {
        start: {
          line: 32,
          column: 50
        },
        end: {
          line: 32,
          column: 81
        }
      },
      "14": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "15": {
        start: {
          line: 41,
          column: 24
        },
        end: {
          line: 41,
          column: 80
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "18": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "19": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 58,
          column: 15
        }
      },
      "20": {
        start: {
          line: 61,
          column: 21
        },
        end: {
          line: 61,
          column: 41
        }
      },
      "21": {
        start: {
          line: 62,
          column: 26
        },
        end: {
          line: 62,
          column: 55
        }
      },
      "22": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "23": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "24": {
        start: {
          line: 71,
          column: 41
        },
        end: {
          line: 71,
          column: 55
        }
      },
      "25": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 73,
          column: 95
        }
      },
      "26": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "27": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 70
        }
      },
      "28": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "29": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "30": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 96,
          column: 80
        }
      },
      "31": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "32": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "33": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "34": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "35": {
        start: {
          line: 116,
          column: 33
        },
        end: {
          line: 116,
          column: 53
        }
      },
      "36": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 117,
          column: 67
        }
      },
      "37": {
        start: {
          line: 118,
          column: 26
        },
        end: {
          line: 118,
          column: 55
        }
      },
      "38": {
        start: {
          line: 119,
          column: 22
        },
        end: {
          line: 119,
          column: 47
        }
      },
      "39": {
        start: {
          line: 120,
          column: 29
        },
        end: {
          line: 120,
          column: 61
        }
      },
      "40": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 122,
          column: 26
        }
      },
      "41": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "42": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "43": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "44": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "45": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "46": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 136,
          column: 14
        }
      },
      "47": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "48": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 144,
          column: 15
        }
      },
      "49": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 147,
          column: 95
        }
      },
      "50": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "51": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 70
        }
      },
      "52": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 46
          },
          end: {
            line: 31,
            column: 47
          }
        },
        loc: {
          start: {
            line: 31,
            column: 53
          },
          end: {
            line: 31,
            column: 84
          }
        },
        line: 31
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 32,
            column: 43
          },
          end: {
            line: 32,
            column: 44
          }
        },
        loc: {
          start: {
            line: 32,
            column: 50
          },
          end: {
            line: 32,
            column: 81
          }
        },
        line: 32
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 19
          }
        },
        loc: {
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 38
      },
      "6": {
        name: "GET",
        decl: {
          start: {
            line: 93,
            column: 15
          },
          end: {
            line: 93,
            column: 18
          }
        },
        loc: {
          start: {
            line: 93,
            column: 28
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 93
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 53
          },
          end: {
            line: 31,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 59
          },
          end: {
            line: 31,
            column: 72
          }
        }, {
          start: {
            line: 31,
            column: 75
          },
          end: {
            line: 31,
            column: 84
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 50
          },
          end: {
            line: 32,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 56
          },
          end: {
            line: 32,
            column: 69
          }
        }, {
          start: {
            line: 32,
            column: 72
          },
          end: {
            line: 32,
            column: 81
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 71,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 71,
            column: 26
          },
          end: {
            line: 71,
            column: 28
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "7": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "8": {
        loc: {
          start: {
            line: 117,
            column: 32
          },
          end: {
            line: 117,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 32
          },
          end: {
            line: 117,
            column: 58
          }
        }, {
          start: {
            line: 117,
            column: 62
          },
          end: {
            line: 117,
            column: 66
          }
        }],
        line: 117
      },
      "9": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "10": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "11": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "12": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "13": {
        loc: {
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 139,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 139,
            column: 22
          }
        }, {
          start: {
            line: 139,
            column: 26
          },
          end: {
            line: 139,
            column: 38
          }
        }],
        line: 139
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\metricas\\ranking\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { buscarRankingAtendentes, FiltrosMetricas } from '@/lib/utils/metricas-avaliacoes';\nimport { z } from 'zod';\n\n// Schema de valida\xE7\xE3o para os filtros e par\xE2metros\nconst rankingSchema = z.object({\n  filtros: z.object({\n    periodoIds: z.array(z.string()).optional(),\n    atendenteIds: z.array(z.string()).optional(),\n    setores: z.array(z.string()).optional(),\n    departamentos: z.array(z.string()).optional(),\n    dataInicio: z.string().transform(str => str ? new Date(str) : undefined).optional(),\n    dataFim: z.string().transform(str => str ? new Date(str) : undefined).optional(),\n    notaMinima: z.number().min(1).max(5).optional(),\n    notaMaxima: z.number().min(1).max(5).optional()\n  }).optional(),\n  limite: z.number().min(1).max(100).optional().default(10)\n});\n\n/**\n * POST /api/avaliacoes/metricas/ranking\n * Busca ranking de atendentes por m\xE9dia de avalia\xE7\xF5es\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session) {\n      return NextResponse.json(\n        { error: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN e GESTOR podem acessar m\xE9tricas)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { error: 'Acesso negado. Apenas administradores e gestores podem acessar m\xE9tricas.' },\n        { status: 403 }\n      );\n    }\n\n    // Validar dados da requisi\xE7\xE3o\n    const body = await request.json();\n    const validacao = rankingSchema.safeParse(body);\n    \n    if (!validacao.success) {\n      return NextResponse.json(\n        { \n          error: 'Dados inv\xE1lidos',\n          details: validacao.error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    const { filtros = {}, limite } = validacao.data;\n\n    // Buscar ranking de atendentes\n    const ranking = await buscarRankingAtendentes(filtros, limite);\n\n    return NextResponse.json({\n      success: true,\n      data: ranking,\n      message: `Ranking de ${ranking.length} atendentes obtido com sucesso`,\n      meta: {\n        total: ranking.length,\n        limite\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar ranking de atendentes:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        message: 'N\xE3o foi poss\xEDvel buscar o ranking de atendentes'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/avaliacoes/metricas/ranking\n * Busca ranking de atendentes com par\xE2metros de query\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session) {\n      return NextResponse.json(\n        { error: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es\n    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { error: 'Acesso negado. Apenas administradores e gestores podem acessar m\xE9tricas.' },\n        { status: 403 }\n      );\n    }\n\n    // Extrair par\xE2metros de query\n    const { searchParams } = new URL(request.url);\n    const limite = parseInt(searchParams.get('limite') || '10');\n    const periodoId = searchParams.get('periodoId');\n    const setor = searchParams.get('setor');\n    const departamento = searchParams.get('departamento');\n\n    // Construir filtros\n    const filtros: FiltrosMetricas = {};\n    \n    if (periodoId) {\n      filtros.periodoIds = [periodoId];\n    }\n    \n    if (setor) {\n      filtros.setores = [setor];\n    }\n    \n    if (departamento) {\n      filtros.departamentos = [departamento];\n    }\n\n    // Validar limite\n    if (limite < 1 || limite > 100) {\n      return NextResponse.json(\n        { error: 'Limite deve estar entre 1 e 100' },\n        { status: 400 }\n      );\n    }\n\n    // Buscar ranking de atendentes\n    const ranking = await buscarRankingAtendentes(filtros, limite);\n\n    return NextResponse.json({\n      success: true,\n      data: ranking,\n      message: `Ranking de ${ranking.length} atendentes obtido com sucesso`,\n      meta: {\n        total: ranking.length,\n        limite,\n        filtros: {\n          periodoId,\n          setor,\n          departamento\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar ranking de atendentes:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        message: 'N\xE3o foi poss\xEDvel buscar o ranking de atendentes'\n      },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "rankingSchema", "z", "object", "filtros", "periodoIds", "array", "string", "optional", "atendenteIds", "setores", "departamentos", "dataInicio", "transform", "str", "Date", "undefined", "dataFim", "notaMinima", "number", "min", "max", "notaMaxima", "limite", "default", "request", "session", "getServerSession", "authOptions", "NextResponse", "json", "error", "status", "includes", "user", "userType", "body", "validacao", "safeParse", "success", "details", "errors", "data", "ranking", "buscarRankingAtendentes", "message", "length", "meta", "total", "console", "searchParams", "URL", "url", "parseInt", "get", "periodoId", "setor", "departamento"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b8a0a7d66f85c45a2635ebceffd3725615763491"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_k67apmuj7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_k67apmuj7();
cov_k67apmuj7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_k67apmuj7().f[0]++;
  cov_k67apmuj7().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_k67apmuj7().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_k67apmuj7().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_k67apmuj7().f[1]++;
    cov_k67apmuj7().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_k67apmuj7().f[2]++;
    cov_k67apmuj7().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_k67apmuj7().s[6]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_k67apmuj7().s[7]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_k67apmuj7().s[8]++, require("../../../../../lib/auth"));
const _metricasavaliacoes =
/* istanbul ignore next */
(cov_k67apmuj7().s[9]++, require("../../../../../lib/utils/metricas-avaliacoes"));
const _zod =
/* istanbul ignore next */
(cov_k67apmuj7().s[10]++, require("zod"));
// Schema de validação para os filtros e parâmetros
const rankingSchema =
/* istanbul ignore next */
(cov_k67apmuj7().s[11]++, _zod.z.object({
  filtros: _zod.z.object({
    periodoIds: _zod.z.array(_zod.z.string()).optional(),
    atendenteIds: _zod.z.array(_zod.z.string()).optional(),
    setores: _zod.z.array(_zod.z.string()).optional(),
    departamentos: _zod.z.array(_zod.z.string()).optional(),
    dataInicio: _zod.z.string().transform(str => {
      /* istanbul ignore next */
      cov_k67apmuj7().f[3]++;
      cov_k67apmuj7().s[12]++;
      return str ?
      /* istanbul ignore next */
      (cov_k67apmuj7().b[0][0]++, new Date(str)) :
      /* istanbul ignore next */
      (cov_k67apmuj7().b[0][1]++, undefined);
    }).optional(),
    dataFim: _zod.z.string().transform(str => {
      /* istanbul ignore next */
      cov_k67apmuj7().f[4]++;
      cov_k67apmuj7().s[13]++;
      return str ?
      /* istanbul ignore next */
      (cov_k67apmuj7().b[1][0]++, new Date(str)) :
      /* istanbul ignore next */
      (cov_k67apmuj7().b[1][1]++, undefined);
    }).optional(),
    notaMinima: _zod.z.number().min(1).max(5).optional(),
    notaMaxima: _zod.z.number().min(1).max(5).optional()
  }).optional(),
  limite: _zod.z.number().min(1).max(100).optional().default(10)
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_k67apmuj7().f[5]++;
  cov_k67apmuj7().s[14]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[15]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_k67apmuj7().s[16]++;
    if (!session) {
      /* istanbul ignore next */
      cov_k67apmuj7().b[2][0]++;
      cov_k67apmuj7().s[17]++;
      return _server.NextResponse.json({
        error: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_k67apmuj7().b[2][1]++;
    }
    // Verificar permissões (apenas ADMIN e GESTOR podem acessar métricas)
    cov_k67apmuj7().s[18]++;
    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {
      /* istanbul ignore next */
      cov_k67apmuj7().b[3][0]++;
      cov_k67apmuj7().s[19]++;
      return _server.NextResponse.json({
        error: 'Acesso negado. Apenas administradores e gestores podem acessar métricas.'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_k67apmuj7().b[3][1]++;
    }
    // Validar dados da requisição
    const body =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[20]++, await request.json());
    const validacao =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[21]++, rankingSchema.safeParse(body));
    /* istanbul ignore next */
    cov_k67apmuj7().s[22]++;
    if (!validacao.success) {
      /* istanbul ignore next */
      cov_k67apmuj7().b[4][0]++;
      cov_k67apmuj7().s[23]++;
      return _server.NextResponse.json({
        error: 'Dados inválidos',
        details: validacao.error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_k67apmuj7().b[4][1]++;
    }
    const {
      filtros =
      /* istanbul ignore next */
      (cov_k67apmuj7().b[5][0]++, {}),
      limite
    } =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[24]++, validacao.data);
    // Buscar ranking de atendentes
    const ranking =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[25]++, await (0, _metricasavaliacoes.buscarRankingAtendentes)(filtros, limite));
    /* istanbul ignore next */
    cov_k67apmuj7().s[26]++;
    return _server.NextResponse.json({
      success: true,
      data: ranking,
      message: `Ranking de ${ranking.length} atendentes obtido com sucesso`,
      meta: {
        total: ranking.length,
        limite
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_k67apmuj7().s[27]++;
    console.error('Erro ao buscar ranking de atendentes:', error);
    /* istanbul ignore next */
    cov_k67apmuj7().s[28]++;
    return _server.NextResponse.json({
      error: 'Erro interno do servidor',
      message: 'Não foi possível buscar o ranking de atendentes'
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_k67apmuj7().f[6]++;
  cov_k67apmuj7().s[29]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[30]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_k67apmuj7().s[31]++;
    if (!session) {
      /* istanbul ignore next */
      cov_k67apmuj7().b[6][0]++;
      cov_k67apmuj7().s[32]++;
      return _server.NextResponse.json({
        error: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_k67apmuj7().b[6][1]++;
    }
    // Verificar permissões
    cov_k67apmuj7().s[33]++;
    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {
      /* istanbul ignore next */
      cov_k67apmuj7().b[7][0]++;
      cov_k67apmuj7().s[34]++;
      return _server.NextResponse.json({
        error: 'Acesso negado. Apenas administradores e gestores podem acessar métricas.'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_k67apmuj7().b[7][1]++;
    }
    // Extrair parâmetros de query
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[35]++, new URL(request.url));
    const limite =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[36]++, parseInt(
    /* istanbul ignore next */
    (cov_k67apmuj7().b[8][0]++, searchParams.get('limite')) ||
    /* istanbul ignore next */
    (cov_k67apmuj7().b[8][1]++, '10')));
    const periodoId =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[37]++, searchParams.get('periodoId'));
    const setor =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[38]++, searchParams.get('setor'));
    const departamento =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[39]++, searchParams.get('departamento'));
    // Construir filtros
    const filtros =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[40]++, {});
    /* istanbul ignore next */
    cov_k67apmuj7().s[41]++;
    if (periodoId) {
      /* istanbul ignore next */
      cov_k67apmuj7().b[9][0]++;
      cov_k67apmuj7().s[42]++;
      filtros.periodoIds = [periodoId];
    } else
    /* istanbul ignore next */
    {
      cov_k67apmuj7().b[9][1]++;
    }
    cov_k67apmuj7().s[43]++;
    if (setor) {
      /* istanbul ignore next */
      cov_k67apmuj7().b[10][0]++;
      cov_k67apmuj7().s[44]++;
      filtros.setores = [setor];
    } else
    /* istanbul ignore next */
    {
      cov_k67apmuj7().b[10][1]++;
    }
    cov_k67apmuj7().s[45]++;
    if (departamento) {
      /* istanbul ignore next */
      cov_k67apmuj7().b[11][0]++;
      cov_k67apmuj7().s[46]++;
      filtros.departamentos = [departamento];
    } else
    /* istanbul ignore next */
    {
      cov_k67apmuj7().b[11][1]++;
    }
    // Validar limite
    cov_k67apmuj7().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_k67apmuj7().b[13][0]++, limite < 1) ||
    /* istanbul ignore next */
    (cov_k67apmuj7().b[13][1]++, limite > 100)) {
      /* istanbul ignore next */
      cov_k67apmuj7().b[12][0]++;
      cov_k67apmuj7().s[48]++;
      return _server.NextResponse.json({
        error: 'Limite deve estar entre 1 e 100'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_k67apmuj7().b[12][1]++;
    }
    // Buscar ranking de atendentes
    const ranking =
    /* istanbul ignore next */
    (cov_k67apmuj7().s[49]++, await (0, _metricasavaliacoes.buscarRankingAtendentes)(filtros, limite));
    /* istanbul ignore next */
    cov_k67apmuj7().s[50]++;
    return _server.NextResponse.json({
      success: true,
      data: ranking,
      message: `Ranking de ${ranking.length} atendentes obtido com sucesso`,
      meta: {
        total: ranking.length,
        limite,
        filtros: {
          periodoId,
          setor,
          departamento
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_k67apmuj7().s[51]++;
    console.error('Erro ao buscar ranking de atendentes:', error);
    /* istanbul ignore next */
    cov_k67apmuj7().s[52]++;
    return _server.NextResponse.json({
      error: 'Erro interno do servidor',
      message: 'Não foi possível buscar o ranking de atendentes'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,