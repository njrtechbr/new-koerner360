df992cdaf349adf5a016b4a36ae7d73d
"use strict";
// Mock dos hooks
jest.mock('../../../hooks/use-preferencias-notificacao');
jest.mock('../../../hooks/use-toast');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _configuracoesnotificacao = require("../../preferencias/configuracoes-notificacao");
const _usepreferenciasnotificacao = require("../../../hooks/use-preferencias-notificacao");
const _usetoast = require("../../../hooks/use-toast");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock das preferências de teste
const mockPreferencias = {
    id: '1',
    usuarioId: 'user-1',
    ativo: true,
    emailAtivo: true,
    formatoEmail: 'html',
    idioma: 'pt-BR',
    conteudo: {
        incluirDetalhesAvaliacao: true,
        incluirLinkDireto: true,
        incluirResumoEstatisticas: false
    },
    urgenciaMinima: 'media',
    tipos: {
        pendente: {
            ativo: true,
            frequencia: 'diaria',
            diasAntecedencia: 1,
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        },
        vencida: {
            ativo: true,
            frequencia: 'imediata',
            diasAntecedencia: 0,
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: true,
            incluirFeriados: true
        },
        proximaVencimento: {
            ativo: true,
            frequencia: 'semanal',
            diasAntecedencia: 3,
            horarioEnvio: '10:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        },
        nova: {
            ativo: false,
            frequencia: 'imediata',
            diasAntecedencia: 0,
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        },
        completada: {
            ativo: false,
            frequencia: 'imediata',
            diasAntecedencia: 0,
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        },
        personalizada: {
            ativo: false,
            frequencia: 'diaria',
            diasAntecedencia: 1,
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        }
    },
    filtros: {
        apenasMinhasAvaliacoes: false,
        apenasAvaliacoesQueAvalia: true
    },
    pausada: false,
    pausadaAte: null,
    motivoPausa: null,
    criadaEm: new Date().toISOString(),
    atualizadaEm: new Date().toISOString()
};
const mockHookReturn = {
    preferencias: mockPreferencias,
    carregando: false,
    erro: null,
    pausada: false,
    buscarPreferencias: jest.fn(),
    atualizarPreferencias: jest.fn(),
    resetarPreferencias: jest.fn(),
    pausarNotificacoes: jest.fn(),
    retomarNotificacoes: jest.fn(),
    verificarNotificacoesPausadas: jest.fn()
};
const mockToast = jest.fn();
(0, _globals.describe)('ConfiguracoesNotificacao', ()=>{
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
        _usepreferenciasnotificacao.usePreferenciasNotificacao.mockReturnValue(mockHookReturn);
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.describe)('Renderização', ()=>{
        (0, _globals.it)('deve renderizar configurações de notificação', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            (0, _globals.expect)(_react1.screen.getByText('Configurações de Notificação')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Configurações Gerais')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Tipos de Notificação')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir estado de carregamento', ()=>{
            _usepreferenciasnotificacao.usePreferenciasNotificacao.mockReturnValue({
                ...mockHookReturn,
                carregando: true,
                preferencias: null
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            (0, _globals.expect)(_react1.screen.getByText('Carregando configurações...')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir erro quando houver falha', ()=>{
            const errorMessage = 'Erro ao carregar configurações';
            _usepreferenciasnotificacao.usePreferenciasNotificacao.mockReturnValue({
                ...mockHookReturn,
                erro: errorMessage,
                preferencias: null
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            (0, _globals.expect)(_react1.screen.getByText(errorMessage)).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir valores padrão quando não há preferências', ()=>{
            _usepreferenciasnotificacao.usePreferenciasNotificacao.mockReturnValue({
                ...mockHookReturn,
                preferencias: null
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            // Verificar se os valores padrão são exibidos
            const switchAtivo = _react1.screen.getByLabelText('Ativar notificações');
            (0, _globals.expect)(switchAtivo).toBeChecked(); // PREFERENCIAS_DEFAULTS.ativo é true
        });
    });
    (0, _globals.describe)('Configurações Gerais', ()=>{
        (0, _globals.it)('deve alterar ativação geral das notificações', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchAtivo = _react1.screen.getByLabelText('Ativar notificações');
            _react1.fireEvent.click(switchAtivo);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ativo: false
                }));
            });
        });
        (0, _globals.it)('deve alterar ativação de e-mail', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchEmail = _react1.screen.getByLabelText('Ativar notificações por e-mail');
            _react1.fireEvent.click(switchEmail);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    emailAtivo: false
                }));
            });
        });
        (0, _globals.it)('deve alterar formato do e-mail', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const seletorFormato = _react1.screen.getByLabelText('Formato do e-mail');
            _react1.fireEvent.change(seletorFormato, {
                target: {
                    value: 'texto'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    formatoEmail: 'texto'
                }));
            });
        });
        (0, _globals.it)('deve alterar idioma', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const seletorIdioma = _react1.screen.getByLabelText('Idioma');
            _react1.fireEvent.change(seletorIdioma, {
                target: {
                    value: 'en-US'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    idioma: 'en-US'
                }));
            });
        });
        (0, _globals.it)('deve alterar urgência mínima', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const seletorUrgencia = _react1.screen.getByLabelText('Urgência mínima');
            _react1.fireEvent.change(seletorUrgencia, {
                target: {
                    value: 'alta'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    urgenciaMinima: 'alta'
                }));
            });
        });
    });
    (0, _globals.describe)('Configurações de Conteúdo', ()=>{
        (0, _globals.it)('deve alterar inclusão de detalhes da avaliação', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchDetalhes = _react1.screen.getByLabelText('Incluir detalhes da avaliação');
            _react1.fireEvent.click(switchDetalhes);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    conteudo: _globals.expect.objectContaining({
                        incluirDetalhesAvaliacao: false
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar inclusão de link direto', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchLink = _react1.screen.getByLabelText('Incluir link direto');
            _react1.fireEvent.click(switchLink);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    conteudo: _globals.expect.objectContaining({
                        incluirLinkDireto: false
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar inclusão de resumo de estatísticas', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchResumo = _react1.screen.getByLabelText('Incluir resumo de estatísticas');
            _react1.fireEvent.click(switchResumo);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    conteudo: _globals.expect.objectContaining({
                        incluirResumoEstatisticas: true
                    })
                }));
            });
        });
    });
    (0, _globals.describe)('Tipos de Notificação', ()=>{
        (0, _globals.it)('deve ativar/desativar tipo de notificação', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchPendente = _react1.screen.getByLabelText('Ativar notificações de avaliação pendente');
            _react1.fireEvent.click(switchPendente);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    tipos: _globals.expect.objectContaining({
                        pendente: _globals.expect.objectContaining({
                            ativo: false
                        })
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar frequência de notificação', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const seletorFrequencia = _react1.screen.getByLabelText('Frequência para avaliação pendente');
            _react1.fireEvent.change(seletorFrequencia, {
                target: {
                    value: 'semanal'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    tipos: _globals.expect.objectContaining({
                        pendente: _globals.expect.objectContaining({
                            frequencia: 'semanal'
                        })
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar dias de antecedência', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const inputDias = _react1.screen.getByLabelText('Dias de antecedência para avaliação pendente');
            _react1.fireEvent.change(inputDias, {
                target: {
                    value: '3'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    tipos: _globals.expect.objectContaining({
                        pendente: _globals.expect.objectContaining({
                            diasAntecedencia: 3
                        })
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar horário de envio', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const inputHorario = _react1.screen.getByLabelText('Horário de envio para avaliação pendente');
            _react1.fireEvent.change(inputHorario, {
                target: {
                    value: '14:30'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    tipos: _globals.expect.objectContaining({
                        pendente: _globals.expect.objectContaining({
                            horarioEnvio: '14:30'
                        })
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar inclusão de fins de semana', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchFimSemana = _react1.screen.getByLabelText('Incluir fins de semana para avaliação pendente');
            _react1.fireEvent.click(switchFimSemana);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    tipos: _globals.expect.objectContaining({
                        pendente: _globals.expect.objectContaining({
                            incluirFinsDeSemanaSemana: true
                        })
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar inclusão de feriados', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchFeriados = _react1.screen.getByLabelText('Incluir feriados para avaliação pendente');
            _react1.fireEvent.click(switchFeriados);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    tipos: _globals.expect.objectContaining({
                        pendente: _globals.expect.objectContaining({
                            incluirFeriados: true
                        })
                    })
                }));
            });
        });
    });
    (0, _globals.describe)('Filtros', ()=>{
        (0, _globals.it)('deve alterar filtro de apenas minhas avaliações', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchMinhas = _react1.screen.getByLabelText('Apenas minhas avaliações');
            _react1.fireEvent.click(switchMinhas);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    filtros: _globals.expect.objectContaining({
                        apenasMinhasAvaliacoes: true
                    })
                }));
            });
        });
        (0, _globals.it)('deve alterar filtro de avaliações que eu avalio', async ()=>{
            mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchAvalio = _react1.screen.getByLabelText('Avaliações que eu avalio');
            _react1.fireEvent.click(switchAvalio);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    filtros: _globals.expect.objectContaining({
                        apenasAvaliacoesQueAvalia: false
                    })
                }));
            });
        });
    });
    (0, _globals.describe)('Pausa de Notificações', ()=>{
        (0, _globals.it)('deve pausar notificações', async ()=>{
            mockHookReturn.pausarNotificacoes.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const inputDataFim = _react1.screen.getByLabelText('Pausar até');
            const inputMotivo = _react1.screen.getByLabelText('Motivo (opcional)');
            const botaoPausar = _react1.screen.getByText('Pausar Notificações');
            _react1.fireEvent.change(inputDataFim, {
                target: {
                    value: '2024-12-31'
                }
            });
            _react1.fireEvent.change(inputMotivo, {
                target: {
                    value: 'Férias'
                }
            });
            _react1.fireEvent.click(botaoPausar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.pausarNotificacoes).toHaveBeenCalledWith(_globals.expect.any(Date), 'Férias');
            });
        });
        (0, _globals.it)('deve retomar notificações', async ()=>{
            _usepreferenciasnotificacao.usePreferenciasNotificacao.mockReturnValue({
                ...mockHookReturn,
                pausada: true,
                preferencias: {
                    ...mockPreferencias,
                    pausada: true,
                    pausadaAte: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
                    motivoPausa: 'Férias'
                }
            });
            mockHookReturn.retomarNotificacoes.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const botaoRetomar = _react1.screen.getByText('Retomar Notificações');
            _react1.fireEvent.click(botaoRetomar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.retomarNotificacoes).toHaveBeenCalled();
            });
        });
        (0, _globals.it)('deve exibir status de pausa', ()=>{
            _usepreferenciasnotificacao.usePreferenciasNotificacao.mockReturnValue({
                ...mockHookReturn,
                pausada: true,
                preferencias: {
                    ...mockPreferencias,
                    pausada: true,
                    pausadaAte: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
                    motivoPausa: 'Férias'
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            (0, _globals.expect)(_react1.screen.getByText(/Notificações pausadas até/)).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText(/Motivo: Férias/)).toBeInTheDocument();
        });
        (0, _globals.it)('deve validar data de pausa', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const inputDataFim = _react1.screen.getByLabelText('Pausar até');
            const botaoPausar = _react1.screen.getByText('Pausar Notificações');
            // Tentar pausar com data no passado
            _react1.fireEvent.change(inputDataFim, {
                target: {
                    value: '2020-01-01'
                }
            });
            _react1.fireEvent.click(botaoPausar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    description: 'A data deve ser no futuro',
                    variant: 'destructive'
                }));
            });
            (0, _globals.expect)(mockHookReturn.pausarNotificacoes).not.toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('Reset de Configurações', ()=>{
        (0, _globals.it)('deve resetar configurações para padrão', async ()=>{
            mockHookReturn.resetarPreferencias.mockResolvedValueOnce(true);
            window.confirm = vi.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const botaoReset = _react1.screen.getByText('Restaurar Padrões');
            _react1.fireEvent.click(botaoReset);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.resetarPreferencias).toHaveBeenCalled();
            });
        });
        (0, _globals.it)('deve cancelar reset se usuário não confirmar', async ()=>{
            window.confirm = vi.fn(()=>false);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const botaoReset = _react1.screen.getByText('Restaurar Padrões');
            _react1.fireEvent.click(botaoReset);
            (0, _globals.expect)(mockHookReturn.resetarPreferencias).not.toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('Validações', ()=>{
        (0, _globals.it)('deve validar horário de envio', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const inputHorario = _react1.screen.getByLabelText('Horário de envio para avaliação pendente');
            _react1.fireEvent.change(inputHorario, {
                target: {
                    value: '25:00'
                }
            });
            // O input type="time" deve automaticamente validar o formato
            (0, _globals.expect)(inputHorario).toHaveValue('25:00'); // Valor inválido
        });
        (0, _globals.it)('deve validar dias de antecedência', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const inputDias = _react1.screen.getByLabelText('Dias de antecedência para avaliação pendente');
            _react1.fireEvent.change(inputDias, {
                target: {
                    value: '-1'
                }
            });
            // O input type="number" com min="0" deve validar automaticamente
            (0, _globals.expect)(inputDias).toHaveValue(-1); // Valor inválido
        });
    });
    (0, _globals.describe)('Acessibilidade', ()=>{
        (0, _globals.it)('deve ter labels apropriados para screen readers', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            (0, _globals.expect)(_react1.screen.getByLabelText('Ativar notificações')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByLabelText('Ativar notificações por e-mail')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByLabelText('Formato do e-mail')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByLabelText('Idioma')).toBeInTheDocument();
        });
        (0, _globals.it)('deve ter navegação por teclado funcional', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchAtivo = _react1.screen.getByLabelText('Ativar notificações');
            switchAtivo.focus();
            (0, _globals.expect)(document.activeElement).toBe(switchAtivo);
        });
        (0, _globals.it)('deve ter descrições adequadas para campos complexos', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            // Verificar se há textos explicativos
            (0, _globals.expect)(_react1.screen.getByText(/Configurações gerais de notificação/)).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('Estados de Erro', ()=>{
        (0, _globals.it)('deve exibir erro ao falhar ao atualizar preferências', async ()=>{
            mockHookReturn.atualizarPreferencias.mockRejectedValueOnce(new Error('Erro de rede'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const switchAtivo = _react1.screen.getByLabelText('Ativar notificações');
            _react1.fireEvent.click(switchAtivo);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
        (0, _globals.it)('deve exibir erro ao falhar ao pausar notificações', async ()=>{
            mockHookReturn.pausarNotificacoes.mockRejectedValueOnce(new Error('Erro de rede'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const inputDataFim = _react1.screen.getByLabelText('Pausar até');
            const botaoPausar = _react1.screen.getByText('Pausar Notificações');
            _react1.fireEvent.change(inputDataFim, {
                target: {
                    value: '2024-12-31'
                }
            });
            _react1.fireEvent.click(botaoPausar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
        (0, _globals.it)('deve exibir erro ao falhar ao retomar notificações', async ()=>{
            _usepreferenciasnotificacao.usePreferenciasNotificacao.mockReturnValue({
                ...mockHookReturn,
                pausada: true
            });
            mockHookReturn.retomarNotificacoes.mockRejectedValueOnce(new Error('Erro de rede'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_configuracoesnotificacao.ConfiguracoesNotificacao, {}));
            const botaoRetomar = _react1.screen.getByText('Retomar Notificações');
            _react1.fireEvent.click(botaoRetomar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,