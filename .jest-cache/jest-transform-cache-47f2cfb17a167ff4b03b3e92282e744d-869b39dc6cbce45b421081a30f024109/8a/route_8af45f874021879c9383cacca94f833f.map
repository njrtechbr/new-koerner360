{"version":3,"names":["POST","esquemaRecuperacaoSenha","cov_1x5gl0y8r9","s","_zod","z","object","email","string","request","f","body","json","parse","usuario","_prisma","prisma","findUnique","where","b","_server","NextResponse","message","status","tokenRecuperacao","_crypto","default","randomBytes","toString","expiracaoToken","Date","now","update","id","data","expiracaoTokenRecuperacao","console","log","process","env","NEXTAUTH_URL","error","ZodError","errors"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\forgot-password\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { prisma } from '@/lib/prisma';\nimport crypto from 'crypto';\n\n// Schema de validação para recuperação de senha\nconst esquemaRecuperacaoSenha = z.object({\n  email: z.string().email('Email inválido'),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validar entrada\n    const { email } = esquemaRecuperacaoSenha.parse(body);\n\n    // Verificar se o usuário existe\n    const usuario = await prisma.usuario.findUnique({\n      where: { email },\n    });\n\n    // Por segurança, sempre retornamos sucesso mesmo se o email não existir\n    // Isso evita que atacantes descubram quais emails estão cadastrados\n    if (!usuario) {\n      return NextResponse.json(\n        {\n          message:\n            'Se o email estiver cadastrado, você receberá as instruções de recuperação.',\n        },\n        { status: 200 }\n      );\n    }\n\n    // Gerar token de recuperação\n    const tokenRecuperacao = crypto.randomBytes(32).toString('hex');\n    const expiracaoToken = new Date(Date.now() + 3600000); // 1 hora\n\n    // Salvar token no banco de dados\n    await prisma.usuario.update({\n      where: { id: usuario.id },\n      data: {\n        tokenRecuperacao,\n        expiracaoTokenRecuperacao: expiracaoToken,\n      },\n    });\n\n    // TODO: Implementar envio de email\n    // Por enquanto, apenas logamos o token (em produção, isso deve ser removido)\n    console.log(`Token de recuperação para ${email}: ${tokenRecuperacao}`);\n    console.log(\n      `Link de recuperação: ${process.env.NEXTAUTH_URL}/auth/reset-password?token=${tokenRecuperacao}`\n    );\n\n    return NextResponse.json(\n      {\n        message:\n          'Se o email estiver cadastrado, você receberá as instruções de recuperação.',\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Erro na recuperação de senha:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { message: 'Dados inválidos', errors: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { message: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}