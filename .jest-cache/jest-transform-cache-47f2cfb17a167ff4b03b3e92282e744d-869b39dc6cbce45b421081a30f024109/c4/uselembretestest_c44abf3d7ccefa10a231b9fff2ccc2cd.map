{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\__tests__\\use-lembretes.test.ts"],"sourcesContent":["import { renderHook, act, waitFor } from '@testing-library/react';\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { useLembretes } from '../use-lembretes';\n\n// Mock do hook useToast\nconst mockToast = jest.fn();\njest.mock('@/hooks/use-toast', () => ({\n  useToast: () => ({\n    toast: mockToast,\n  }),\n}));\n\n// Mock do fetch global\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Mock dos dados de teste\nconst mockResultadoLembretes = {\n  dados: [\n    {\n      id: '1',\n      avaliacaoId: '1',\n      usuarioId: '1',\n      tipo: 'lembrete',\n      dataEnvio: new Date().toISOString(),\n      enviado: false,\n      tentativas: 0,\n      ultimaTentativa: null,\n      erro: null,\n      criadoEm: new Date().toISOString(),\n      usuario: {\n        id: '1',\n        nome: 'João Silva',\n        email: 'joao@teste.com',\n      },\n      avaliacao: {\n        id: '1',\n        prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n        status: 'pendente',\n        avaliado: {\n          id: '1',\n          nome: 'João Silva',\n          email: 'joao@teste.com',\n        },\n        avaliador: {\n          id: '2',\n          nome: 'Maria Santos',\n          email: 'maria@teste.com',\n        },\n        periodo: {\n          id: '1',\n          nome: 'Q1 2024',\n          dataInicio: '2024-01-01',\n          dataFim: '2024-03-31',\n        },\n      },\n    },\n  ],\n  paginacao: {\n    paginaAtual: 1,\n    totalPaginas: 1,\n    totalItens: 1,\n    itensPorPagina: 50,\n    temProximaPagina: false,\n    temPaginaAnterior: false,\n  },\n};\n\ndescribe('useLembretes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Mock inicial para useEffect\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => mockResultadoLembretes,\n    });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('inicialização', () => {\n    it('deve carregar lembretes na inicialização', async () => {\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar o useEffect executar\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      expect(result.current.lembretes).toEqual(mockResultadoLembretes.dados);\n      expect(result.current.erro).toBeNull();\n      expect(mockFetch).toHaveBeenCalled();\n    });\n  });\n\n  describe('buscarLembretes', () => {\n    it('deve buscar lembretes com sucesso', async () => {\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      // Fazer nova busca\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResultadoLembretes,\n      });\n\n      await act(async () => {\n        await result.current.buscarLembretes();\n      });\n\n      expect(result.current.lembretes).toEqual(mockResultadoLembretes.dados);\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBeNull();\n    });\n\n    it('deve lidar com erro na busca', async () => {\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      const errorMessage = 'Erro ao buscar lembretes';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      await act(async () => {\n        await result.current.buscarLembretes();\n      });\n\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBe(errorMessage);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro ao buscar lembretes',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('buscarLembrete', () => {\n    it('deve buscar lembrete específico com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ dados: mockResultadoLembretes.dados[0] }),\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let lembrete;\n      await act(async () => {\n        lembrete = await result.current.buscarLembrete('1');\n      });\n\n      expect(lembrete).toEqual(mockResultadoLembretes.dados[0]);\n      expect(mockFetch).toHaveBeenCalledWith('/api/lembretes/1');\n    });\n\n    it('deve lidar com erro ao buscar lembrete específico', async () => {\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      const errorMessage = 'Lembrete não encontrado';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      let lembrete;\n      await act(async () => {\n        lembrete = await result.current.buscarLembrete('999');\n      });\n\n      expect(lembrete).toBeNull();\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro ao buscar lembrete',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('criarLembrete', () => {\n    it('deve criar lembrete com sucesso', async () => {\n      const novoLembrete = {\n        avaliacaoId: '1',\n        usuarioId: '1',\n        tipo: 'lembrete' as const,\n        dataEnvio: new Date().toISOString(),\n      };\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ dados: { ...novoLembrete, id: '2' } }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.criarLembrete(novoLembrete);\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Lembrete criado',\n        description: 'Lembrete criado com sucesso',\n      });\n    });\n\n    it('deve lidar com erro ao criar lembrete', async () => {\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      const errorMessage = 'Erro ao criar lembrete';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const novoLembrete = {\n        avaliacaoId: '1',\n        usuarioId: '1',\n        tipo: 'lembrete' as const,\n        dataEnvio: new Date().toISOString(),\n      };\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.criarLembrete(novoLembrete);\n      });\n\n      expect(sucesso).toBe(false);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro ao criar lembrete',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('atualizarLembrete', () => {\n    it('deve atualizar lembrete com sucesso', async () => {\n      const dadosAtualizacao = {\n        dataEnvio: new Date().toISOString(),\n        observacoes: 'Observação atualizada',\n      };\n\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ dados: { ...mockResultadoLembretes.dados[0], ...dadosAtualizacao } }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.atualizarLembrete('1', dadosAtualizacao);\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Lembrete atualizado',\n        description: 'Lembrete atualizado com sucesso',\n      });\n    });\n  });\n\n  describe('removerLembrete', () => {\n    it('deve remover lembrete com sucesso', async () => {\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ success: true }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.removerLembrete('1');\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Lembrete removido',\n        description: 'Lembrete removido com sucesso',\n      });\n    });\n  });\n\n  describe('executarAcaoLembrete', () => {\n    it('deve executar ação no lembrete com sucesso', async () => {\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ mensagem: 'Ação executada com sucesso' }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.executarAcaoLembrete('1', 'reenviar');\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Ação executada',\n        description: 'Ação executada com sucesso',\n      });\n    });\n  });\n\n  describe('removerLembretesLote', () => {\n    it('deve remover lembretes em lote com sucesso', async () => {\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ mensagem: 'Lembretes removidos com sucesso' }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.removerLembretesLote('limpeza', { dias: 30 });\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Lembretes removidos',\n        description: 'Lembretes removidos com sucesso',\n      });\n    });\n  });\n\n  describe('estados', () => {\n    it('deve gerenciar estado de carregamento corretamente', async () => {\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n\n      mockFetch.mockReturnValueOnce(promise);\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar que o carregamento inicial termine\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      // Simular nova busca com promise pendente\n      mockFetch.mockReturnValueOnce(promise);\n\n      // Iniciar busca\n      act(() => {\n        result.current.buscarLembretes();\n      });\n\n      // Verificar que está carregando\n      expect(result.current.carregando).toBe(true);\n\n      // Resolver promise\n      await act(async () => {\n        resolvePromise!({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n      });\n\n      // Verificar que não está mais carregando\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n    });\n\n    it('deve gerenciar paginação corretamente', async () => {\n      const resultadoComPaginacao = {\n        ...mockResultadoLembretes,\n        paginacao: {\n          ...mockResultadoLembretes.paginacao,\n          paginaAtual: 2,\n          totalPaginas: 3,\n        },\n      };\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Aguardar inicialização\n      await waitFor(() => {\n        expect(result.current.carregando).toBe(false);\n      });\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => resultadoComPaginacao,\n      });\n\n      await act(async () => {\n        await result.current.buscarLembretes({ pagina: 2 });\n      });\n\n      expect(result.current.paginacao.paginaAtual).toBe(2);\n      expect(result.current.paginacao.totalPaginas).toBe(3);\n    });\n  });\n});"],"names":["jest","mock","useToast","toast","mockToast","fn","mockFetch","global","fetch","mockResultadoLembretes","dados","id","avaliacaoId","usuarioId","tipo","dataEnvio","Date","toISOString","enviado","tentativas","ultimaTentativa","erro","criadoEm","usuario","nome","email","avaliacao","prazo","now","status","avaliado","avaliador","periodo","dataInicio","dataFim","paginacao","paginaAtual","totalPaginas","totalItens","itensPorPagina","temProximaPagina","temPaginaAnterior","describe","beforeEach","clearAllMocks","mockResolvedValue","ok","json","afterEach","resetAllMocks","it","result","renderHook","useLembretes","waitFor","expect","current","carregando","toBe","lembretes","toEqual","toBeNull","toHaveBeenCalled","mockResolvedValueOnce","act","buscarLembretes","errorMessage","mockRejectedValueOnce","Error","toHaveBeenCalledWith","title","description","variant","lembrete","buscarLembrete","novoLembrete","sucesso","criarLembrete","dadosAtualizacao","observacoes","atualizarLembrete","success","removerLembrete","mensagem","executarAcaoLembrete","removerLembretesLote","dias","resolvePromise","promise","Promise","resolve","mockReturnValueOnce","resultadoComPaginacao","pagina"],"mappings":"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"}