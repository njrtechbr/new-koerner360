f951b0ec5a03a87c7a030f549de88766
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _vitest = require("vitest");
const _listanotificacoes = require("../../notificacoes/lista-notificacoes");
const _usenotificacoesavaliacoes = require("../../../hooks/use-notificacoes-avaliacoes");
const _usetoast = require("../../../hooks/use-toast");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dos hooks
_vitest.vi.mock('../../../hooks/use-notificacoes-avaliacoes');
_vitest.vi.mock('../../../hooks/use-toast');
// Mock dos dados de teste
const mockNotificacoes = [
    {
        id: '1',
        tipo: 'AVALIACAO_PENDENTE',
        titulo: 'Avaliação Pendente',
        mensagem: 'Você tem uma avaliação pendente para João Silva',
        lida: false,
        urgencia: 'media',
        criadaEm: new Date().toISOString(),
        leituraEm: null,
        usuario: {
            id: '1',
            nome: 'João Silva',
            email: 'joao@teste.com'
        },
        avaliacao: {
            id: '1',
            titulo: 'Avaliação Q1 2024',
            prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
        }
    },
    {
        id: '2',
        tipo: 'AVALIACAO_VENCIDA',
        titulo: 'Avaliação Vencida',
        mensagem: 'A avaliação de Maria Santos está vencida',
        lida: true,
        urgencia: 'alta',
        criadaEm: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        leituraEm: new Date().toISOString(),
        usuario: {
            id: '2',
            nome: 'Maria Santos',
            email: 'maria@teste.com'
        },
        avaliacao: {
            id: '2',
            titulo: 'Avaliação Q4 2023',
            prazo: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
        }
    }
];
const mockEstatisticas = {
    total: 2,
    naoLidas: 1,
    lidas: 1,
    porTipo: {
        AVALIACAO_PENDENTE: 1,
        AVALIACAO_VENCIDA: 1,
        AVALIACAO_PROXIMA_VENCIMENTO: 0,
        NOVA_AVALIACAO: 0,
        AVALIACAO_COMPLETADA: 0,
        LEMBRETE_PERSONALIZADO: 0
    },
    porUrgencia: {
        baixa: 0,
        media: 1,
        alta: 1
    }
};
const mockHookReturn = {
    notificacoes: mockNotificacoes,
    estatisticas: mockEstatisticas,
    carregando: false,
    erro: null,
    total: 2,
    pagina: 1,
    totalPaginas: 1,
    porPagina: 10,
    buscarNotificacoes: _vitest.vi.fn(),
    buscarNotificacao: _vitest.vi.fn(),
    marcarComoLida: _vitest.vi.fn(),
    marcarTodasComoLidas: _vitest.vi.fn(),
    removerNotificacao: _vitest.vi.fn(),
    buscarEstatisticas: _vitest.vi.fn(),
    gerarNotificacoes: _vitest.vi.fn(),
    limparNotificacoes: _vitest.vi.fn()
};
const mockToast = _vitest.vi.fn();
(0, _vitest.describe)('ListaNotificacoes', ()=>{
    (0, _vitest.beforeEach)(()=>{
        _vitest.vi.clearAllMocks();
        _usenotificacoesavaliacoes.useNotificacoesAvaliacoes.mockReturnValue(mockHookReturn);
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _vitest.afterEach)(()=>{
        _vitest.vi.resetAllMocks();
    });
    (0, _vitest.describe)('Renderização', ()=>{
        (0, _vitest.it)('deve renderizar lista de notificações', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            (0, _vitest.expect)(_react1.screen.getByText('Notificações')).toBeInTheDocument();
            (0, _vitest.expect)(_react1.screen.getByText('Avaliação Pendente')).toBeInTheDocument();
            (0, _vitest.expect)(_react1.screen.getByText('Avaliação Vencida')).toBeInTheDocument();
        });
        (0, _vitest.it)('deve exibir estatísticas corretamente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            (0, _vitest.expect)(_react1.screen.getByText('2')).toBeInTheDocument(); // Total
            (0, _vitest.expect)(_react1.screen.getByText('1')).toBeInTheDocument(); // Não lidas
        });
        (0, _vitest.it)('deve exibir estado de carregamento', ()=>{
            _usenotificacoesavaliacoes.useNotificacoesAvaliacoes.mockReturnValue({
                ...mockHookReturn,
                carregando: true,
                notificacoes: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            (0, _vitest.expect)(_react1.screen.getByText('Carregando notificações...')).toBeInTheDocument();
        });
        (0, _vitest.it)('deve exibir mensagem quando não há notificações', ()=>{
            _usenotificacoesavaliacoes.useNotificacoesAvaliacoes.mockReturnValue({
                ...mockHookReturn,
                notificacoes: [],
                total: 0
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            (0, _vitest.expect)(_react1.screen.getByText('Nenhuma notificação encontrada')).toBeInTheDocument();
        });
        (0, _vitest.it)('deve exibir erro quando houver falha', ()=>{
            const errorMessage = 'Erro ao carregar notificações';
            _usenotificacoesavaliacoes.useNotificacoesAvaliacoes.mockReturnValue({
                ...mockHookReturn,
                erro: errorMessage,
                notificacoes: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            (0, _vitest.expect)(_react1.screen.getByText(errorMessage)).toBeInTheDocument();
        });
    });
    (0, _vitest.describe)('Filtros', ()=>{
        (0, _vitest.it)('deve aplicar filtro por tipo', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const filtroTipo = _react1.screen.getByLabelText('Filtrar por tipo');
            _react1.fireEvent.change(filtroTipo, {
                target: {
                    value: 'AVALIACAO_PENDENTE'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.objectContaining({
                    tipo: 'AVALIACAO_PENDENTE'
                }), _vitest.expect.any(Object));
            });
        });
        (0, _vitest.it)('deve aplicar filtro por status de leitura', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const filtroLida = _react1.screen.getByLabelText('Filtrar por status');
            _react1.fireEvent.change(filtroLida, {
                target: {
                    value: 'nao_lida'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.objectContaining({
                    lida: false
                }), _vitest.expect.any(Object));
            });
        });
        (0, _vitest.it)('deve aplicar filtro por urgência', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const filtroUrgencia = _react1.screen.getByLabelText('Filtrar por urgência');
            _react1.fireEvent.change(filtroUrgencia, {
                target: {
                    value: 'alta'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.objectContaining({
                    urgencia: 'alta'
                }), _vitest.expect.any(Object));
            });
        });
        (0, _vitest.it)('deve aplicar filtro por data', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const dataInicio = _react1.screen.getByLabelText('Data início');
            const dataFim = _react1.screen.getByLabelText('Data fim');
            _react1.fireEvent.change(dataInicio, {
                target: {
                    value: '2024-01-01'
                }
            });
            _react1.fireEvent.change(dataFim, {
                target: {
                    value: '2024-12-31'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.objectContaining({
                    dataInicio: _vitest.expect.any(Date),
                    dataFim: _vitest.expect.any(Date)
                }), _vitest.expect.any(Object));
            });
        });
        (0, _vitest.it)('deve limpar filtros', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            // Aplicar alguns filtros primeiro
            const filtroTipo = _react1.screen.getByLabelText('Filtrar por tipo');
            _react1.fireEvent.change(filtroTipo, {
                target: {
                    value: 'AVALIACAO_PENDENTE'
                }
            });
            // Limpar filtros
            const botaoLimpar = _react1.screen.getByText('Limpar Filtros');
            _react1.fireEvent.click(botaoLimpar);
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith({}, _vitest.expect.any(Object));
            });
        });
    });
    (0, _vitest.describe)('Busca', ()=>{
        (0, _vitest.it)('deve realizar busca por texto', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const campoBusca = _react1.screen.getByPlaceholderText('Buscar notificações...');
            _react1.fireEvent.change(campoBusca, {
                target: {
                    value: 'João Silva'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.objectContaining({
                    busca: 'João Silva'
                }), _vitest.expect.any(Object));
            }, {
                timeout: 1000
            }); // Aguardar debounce
        });
        (0, _vitest.it)('deve limpar busca', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const campoBusca = _react1.screen.getByPlaceholderText('Buscar notificações...');
            _react1.fireEvent.change(campoBusca, {
                target: {
                    value: 'teste'
                }
            });
            _react1.fireEvent.change(campoBusca, {
                target: {
                    value: ''
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.objectContaining({
                    busca: ''
                }), _vitest.expect.any(Object));
            }, {
                timeout: 1000
            });
        });
    });
    (0, _vitest.describe)('Ações de Notificação', ()=>{
        (0, _vitest.it)('deve marcar notificação como lida', async ()=>{
            mockHookReturn.marcarComoLida.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoMarcarLida = _react1.screen.getAllByText('Marcar como lida')[0];
            _react1.fireEvent.click(botaoMarcarLida);
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.marcarComoLida).toHaveBeenCalledWith('1');
            });
        });
        (0, _vitest.it)('deve remover notificação', async ()=>{
            mockHookReturn.removerNotificacao.mockResolvedValueOnce(true);
            window.confirm = _vitest.vi.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoRemover = _react1.screen.getAllByText('Remover')[0];
            _react1.fireEvent.click(botaoRemover);
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.removerNotificacao).toHaveBeenCalledWith('1');
            });
        });
        (0, _vitest.it)('deve cancelar remoção se usuário não confirmar', async ()=>{
            window.confirm = _vitest.vi.fn(()=>false);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoRemover = _react1.screen.getAllByText('Remover')[0];
            _react1.fireEvent.click(botaoRemover);
            (0, _vitest.expect)(mockHookReturn.removerNotificacao).not.toHaveBeenCalled();
        });
        (0, _vitest.it)('deve marcar todas como lidas', async ()=>{
            mockHookReturn.marcarTodasComoLidas.mockResolvedValueOnce({
                marcadas: 1
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoMarcarTodas = _react1.screen.getByText('Marcar Todas como Lidas');
            _react1.fireEvent.click(botaoMarcarTodas);
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.marcarTodasComoLidas).toHaveBeenCalledWith({});
            });
        });
        (0, _vitest.it)('deve limpar notificações lidas', async ()=>{
            mockHookReturn.limparNotificacoes.mockResolvedValueOnce({
                removidas: 1
            });
            window.confirm = _vitest.vi.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoLimpar = _react1.screen.getByText('Limpar Lidas');
            _react1.fireEvent.click(botaoLimpar);
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.limparNotificacoes).toHaveBeenCalledWith({
                    lidas: true
                });
            });
        });
    });
    (0, _vitest.describe)('Paginação', ()=>{
        (0, _vitest.it)('deve navegar para próxima página', async ()=>{
            _usenotificacoesavaliacoes.useNotificacoesAvaliacoes.mockReturnValue({
                ...mockHookReturn,
                pagina: 1,
                totalPaginas: 3
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoProxima = _react1.screen.getByText('Próxima');
            _react1.fireEvent.click(botaoProxima);
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.any(Object), _vitest.expect.objectContaining({
                    pagina: 2
                }));
            });
        });
        (0, _vitest.it)('deve navegar para página anterior', async ()=>{
            _usenotificacoesavaliacoes.useNotificacoesAvaliacoes.mockReturnValue({
                ...mockHookReturn,
                pagina: 2,
                totalPaginas: 3
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoAnterior = _react1.screen.getByText('Anterior');
            _react1.fireEvent.click(botaoAnterior);
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.any(Object), _vitest.expect.objectContaining({
                    pagina: 1
                }));
            });
        });
        (0, _vitest.it)('deve alterar itens por página', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const seletorPorPagina = _react1.screen.getByLabelText('Itens por página');
            _react1.fireEvent.change(seletorPorPagina, {
                target: {
                    value: '25'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.any(Object), _vitest.expect.objectContaining({
                    porPagina: 25,
                    pagina: 1
                }));
            });
        });
    });
    (0, _vitest.describe)('Ordenação', ()=>{
        (0, _vitest.it)('deve ordenar por data de criação', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const seletorOrdenacao = _react1.screen.getByLabelText('Ordenar por');
            _react1.fireEvent.change(seletorOrdenacao, {
                target: {
                    value: 'criadaEm'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.objectContaining({
                    ordenarPor: 'criadaEm'
                }), _vitest.expect.any(Object));
            });
        });
        (0, _vitest.it)('deve alterar direção da ordenação', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const seletorDirecao = _react1.screen.getByLabelText('Direção');
            _react1.fireEvent.change(seletorDirecao, {
                target: {
                    value: 'asc'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(_vitest.expect.objectContaining({
                    direcao: 'asc'
                }), _vitest.expect.any(Object));
            });
        });
    });
    (0, _vitest.describe)('Atualização Automática', ()=>{
        (0, _vitest.it)('deve atualizar lista após marcar como lida', async ()=>{
            mockHookReturn.marcarComoLida.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoMarcarLida = _react1.screen.getAllByText('Marcar como lida')[0];
            _react1.fireEvent.click(botaoMarcarLida);
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledTimes(2); // Initial + after action
                (0, _vitest.expect)(mockHookReturn.buscarEstatisticas).toHaveBeenCalledTimes(2);
            });
        });
        (0, _vitest.it)('deve atualizar lista após remover notificação', async ()=>{
            mockHookReturn.removerNotificacao.mockResolvedValueOnce(true);
            window.confirm = _vitest.vi.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoRemover = _react1.screen.getAllByText('Remover')[0];
            _react1.fireEvent.click(botaoRemover);
            await (0, _react1.waitFor)(()=>{
                (0, _vitest.expect)(mockHookReturn.buscarNotificacoes).toHaveBeenCalledTimes(2);
                (0, _vitest.expect)(mockHookReturn.buscarEstatisticas).toHaveBeenCalledTimes(2);
            });
        });
    });
    (0, _vitest.describe)('Acessibilidade', ()=>{
        (0, _vitest.it)('deve ter labels apropriados para screen readers', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            (0, _vitest.expect)(_react1.screen.getByLabelText('Filtrar por tipo')).toBeInTheDocument();
            (0, _vitest.expect)(_react1.screen.getByLabelText('Filtrar por status')).toBeInTheDocument();
            (0, _vitest.expect)(_react1.screen.getByLabelText('Filtrar por urgência')).toBeInTheDocument();
            (0, _vitest.expect)(_react1.screen.getByLabelText('Ordenar por')).toBeInTheDocument();
        });
        (0, _vitest.it)('deve ter navegação por teclado funcional', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            const botaoMarcarLida = _react1.screen.getAllByText('Marcar como lida')[0];
            botaoMarcarLida.focus();
            (0, _vitest.expect)(document.activeElement).toBe(botaoMarcarLida);
        });
    });
    (0, _vitest.describe)('Responsividade', ()=>{
        (0, _vitest.it)('deve adaptar layout para telas pequenas', ()=>{
            // Mock window.innerWidth
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 768
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listanotificacoes.ListaNotificacoes, {}));
            // Verificar se elementos responsivos estão presentes
            (0, _vitest.expect)(_react1.screen.getByText('Notificações')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,