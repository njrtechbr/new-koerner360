{"version":3,"names":["cov_6rb6tgtmk","actualCoverage","s","useEmailNotificacoes","f","useEnvioRapido","useEstatisticasEmail","configuracao","enviando","setEnviando","_react","useState","ultimoResultado","setUltimoResultado","estatisticas","setEstatisticas","Map","config","tentativasMaximas","intervaloTentativas","notificarSucesso","notificarErro","gerenciador","_emailnotificacoes","obterGerenciadorEmail","enviarComRetry","useCallback","funcaoEnvio","tentativa","b","resultado","sucesso","Promise","resolve","setTimeout","error","enviarNotificacaoAvaliacaoPendente","avaliacao","destinatario","emailUtils","notificarAvaliacaoPendente","_sonner","toast","success","nome","erro","Error","message","email","timestamp","Date","enviarLembretePrazo","diasRestantes","enviarLembrete","enviarNotificacaoVencida","notificarVencimento","enviarResumoSemanal","avaliacoes","enviarResumo","enviarLoteNotificacoes","notificacoes","inicioLote","now","resultados","sucessos","falhas","notificacao","tipo","push","tempoTotal","resultadoLote","total","length","atualizarEstatisticas","novasEstatisticas","obterEstatisticas","limparEstatisticas","carregando","setCarregando","carregarEstatisticas","console","obterEstatisticasPorTipo","get","totalEnviados","taxaSucesso","tempoMedio","obterEstatisticasGerais","tempoMedioTotal","ultimoEnvio","stats"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-email-notificacoes.ts"],"sourcesContent":["'use client';\n\nimport { useState, useCallback } from 'react';\nimport {\n  GerenciadorEmailNotificacoes,\n  obterGerenciadorEmail,\n  emailUtils,\n  ResultadoEnvioEmail,\n  EstatisticasEnvio,\n  DestinatarioEmail,\n  TipoNotificacaoEmail\n} from '@/lib/utils/email-notificacoes';\nimport { AvaliacaoPendente } from '@/lib/utils/notificacoes-avaliacoes';\nimport { toast } from 'sonner';\n\n/**\n * Interface para configurações de envio\n */\nexport interface ConfiguracaoEnvio {\n  tentativasMaximas: number;\n  intervaloTentativas: number;\n  notificarSucesso: boolean;\n  notificarErro: boolean;\n}\n\n/**\n * Interface para resultado de envio em lote\n */\nexport interface ResultadoLote {\n  total: number;\n  sucessos: number;\n  falhas: number;\n  resultados: ResultadoEnvioEmail[];\n  tempoTotal: number;\n}\n\n/**\n * Hook para gerenciar envio de e-mails de notificações\n */\nexport function useEmailNotificacoes(configuracao?: Partial<ConfiguracaoEnvio>) {\n  const [enviando, setEnviando] = useState(false);\n  const [ultimoResultado, setUltimoResultado] = useState<ResultadoEnvioEmail | null>(null);\n  const [estatisticas, setEstatisticas] = useState<Map<string, EstatisticasEnvio>>(new Map());\n  \n  const config: ConfiguracaoEnvio = {\n    tentativasMaximas: 3,\n    intervaloTentativas: 1000,\n    notificarSucesso: true,\n    notificarErro: true,\n    ...configuracao\n  };\n\n  const gerenciador = obterGerenciadorEmail();\n\n  /**\n   * Envia e-mail com retry automático\n   */\n  const enviarComRetry = useCallback(async (\n    funcaoEnvio: () => Promise<ResultadoEnvioEmail>,\n    tentativa = 1\n  ): Promise<ResultadoEnvioEmail> => {\n    try {\n      const resultado = await funcaoEnvio();\n      \n      if (resultado.sucesso) {\n        return resultado;\n      }\n      \n      if (tentativa < config.tentativasMaximas) {\n        await new Promise(resolve => setTimeout(resolve, config.intervaloTentativas * tentativa));\n        return enviarComRetry(funcaoEnvio, tentativa + 1);\n      }\n      \n      return resultado;\n    } catch (error) {\n      if (tentativa < config.tentativasMaximas) {\n        await new Promise(resolve => setTimeout(resolve, config.intervaloTentativas * tentativa));\n        return enviarComRetry(funcaoEnvio, tentativa + 1);\n      }\n      \n      throw error;\n    }\n  }, [config]);\n\n  /**\n   * Envia notificação de avaliação pendente\n   */\n  const enviarNotificacaoAvaliacaoPendente = useCallback(async (\n    avaliacao: AvaliacaoPendente,\n    destinatario: DestinatarioEmail\n  ): Promise<ResultadoEnvioEmail> => {\n    setEnviando(true);\n    \n    try {\n      const resultado = await enviarComRetry(() => \n        emailUtils.notificarAvaliacaoPendente(avaliacao, destinatario)\n      );\n      \n      setUltimoResultado(resultado);\n      \n      if (resultado.sucesso && config.notificarSucesso) {\n        toast.success(`E-mail enviado para ${destinatario.nome}`);\n      } else if (!resultado.sucesso && config.notificarErro) {\n        toast.error(`Falha ao enviar e-mail: ${resultado.erro}`);\n      }\n      \n      return resultado;\n    } catch (error) {\n      const resultado: ResultadoEnvioEmail = {\n        sucesso: false,\n        erro: error instanceof Error ? error.message : 'Erro desconhecido',\n        destinatario: destinatario.email,\n        timestamp: new Date()\n      };\n      \n      setUltimoResultado(resultado);\n      \n      if (config.notificarErro) {\n        toast.error(`Erro ao enviar e-mail: ${resultado.erro}`);\n      }\n      \n      return resultado;\n    } finally {\n      setEnviando(false);\n    }\n  }, [enviarComRetry, config]);\n\n  /**\n   * Envia lembrete de prazo\n   */\n  const enviarLembretePrazo = useCallback(async (\n    avaliacao: AvaliacaoPendente,\n    destinatario: DestinatarioEmail,\n    diasRestantes: number\n  ): Promise<ResultadoEnvioEmail> => {\n    setEnviando(true);\n    \n    try {\n      const resultado = await enviarComRetry(() => \n        emailUtils.enviarLembrete(avaliacao, destinatario, diasRestantes)\n      );\n      \n      setUltimoResultado(resultado);\n      \n      if (resultado.sucesso && config.notificarSucesso) {\n        toast.success(`Lembrete enviado para ${destinatario.nome}`);\n      } else if (!resultado.sucesso && config.notificarErro) {\n        toast.error(`Falha ao enviar lembrete: ${resultado.erro}`);\n      }\n      \n      return resultado;\n    } catch (error) {\n      const resultado: ResultadoEnvioEmail = {\n        sucesso: false,\n        erro: error instanceof Error ? error.message : 'Erro desconhecido',\n        destinatario: destinatario.email,\n        timestamp: new Date()\n      };\n      \n      setUltimoResultado(resultado);\n      \n      if (config.notificarErro) {\n        toast.error(`Erro ao enviar lembrete: ${resultado.erro}`);\n      }\n      \n      return resultado;\n    } finally {\n      setEnviando(false);\n    }\n  }, [enviarComRetry, config]);\n\n  /**\n   * Envia notificação de vencimento\n   */\n  const enviarNotificacaoVencida = useCallback(async (\n    avaliacao: AvaliacaoPendente,\n    destinatario: DestinatarioEmail\n  ): Promise<ResultadoEnvioEmail> => {\n    setEnviando(true);\n    \n    try {\n      const resultado = await enviarComRetry(() => \n        emailUtils.notificarVencimento(avaliacao, destinatario)\n      );\n      \n      setUltimoResultado(resultado);\n      \n      if (resultado.sucesso && config.notificarSucesso) {\n        toast.success(`Notificação de vencimento enviada para ${destinatario.nome}`);\n      } else if (!resultado.sucesso && config.notificarErro) {\n        toast.error(`Falha ao enviar notificação: ${resultado.erro}`);\n      }\n      \n      return resultado;\n    } catch (error) {\n      const resultado: ResultadoEnvioEmail = {\n        sucesso: false,\n        erro: error instanceof Error ? error.message : 'Erro desconhecido',\n        destinatario: destinatario.email,\n        timestamp: new Date()\n      };\n      \n      setUltimoResultado(resultado);\n      \n      if (config.notificarErro) {\n        toast.error(`Erro ao enviar notificação: ${resultado.erro}`);\n      }\n      \n      return resultado;\n    } finally {\n      setEnviando(false);\n    }\n  }, [enviarComRetry, config]);\n\n  /**\n   * Envia resumo semanal\n   */\n  const enviarResumoSemanal = useCallback(async (\n    avaliacoes: AvaliacaoPendente[],\n    destinatario: DestinatarioEmail\n  ): Promise<ResultadoEnvioEmail> => {\n    setEnviando(true);\n    \n    try {\n      const resultado = await enviarComRetry(() => \n        emailUtils.enviarResumo(avaliacoes, destinatario)\n      );\n      \n      setUltimoResultado(resultado);\n      \n      if (resultado.sucesso && config.notificarSucesso) {\n        toast.success(`Resumo semanal enviado para ${destinatario.nome}`);\n      } else if (!resultado.sucesso && config.notificarErro) {\n        toast.error(`Falha ao enviar resumo: ${resultado.erro}`);\n      }\n      \n      return resultado;\n    } catch (error) {\n      const resultado: ResultadoEnvioEmail = {\n        sucesso: false,\n        erro: error instanceof Error ? error.message : 'Erro desconhecido',\n        destinatario: destinatario.email,\n        timestamp: new Date()\n      };\n      \n      setUltimoResultado(resultado);\n      \n      if (config.notificarErro) {\n        toast.error(`Erro ao enviar resumo: ${resultado.erro}`);\n      }\n      \n      return resultado;\n    } finally {\n      setEnviando(false);\n    }\n  }, [enviarComRetry, config]);\n\n  /**\n   * Envia múltiplas notificações em lote\n   */\n  const enviarLoteNotificacoes = useCallback(async (\n    notificacoes: Array<{\n      avaliacao: AvaliacaoPendente;\n      destinatario: DestinatarioEmail;\n      tipo: TipoNotificacaoEmail;\n      diasRestantes?: number;\n    }>\n  ): Promise<ResultadoLote> => {\n    setEnviando(true);\n    const inicioLote = Date.now();\n    \n    try {\n      const resultados: ResultadoEnvioEmail[] = [];\n      let sucessos = 0;\n      let falhas = 0;\n      \n      for (const notificacao of notificacoes) {\n        try {\n          let resultado: ResultadoEnvioEmail;\n          \n          switch (notificacao.tipo) {\n            case 'avaliacao_pendente':\n              resultado = await enviarNotificacaoAvaliacaoPendente(\n                notificacao.avaliacao,\n                notificacao.destinatario\n              );\n              break;\n            case 'lembrete_prazo':\n              resultado = await enviarLembretePrazo(\n                notificacao.avaliacao,\n                notificacao.destinatario,\n                notificacao.diasRestantes || 3\n              );\n              break;\n            case 'avaliacao_vencida':\n              resultado = await enviarNotificacaoVencida(\n                notificacao.avaliacao,\n                notificacao.destinatario\n              );\n              break;\n            default:\n              resultado = {\n                sucesso: false,\n                erro: `Tipo de notificação não suportado: ${notificacao.tipo}`,\n                destinatario: notificacao.destinatario.email,\n                timestamp: new Date()\n              };\n          }\n          \n          resultados.push(resultado);\n          \n          if (resultado.sucesso) {\n            sucessos++;\n          } else {\n            falhas++;\n          }\n          \n          // Pequeno delay entre envios\n          await new Promise(resolve => setTimeout(resolve, 100));\n        } catch (error) {\n          const resultado: ResultadoEnvioEmail = {\n            sucesso: false,\n            erro: error instanceof Error ? error.message : 'Erro desconhecido',\n            destinatario: notificacao.destinatario.email,\n            timestamp: new Date()\n          };\n          \n          resultados.push(resultado);\n          falhas++;\n        }\n      }\n      \n      const tempoTotal = Date.now() - inicioLote;\n      \n      const resultadoLote: ResultadoLote = {\n        total: notificacoes.length,\n        sucessos,\n        falhas,\n        resultados,\n        tempoTotal\n      };\n      \n      if (config.notificarSucesso && sucessos > 0) {\n        toast.success(`${sucessos} e-mail${sucessos !== 1 ? 's' : ''} enviado${sucessos !== 1 ? 's' : ''} com sucesso`);\n      }\n      \n      if (config.notificarErro && falhas > 0) {\n        toast.error(`${falhas} e-mail${falhas !== 1 ? 's' : ''} falharam no envio`);\n      }\n      \n      return resultadoLote;\n    } finally {\n      setEnviando(false);\n    }\n  }, [enviarNotificacaoAvaliacaoPendente, enviarLembretePrazo, enviarNotificacaoVencida, config]);\n\n  /**\n   * Atualiza estatísticas\n   */\n  const atualizarEstatisticas = useCallback(() => {\n    const novasEstatisticas = gerenciador.obterEstatisticas() as Map<string, EstatisticasEnvio>;\n    setEstatisticas(new Map(novasEstatisticas));\n  }, [gerenciador]);\n\n  /**\n   * Limpa estatísticas\n   */\n  const limparEstatisticas = useCallback((tipo?: TipoNotificacaoEmail) => {\n    gerenciador.limparEstatisticas(tipo);\n    atualizarEstatisticas();\n  }, [gerenciador, atualizarEstatisticas]);\n\n  return {\n    // Estado\n    enviando,\n    ultimoResultado,\n    estatisticas,\n    \n    // Funções de envio\n    enviarNotificacaoAvaliacaoPendente,\n    enviarLembretePrazo,\n    enviarNotificacaoVencida,\n    enviarResumoSemanal,\n    enviarLoteNotificacoes,\n    \n    // Funções de controle\n    atualizarEstatisticas,\n    limparEstatisticas\n  };\n}\n\n/**\n * Hook simplificado para envio rápido de notificações\n */\nexport function useEnvioRapido() {\n  const {\n    enviarNotificacaoAvaliacaoPendente,\n    enviarLembretePrazo,\n    enviarNotificacaoVencida,\n    enviando\n  } = useEmailNotificacoes({\n    notificarSucesso: false,\n    notificarErro: true\n  });\n\n  return {\n    enviando,\n    notificarAvaliacaoPendente: enviarNotificacaoAvaliacaoPendente,\n    enviarLembrete: enviarLembretePrazo,\n    notificarVencimento: enviarNotificacaoVencida\n  };\n}\n\n/**\n * Hook para monitoramento de estatísticas de e-mail\n */\nexport function useEstatisticasEmail() {\n  const [estatisticas, setEstatisticas] = useState<Map<string, EstatisticasEnvio>>(new Map());\n  const [carregando, setCarregando] = useState(false);\n  \n  const gerenciador = obterGerenciadorEmail();\n\n  const carregarEstatisticas = useCallback(async () => {\n    setCarregando(true);\n    try {\n      const novasEstatisticas = gerenciador.obterEstatisticas() as Map<string, EstatisticasEnvio>;\n      setEstatisticas(new Map(novasEstatisticas));\n    } catch (error) {\n      console.error('Erro ao carregar estatísticas de e-mail:', error);\n    } finally {\n      setCarregando(false);\n    }\n  }, [gerenciador]);\n\n  const obterEstatisticasPorTipo = useCallback((tipo: TipoNotificacaoEmail): EstatisticasEnvio => {\n    return estatisticas.get(tipo) || {\n      totalEnviados: 0,\n      sucessos: 0,\n      falhas: 0,\n      taxaSucesso: 0,\n      tempoMedio: 0\n    };\n  }, [estatisticas]);\n\n  const obterEstatisticasGerais = useCallback((): EstatisticasEnvio => {\n    let totalEnviados = 0;\n    let sucessos = 0;\n    let falhas = 0;\n    let tempoMedioTotal = 0;\n    let ultimoEnvio: Date | undefined;\n\n    for (const [, stats] of estatisticas) {\n      totalEnviados += stats.totalEnviados;\n      sucessos += stats.sucessos;\n      falhas += stats.falhas;\n      tempoMedioTotal += stats.tempoMedio * stats.totalEnviados;\n      \n      if (stats.ultimoEnvio && (!ultimoEnvio || stats.ultimoEnvio > ultimoEnvio)) {\n        ultimoEnvio = stats.ultimoEnvio;\n      }\n    }\n\n    return {\n      totalEnviados,\n      sucessos,\n      falhas,\n      taxaSucesso: totalEnviados > 0 ? (sucessos / totalEnviados) * 100 : 0,\n      tempoMedio: totalEnviados > 0 ? tempoMedioTotal / totalEnviados : 0,\n      ultimoEnvio\n    };\n  }, [estatisticas]);\n\n  return {\n    estatisticas,\n    carregando,\n    carregarEstatisticas,\n    obterEstatisticasPorTipo,\n    obterEstatisticasGerais\n  };\n}"],"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","ignoreList":[]}