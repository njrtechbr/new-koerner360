601e221078ffd9d1eab667a2d82aebdc
"use strict";

/* istanbul ignore next */
function cov_osr0csnta() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\[id]\\route.ts";
  var hash = "a3a691b2a0f4a5a496947844ca282b7657f60d99";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\[id]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 18
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "9": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 45
        }
      },
      "10": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 49
        }
      },
      "11": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 41
        }
      },
      "12": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 69
        }
      },
      "13": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 85
        }
      },
      "14": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 135,
          column: 5
        }
      },
      "15": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 80
        }
      },
      "16": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "17": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "18": {
        start: {
          line: 40,
          column: 35
        },
        end: {
          line: 40,
          column: 99
        }
      },
      "19": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "20": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "21": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 47
        }
      },
      "22": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 64,
          column: 15
        }
      },
      "25": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "26": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "27": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 71
        }
      },
      "28": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 119,
          column: 10
        }
      },
      "29": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "30": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "31": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 50
        }
      },
      "32": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 56
        }
      },
      "33": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      },
      "34": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 384,
          column: 5
        }
      },
      "35": {
        start: {
          line: 139,
          column: 24
        },
        end: {
          line: 139,
          column: 80
        }
      },
      "36": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "37": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "38": {
        start: {
          line: 148,
          column: 37
        },
        end: {
          line: 148,
          column: 101
        }
      },
      "39": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "40": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "41": {
        start: {
          line: 157,
          column: 23
        },
        end: {
          line: 157,
          column: 49
        }
      },
      "42": {
        start: {
          line: 158,
          column: 21
        },
        end: {
          line: 158,
          column: 41
        }
      },
      "43": {
        start: {
          line: 160,
          column: 35
        },
        end: {
          line: 160,
          column: 105
        }
      },
      "44": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "45": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "46": {
        start: {
          line: 169,
          column: 31
        },
        end: {
          line: 169,
          column: 55
        }
      },
      "47": {
        start: {
          line: 171,
          column: 24
        },
        end: {
          line: 178,
          column: 10
        }
      },
      "48": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "49": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "50": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "51": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 192,
          column: 15
        }
      },
      "52": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 71
        }
      },
      "53": {
        start: {
          line: 197,
          column: 33
        },
        end: {
          line: 208,
          column: 10
        }
      },
      "54": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "55": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "56": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "57": {
        start: {
          line: 218,
          column: 34
        },
        end: {
          line: 225,
          column: 14
        }
      },
      "58": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "59": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 231,
          column: 19
        }
      },
      "60": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "61": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 257,
          column: 13
        }
      },
      "62": {
        start: {
          line: 238,
          column: 39
        },
        end: {
          line: 245,
          column: 18
        }
      },
      "63": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 256,
          column: 17
        }
      },
      "64": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 255,
          column: 23
        }
      },
      "65": {
        start: {
          line: 249,
          column: 65
        },
        end: {
          line: 252,
          column: 29
        }
      },
      "66": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 273,
          column: 13
        }
      },
      "67": {
        start: {
          line: 260,
          column: 45
        },
        end: {
          line: 265,
          column: 18
        }
      },
      "68": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 272,
          column: 17
        }
      },
      "69": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 271,
          column: 23
        }
      },
      "70": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "71": {
        start: {
          line: 277,
          column: 35
        },
        end: {
          line: 277,
          column: 128
        }
      },
      "72": {
        start: {
          line: 278,
          column: 32
        },
        end: {
          line: 278,
          column: 116
        }
      },
      "73": {
        start: {
          line: 279,
          column: 41
        },
        end: {
          line: 335,
          column: 14
        }
      },
      "74": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 348,
          column: 13
        }
      },
      "75": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 347,
          column: 19
        }
      },
      "76": {
        start: {
          line: 339,
          column: 62
        },
        end: {
          line: 344,
          column: 25
        }
      },
      "77": {
        start: {
          line: 351,
          column: 34
        },
        end: {
          line: 375,
          column: 10
        }
      },
      "78": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 60
        }
      },
      "79": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 59
        }
      },
      "80": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 383,
          column: 11
        }
      },
      "81": {
        start: {
          line: 387,
          column: 4
        },
        end: {
          line: 479,
          column: 5
        }
      },
      "82": {
        start: {
          line: 388,
          column: 24
        },
        end: {
          line: 388,
          column: 80
        }
      },
      "83": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 395,
          column: 9
        }
      },
      "84": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 394,
          column: 15
        }
      },
      "85": {
        start: {
          line: 397,
          column: 35
        },
        end: {
          line: 397,
          column: 99
        }
      },
      "86": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 405,
          column: 9
        }
      },
      "87": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 404,
          column: 15
        }
      },
      "88": {
        start: {
          line: 406,
          column: 23
        },
        end: {
          line: 406,
          column: 47
        }
      },
      "89": {
        start: {
          line: 408,
          column: 24
        },
        end: {
          line: 415,
          column: 10
        }
      },
      "90": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 422,
          column: 9
        }
      },
      "91": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 421,
          column: 15
        }
      },
      "92": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "93": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 429,
          column: 15
        }
      },
      "94": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 432,
          column: 71
        }
      },
      "95": {
        start: {
          line: 434,
          column: 33
        },
        end: {
          line: 445,
          column: 10
        }
      },
      "96": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 452,
          column: 9
        }
      },
      "97": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 451,
          column: 15
        }
      },
      "98": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 460,
          column: 9
        }
      },
      "99": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 459,
          column: 15
        }
      },
      "100": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 466,
          column: 11
        }
      },
      "101": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 471,
          column: 11
        }
      },
      "102": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 473,
          column: 57
        }
      },
      "103": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 478,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 18
          }
        },
        loc: {
          start: {
            line: 29,
            column: 40
          },
          end: {
            line: 136,
            column: 1
          }
        },
        line: 29
      },
      "5": {
        name: "PUT",
        decl: {
          start: {
            line: 137,
            column: 15
          },
          end: {
            line: 137,
            column: 18
          }
        },
        loc: {
          start: {
            line: 137,
            column: 40
          },
          end: {
            line: 385,
            column: 1
          }
        },
        line: 137
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 249,
            column: 59
          },
          end: {
            line: 249,
            column: 60
          }
        },
        loc: {
          start: {
            line: 249,
            column: 65
          },
          end: {
            line: 252,
            column: 29
          }
        },
        line: 249
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 339,
            column: 56
          },
          end: {
            line: 339,
            column: 57
          }
        },
        loc: {
          start: {
            line: 339,
            column: 62
          },
          end: {
            line: 344,
            column: 25
          }
        },
        line: 339
      },
      "8": {
        name: "DELETE",
        decl: {
          start: {
            line: 386,
            column: 15
          },
          end: {
            line: 386,
            column: 21
          }
        },
        loc: {
          start: {
            line: 386,
            column: 43
          },
          end: {
            line: 480,
            column: 1
          }
        },
        line: 386
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 58
          }
        }, {
          start: {
            line: 67,
            column: 62
          },
          end: {
            line: 67,
            column: 109
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "6": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "7": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "8": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "9": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "10": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "11": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 187,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 187,
            column: 58
          }
        }, {
          start: {
            line: 187,
            column: 62
          },
          end: {
            line: 187,
            column: 109
          }
        }],
        line: 187
      },
      "12": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "13": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "14": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 217,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 217,
            column: 31
          }
        }, {
          start: {
            line: 217,
            column: 35
          },
          end: {
            line: 217,
            column: 80
          }
        }],
        line: 217
      },
      "15": {
        loc: {
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "16": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "17": {
        loc: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 235,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 235,
            column: 33
          }
        }, {
          start: {
            line: 235,
            column: 37
          },
          end: {
            line: 235,
            column: 86
          }
        }],
        line: 235
      },
      "18": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "19": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 256,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 256,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "20": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 273,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 273,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "21": {
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 272,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 272,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "22": {
        loc: {
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "23": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 276,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 276,
            column: 37
          }
        }, {
          start: {
            line: 276,
            column: 41
          },
          end: {
            line: 276,
            column: 63
          }
        }],
        line: 276
      },
      "24": {
        loc: {
          start: {
            line: 277,
            column: 35
          },
          end: {
            line: 277,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 277,
            column: 63
          },
          end: {
            line: 277,
            column: 98
          }
        }, {
          start: {
            line: 277,
            column: 101
          },
          end: {
            line: 277,
            column: 128
          }
        }],
        line: 277
      },
      "25": {
        loc: {
          start: {
            line: 278,
            column: 32
          },
          end: {
            line: 278,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 278,
            column: 57
          },
          end: {
            line: 278,
            column: 89
          }
        }, {
          start: {
            line: 278,
            column: 92
          },
          end: {
            line: 278,
            column: 116
          }
        }],
        line: 278
      },
      "26": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 348,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 348,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "27": {
        loc: {
          start: {
            line: 357,
            column: 28
          },
          end: {
            line: 357,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 357,
            column: 56
          },
          end: {
            line: 357,
            column: 91
          }
        }, {
          start: {
            line: 357,
            column: 94
          },
          end: {
            line: 357,
            column: 103
          }
        }],
        line: 357
      },
      "28": {
        loc: {
          start: {
            line: 358,
            column: 25
          },
          end: {
            line: 358,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 358,
            column: 50
          },
          end: {
            line: 358,
            column: 82
          }
        }, {
          start: {
            line: 358,
            column: 85
          },
          end: {
            line: 358,
            column: 94
          }
        }],
        line: 358
      },
      "29": {
        loc: {
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 395,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 8
          },
          end: {
            line: 395,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "30": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "31": {
        loc: {
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 422,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 422,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "32": {
        loc: {
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "33": {
        loc: {
          start: {
            line: 446,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 446,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 446
      },
      "34": {
        loc: {
          start: {
            line: 454,
            column: 8
          },
          end: {
            line: 460,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 8
          },
          end: {
            line: 460,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\[id]\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { TipoUsuario, StatusPeriodo } from '@prisma/client';\nimport {\n  atualizarPeriodoSchema,\n  idParamSchema,\n  validarBody,\n  validarDados\n} from '@/lib/validations/avaliacoes';\nimport { middlewareAtualizacaoStatus } from '@/lib/utils/periodo-status-updater';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n// GET /api/periodos-avaliacao/[id] - Buscar per\xEDodo espec\xEDfico\nexport async function GET(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Validar par\xE2metro ID\n    const resultadoValidacao = validarDados(idParamSchema, params);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'ID inv\xE1lido', \n          details: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n\n    const { id } = resultadoValidacao.dados;\n\n    // Verificar permiss\xF5es do usu\xE1rio\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usu\xE1rio n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN e GESTOR podem visualizar per\xEDodos\n    if (usuario.userType !== TipoUsuario.ADMIN && usuario.userType !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { error: 'Sem permiss\xE3o para visualizar per\xEDodos de avalia\xE7\xE3o' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos per\xEDodos antes de buscar\n    await middlewareAtualizacaoStatus();\n\n    // Buscar o per\xEDodo\n    const periodo = await prisma.periodoAvaliacao.findUnique({\n      where: { id },\n      include: {\n        criadoPor: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliacoes: {\n          include: {\n            avaliador: {\n              select: {\n                id: true,\n                nome: true,\n                email: true\n              }\n            },\n            avaliado: {\n              select: {\n                id: true,\n                usuario: {\n                  select: {\n                    nome: true,\n                    email: true\n                  }\n                },\n                cargo: true,\n                setor: true\n              }\n            }\n          }\n        },\n        _count: {\n          select: {\n            avaliacoes: true\n          }\n        }\n      }\n    });\n\n    if (!periodo) {\n      return NextResponse.json(\n        { error: 'Per\xEDodo n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(periodo);\n\n  } catch (error) {\n    console.error('Erro ao buscar per\xEDodo:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/periodos-avaliacao/[id] - Atualizar per\xEDodo\nexport async function PUT(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Validar par\xE2metro ID\n    const resultadoValidacaoId = validarDados(idParamSchema, params);\n    if (!resultadoValidacaoId.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'ID inv\xE1lido', \n          details: resultadoValidacaoId.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n\n    const { id } = resultadoValidacaoId.dados;\n    const body = await request.json();\n    \n    // Validar dados de atualiza\xE7\xE3o\n    const resultadoValidacao = validarBody(atualizarPeriodoSchema, body);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'Dados inv\xE1lidos', \n          details: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const dadosValidados = resultadoValidacao.dados;\n\n    // Verificar permiss\xF5es do usu\xE1rio\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usu\xE1rio n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN e GESTOR podem atualizar per\xEDodos\n    if (usuario.userType !== TipoUsuario.ADMIN && usuario.userType !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { error: 'Sem permiss\xE3o para atualizar per\xEDodos de avalia\xE7\xE3o' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos per\xEDodos antes de atualizar\n    await middlewareAtualizacaoStatus();\n\n    // Verificar se o per\xEDodo existe\n    const periodoExistente = await prisma.periodoAvaliacao.findUnique({\n      where: { id },\n      include: {\n        _count: {\n          select: {\n            avaliacoes: true\n          }\n        }\n      }\n    });\n\n    if (!periodoExistente) {\n      return NextResponse.json(\n        { error: 'Per\xEDodo n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o nome j\xE1 existe (se estiver sendo alterado)\n    if (dadosValidados.nome && dadosValidados.nome !== periodoExistente.nome) {\n      const nomeExistente = await prisma.periodoAvaliacao.findFirst({\n        where: {\n          nome: dadosValidados.nome,\n          id: { not: id }\n        }\n      });\n\n      if (nomeExistente) {\n        return NextResponse.json(\n          { error: 'J\xE1 existe um per\xEDodo com este nome' },\n          { status: 409 }\n        );\n      }\n    }\n\n    // Verificar regras de neg\xF3cio para mudan\xE7a de status\n    if (dadosValidados.status && dadosValidados.status !== periodoExistente.status) {\n      // N\xE3o permitir ativar per\xEDodo se h\xE1 avalia\xE7\xF5es pendentes em outros per\xEDodos ativos\n      if (dadosValidados.status === StatusPeriodo.ATIVO) {\n        const periodosAtivos = await prisma.periodoAvaliacao.findMany({\n          where: {\n            status: StatusPeriodo.ATIVO,\n            id: { not: id }\n          }\n        });\n\n        if (periodosAtivos.length > 0) {\n          return NextResponse.json(\n            { \n              error: 'N\xE3o \xE9 poss\xEDvel ativar este per\xEDodo pois j\xE1 existe outro per\xEDodo ativo',\n              periodosAtivos: periodosAtivos.map(p => ({ id: p.id, nome: p.nome }))\n            },\n            { status: 409 }\n          );\n        }\n      }\n\n      // N\xE3o permitir cancelar per\xEDodo se h\xE1 avalia\xE7\xF5es conclu\xEDdas\n      if (dadosValidados.status === StatusPeriodo.CANCELADO) {\n        const avaliacoesConcluidas = await prisma.avaliacao.count({\n          where: {\n            periodoId: id,\n            status: 'CONCLUIDA'\n          }\n        });\n\n        if (avaliacoesConcluidas > 0) {\n          return NextResponse.json(\n            { error: 'N\xE3o \xE9 poss\xEDvel cancelar per\xEDodo com avalia\xE7\xF5es conclu\xEDdas' },\n            { status: 409 }\n          );\n        }\n      }\n    }\n\n    // Verificar conflito de datas (se estiver alterando datas)\n    if (dadosValidados.dataInicio || dadosValidados.dataFim) {\n      const novaDataInicio = dadosValidados.dataInicio ? new Date(dadosValidados.dataInicio) : periodoExistente.dataInicio;\n      const novaDataFim = dadosValidados.dataFim ? new Date(dadosValidados.dataFim) : periodoExistente.dataFim;\n\n      const periodosConflitantes = await prisma.periodoAvaliacao.findMany({\n        where: {\n          id: { not: id },\n          status: {\n            in: [StatusPeriodo.ATIVO, StatusPeriodo.PLANEJADO]\n          },\n          OR: [\n            {\n              AND: [\n                { dataInicio: { lte: novaDataInicio } },\n                { dataFim: { gte: novaDataInicio } }\n              ]\n            },\n            {\n              AND: [\n                { dataInicio: { lte: novaDataFim } },\n                { dataFim: { gte: novaDataFim } }\n              ]\n            },\n            {\n              AND: [\n                { dataInicio: { gte: novaDataInicio } },\n                { dataFim: { lte: novaDataFim } }\n              ]\n            }\n          ]\n        }\n      });\n\n      if (periodosConflitantes.length > 0) {\n        return NextResponse.json(\n          { \n            error: 'H\xE1 conflito de datas com outros per\xEDodos ativos ou planejados',\n            conflitos: periodosConflitantes.map(p => ({\n              id: p.id,\n              nome: p.nome,\n              dataInicio: p.dataInicio,\n              dataFim: p.dataFim\n            }))\n          },\n          { status: 409 }\n        );\n      }\n    }\n\n    // Atualizar o per\xEDodo\n    const periodoAtualizado = await prisma.periodoAvaliacao.update({\n      where: { id },\n      data: {\n        ...dadosValidados,\n        dataInicio: dadosValidados.dataInicio ? new Date(dadosValidados.dataInicio) : undefined,\n        dataFim: dadosValidados.dataFim ? new Date(dadosValidados.dataFim) : undefined,\n        atualizadoEm: new Date()\n      },\n      include: {\n        criadoPor: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        _count: {\n          select: {\n            avaliacoes: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json(periodoAtualizado);\n\n  } catch (error) {\n    console.error('Erro ao atualizar per\xEDodo:', error);\n    \n\n\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/periodos-avaliacao/[id] - Deletar per\xEDodo\nexport async function DELETE(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Validar par\xE2metro ID\n    const resultadoValidacao = validarDados(idParamSchema, params);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'ID inv\xE1lido', \n          details: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n\n    const { id } = resultadoValidacao.dados;\n\n    // Verificar permiss\xF5es do usu\xE1rio\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usu\xE1rio n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN pode deletar per\xEDodos\n    if (usuario.userType !== TipoUsuario.ADMIN) {\n      return NextResponse.json(\n        { error: 'Sem permiss\xE3o para deletar per\xEDodos de avalia\xE7\xE3o' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos per\xEDodos antes de deletar\n    await middlewareAtualizacaoStatus();\n\n    // Verificar se o per\xEDodo existe\n    const periodoExistente = await prisma.periodoAvaliacao.findUnique({\n      where: { id },\n      include: {\n        _count: {\n          select: {\n            avaliacoes: true\n          }\n        }\n      }\n    });\n\n    if (!periodoExistente) {\n      return NextResponse.json(\n        { error: 'Per\xEDodo n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // N\xE3o permitir deletar per\xEDodo com avalia\xE7\xF5es\n    if (periodoExistente._count.avaliacoes > 0) {\n      return NextResponse.json(\n        { error: 'N\xE3o \xE9 poss\xEDvel deletar per\xEDodo que possui avalia\xE7\xF5es' },\n        { status: 409 }\n      );\n    }\n\n    // Deletar o per\xEDodo\n    await prisma.periodoAvaliacao.delete({\n      where: { id }\n    });\n\n    return NextResponse.json(\n      { message: 'Per\xEDodo deletado com sucesso' },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('Erro ao deletar per\xEDodo:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "session", "getServerSession", "authOptions", "user", "id", "NextResponse", "json", "error", "status", "resultadoValidacao", "validarDados", "idParamSchema", "sucesso", "details", "erro", "dados", "usuario", "prisma", "findUnique", "where", "select", "userType", "TipoUsuario", "ADMIN", "GESTOR", "middlewareAtualizacaoStatus", "periodo", "periodoAvaliacao", "include", "criadoPor", "nome", "email", "avaliacoes", "avaliador", "avaliado", "cargo", "setor", "_count", "console", "resultadoValidacaoId", "body", "validarBody", "atualizarPeriodoSchema", "dadosValidados", "periodoExistente", "nomeExistente", "findFirst", "not", "StatusPeriodo", "ATIVO", "periodosAtivos", "findMany", "length", "map", "p", "CANCELADO", "avaliacoesConcluidas", "avaliacao", "count", "periodoId", "dataInicio", "dataFim", "novaDataInicio", "Date", "novaDataFim", "periodosConflitantes", "in", "PLANEJADO", "OR", "AND", "lte", "gte", "conflitos", "periodoAtualizado", "update", "data", "undefined", "atualizadoEm", "delete", "message"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a3a691b2a0f4a5a496947844ca282b7657f60d99"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_osr0csnta = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_osr0csnta();
cov_osr0csnta().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_osr0csnta().f[0]++;
  cov_osr0csnta().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_osr0csnta().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_osr0csnta().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_osr0csnta().f[1]++;
    cov_osr0csnta().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_osr0csnta().f[2]++;
    cov_osr0csnta().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_osr0csnta().f[3]++;
    cov_osr0csnta().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_osr0csnta().s[7]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_osr0csnta().s[8]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_osr0csnta().s[9]++, require("../../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(cov_osr0csnta().s[10]++, require("../../../../lib/prisma"));
const _client =
/* istanbul ignore next */
(cov_osr0csnta().s[11]++, require("@prisma/client"));
const _avaliacoes =
/* istanbul ignore next */
(cov_osr0csnta().s[12]++, require("../../../../lib/validations/avaliacoes"));
const _periodostatusupdater =
/* istanbul ignore next */
(cov_osr0csnta().s[13]++, require("../../../../lib/utils/periodo-status-updater"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_osr0csnta().f[4]++;
  cov_osr0csnta().s[14]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_osr0csnta().s[15]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_osr0csnta().s[16]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_osr0csnta().b[0][0]++;
      cov_osr0csnta().s[17]++;
      return _server.NextResponse.json({
        error: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[0][1]++;
    }
    // Validar parâmetro ID
    const resultadoValidacao =
    /* istanbul ignore next */
    (cov_osr0csnta().s[18]++, (0, _avaliacoes.validarDados)(_avaliacoes.idParamSchema, params));
    /* istanbul ignore next */
    cov_osr0csnta().s[19]++;
    if (!resultadoValidacao.sucesso) {
      /* istanbul ignore next */
      cov_osr0csnta().b[1][0]++;
      cov_osr0csnta().s[20]++;
      return _server.NextResponse.json({
        error: 'ID inválido',
        details: resultadoValidacao.erro?.details
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[1][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_osr0csnta().s[21]++, resultadoValidacao.dados);
    // Verificar permissões do usuário
    const usuario =
    /* istanbul ignore next */
    (cov_osr0csnta().s[22]++, await _prisma.prisma.usuario.findUnique({
      where: {
        id: session.user.id
      },
      select: {
        userType: true
      }
    }));
    /* istanbul ignore next */
    cov_osr0csnta().s[23]++;
    if (!usuario) {
      /* istanbul ignore next */
      cov_osr0csnta().b[2][0]++;
      cov_osr0csnta().s[24]++;
      return _server.NextResponse.json({
        error: 'Usuário não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[2][1]++;
    }
    // Apenas ADMIN e GESTOR podem visualizar períodos
    cov_osr0csnta().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_osr0csnta().b[4][0]++, usuario.userType !== _client.TipoUsuario.ADMIN) &&
    /* istanbul ignore next */
    (cov_osr0csnta().b[4][1]++, usuario.userType !== _client.TipoUsuario.GESTOR)) {
      /* istanbul ignore next */
      cov_osr0csnta().b[3][0]++;
      cov_osr0csnta().s[26]++;
      return _server.NextResponse.json({
        error: 'Sem permissão para visualizar períodos de avaliação'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[3][1]++;
    }
    // Atualizar automaticamente os status dos períodos antes de buscar
    cov_osr0csnta().s[27]++;
    await (0, _periodostatusupdater.middlewareAtualizacaoStatus)();
    // Buscar o período
    const periodo =
    /* istanbul ignore next */
    (cov_osr0csnta().s[28]++, await _prisma.prisma.periodoAvaliacao.findUnique({
      where: {
        id
      },
      include: {
        criadoPor: {
          select: {
            id: true,
            nome: true,
            email: true
          }
        },
        avaliacoes: {
          include: {
            avaliador: {
              select: {
                id: true,
                nome: true,
                email: true
              }
            },
            avaliado: {
              select: {
                id: true,
                usuario: {
                  select: {
                    nome: true,
                    email: true
                  }
                },
                cargo: true,
                setor: true
              }
            }
          }
        },
        _count: {
          select: {
            avaliacoes: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_osr0csnta().s[29]++;
    if (!periodo) {
      /* istanbul ignore next */
      cov_osr0csnta().b[5][0]++;
      cov_osr0csnta().s[30]++;
      return _server.NextResponse.json({
        error: 'Período não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[5][1]++;
    }
    cov_osr0csnta().s[31]++;
    return _server.NextResponse.json(periodo);
  } catch (error) {
    /* istanbul ignore next */
    cov_osr0csnta().s[32]++;
    console.error('Erro ao buscar período:', error);
    /* istanbul ignore next */
    cov_osr0csnta().s[33]++;
    return _server.NextResponse.json({
      error: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_osr0csnta().f[5]++;
  cov_osr0csnta().s[34]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_osr0csnta().s[35]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_osr0csnta().s[36]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_osr0csnta().b[6][0]++;
      cov_osr0csnta().s[37]++;
      return _server.NextResponse.json({
        error: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[6][1]++;
    }
    // Validar parâmetro ID
    const resultadoValidacaoId =
    /* istanbul ignore next */
    (cov_osr0csnta().s[38]++, (0, _avaliacoes.validarDados)(_avaliacoes.idParamSchema, params));
    /* istanbul ignore next */
    cov_osr0csnta().s[39]++;
    if (!resultadoValidacaoId.sucesso) {
      /* istanbul ignore next */
      cov_osr0csnta().b[7][0]++;
      cov_osr0csnta().s[40]++;
      return _server.NextResponse.json({
        error: 'ID inválido',
        details: resultadoValidacaoId.erro?.details
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[7][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_osr0csnta().s[41]++, resultadoValidacaoId.dados);
    const body =
    /* istanbul ignore next */
    (cov_osr0csnta().s[42]++, await request.json());
    // Validar dados de atualização
    const resultadoValidacao =
    /* istanbul ignore next */
    (cov_osr0csnta().s[43]++, (0, _avaliacoes.validarBody)(_avaliacoes.atualizarPeriodoSchema, body));
    /* istanbul ignore next */
    cov_osr0csnta().s[44]++;
    if (!resultadoValidacao.sucesso) {
      /* istanbul ignore next */
      cov_osr0csnta().b[8][0]++;
      cov_osr0csnta().s[45]++;
      return _server.NextResponse.json({
        error: 'Dados inválidos',
        details: resultadoValidacao.erro?.details
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[8][1]++;
    }
    const dadosValidados =
    /* istanbul ignore next */
    (cov_osr0csnta().s[46]++, resultadoValidacao.dados);
    // Verificar permissões do usuário
    const usuario =
    /* istanbul ignore next */
    (cov_osr0csnta().s[47]++, await _prisma.prisma.usuario.findUnique({
      where: {
        id: session.user.id
      },
      select: {
        userType: true
      }
    }));
    /* istanbul ignore next */
    cov_osr0csnta().s[48]++;
    if (!usuario) {
      /* istanbul ignore next */
      cov_osr0csnta().b[9][0]++;
      cov_osr0csnta().s[49]++;
      return _server.NextResponse.json({
        error: 'Usuário não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[9][1]++;
    }
    // Apenas ADMIN e GESTOR podem atualizar períodos
    cov_osr0csnta().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_osr0csnta().b[11][0]++, usuario.userType !== _client.TipoUsuario.ADMIN) &&
    /* istanbul ignore next */
    (cov_osr0csnta().b[11][1]++, usuario.userType !== _client.TipoUsuario.GESTOR)) {
      /* istanbul ignore next */
      cov_osr0csnta().b[10][0]++;
      cov_osr0csnta().s[51]++;
      return _server.NextResponse.json({
        error: 'Sem permissão para atualizar períodos de avaliação'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[10][1]++;
    }
    // Atualizar automaticamente os status dos períodos antes de atualizar
    cov_osr0csnta().s[52]++;
    await (0, _periodostatusupdater.middlewareAtualizacaoStatus)();
    // Verificar se o período existe
    const periodoExistente =
    /* istanbul ignore next */
    (cov_osr0csnta().s[53]++, await _prisma.prisma.periodoAvaliacao.findUnique({
      where: {
        id
      },
      include: {
        _count: {
          select: {
            avaliacoes: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_osr0csnta().s[54]++;
    if (!periodoExistente) {
      /* istanbul ignore next */
      cov_osr0csnta().b[12][0]++;
      cov_osr0csnta().s[55]++;
      return _server.NextResponse.json({
        error: 'Período não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[12][1]++;
    }
    // Verificar se o nome já existe (se estiver sendo alterado)
    cov_osr0csnta().s[56]++;
    if (
    /* istanbul ignore next */
    (cov_osr0csnta().b[14][0]++, dadosValidados.nome) &&
    /* istanbul ignore next */
    (cov_osr0csnta().b[14][1]++, dadosValidados.nome !== periodoExistente.nome)) {
      /* istanbul ignore next */
      cov_osr0csnta().b[13][0]++;
      const nomeExistente =
      /* istanbul ignore next */
      (cov_osr0csnta().s[57]++, await _prisma.prisma.periodoAvaliacao.findFirst({
        where: {
          nome: dadosValidados.nome,
          id: {
            not: id
          }
        }
      }));
      /* istanbul ignore next */
      cov_osr0csnta().s[58]++;
      if (nomeExistente) {
        /* istanbul ignore next */
        cov_osr0csnta().b[15][0]++;
        cov_osr0csnta().s[59]++;
        return _server.NextResponse.json({
          error: 'Já existe um período com este nome'
        }, {
          status: 409
        });
      } else
      /* istanbul ignore next */
      {
        cov_osr0csnta().b[15][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[13][1]++;
    }
    // Verificar regras de negócio para mudança de status
    cov_osr0csnta().s[60]++;
    if (
    /* istanbul ignore next */
    (cov_osr0csnta().b[17][0]++, dadosValidados.status) &&
    /* istanbul ignore next */
    (cov_osr0csnta().b[17][1]++, dadosValidados.status !== periodoExistente.status)) {
      /* istanbul ignore next */
      cov_osr0csnta().b[16][0]++;
      cov_osr0csnta().s[61]++;
      // Não permitir ativar período se há avaliações pendentes em outros períodos ativos
      if (dadosValidados.status === _client.StatusPeriodo.ATIVO) {
        /* istanbul ignore next */
        cov_osr0csnta().b[18][0]++;
        const periodosAtivos =
        /* istanbul ignore next */
        (cov_osr0csnta().s[62]++, await _prisma.prisma.periodoAvaliacao.findMany({
          where: {
            status: _client.StatusPeriodo.ATIVO,
            id: {
              not: id
            }
          }
        }));
        /* istanbul ignore next */
        cov_osr0csnta().s[63]++;
        if (periodosAtivos.length > 0) {
          /* istanbul ignore next */
          cov_osr0csnta().b[19][0]++;
          cov_osr0csnta().s[64]++;
          return _server.NextResponse.json({
            error: 'Não é possível ativar este período pois já existe outro período ativo',
            periodosAtivos: periodosAtivos.map(p => {
              /* istanbul ignore next */
              cov_osr0csnta().f[6]++;
              cov_osr0csnta().s[65]++;
              return {
                id: p.id,
                nome: p.nome
              };
            })
          }, {
            status: 409
          });
        } else
        /* istanbul ignore next */
        {
          cov_osr0csnta().b[19][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_osr0csnta().b[18][1]++;
      }
      // Não permitir cancelar período se há avaliações concluídas
      cov_osr0csnta().s[66]++;
      if (dadosValidados.status === _client.StatusPeriodo.CANCELADO) {
        /* istanbul ignore next */
        cov_osr0csnta().b[20][0]++;
        const avaliacoesConcluidas =
        /* istanbul ignore next */
        (cov_osr0csnta().s[67]++, await _prisma.prisma.avaliacao.count({
          where: {
            periodoId: id,
            status: 'CONCLUIDA'
          }
        }));
        /* istanbul ignore next */
        cov_osr0csnta().s[68]++;
        if (avaliacoesConcluidas > 0) {
          /* istanbul ignore next */
          cov_osr0csnta().b[21][0]++;
          cov_osr0csnta().s[69]++;
          return _server.NextResponse.json({
            error: 'Não é possível cancelar período com avaliações concluídas'
          }, {
            status: 409
          });
        } else
        /* istanbul ignore next */
        {
          cov_osr0csnta().b[21][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_osr0csnta().b[20][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[16][1]++;
    }
    // Verificar conflito de datas (se estiver alterando datas)
    cov_osr0csnta().s[70]++;
    if (
    /* istanbul ignore next */
    (cov_osr0csnta().b[23][0]++, dadosValidados.dataInicio) ||
    /* istanbul ignore next */
    (cov_osr0csnta().b[23][1]++, dadosValidados.dataFim)) {
      /* istanbul ignore next */
      cov_osr0csnta().b[22][0]++;
      const novaDataInicio =
      /* istanbul ignore next */
      (cov_osr0csnta().s[71]++, dadosValidados.dataInicio ?
      /* istanbul ignore next */
      (cov_osr0csnta().b[24][0]++, new Date(dadosValidados.dataInicio)) :
      /* istanbul ignore next */
      (cov_osr0csnta().b[24][1]++, periodoExistente.dataInicio));
      const novaDataFim =
      /* istanbul ignore next */
      (cov_osr0csnta().s[72]++, dadosValidados.dataFim ?
      /* istanbul ignore next */
      (cov_osr0csnta().b[25][0]++, new Date(dadosValidados.dataFim)) :
      /* istanbul ignore next */
      (cov_osr0csnta().b[25][1]++, periodoExistente.dataFim));
      const periodosConflitantes =
      /* istanbul ignore next */
      (cov_osr0csnta().s[73]++, await _prisma.prisma.periodoAvaliacao.findMany({
        where: {
          id: {
            not: id
          },
          status: {
            in: [_client.StatusPeriodo.ATIVO, _client.StatusPeriodo.PLANEJADO]
          },
          OR: [{
            AND: [{
              dataInicio: {
                lte: novaDataInicio
              }
            }, {
              dataFim: {
                gte: novaDataInicio
              }
            }]
          }, {
            AND: [{
              dataInicio: {
                lte: novaDataFim
              }
            }, {
              dataFim: {
                gte: novaDataFim
              }
            }]
          }, {
            AND: [{
              dataInicio: {
                gte: novaDataInicio
              }
            }, {
              dataFim: {
                lte: novaDataFim
              }
            }]
          }]
        }
      }));
      /* istanbul ignore next */
      cov_osr0csnta().s[74]++;
      if (periodosConflitantes.length > 0) {
        /* istanbul ignore next */
        cov_osr0csnta().b[26][0]++;
        cov_osr0csnta().s[75]++;
        return _server.NextResponse.json({
          error: 'Há conflito de datas com outros períodos ativos ou planejados',
          conflitos: periodosConflitantes.map(p => {
            /* istanbul ignore next */
            cov_osr0csnta().f[7]++;
            cov_osr0csnta().s[76]++;
            return {
              id: p.id,
              nome: p.nome,
              dataInicio: p.dataInicio,
              dataFim: p.dataFim
            };
          })
        }, {
          status: 409
        });
      } else
      /* istanbul ignore next */
      {
        cov_osr0csnta().b[26][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[22][1]++;
    }
    // Atualizar o período
    const periodoAtualizado =
    /* istanbul ignore next */
    (cov_osr0csnta().s[77]++, await _prisma.prisma.periodoAvaliacao.update({
      where: {
        id
      },
      data: {
        ...dadosValidados,
        dataInicio: dadosValidados.dataInicio ?
        /* istanbul ignore next */
        (cov_osr0csnta().b[27][0]++, new Date(dadosValidados.dataInicio)) :
        /* istanbul ignore next */
        (cov_osr0csnta().b[27][1]++, undefined),
        dataFim: dadosValidados.dataFim ?
        /* istanbul ignore next */
        (cov_osr0csnta().b[28][0]++, new Date(dadosValidados.dataFim)) :
        /* istanbul ignore next */
        (cov_osr0csnta().b[28][1]++, undefined),
        atualizadoEm: new Date()
      },
      include: {
        criadoPor: {
          select: {
            id: true,
            nome: true,
            email: true
          }
        },
        _count: {
          select: {
            avaliacoes: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_osr0csnta().s[78]++;
    return _server.NextResponse.json(periodoAtualizado);
  } catch (error) {
    /* istanbul ignore next */
    cov_osr0csnta().s[79]++;
    console.error('Erro ao atualizar período:', error);
    /* istanbul ignore next */
    cov_osr0csnta().s[80]++;
    return _server.NextResponse.json({
      error: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_osr0csnta().f[8]++;
  cov_osr0csnta().s[81]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_osr0csnta().s[82]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_osr0csnta().s[83]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_osr0csnta().b[29][0]++;
      cov_osr0csnta().s[84]++;
      return _server.NextResponse.json({
        error: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[29][1]++;
    }
    // Validar parâmetro ID
    const resultadoValidacao =
    /* istanbul ignore next */
    (cov_osr0csnta().s[85]++, (0, _avaliacoes.validarDados)(_avaliacoes.idParamSchema, params));
    /* istanbul ignore next */
    cov_osr0csnta().s[86]++;
    if (!resultadoValidacao.sucesso) {
      /* istanbul ignore next */
      cov_osr0csnta().b[30][0]++;
      cov_osr0csnta().s[87]++;
      return _server.NextResponse.json({
        error: 'ID inválido',
        details: resultadoValidacao.erro?.details
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[30][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_osr0csnta().s[88]++, resultadoValidacao.dados);
    // Verificar permissões do usuário
    const usuario =
    /* istanbul ignore next */
    (cov_osr0csnta().s[89]++, await _prisma.prisma.usuario.findUnique({
      where: {
        id: session.user.id
      },
      select: {
        userType: true
      }
    }));
    /* istanbul ignore next */
    cov_osr0csnta().s[90]++;
    if (!usuario) {
      /* istanbul ignore next */
      cov_osr0csnta().b[31][0]++;
      cov_osr0csnta().s[91]++;
      return _server.NextResponse.json({
        error: 'Usuário não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[31][1]++;
    }
    // Apenas ADMIN pode deletar períodos
    cov_osr0csnta().s[92]++;
    if (usuario.userType !== _client.TipoUsuario.ADMIN) {
      /* istanbul ignore next */
      cov_osr0csnta().b[32][0]++;
      cov_osr0csnta().s[93]++;
      return _server.NextResponse.json({
        error: 'Sem permissão para deletar períodos de avaliação'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[32][1]++;
    }
    // Atualizar automaticamente os status dos períodos antes de deletar
    cov_osr0csnta().s[94]++;
    await (0, _periodostatusupdater.middlewareAtualizacaoStatus)();
    // Verificar se o período existe
    const periodoExistente =
    /* istanbul ignore next */
    (cov_osr0csnta().s[95]++, await _prisma.prisma.periodoAvaliacao.findUnique({
      where: {
        id
      },
      include: {
        _count: {
          select: {
            avaliacoes: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_osr0csnta().s[96]++;
    if (!periodoExistente) {
      /* istanbul ignore next */
      cov_osr0csnta().b[33][0]++;
      cov_osr0csnta().s[97]++;
      return _server.NextResponse.json({
        error: 'Período não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[33][1]++;
    }
    // Não permitir deletar período com avaliações
    cov_osr0csnta().s[98]++;
    if (periodoExistente._count.avaliacoes > 0) {
      /* istanbul ignore next */
      cov_osr0csnta().b[34][0]++;
      cov_osr0csnta().s[99]++;
      return _server.NextResponse.json({
        error: 'Não é possível deletar período que possui avaliações'
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_osr0csnta().b[34][1]++;
    }
    // Deletar o período
    cov_osr0csnta().s[100]++;
    await _prisma.prisma.periodoAvaliacao.delete({
      where: {
        id
      }
    });
    /* istanbul ignore next */
    cov_osr0csnta().s[101]++;
    return _server.NextResponse.json({
      message: 'Período deletado com sucesso'
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_osr0csnta().s[102]++;
    console.error('Erro ao deletar período:', error);
    /* istanbul ignore next */
    cov_osr0csnta().s[103]++;
    return _server.NextResponse.json({
      error: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,