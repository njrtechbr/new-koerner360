a89dd8a747166009acf9d70f572ed20c
"use strict";

/* istanbul ignore next */
function cov_bxee128x6() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\usuarios\\route.ts";
  var hash = "13e1d40fd48b89e67ae44dc21a0228748cd73c64";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\usuarios\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 46
        }
      },
      "8": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 56
        }
      },
      "9": {
        start: {
          line: 22,
          column: 23
        },
        end: {
          line: 22,
          column: 65
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "11": {
        start: {
          line: 26,
          column: 47
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "13": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 38,
          column: 15
        }
      },
      "14": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 28
        }
      },
      "15": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "16": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "17": {
        start: {
          line: 52,
          column: 33
        },
        end: {
          line: 52,
          column: 53
        }
      },
      "18": {
        start: {
          line: 53,
          column: 27
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "19": {
        start: {
          line: 62,
          column: 76
        },
        end: {
          line: 62,
          column: 86
        }
      },
      "20": {
        start: {
          line: 63,
          column: 22
        },
        end: {
          line: 63,
          column: 43
        }
      },
      "21": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 26
        }
      },
      "22": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "23": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "24": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "25": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 36
        }
      },
      "26": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "27": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 34
        }
      },
      "28": {
        start: {
          line: 89,
          column: 34
        },
        end: {
          line: 110,
          column: 10
        }
      },
      "29": {
        start: {
          line: 111,
          column: 29
        },
        end: {
          line: 111,
          column: 54
        }
      },
      "30": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "31": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 57
        }
      },
      "32": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "33": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "34": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "35": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 225,
          column: 5
        }
      },
      "36": {
        start: {
          line: 143,
          column: 47
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "37": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "38": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "39": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 28
        }
      },
      "40": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "41": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "42": {
        start: {
          line: 169,
          column: 21
        },
        end: {
          line: 169,
          column: 41
        }
      },
      "43": {
        start: {
          line: 170,
          column: 31
        },
        end: {
          line: 170,
          column: 74
        }
      },
      "44": {
        start: {
          line: 172,
          column: 33
        },
        end: {
          line: 176,
          column: 10
        }
      },
      "45": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "46": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 182,
          column: 15
        }
      },
      "47": {
        start: {
          line: 185,
          column: 26
        },
        end: {
          line: 185,
          column: 69
        }
      },
      "48": {
        start: {
          line: 187,
          column: 28
        },
        end: {
          line: 203,
          column: 10
        }
      },
      "49": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 209,
          column: 11
        }
      },
      "50": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 55
        }
      },
      "51": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "52": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 218,
          column: 15
        }
      },
      "53": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 18
          }
        },
        loc: {
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 140,
            column: 15
          },
          end: {
            line: 140,
            column: 19
          }
        },
        loc: {
          start: {
            line: 140,
            column: 29
          },
          end: {
            line: 226,
            column: 1
          }
        },
        line: 140
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 27
          },
          end: {
            line: 35,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 27
          },
          end: {
            line: 35,
            column: 60
          }
        }, {
          start: {
            line: 35,
            column: 64
          },
          end: {
            line: 35,
            column: 73
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "5": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "6": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "7": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "8": {
        loc: {
          start: {
            line: 152,
            column: 27
          },
          end: {
            line: 152,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 27
          },
          end: {
            line: 152,
            column: 60
          }
        }, {
          start: {
            line: 152,
            column: 64
          },
          end: {
            line: 152,
            column: 73
          }
        }],
        line: 152
      },
      "9": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "10": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "11": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\usuarios\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from '@/lib/auth/server';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { criarUsuarioSchema, listarUsuariosSchema } from '@/lib/validations';\nimport {\n  verificarPermissaoAPI,\n  registrarTentativaAcesso,\n} from '@/lib/auth/authorization';\nimport { hash } from 'bcryptjs';\nimport { Prisma } from '@prisma/client';\n\n/**\n * GET /api/usuarios - Listar usu\xE1rios com pagina\xE7\xE3o e filtros\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autoriza\xE7\xE3o\n    const { sucesso, usuario, resposta } = await verificarPermissaoAPI(\n      request,\n      ['visualizar_usuarios']\n    );\n\n    if (!sucesso) {\n      await registrarTentativaAcesso({\n        usuario,\n        rota: request.nextUrl.pathname,\n        metodo: request.method,\n        ip: request.ip,\n        userAgent: request.headers.get('user-agent') || undefined,\n        autorizado: false,\n        motivo: 'Permiss\xE3o insuficiente para visualizar usu\xE1rios',\n      });\n      return resposta!;\n    }\n\n    // Verificar se o usu\xE1rio tem permiss\xE3o para listar usu\xE1rios\n    if (!['ADMIN', 'GESTOR'].includes(session.user.perfil)) {\n      return NextResponse.json(\n        { erro: 'Sem permiss\xE3o para listar usu\xE1rios' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const parametros = listarUsuariosSchema.parse({\n      pagina: searchParams.get('pagina'),\n      limite: searchParams.get('limite'),\n      busca: searchParams.get('busca'),\n      perfil: searchParams.get('perfil'),\n      ativo: searchParams.get('ativo'),\n      ordenarPor: searchParams.get('ordenarPor'),\n      ordem: searchParams.get('ordem'),\n    });\n\n    const { pagina, limite, busca, perfil, ativo, ordenarPor, ordem } =\n      parametros;\n    const pular = (pagina - 1) * limite;\n\n    // Construir filtros\n    const filtros: any = {};\n\n    if (busca) {\n      filtros.OR = [\n        { nome: { contains: busca, mode: 'insensitive' } },\n        { email: { contains: busca, mode: 'insensitive' } },\n      ];\n    }\n\n    if (perfil) {\n      filtros.perfil = perfil;\n    }\n\n    if (ativo !== undefined) {\n      filtros.ativo = ativo;\n    }\n\n    // Buscar usu\xE1rios com pagina\xE7\xE3o\n    const [usuarios, total] = await Promise.all([\n      prisma.usuario.findMany({\n        where: filtros,\n        select: {\n          id: true,\n          nome: true,\n          email: true,\n          perfil: true,\n          ativo: true,\n          criadoEm: true,\n          atualizadoEm: true,\n        },\n        orderBy: { [ordenarPor]: ordem },\n        skip: pular,\n        take: limite,\n      }),\n      prisma.usuario.count({ where: filtros }),\n    ]);\n\n    const totalPaginas = Math.ceil(total / limite);\n\n    return NextResponse.json({\n      usuarios,\n      paginacao: {\n        paginaAtual: pagina,\n        totalPaginas,\n        totalItens: total,\n        itensPorPagina: limite,\n        temProxima: pagina < totalPaginas,\n        temAnterior: pagina > 1,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao listar usu\xE1rios:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { erro: 'Par\xE2metros inv\xE1lidos', detalhes: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/usuarios - Criar novo usu\xE1rio\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autoriza\xE7\xE3o\n    const { sucesso, usuario, resposta } = await verificarPermissaoAPI(\n      request,\n      ['criar_usuarios']\n    );\n\n    if (!sucesso) {\n      await registrarTentativaAcesso({\n        usuario,\n        rota: request.nextUrl.pathname,\n        metodo: request.method,\n        ip: request.ip,\n        userAgent: request.headers.get('user-agent') || undefined,\n        autorizado: false,\n        motivo: 'Permiss\xE3o insuficiente para criar usu\xE1rios',\n      });\n      return resposta!;\n    }\n\n    // Verificar se o usu\xE1rio tem permiss\xE3o para criar usu\xE1rios\n    if (!['ADMIN', 'GESTOR'].includes(session.user.perfil)) {\n      return NextResponse.json(\n        { erro: 'Sem permiss\xE3o para criar usu\xE1rios' },\n        { status: 403 }\n      );\n    }\n\n    const body = await request.json();\n    const dadosValidados = criarUsuarioSchema.parse(body);\n\n    // Verificar se o email j\xE1 existe\n    const usuarioExistente = await prisma.usuario.findUnique({\n      where: { email: dadosValidados.email },\n    });\n\n    if (usuarioExistente) {\n      return NextResponse.json(\n        { erro: 'Email j\xE1 est\xE1 em uso' },\n        { status: 409 }\n      );\n    }\n\n    // Criptografar senha\n    const senhaHash = await bcrypt.hash(dadosValidados.senha, 12);\n\n    // Criar usu\xE1rio\n    const novoUsuario = await prisma.usuario.create({\n      data: {\n        nome: dadosValidados.nome,\n        email: dadosValidados.email,\n        senha: senhaHash,\n        perfil: dadosValidados.perfil,\n        ativo: dadosValidados.ativo,\n      },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        perfil: true,\n        ativo: true,\n        criadoEm: true,\n      },\n    });\n\n    return NextResponse.json(\n      {\n        mensagem: 'Usu\xE1rio criado com sucesso',\n        usuario: novoUsuario,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Erro ao criar usu\xE1rio:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { erro: 'Dados inv\xE1lidos', detalhes: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["GET", "POST", "request", "sucesso", "usuario", "resposta", "verificarPermissaoAPI", "registrarTentativaAcesso", "rota", "nextUrl", "pathname", "metodo", "method", "ip", "userAgent", "headers", "get", "undefined", "autorizado", "motivo", "includes", "session", "user", "perfil", "NextResponse", "json", "erro", "status", "searchParams", "URL", "url", "parametros", "listarUsuariosSchema", "parse", "pagina", "limite", "busca", "ativo", "ordenarPor", "ordem", "pular", "filtros", "OR", "nome", "contains", "mode", "email", "usuarios", "total", "Promise", "all", "prisma", "findMany", "where", "select", "id", "criadoEm", "atualizadoEm", "orderBy", "skip", "take", "count", "totalPaginas", "Math", "ceil", "paginacao", "paginaAtual", "totalItens", "itensPorPagina", "temProxima", "temAnterior", "error", "console", "z", "ZodError", "detalhes", "errors", "body", "dadosValidados", "criarUsuarioSchema", "usuarioExistente", "findUnique", "senhaHash", "bcrypt", "hash", "senha", "novoUsuario", "create", "data", "mensagem"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "13e1d40fd48b89e67ae44dc21a0228748cd73c64"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bxee128x6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bxee128x6();
cov_bxee128x6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_bxee128x6().f[0]++;
  cov_bxee128x6().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_bxee128x6().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_bxee128x6().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_bxee128x6().f[1]++;
    cov_bxee128x6().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_bxee128x6().f[2]++;
    cov_bxee128x6().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_bxee128x6().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_bxee128x6().s[7]++, require("../../../lib/prisma"));
const _validations =
/* istanbul ignore next */
(cov_bxee128x6().s[8]++, require("../../../lib/validations"));
const _authorization =
/* istanbul ignore next */
(cov_bxee128x6().s[9]++, require("../../../lib/auth/authorization"));
async function GET(request) {
  /* istanbul ignore next */
  cov_bxee128x6().f[3]++;
  cov_bxee128x6().s[10]++;
  try {
    // Verificar autorização
    const {
      sucesso,
      usuario,
      resposta
    } =
    /* istanbul ignore next */
    (cov_bxee128x6().s[11]++, await (0, _authorization.verificarPermissaoAPI)(request, ['visualizar_usuarios']));
    /* istanbul ignore next */
    cov_bxee128x6().s[12]++;
    if (!sucesso) {
      /* istanbul ignore next */
      cov_bxee128x6().b[0][0]++;
      cov_bxee128x6().s[13]++;
      await (0, _authorization.registrarTentativaAcesso)({
        usuario,
        rota: request.nextUrl.pathname,
        metodo: request.method,
        ip: request.ip,
        userAgent:
        /* istanbul ignore next */
        (cov_bxee128x6().b[1][0]++, request.headers.get('user-agent')) ||
        /* istanbul ignore next */
        (cov_bxee128x6().b[1][1]++, undefined),
        autorizado: false,
        motivo: 'Permissão insuficiente para visualizar usuários'
      });
      /* istanbul ignore next */
      cov_bxee128x6().s[14]++;
      return resposta;
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[0][1]++;
    }
    // Verificar se o usuário tem permissão para listar usuários
    cov_bxee128x6().s[15]++;
    if (!['ADMIN', 'GESTOR'].includes(session.user.perfil)) {
      /* istanbul ignore next */
      cov_bxee128x6().b[2][0]++;
      cov_bxee128x6().s[16]++;
      return _server.NextResponse.json({
        erro: 'Sem permissão para listar usuários'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[2][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_bxee128x6().s[17]++, new URL(request.url));
    const parametros =
    /* istanbul ignore next */
    (cov_bxee128x6().s[18]++, _validations.listarUsuariosSchema.parse({
      pagina: searchParams.get('pagina'),
      limite: searchParams.get('limite'),
      busca: searchParams.get('busca'),
      perfil: searchParams.get('perfil'),
      ativo: searchParams.get('ativo'),
      ordenarPor: searchParams.get('ordenarPor'),
      ordem: searchParams.get('ordem')
    }));
    const {
      pagina,
      limite,
      busca,
      perfil,
      ativo,
      ordenarPor,
      ordem
    } =
    /* istanbul ignore next */
    (cov_bxee128x6().s[19]++, parametros);
    const pular =
    /* istanbul ignore next */
    (cov_bxee128x6().s[20]++, (pagina - 1) * limite);
    // Construir filtros
    const filtros =
    /* istanbul ignore next */
    (cov_bxee128x6().s[21]++, {});
    /* istanbul ignore next */
    cov_bxee128x6().s[22]++;
    if (busca) {
      /* istanbul ignore next */
      cov_bxee128x6().b[3][0]++;
      cov_bxee128x6().s[23]++;
      filtros.OR = [{
        nome: {
          contains: busca,
          mode: 'insensitive'
        }
      }, {
        email: {
          contains: busca,
          mode: 'insensitive'
        }
      }];
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[3][1]++;
    }
    cov_bxee128x6().s[24]++;
    if (perfil) {
      /* istanbul ignore next */
      cov_bxee128x6().b[4][0]++;
      cov_bxee128x6().s[25]++;
      filtros.perfil = perfil;
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[4][1]++;
    }
    cov_bxee128x6().s[26]++;
    if (ativo !== undefined) {
      /* istanbul ignore next */
      cov_bxee128x6().b[5][0]++;
      cov_bxee128x6().s[27]++;
      filtros.ativo = ativo;
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[5][1]++;
    }
    // Buscar usuários com paginação
    const [usuarios, total] =
    /* istanbul ignore next */
    (cov_bxee128x6().s[28]++, await Promise.all([_prisma.prisma.usuario.findMany({
      where: filtros,
      select: {
        id: true,
        nome: true,
        email: true,
        perfil: true,
        ativo: true,
        criadoEm: true,
        atualizadoEm: true
      },
      orderBy: {
        [ordenarPor]: ordem
      },
      skip: pular,
      take: limite
    }), _prisma.prisma.usuario.count({
      where: filtros
    })]));
    const totalPaginas =
    /* istanbul ignore next */
    (cov_bxee128x6().s[29]++, Math.ceil(total / limite));
    /* istanbul ignore next */
    cov_bxee128x6().s[30]++;
    return _server.NextResponse.json({
      usuarios,
      paginacao: {
        paginaAtual: pagina,
        totalPaginas,
        totalItens: total,
        itensPorPagina: limite,
        temProxima: pagina < totalPaginas,
        temAnterior: pagina > 1
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_bxee128x6().s[31]++;
    console.error('Erro ao listar usuários:', error);
    /* istanbul ignore next */
    cov_bxee128x6().s[32]++;
    if (error instanceof z.ZodError) {
      /* istanbul ignore next */
      cov_bxee128x6().b[6][0]++;
      cov_bxee128x6().s[33]++;
      return _server.NextResponse.json({
        erro: 'Parâmetros inválidos',
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[6][1]++;
    }
    cov_bxee128x6().s[34]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_bxee128x6().f[4]++;
  cov_bxee128x6().s[35]++;
  try {
    // Verificar autorização
    const {
      sucesso,
      usuario,
      resposta
    } =
    /* istanbul ignore next */
    (cov_bxee128x6().s[36]++, await (0, _authorization.verificarPermissaoAPI)(request, ['criar_usuarios']));
    /* istanbul ignore next */
    cov_bxee128x6().s[37]++;
    if (!sucesso) {
      /* istanbul ignore next */
      cov_bxee128x6().b[7][0]++;
      cov_bxee128x6().s[38]++;
      await (0, _authorization.registrarTentativaAcesso)({
        usuario,
        rota: request.nextUrl.pathname,
        metodo: request.method,
        ip: request.ip,
        userAgent:
        /* istanbul ignore next */
        (cov_bxee128x6().b[8][0]++, request.headers.get('user-agent')) ||
        /* istanbul ignore next */
        (cov_bxee128x6().b[8][1]++, undefined),
        autorizado: false,
        motivo: 'Permissão insuficiente para criar usuários'
      });
      /* istanbul ignore next */
      cov_bxee128x6().s[39]++;
      return resposta;
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[7][1]++;
    }
    // Verificar se o usuário tem permissão para criar usuários
    cov_bxee128x6().s[40]++;
    if (!['ADMIN', 'GESTOR'].includes(session.user.perfil)) {
      /* istanbul ignore next */
      cov_bxee128x6().b[9][0]++;
      cov_bxee128x6().s[41]++;
      return _server.NextResponse.json({
        erro: 'Sem permissão para criar usuários'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[9][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_bxee128x6().s[42]++, await request.json());
    const dadosValidados =
    /* istanbul ignore next */
    (cov_bxee128x6().s[43]++, _validations.criarUsuarioSchema.parse(body));
    // Verificar se o email já existe
    const usuarioExistente =
    /* istanbul ignore next */
    (cov_bxee128x6().s[44]++, await _prisma.prisma.usuario.findUnique({
      where: {
        email: dadosValidados.email
      }
    }));
    /* istanbul ignore next */
    cov_bxee128x6().s[45]++;
    if (usuarioExistente) {
      /* istanbul ignore next */
      cov_bxee128x6().b[10][0]++;
      cov_bxee128x6().s[46]++;
      return _server.NextResponse.json({
        erro: 'Email já está em uso'
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[10][1]++;
    }
    // Criptografar senha
    const senhaHash =
    /* istanbul ignore next */
    (cov_bxee128x6().s[47]++, await bcrypt.hash(dadosValidados.senha, 12));
    // Criar usuário
    const novoUsuario =
    /* istanbul ignore next */
    (cov_bxee128x6().s[48]++, await _prisma.prisma.usuario.create({
      data: {
        nome: dadosValidados.nome,
        email: dadosValidados.email,
        senha: senhaHash,
        perfil: dadosValidados.perfil,
        ativo: dadosValidados.ativo
      },
      select: {
        id: true,
        nome: true,
        email: true,
        perfil: true,
        ativo: true,
        criadoEm: true
      }
    }));
    /* istanbul ignore next */
    cov_bxee128x6().s[49]++;
    return _server.NextResponse.json({
      mensagem: 'Usuário criado com sucesso',
      usuario: novoUsuario
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_bxee128x6().s[50]++;
    console.error('Erro ao criar usuário:', error);
    /* istanbul ignore next */
    cov_bxee128x6().s[51]++;
    if (error instanceof z.ZodError) {
      /* istanbul ignore next */
      cov_bxee128x6().b[11][0]++;
      cov_bxee128x6().s[52]++;
      return _server.NextResponse.json({
        erro: 'Dados inválidos',
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_bxee128x6().b[11][1]++;
    }
    cov_bxee128x6().s[53]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,