{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\components\\metricas\\dashboard-metricas.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  BarChart3,\n  TrendingUp,\n  Users,\n  Settings,\n  Download,\n  RefreshCw,\n  Eye,\n  EyeOff,\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\n// Importar componentes de métricas\nimport {\n  GraficosDesempenho,\n  IndicadoresProdutividade,\n  ResumoStatus,\n  FiltrosPeriodo,\n  ExportarRelatorios,\n  ComparativoAtendentes,\n  StatusTempoReal,\n} from './index';\n\n// Importar hooks\nimport {\n  useMetricasDashboardTempoReal,\n  useMetricasAtendenteTempoReal,\n  useMultiplasMetricasTempoReal,\n} from '@/hooks/use-metricas-tempo-real';\n\n// Importar tipos\nimport type {\n  DadosMetricas,\n  DadosDashboard,\n  FiltrosAvancados,\n  ConfiguracaoExportacao,\n} from './index';\n\n/**\n * Props do dashboard de métricas\n */\nexport interface DashboardMetricasProps {\n  atendenteId?: string; // Se fornecido, mostra métricas individuais\n  className?: string;\n  tempoRealAtivo?: boolean;\n  intervaloAtualizacao?: number;\n}\n\n/**\n * Componente principal do dashboard de métricas\n */\nexport function DashboardMetricas({\n  atendenteId,\n  className = '',\n  tempoRealAtivo = true,\n  intervaloAtualizacao = 30000,\n}: DashboardMetricasProps) {\n  // Estados locais\n  const [abaSelecionada, setAbaSelecionada] = useState('resumo');\n  const [filtros, setFiltros] = useState<FiltrosAvancados>({});\n  const [tempoRealHabilitado, setTempoRealHabilitado] =\n    useState(tempoRealAtivo);\n  const [mostrarConfiguracoes, setMostrarConfiguracoes] = useState(false);\n\n  // Hook para métricas em tempo real\n  const metricasDashboard = useMetricasDashboardTempoReal(\n    tempoRealHabilitado ? filtros : undefined\n  );\n\n  const metricasAtendente = useMetricasAtendenteTempoReal(\n    atendenteId || '',\n    tempoRealHabilitado && atendenteId ? filtros : undefined\n  );\n\n  // Determinar qual hook usar baseado no contexto\n  const metricas = atendenteId ? metricasAtendente : metricasDashboard;\n\n  // Callbacks para ações\n  const handleFiltrosChange = useCallback((novosFiltros: FiltrosAvancados) => {\n    setFiltros(novosFiltros);\n    toast.info('Filtros aplicados', {\n      description: 'Os dados serão atualizados automaticamente',\n    });\n  }, []);\n\n  const handleToggleTempoReal = useCallback((ativo: boolean) => {\n    setTempoRealHabilitado(ativo);\n    toast.success(\n      ativo\n        ? 'Atualização automática ativada'\n        : 'Atualização automática pausada'\n    );\n  }, []);\n\n  const handleExportar = useCallback((config: ConfiguracaoExportacao) => {\n    toast.promise(\n      new Promise(resolve => {\n        // Simular exportação\n        setTimeout(() => {\n          resolve('Relatório exportado com sucesso!');\n        }, 2000);\n      }),\n      {\n        loading: 'Exportando relatório...',\n        success: 'Relatório exportado com sucesso!',\n        error: 'Erro ao exportar relatório',\n      }\n    );\n  }, []);\n\n  // Dados processados\n  const dadosProcessados = useMemo(() => {\n    if (!metricas.dados) return null;\n\n    // Adaptar dados conforme necessário\n    return metricas.dados;\n  }, [metricas.dados]);\n\n  // Renderizar conteúdo baseado na aba selecionada\n  const renderizarConteudo = () => {\n    if (!dadosProcessados) {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <RefreshCw className=\"h-8 w-8 animate-spin mx-auto mb-2 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">Carregando métricas...</p>\n          </div>\n        </div>\n      );\n    }\n\n    switch (abaSelecionada) {\n      case 'resumo':\n        return (\n          <ResumoStatus\n            dados={dadosProcessados}\n            carregando={metricas.carregando}\n          />\n        );\n\n      case 'graficos':\n        return (\n          <GraficosDesempenho\n            dadosIndividuais={atendenteId ? dadosProcessados : undefined}\n            dadosDashboard={!atendenteId ? dadosProcessados : undefined}\n            carregando={metricas.carregando}\n          />\n        );\n\n      case 'produtividade':\n        return (\n          <IndicadoresProdutividade\n            dados={dadosProcessados}\n            carregando={metricas.carregando}\n          />\n        );\n\n      case 'comparativo':\n        return (\n          <ComparativoAtendentes\n            dadosIniciais={dadosProcessados}\n            carregando={metricas.carregando}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Cabeçalho */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">\n            {atendenteId ? 'Métricas do Atendente' : 'Dashboard de Métricas'}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {atendenteId\n              ? 'Acompanhe o desempenho individual em tempo real'\n              : 'Visão geral do desempenho da equipe'}\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {/* Status de tempo real */}\n          <StatusTempoReal\n            status={metricas.status}\n            carregando={metricas.carregando}\n            ativo={tempoRealHabilitado}\n            intervalo={intervaloAtualizacao}\n            onForcarAtualizacao={metricas.forcarAtualizacao}\n            onReconectar={metricas.reconectar}\n            onToggleAtivo={handleToggleTempoReal}\n            compacto\n          />\n\n          {/* Botão de configurações */}\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setMostrarConfiguracoes(!mostrarConfiguracoes)}\n          >\n            {mostrarConfiguracoes ? (\n              <EyeOff className=\"h-4 w-4\" />\n            ) : (\n              <Settings className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Filtros e configurações */}\n      {mostrarConfiguracoes && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Filtros e Configurações</CardTitle>\n            <CardDescription>\n              Configure os filtros e opções de visualização\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Filtros */}\n              <div>\n                <h3 className=\"font-medium mb-3\">Filtros de Período</h3>\n                <FiltrosPeriodo\n                  filtros={filtros}\n                  onChange={handleFiltrosChange}\n                  carregando={metricas.carregando}\n                />\n              </div>\n\n              {/* Exportação */}\n              <div>\n                <h3 className=\"font-medium mb-3\">Exportar Relatórios</h3>\n                <ExportarRelatorios\n                  dados={dadosProcessados}\n                  onExportar={handleExportar}\n                  carregando={metricas.carregando}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Estatísticas rápidas */}\n      {dadosProcessados && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"h-4 w-4 text-blue-500\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Total de Atendentes</p>\n                  <p className=\"text-2xl font-bold\">\n                    {atendenteId\n                      ? '1'\n                      : dadosProcessados.totalAtendentes || '0'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-4 w-4 text-green-500\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Documentos Criados</p>\n                  <p className=\"text-2xl font-bold\">\n                    {dadosProcessados.totalDocumentos || '0'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-4 w-4 text-orange-500\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Avaliação Média</p>\n                  <p className=\"text-2xl font-bold\">\n                    {dadosProcessados.avaliacaoMedia?.toFixed(1) || '0.0'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <RefreshCw className=\"h-4 w-4 text-purple-500\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Última Atualização</p>\n                  <p className=\"text-sm font-medium\">\n                    {metricas.status.ultimaAtualizacao?.toLocaleTimeString(\n                      'pt-BR'\n                    ) || 'Nunca'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Conteúdo principal */}\n      <Tabs value={abaSelecionada} onValueChange={setAbaSelecionada}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"resumo\" className=\"flex items-center gap-2\">\n            <Eye className=\"h-4 w-4\" />\n            Resumo\n          </TabsTrigger>\n          <TabsTrigger value=\"graficos\" className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            Gráficos\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"produtividade\"\n            className=\"flex items-center gap-2\"\n          >\n            <TrendingUp className=\"h-4 w-4\" />\n            Produtividade\n          </TabsTrigger>\n          <TabsTrigger value=\"comparativo\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Comparativo\n          </TabsTrigger>\n        </TabsList>\n\n        <div className=\"mt-6\">{renderizarConteudo()}</div>\n      </Tabs>\n\n      {/* Status de conexão detalhado */}\n      {!tempoRealHabilitado && (\n        <Card className=\"border-yellow-200 bg-yellow-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2 text-yellow-800\">\n              <Eye className=\"h-4 w-4\" />\n              <span className=\"text-sm font-medium\">\n                Atualização automática pausada. Os dados podem não estar\n                atualizados.\n              </span>\n              <Button\n                variant=\"link\"\n                size=\"sm\"\n                onClick={() => handleToggleTempoReal(true)}\n                className=\"text-yellow-800 p-0 h-auto\"\n              >\n                Reativar\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nexport default DashboardMetricas;\n"],"names":["DashboardMetricas","atendenteId","className","tempoRealAtivo","intervaloAtualizacao","abaSelecionada","setAbaSelecionada","useState","filtros","setFiltros","tempoRealHabilitado","setTempoRealHabilitado","mostrarConfiguracoes","setMostrarConfiguracoes","metricasDashboard","useMetricasDashboardTempoReal","undefined","metricasAtendente","useMetricasAtendenteTempoReal","metricas","handleFiltrosChange","useCallback","novosFiltros","toast","info","description","handleToggleTempoReal","ativo","success","handleExportar","config","promise","Promise","resolve","setTimeout","loading","error","dadosProcessados","useMemo","dados","renderizarConteudo","div","RefreshCw","p","ResumoStatus","carregando","GraficosDesempenho","dadosIndividuais","dadosDashboard","IndicadoresProdutividade","ComparativoAtendentes","dadosIniciais","h1","StatusTempoReal","status","intervalo","onForcarAtualizacao","forcarAtualizacao","onReconectar","reconectar","onToggleAtivo","compacto","Button","variant","size","onClick","EyeOff","Settings","Card","CardHeader","CardTitle","CardDescription","CardContent","h3","FiltrosPeriodo","onChange","ExportarRelatorios","onExportar","Users","totalAtendentes","BarChart3","totalDocumentos","TrendingUp","avaliacaoMedia","toFixed","ultimaAtualizacao","toLocaleTimeString","Tabs","value","onValueChange","TabsList","TabsTrigger","Eye","span"],"mappings":"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"}