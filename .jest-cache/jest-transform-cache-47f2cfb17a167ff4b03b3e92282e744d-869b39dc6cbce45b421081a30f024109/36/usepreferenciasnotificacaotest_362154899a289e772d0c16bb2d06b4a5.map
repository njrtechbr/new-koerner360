{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\__tests__\\use-preferencias-notificacao.test.ts"],"sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { usePreferenciasNotificacao } from '../use-preferencias-notificacao';\nimport { useToast } from '../use-toast';\nimport type { PreferenciasNotificacao, PreferenciasNotificacaoInput } from '../../lib/types/preferencias-notificacao';\n\n// Mock do hook useToast\nvi.mock('../use-toast', () => ({\n  useToast: vi.fn(() => ({\n    toast: vi.fn(),\n  })),\n}));\n\n// Mock do fetch global\nconst mockFetch = vi.fn();\nglobal.fetch = mockFetch;\n\n// Mock dos dados de teste\nconst mockPreferencias: PreferenciasNotificacao = {\n  id: '1',\n  usuarioId: 'user-1',\n  ativo: true,\n  email: {\n    ativo: true,\n    formato: 'html',\n  },\n  idioma: 'pt-BR',\n  conteudo: {\n    incluirDetalhesAvaliacao: true,\n    incluirLinkDireto: true,\n    incluirResumoEstatisticas: false,\n  },\n  urgenciaMinima: 'media',\n  tipos: {\n    avaliacaoPendente: {\n      ativo: true,\n      frequencia: 'diaria',\n      diasAntecedencia: 3,\n    },\n    avaliacaoVencida: {\n      ativo: true,\n      frequencia: 'imediata',\n    },\n    avaliacaoProximaVencimento: {\n      ativo: true,\n      frequencia: 'diaria',\n      diasAntecedencia: 1,\n    },\n    novaAvaliacao: {\n      ativo: false,\n      frequencia: 'imediata',\n    },\n    avaliacaoCompletada: {\n      ativo: false,\n      frequencia: 'semanal',\n    },\n    lembretePersonalizado: {\n      ativo: true,\n      frequencia: 'conforme_agendado',\n    },\n  },\n  horario: {\n    envio: '09:00',\n    incluirFinsDeSemanaSemana: false,\n    incluirFeriados: false,\n  },\n  filtros: {\n    apenasMinhasAvaliacoes: false,\n    apenasAvaliacoesQueAvalia: true,\n  },\n  pausa: {\n    ativo: false,\n    ate: null,\n    motivo: null,\n  },\n  criadoEm: new Date().toISOString(),\n  atualizadoEm: new Date().toISOString(),\n};\n\nconst mockStatusPausa = {\n  pausado: false,\n  ate: null,\n  motivo: null,\n};\n\ndescribe('usePreferenciasNotificacao', () => {\n  const mockToast = vi.fn();\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    (useToast as any).mockReturnValue({ toast: mockToast });\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  describe('buscarPreferencias', () => {\n    it('deve buscar preferências com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockPreferencias,\n      });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      await act(async () => {\n        await result.current.buscarPreferencias();\n      });\n\n      expect(result.current.preferencias).toEqual(mockPreferencias);\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBeNull();\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/preferencias-notificacao',\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n    });\n\n    it('deve lidar com erro na busca das preferências', async () => {\n      const errorMessage = 'Erro ao buscar preferências';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      await act(async () => {\n        await result.current.buscarPreferencias();\n      });\n\n      expect(result.current.preferencias).toBeNull();\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBe(errorMessage);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n\n    it('deve buscar preferências automaticamente no mount', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockPreferencias,\n      });\n\n      renderHook(() => usePreferenciasNotificacao());\n\n      // Aguardar um tick para o useEffect executar\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/preferencias-notificacao',\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n    });\n  });\n\n  describe('atualizarPreferencias', () => {\n    it('deve atualizar preferências com sucesso', async () => {\n      const novasPreferencias: PreferenciasNotificacaoInput = {\n        ativo: false,\n        email: {\n          ativo: false,\n          formato: 'texto',\n        },\n        urgenciaMinima: 'alta',\n      };\n\n      const preferenciasAtualizadas = {\n        ...mockPreferencias,\n        ...novasPreferencias,\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => preferenciasAtualizadas,\n      });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      let resultado;\n      await act(async () => {\n        resultado = await result.current.atualizarPreferencias(novasPreferencias);\n      });\n\n      expect(resultado).toEqual(preferenciasAtualizadas);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/preferencias-notificacao',\n        expect.objectContaining({\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(novasPreferencias),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Preferências atualizadas com sucesso',\n      });\n    });\n\n    it('deve lidar com erro ao atualizar preferências', async () => {\n      const errorMessage = 'Erro ao atualizar preferências';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      const novasPreferencias: PreferenciasNotificacaoInput = {\n        ativo: false,\n      };\n\n      let resultado;\n      await act(async () => {\n        resultado = await result.current.atualizarPreferencias(novasPreferencias);\n      });\n\n      expect(resultado).toBeNull();\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('resetarPreferencias', () => {\n    it('deve resetar preferências com sucesso', async () => {\n      const preferenciasDefault = {\n        ...mockPreferencias,\n        ativo: false,\n        tipos: {\n          avaliacaoPendente: { ativo: false, frequencia: 'diaria' },\n          avaliacaoVencida: { ativo: false, frequencia: 'imediata' },\n          avaliacaoProximaVencimento: { ativo: false, frequencia: 'diaria' },\n          novaAvaliacao: { ativo: false, frequencia: 'imediata' },\n          avaliacaoCompletada: { ativo: false, frequencia: 'semanal' },\n          lembretePersonalizado: { ativo: false, frequencia: 'conforme_agendado' },\n        },\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => preferenciasDefault,\n      });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      let resultado;\n      await act(async () => {\n        resultado = await result.current.resetarPreferencias();\n      });\n\n      expect(resultado).toEqual(preferenciasDefault);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/preferencias-notificacao',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Preferências resetadas para os valores padrão',\n      });\n    });\n  });\n\n  describe('pausarNotificacoes', () => {\n    it('deve pausar notificações com sucesso', async () => {\n      const ate = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 dias\n      const motivo = 'Férias';\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.pausarNotificacoes(ate, motivo);\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/preferencias-notificacao/pausar',\n        expect.objectContaining({\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            ate: ate.toISOString(),\n            motivo,\n          }),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Notificações pausadas com sucesso',\n      });\n    });\n\n    it('deve pausar notificações sem motivo', async () => {\n      const ate = new Date(Date.now() + 24 * 60 * 60 * 1000); // 1 dia\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      await act(async () => {\n        await result.current.pausarNotificacoes(ate);\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/preferencias-notificacao/pausar',\n        expect.objectContaining({\n          body: JSON.stringify({\n            ate: ate.toISOString(),\n          }),\n        })\n      );\n    });\n\n    it('deve lidar com erro ao pausar notificações', async () => {\n      const errorMessage = 'Erro ao pausar notificações';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      const ate = new Date(Date.now() + 24 * 60 * 60 * 1000);\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.pausarNotificacoes(ate);\n      });\n\n      expect(sucesso).toBe(false);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('retomarNotificacoes', () => {\n    it('deve retomar notificações com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.retomarNotificacoes();\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/preferencias-notificacao/pausar',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Notificações retomadas com sucesso',\n      });\n    });\n\n    it('deve lidar com erro ao retomar notificações', async () => {\n      const errorMessage = 'Erro ao retomar notificações';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.retomarNotificacoes();\n      });\n\n      expect(sucesso).toBe(false);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('verificarStatusPausa', () => {\n    it('deve verificar status de pausa com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockStatusPausa,\n      });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      await act(async () => {\n        await result.current.verificarStatusPausa();\n      });\n\n      expect(result.current.statusPausa).toEqual(mockStatusPausa);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/preferencias-notificacao/pausar',\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n    });\n\n    it('deve verificar status de pausa pausado', async () => {\n      const statusPausado = {\n        pausado: true,\n        ate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        motivo: 'Férias',\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => statusPausado,\n      });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      await act(async () => {\n        await result.current.verificarStatusPausa();\n      });\n\n      expect(result.current.statusPausa).toEqual(statusPausado);\n    });\n\n    it('deve lidar com erro ao verificar status de pausa', async () => {\n      const errorMessage = 'Erro ao verificar status';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      await act(async () => {\n        await result.current.verificarStatusPausa();\n      });\n\n      expect(result.current.statusPausa).toBeNull();\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('estados de carregamento', () => {\n    it('deve gerenciar estado de carregamento corretamente', async () => {\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n\n      mockFetch.mockReturnValueOnce(promise);\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      // Iniciar busca\n      act(() => {\n        result.current.buscarPreferencias();\n      });\n\n      // Verificar que está carregando\n      expect(result.current.carregando).toBe(true);\n\n      // Resolver promise\n      await act(async () => {\n        resolvePromise!({\n          ok: true,\n          json: async () => mockPreferencias,\n        });\n      });\n\n      // Verificar que não está mais carregando\n      expect(result.current.carregando).toBe(false);\n    });\n  });\n\n  describe('atualização automática após ações', () => {\n    it('deve atualizar preferências após pausar notificações', async () => {\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ success: true }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockPreferencias,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ ...mockStatusPausa, pausado: true }),\n        });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      const ate = new Date(Date.now() + 24 * 60 * 60 * 1000);\n\n      await act(async () => {\n        await result.current.pausarNotificacoes(ate, 'Teste');\n      });\n\n      // Verificar que as funções de busca foram chamadas após a ação\n      expect(mockFetch).toHaveBeenCalledTimes(3); // pausar + buscarPreferencias + verificarStatusPausa\n    });\n\n    it('deve atualizar preferências após retomar notificações', async () => {\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ success: true }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockPreferencias,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockStatusPausa,\n        });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      await act(async () => {\n        await result.current.retomarNotificacoes();\n      });\n\n      // Verificar que as funções de busca foram chamadas após a ação\n      expect(mockFetch).toHaveBeenCalledTimes(3); // retomar + buscarPreferencias + verificarStatusPausa\n    });\n  });\n\n  describe('integração completa', () => {\n    it('deve executar fluxo completo de configuração', async () => {\n      // Setup mocks para todas as chamadas\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockPreferencias,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockStatusPausa,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ ...mockPreferencias, ativo: false }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ success: true }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockPreferencias,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ ...mockStatusPausa, pausado: true }),\n        });\n\n      const { result } = renderHook(() => usePreferenciasNotificacao());\n\n      // Aguardar carregamento inicial\n      await act(async () => {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      });\n\n      // 1. Verificar status de pausa\n      await act(async () => {\n        await result.current.verificarStatusPausa();\n      });\n      expect(result.current.statusPausa).toEqual(mockStatusPausa);\n\n      // 2. Atualizar preferências\n      await act(async () => {\n        await result.current.atualizarPreferencias({ ativo: false });\n      });\n\n      // 3. Pausar notificações\n      const ate = new Date(Date.now() + 24 * 60 * 60 * 1000);\n      await act(async () => {\n        await result.current.pausarNotificacoes(ate, 'Teste');\n      });\n\n      // Verificar que todas as chamadas foram feitas\n      expect(mockFetch).toHaveBeenCalledTimes(6);\n    });\n  });\n});"],"names":["vi","mock","useToast","fn","toast","mockFetch","global","fetch","mockPreferencias","id","usuarioId","ativo","email","formato","idioma","conteudo","incluirDetalhesAvaliacao","incluirLinkDireto","incluirResumoEstatisticas","urgenciaMinima","tipos","avaliacaoPendente","frequencia","diasAntecedencia","avaliacaoVencida","avaliacaoProximaVencimento","novaAvaliacao","avaliacaoCompletada","lembretePersonalizado","horario","envio","incluirFinsDeSemanaSemana","incluirFeriados","filtros","apenasMinhasAvaliacoes","apenasAvaliacoesQueAvalia","pausa","ate","motivo","criadoEm","Date","toISOString","atualizadoEm","mockStatusPausa","pausado","describe","mockToast","beforeEach","clearAllMocks","mockReturnValue","afterEach","resetAllMocks","it","mockResolvedValueOnce","ok","json","result","renderHook","usePreferenciasNotificacao","act","current","buscarPreferencias","expect","preferencias","toEqual","carregando","toBe","erro","toBeNull","toHaveBeenCalledWith","objectContaining","method","errorMessage","mockRejectedValueOnce","Error","title","description","variant","Promise","resolve","setTimeout","novasPreferencias","preferenciasAtualizadas","resultado","atualizarPreferencias","headers","body","JSON","stringify","preferenciasDefault","resetarPreferencias","now","success","sucesso","pausarNotificacoes","retomarNotificacoes","verificarStatusPausa","statusPausa","statusPausado","resolvePromise","promise","mockReturnValueOnce","toHaveBeenCalledTimes"],"mappings":"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"}