{"version":3,"names":["cov_q5w5miydu","actualCoverage","s","default","f","_default","useUsuarios","data","session","_react1","useSession","usuarios","setUsuarios","_react","useState","usuario","setUsuario","paginacao","setPaginacao","carregando","setCarregando","erro","setErro","fazerRequisicao","useCallback","url","opcoes","b","resposta","fetch","headers","ok","json","Error","listarUsuarios","parametros","searchParams","URLSearchParams","pagina","set","toString","limite","busca","perfil","ativo","undefined","ordenarPor","ordem","dados","error","mensagemErro","message","_sonner","toast","buscarUsuario","id","criarUsuario","dadosUsuario","method","body","JSON","stringify","success","mensagem","length","prev","atualizarUsuario","map","u","desativarUsuario","ativarUsuario","limparEstado","podeGerenciarUsuarios","user","includes","podeEditarUsuario","idUsuario"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-usuarios.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSession } from 'next-auth/react';\nimport { toast } from 'sonner';\n\n// Tipos para usuários\nexport interface Usuario {\n  id: string;\n  nome: string;\n  email: string;\n  perfil: 'ADMIN' | 'GESTOR' | 'ATENDENTE';\n  ativo: boolean;\n  criadoEm: string;\n  atualizadoEm: string;\n  ultimoLogin?: string;\n}\n\nexport interface CriarUsuarioData {\n  nome: string;\n  email: string;\n  senha: string;\n  perfil: 'ADMIN' | 'GESTOR' | 'ATENDENTE';\n  ativo?: boolean;\n}\n\nexport interface AtualizarUsuarioData {\n  nome?: string;\n  email?: string;\n  perfil?: 'ADMIN' | 'GESTOR' | 'ATENDENTE';\n  ativo?: boolean;\n}\n\nexport interface ParametrosListagem {\n  pagina?: number;\n  limite?: number;\n  busca?: string;\n  perfil?: 'ADMIN' | 'GESTOR' | 'ATENDENTE';\n  ativo?: boolean;\n  ordenarPor?: 'nome' | 'email' | 'criadoEm' | 'atualizadoEm';\n  ordem?: 'asc' | 'desc';\n}\n\nexport interface PaginacaoInfo {\n  paginaAtual: number;\n  totalPaginas: number;\n  totalItens: number;\n  itensPorPagina: number;\n  temProxima: boolean;\n  temAnterior: boolean;\n}\n\nexport interface RespostaListagem {\n  usuarios: Usuario[];\n  paginacao: PaginacaoInfo;\n}\n\n/**\n * Hook para gerenciamento de usuários\n * Fornece funcionalidades CRUD completas para usuários\n */\nexport function useUsuarios() {\n  const { data: session } = useSession();\n  const [usuarios, setUsuarios] = useState<Usuario[]>([]);\n  const [usuario, setUsuario] = useState<Usuario | null>(null);\n  const [paginacao, setPaginacao] = useState<PaginacaoInfo | null>(null);\n  const [carregando, setCarregando] = useState(false);\n  const [erro, setErro] = useState<string | null>(null);\n\n  /**\n   * Função auxiliar para fazer requisições à API\n   */\n  const fazerRequisicao = useCallback(\n    async (url: string, opcoes: RequestInit = {}) => {\n      const resposta = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...opcoes.headers,\n        },\n        ...opcoes,\n      });\n\n      if (!resposta.ok) {\n        const erro = await resposta.json();\n        throw new Error(erro.erro || 'Erro na requisição');\n      }\n\n      return resposta.json();\n    },\n    []\n  );\n\n  /**\n   * Listar usuários com paginação e filtros\n   */\n  const listarUsuarios = useCallback(\n    async (parametros: ParametrosListagem = {}) => {\n      try {\n        setCarregando(true);\n        setErro(null);\n\n        const searchParams = new URLSearchParams();\n\n        if (parametros.pagina)\n          searchParams.set('pagina', parametros.pagina.toString());\n        if (parametros.limite)\n          searchParams.set('limite', parametros.limite.toString());\n        if (parametros.busca) searchParams.set('busca', parametros.busca);\n        if (parametros.perfil) searchParams.set('perfil', parametros.perfil);\n        if (parametros.ativo !== undefined)\n          searchParams.set('ativo', parametros.ativo.toString());\n        if (parametros.ordenarPor)\n          searchParams.set('ordenarPor', parametros.ordenarPor);\n        if (parametros.ordem) searchParams.set('ordem', parametros.ordem);\n\n        const url = `/api/usuarios?${searchParams.toString()}`;\n        const dados: RespostaListagem = await fazerRequisicao(url);\n\n        setUsuarios(dados.usuarios);\n        setPaginacao(dados.paginacao);\n\n        return dados;\n      } catch (error) {\n        const mensagemErro =\n          error instanceof Error ? error.message : 'Erro ao listar usuários';\n        setErro(mensagemErro);\n        toast.error(mensagemErro);\n        throw error;\n      } finally {\n        setCarregando(false);\n      }\n    },\n    [fazerRequisicao]\n  );\n\n  /**\n   * Buscar usuário por ID\n   */\n  const buscarUsuario = useCallback(\n    async (id: string) => {\n      try {\n        setCarregando(true);\n        setErro(null);\n\n        const dados = await fazerRequisicao(`/api/usuarios/${id}`);\n        setUsuario(dados.usuario);\n\n        return dados.usuario;\n      } catch (error) {\n        const mensagemErro =\n          error instanceof Error ? error.message : 'Erro ao buscar usuário';\n        setErro(mensagemErro);\n        toast.error(mensagemErro);\n        throw error;\n      } finally {\n        setCarregando(false);\n      }\n    },\n    [fazerRequisicao]\n  );\n\n  /**\n   * Criar novo usuário\n   */\n  const criarUsuario = useCallback(\n    async (dadosUsuario: CriarUsuarioData) => {\n      try {\n        setCarregando(true);\n        setErro(null);\n\n        const dados = await fazerRequisicao('/api/usuarios', {\n          method: 'POST',\n          body: JSON.stringify(dadosUsuario),\n        });\n\n        toast.success(dados.mensagem || 'Usuário criado com sucesso');\n\n        // Atualizar lista local se existir\n        if (usuarios.length > 0) {\n          setUsuarios(prev => [dados.usuario, ...prev]);\n        }\n\n        return dados.usuario;\n      } catch (error) {\n        const mensagemErro =\n          error instanceof Error ? error.message : 'Erro ao criar usuário';\n        setErro(mensagemErro);\n        toast.error(mensagemErro);\n        throw error;\n      } finally {\n        setCarregando(false);\n      }\n    },\n    [fazerRequisicao, usuarios]\n  );\n\n  /**\n   * Atualizar usuário existente\n   */\n  const atualizarUsuario = useCallback(\n    async (id: string, dadosUsuario: AtualizarUsuarioData) => {\n      try {\n        setCarregando(true);\n        setErro(null);\n\n        const dados = await fazerRequisicao(`/api/usuarios/${id}`, {\n          method: 'PUT',\n          body: JSON.stringify(dadosUsuario),\n        });\n\n        toast.success(dados.mensagem || 'Usuário atualizado com sucesso');\n\n        // Atualizar lista local\n        setUsuarios(prev => prev.map(u => (u.id === id ? dados.usuario : u)));\n\n        // Atualizar usuário individual se for o mesmo\n        if (usuario?.id === id) {\n          setUsuario(dados.usuario);\n        }\n\n        return dados.usuario;\n      } catch (error) {\n        const mensagemErro =\n          error instanceof Error ? error.message : 'Erro ao atualizar usuário';\n        setErro(mensagemErro);\n        toast.error(mensagemErro);\n        throw error;\n      } finally {\n        setCarregando(false);\n      }\n    },\n    [fazerRequisicao, usuario, usuarios]\n  );\n\n  /**\n   * Desativar usuário (soft delete)\n   */\n  const desativarUsuario = useCallback(\n    async (id: string) => {\n      try {\n        setCarregando(true);\n        setErro(null);\n\n        const dados = await fazerRequisicao(`/api/usuarios/${id}`, {\n          method: 'DELETE',\n        });\n\n        toast.success(dados.mensagem || 'Usuário desativado com sucesso');\n\n        // Atualizar lista local\n        setUsuarios(prev =>\n          prev.map(u => (u.id === id ? { ...u, ativo: false } : u))\n        );\n\n        // Atualizar usuário individual se for o mesmo\n        if (usuario?.id === id) {\n          setUsuario(prev => (prev ? { ...prev, ativo: false } : null));\n        }\n\n        return dados.usuario;\n      } catch (error) {\n        const mensagemErro =\n          error instanceof Error ? error.message : 'Erro ao desativar usuário';\n        setErro(mensagemErro);\n        toast.error(mensagemErro);\n        throw error;\n      } finally {\n        setCarregando(false);\n      }\n    },\n    [fazerRequisicao, usuario, usuarios]\n  );\n\n  /**\n   * Ativar usuário\n   */\n  const ativarUsuario = useCallback(\n    async (id: string) => {\n      try {\n        setCarregando(true);\n        setErro(null);\n\n        const dados = await fazerRequisicao(`/api/usuarios/${id}/ativar`, {\n          method: 'PATCH',\n        });\n\n        toast.success(dados.mensagem || 'Usuário ativado com sucesso');\n\n        // Atualizar lista local\n        setUsuarios(prev =>\n          prev.map(u => (u.id === id ? { ...u, ativo: true } : u))\n        );\n\n        // Atualizar usuário individual se for o mesmo\n        if (usuario?.id === id) {\n          setUsuario(prev => (prev ? { ...prev, ativo: true } : null));\n        }\n\n        return dados.usuario;\n      } catch (error) {\n        const mensagemErro =\n          error instanceof Error ? error.message : 'Erro ao ativar usuário';\n        setErro(mensagemErro);\n        toast.error(mensagemErro);\n        throw error;\n      } finally {\n        setCarregando(false);\n      }\n    },\n    [fazerRequisicao, usuario, usuarios]\n  );\n\n  /**\n   * Limpar estado\n   */\n  const limparEstado = useCallback(() => {\n    setUsuarios([]);\n    setUsuario(null);\n    setPaginacao(null);\n    setErro(null);\n  }, []);\n\n  /**\n   * Verificar se o usuário atual pode gerenciar usuários\n   */\n  const podeGerenciarUsuarios = useCallback(() => {\n    return (\n      session?.user?.perfil && ['ADMIN', 'GESTOR'].includes(session.user.perfil)\n    );\n  }, [session]);\n\n  /**\n   * Verificar se pode editar usuário específico\n   */\n  const podeEditarUsuario = useCallback(\n    (idUsuario: string) => {\n      if (!session?.user) return false;\n\n      // Pode editar próprios dados ou se for admin/gestor\n      return (\n        session.user.id === idUsuario ||\n        ['ADMIN', 'GESTOR'].includes(session.user.perfil)\n      );\n    },\n    [session]\n  );\n\n  return {\n    // Estado\n    usuarios,\n    usuario,\n    paginacao,\n    carregando,\n    erro,\n\n    // Ações\n    listarUsuarios,\n    buscarUsuario,\n    criarUsuario,\n    atualizarUsuario,\n    desativarUsuario,\n    ativarUsuario,\n    limparEstado,\n\n    // Utilitários\n    podeGerenciarUsuarios,\n    podeEditarUsuario,\n  };\n}\n\nexport default useUsuarios;\n"],"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","ignoreList":[]}