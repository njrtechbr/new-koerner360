{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\components\\metricas\\__tests__\\metricas.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock dos hooks de tempo real\nconst mockUseMetricasDashboard = jest.fn();\nconst mockUseMetricasAtendente = jest.fn();\n\njest.mock('@/hooks/use-metricas-tempo-real', () => ({\n  useMetricasDashboardTempoReal: () => mockUseMetricasDashboard(),\n  useMetricasAtendenteTempoReal: () => mockUseMetricasAtendente(),\n  useMultiplasMetricasTempoReal: jest.fn(),\n}));\n\n// Mock do toast\njest.mock('sonner', () => ({\n  toast: {\n    success: jest.fn(),\n    error: jest.fn(),\n    info: jest.fn(),\n  },\n}));\n\n// Importar componentes\nimport {\n  DashboardMetricas,\n  StatusTempoReal,\n  GraficosDesempenho,\n  IndicadoresProdutividade,\n  ResumoStatus,\n  FiltrosPeriodo,\n  ExportarRelatorios,\n  ComparativoAtendentes,\n} from '../index';\n\n// Dados de teste\nconst dadosTesteDashboard = {\n  totalAtendentes: 25,\n  atendentesPorStatus: {\n    ativo: 20,\n    inativo: 3,\n    pendente: 1,\n    suspenso: 1,\n  },\n  atendentesPorSetor: [\n    { setor: 'Vendas', quantidade: 10, porcentagem: 40 },\n    { setor: 'Suporte', quantidade: 8, porcentagem: 32 },\n    { setor: 'Financeiro', quantidade: 7, porcentagem: 28 },\n  ],\n  atendentesPorCargo: [\n    { cargo: 'Atendente Jr', quantidade: 12, porcentagem: 48 },\n    { cargo: 'Atendente Pl', quantidade: 8, porcentagem: 32 },\n    { cargo: 'Atendente Sr', quantidade: 5, porcentagem: 20 },\n  ],\n  metricas: {\n    documentosCriados: {\n      total: 150,\n      tendencia: { valor: 12.5, tipo: 'alta' as const },\n    },\n    avaliacoes: {\n      media: 4.2,\n      total: 45,\n      tendencia: { valor: -2.1, tipo: 'baixa' as const },\n    },\n    alteracoes: {\n      total: 28,\n      tendencia: { valor: 5.2, tipo: 'alta' as const },\n    },\n    produtividadeMedia: {\n      valor: 85,\n      tendencia: { valor: 8.3, tipo: 'alta' as const },\n    },\n  },\n  alertas: {\n    atendentesSemDocumentos: 2,\n    atendentesComAvaliacaoBaixa: 1,\n    atendentesSemAtividade: 0,\n  },\n  desempenho: {\n    excelente: 8,\n    bom: 12,\n    regular: 4,\n    ruim: 1,\n  },\n};\n\nconst dadosTesteAtendente = {\n  id: '1',\n  nome: 'João Silva',\n  status: 'online' as const,\n  atendimentosHoje: 25,\n  tempoMedioResposta: 95,\n  satisfacaoMedia: 4.5,\n  atendimentoAtual: {\n    id: 'atend-123',\n    cliente: 'Maria Santos',\n    canal: 'WhatsApp',\n    iniciadoEm: new Date(),\n    ultimaMensagem: 'Preciso de ajuda com meu pedido',\n  },\n};\n\nconst statusConexaoTeste = {\n  conectado: true,\n  ultimaAtualizacao: new Date(),\n  tentativasReconexao: 0,\n};\n\ndescribe('Componentes de Métricas', () => {\n  beforeEach(() => {\n    // Resetar mocks antes de cada teste\n    jest.clearAllMocks();\n\n    // Configurar retornos padrão dos mocks\n    mockUseMetricasDashboard.mockReturnValue({\n      dados: dadosTesteDashboard,\n      carregando: false,\n      status: statusConexaoTeste,\n      reconectar: jest.fn(),\n    });\n\n    mockUseMetricasAtendente.mockReturnValue({\n      dados: dadosTesteAtendente,\n      carregando: false,\n      status: statusConexaoTeste,\n      reconectar: jest.fn(),\n    });\n  });\n\n  describe('DashboardMetricas', () => {\n    it('deve renderizar o dashboard principal', () => {\n      const { container } = render(<DashboardMetricas />);\n\n      expect(container).toBeInTheDocument();\n    });\n\n    it('deve alternar entre abas', async () => {\n      const { container } = render(<DashboardMetricas />);\n\n      // Verificar se o componente renderiza sem erros\n      expect(container).toBeInTheDocument();\n    });\n\n    it('deve exibir indicadores em tempo real', () => {\n      const { container } = render(<DashboardMetricas />);\n\n      // Verificar se o componente renderiza sem erros\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('StatusTempoReal', () => {\n    it('deve renderizar status de conexão', () => {\n      const { container } = render(\n        <StatusTempoReal status={statusConexaoTeste} />\n      );\n\n      expect(container).toBeInTheDocument();\n    });\n\n    it('deve exibir estado de carregamento', () => {\n      mockUseMetricasDashboard.mockReturnValue({\n        dados: null,\n        carregando: true,\n        status: statusConexaoTeste,\n        reconectar: jest.fn(),\n      });\n\n      const { container } = render(\n        <StatusTempoReal status={statusConexaoTeste} carregando={true} />\n      );\n\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('GraficosDesempenho', () => {\n    it('deve renderizar gráficos de desempenho', () => {\n      const { container } = render(\n        <GraficosDesempenho dados={dadosTesteDashboard} />\n      );\n\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('IndicadoresProdutividade', () => {\n    it('deve renderizar indicadores de produtividade', () => {\n      const dadosProdutividade = {\n        avaliacoes: {\n          media: 4.5,\n          total: 100,\n          meta: 4.0,\n        },\n        documentos: {\n          total: 150,\n          ativosNoPeriodo: 120,\n          meta: 100,\n        },\n        atividade: {\n          totalAlteracoes: 50,\n          meta: 40,\n        },\n      };\n      const { container } = render(\n        <IndicadoresProdutividade dados={dadosProdutividade} />\n      );\n\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('ResumoStatus', () => {\n    it('deve renderizar resumo de status', () => {\n      const { container } = render(\n        <ResumoStatus dados={dadosTesteDashboard} />\n      );\n\n      // Verificar se o componente renderiza sem erros\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('FiltrosPeriodo', () => {\n    it('deve renderizar filtros de período', () => {\n      const onFiltrosChange = jest.fn();\n      const filtros = { dataInicio: new Date(), dataFim: new Date() };\n      const { container } = render(\n        <FiltrosPeriodo filtros={filtros} onFiltrosChange={onFiltrosChange} />\n      );\n\n      expect(container).toBeInTheDocument();\n    });\n\n    it('deve chamar callback ao alterar filtro', () => {\n      const onFiltrosChange = jest.fn();\n      const filtros = { dataInicio: new Date(), dataFim: new Date() };\n      const { container } = render(\n        <FiltrosPeriodo filtros={filtros} onFiltrosChange={onFiltrosChange} />\n      );\n\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('ExportarRelatorios', () => {\n    it('deve renderizar botões de exportação', () => {\n      const mockOnExportar = jest.fn();\n      const dadosExportacao = {\n        filtros: { dataInicio: new Date(), dataFim: new Date() },\n        metricas: dadosTesteDashboard.metricas,\n      };\n      const { container } = render(\n        <ExportarRelatorios\n          dados={dadosExportacao}\n          onExportar={mockOnExportar}\n        />\n      );\n\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('ComparativoAtendentes', () => {\n    const atendentesComparativos = [\n      dadosTesteAtendente,\n      { ...dadosTesteAtendente, id: '2', nome: 'Maria Santos' },\n    ];\n\n    it('deve renderizar comparativo de atendentes', () => {\n      const { container } = render(\n        <ComparativoAtendentes atendentes={atendentesComparativos} />\n      );\n\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('Tratamento de erros', () => {\n    beforeEach(() => {\n      // Configurar mocks padrão\n      mockUseMetricasDashboard.mockReturnValue({\n        dados: dadosTesteDashboard,\n        carregando: false,\n        status: statusConexaoTeste,\n        reconectar: jest.fn(),\n      });\n    });\n\n    it('deve exibir estado de erro quando hook retorna erro', () => {\n      mockUseMetricasDashboard.mockReturnValue({\n        dados: null,\n        carregando: false,\n        status: { ...statusConexaoTeste, conectado: false },\n        reconectar: jest.fn(),\n        erro: 'Erro de conexão',\n      });\n\n      const { container } = render(\n        <StatusTempoReal status={statusConexaoTeste} onReconectar={jest.fn()} />\n      );\n\n      // Verificar se o componente renderiza sem erros\n      expect(container).toBeInTheDocument();\n    });\n\n    it('deve exibir botão de reconexão quando há erro', () => {\n      const mockReconectar = jest.fn();\n      mockUseMetricasDashboard.mockReturnValue({\n        dados: null,\n        carregando: false,\n        status: { ...statusConexaoTeste, conectado: false },\n        reconectar: mockReconectar,\n        erro: 'Erro de conexão',\n      });\n\n      const { container } = render(\n        <StatusTempoReal\n          status={{ ...statusConexaoTeste, conectado: false }}\n          onReconectar={mockReconectar}\n        />\n      );\n\n      // Verificar se o componente renderiza sem erros\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('Integração com hooks', () => {\n    it('deve atualizar dados quando hook retorna novos valores', async () => {\n      const { container, rerender } = render(<DashboardMetricas />);\n\n      // Simular atualização de dados\n      const novosDados = {\n        ...dadosTesteDashboard,\n        totalAtendentes: 30,\n      };\n\n      mockUseMetricasDashboard.mockReturnValue({\n        dados: novosDados,\n        carregando: false,\n        status: statusConexaoTeste,\n        reconectar: jest.fn(),\n      });\n\n      rerender(<DashboardMetricas />);\n\n      await waitFor(() => {\n        // Verificar se o componente renderiza sem erros\n        expect(container).toBeInTheDocument();\n      });\n    });\n  });\n});\n"],"names":["jest","mock","useMetricasDashboardTempoReal","mockUseMetricasDashboard","useMetricasAtendenteTempoReal","mockUseMetricasAtendente","useMultiplasMetricasTempoReal","fn","toast","success","error","info","dadosTesteDashboard","totalAtendentes","atendentesPorStatus","ativo","inativo","pendente","suspenso","atendentesPorSetor","setor","quantidade","porcentagem","atendentesPorCargo","cargo","metricas","documentosCriados","total","tendencia","valor","tipo","avaliacoes","media","alteracoes","produtividadeMedia","alertas","atendentesSemDocumentos","atendentesComAvaliacaoBaixa","atendentesSemAtividade","desempenho","excelente","bom","regular","ruim","dadosTesteAtendente","id","nome","status","atendimentosHoje","tempoMedioResposta","satisfacaoMedia","atendimentoAtual","cliente","canal","iniciadoEm","Date","ultimaMensagem","statusConexaoTeste","conectado","ultimaAtualizacao","tentativasReconexao","describe","beforeEach","clearAllMocks","mockReturnValue","dados","carregando","reconectar","it","container","render","DashboardMetricas","expect","toBeInTheDocument","StatusTempoReal","GraficosDesempenho","dadosProdutividade","meta","documentos","ativosNoPeriodo","atividade","totalAlteracoes","IndicadoresProdutividade","ResumoStatus","onFiltrosChange","filtros","dataInicio","dataFim","FiltrosPeriodo","mockOnExportar","dadosExportacao","ExportarRelatorios","onExportar","atendentesComparativos","ComparativoAtendentes","atendentes","erro","onReconectar","mockReconectar","rerender","novosDados","waitFor"],"mappings":"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"}