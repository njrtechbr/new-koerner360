{"version":3,"names":["buscarAvaliacoesParaNotificacao","cov_w4ljlv9b5","f","s","buscarAvaliacoesPendentesUsuario","buscarConfiguracaoNotificacao","buscarTodasAvaliacoesPendentes","calcularUrgencia","deveReceberNotificacao","formatarMensagemNotificacao","gerarEstatisticasNotificacoes","diasRestantes","b","usuarioId","avaliacoes","_prisma","prisma","avaliacao","findMany","where","avaliadorId","status","include","periodo","avaliador","select","id","nome","email","avaliado","setor","departamento","orderBy","dataFim","map","dataLimite","_datefns","differenceInDays","Date","urgencia","periodoId","dataInicio","avaliadoId","criadaEm","error","console","Error","diasAntecedencia","addDays","lte","stats","totalPendentes","length","criticas","altas","medias","baixas","vencidas","proximasVencer","forEach","notificacoesEmail","notificacoesInterface","horarioEnvio","frequenciaLembretes","ativo","tipoNotificacao","config","tipo","nomeAvaliado","nomePeriodo","titulo","mensagem","Math","abs"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\utils\\notificacoes-avaliacoes.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma';\nimport { addDays, differenceInDays, isAfter, isBefore } from 'date-fns';\n\n// Tipos para notificações\nexport interface AvaliacaoPendente {\n  id: string;\n  periodoId: string;\n  periodo: {\n    id: string;\n    nome: string;\n    dataInicio: Date;\n    dataFim: Date;\n    status: string;\n  };\n  avaliadorId: string;\n  avaliador: {\n    id: string;\n    nome: string;\n    email: string;\n  };\n  avaliadoId: string;\n  avaliado: {\n    id: string;\n    nome: string;\n    setor?: string;\n    departamento?: string;\n  };\n  status: string;\n  dataLimite: Date;\n  diasRestantes: number;\n  urgencia: 'baixa' | 'media' | 'alta' | 'critica';\n  criadaEm: Date;\n}\n\nexport interface NotificacaoConfig {\n  id: string;\n  usuarioId: string;\n  notificacoesEmail: boolean;\n  notificacoesInterface: boolean;\n  diasAntecedencia: number;\n  horarioEnvio: string; // HH:mm\n  frequenciaLembretes: 'diario' | 'semanal' | 'personalizado';\n  ativo: boolean;\n}\n\nexport interface EstatisticasNotificacoes {\n  totalPendentes: number;\n  criticas: number;\n  altas: number;\n  medias: number;\n  baixas: number;\n  vencidas: number;\n  proximasVencer: number; // próximas 3 dias\n}\n\n/**\n * Calcula a urgência baseada nos dias restantes\n */\nexport function calcularUrgencia(diasRestantes: number): 'baixa' | 'media' | 'alta' | 'critica' {\n  if (diasRestantes < 0) return 'critica'; // Vencida\n  if (diasRestantes <= 1) return 'critica';\n  if (diasRestantes <= 3) return 'alta';\n  if (diasRestantes <= 7) return 'media';\n  return 'baixa';\n}\n\n/**\n * Busca todas as avaliações pendentes de um usuário específico\n */\nexport async function buscarAvaliacoesPendentesUsuario(\n  usuarioId: string\n): Promise<AvaliacaoPendente[]> {\n  try {\n    const avaliacoes = await prisma.avaliacao.findMany({\n      where: {\n        avaliadorId: usuarioId,\n        status: 'PENDENTE'\n      },\n      include: {\n        periodo: true,\n        avaliador: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliado: {\n          select: {\n            id: true,\n            nome: true,\n            setor: true,\n            departamento: true\n          }\n        }\n      },\n      orderBy: {\n        periodo: {\n          dataFim: 'asc'\n        }\n      }\n    });\n\n    return avaliacoes.map(avaliacao => {\n      const dataLimite = avaliacao.periodo.dataFim;\n      const diasRestantes = differenceInDays(dataLimite, new Date());\n      const urgencia = calcularUrgencia(diasRestantes);\n\n      return {\n        id: avaliacao.id,\n        periodoId: avaliacao.periodoId,\n        periodo: {\n          id: avaliacao.periodo.id,\n          nome: avaliacao.periodo.nome,\n          dataInicio: avaliacao.periodo.dataInicio,\n          dataFim: avaliacao.periodo.dataFim,\n          status: avaliacao.periodo.status\n        },\n        avaliadorId: avaliacao.avaliadorId,\n        avaliador: avaliacao.avaliador,\n        avaliadoId: avaliacao.avaliadoId,\n        avaliado: avaliacao.avaliado,\n        status: avaliacao.status,\n        dataLimite,\n        diasRestantes,\n        urgencia,\n        criadaEm: avaliacao.criadaEm\n      };\n    });\n  } catch (error) {\n    console.error('Erro ao buscar avaliações pendentes do usuário:', error);\n    throw new Error('Não foi possível buscar as avaliações pendentes');\n  }\n}\n\n/**\n * Busca todas as avaliações pendentes do sistema\n */\nexport async function buscarTodasAvaliacoesPendentes(): Promise<AvaliacaoPendente[]> {\n  try {\n    const avaliacoes = await prisma.avaliacao.findMany({\n      where: {\n        status: 'PENDENTE'\n      },\n      include: {\n        periodo: true,\n        avaliador: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliado: {\n          select: {\n            id: true,\n            nome: true,\n            setor: true,\n            departamento: true\n          }\n        }\n      },\n      orderBy: [\n        {\n          periodo: {\n            dataFim: 'asc'\n          }\n        },\n        {\n          avaliador: {\n            nome: 'asc'\n          }\n        }\n      ]\n    });\n\n    return avaliacoes.map(avaliacao => {\n      const dataLimite = avaliacao.periodo.dataFim;\n      const diasRestantes = differenceInDays(dataLimite, new Date());\n      const urgencia = calcularUrgencia(diasRestantes);\n\n      return {\n        id: avaliacao.id,\n        periodoId: avaliacao.periodoId,\n        periodo: {\n          id: avaliacao.periodo.id,\n          nome: avaliacao.periodo.nome,\n          dataInicio: avaliacao.periodo.dataInicio,\n          dataFim: avaliacao.periodo.dataFim,\n          status: avaliacao.periodo.status\n        },\n        avaliadorId: avaliacao.avaliadorId,\n        avaliador: avaliacao.avaliador,\n        avaliadoId: avaliacao.avaliadoId,\n        avaliado: avaliacao.avaliado,\n        status: avaliacao.status,\n        dataLimite,\n        diasRestantes,\n        urgencia,\n        criadaEm: avaliacao.criadaEm\n      };\n    });\n  } catch (error) {\n    console.error('Erro ao buscar todas as avaliações pendentes:', error);\n    throw new Error('Não foi possível buscar as avaliações pendentes');\n  }\n}\n\n/**\n * Busca avaliações que precisam de notificação (próximas do vencimento)\n */\nexport async function buscarAvaliacoesParaNotificacao(\n  diasAntecedencia = 3\n): Promise<AvaliacaoPendente[]> {\n  try {\n    const dataLimite = addDays(new Date(), diasAntecedencia);\n    \n    const avaliacoes = await prisma.avaliacao.findMany({\n      where: {\n        status: 'PENDENTE',\n        periodo: {\n          dataFim: {\n            lte: dataLimite\n          }\n        }\n      },\n      include: {\n        periodo: true,\n        avaliador: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliado: {\n          select: {\n            id: true,\n            nome: true,\n            setor: true,\n            departamento: true\n          }\n        }\n      },\n      orderBy: {\n        periodo: {\n          dataFim: 'asc'\n        }\n      }\n    });\n\n    return avaliacoes.map(avaliacao => {\n      const dataLimite = avaliacao.periodo.dataFim;\n      const diasRestantes = differenceInDays(dataLimite, new Date());\n      const urgencia = calcularUrgencia(diasRestantes);\n\n      return {\n        id: avaliacao.id,\n        periodoId: avaliacao.periodoId,\n        periodo: {\n          id: avaliacao.periodo.id,\n          nome: avaliacao.periodo.nome,\n          dataInicio: avaliacao.periodo.dataInicio,\n          dataFim: avaliacao.periodo.dataFim,\n          status: avaliacao.periodo.status\n        },\n        avaliadorId: avaliacao.avaliadorId,\n        avaliador: avaliacao.avaliador,\n        avaliadoId: avaliacao.avaliadoId,\n        avaliado: avaliacao.avaliado,\n        status: avaliacao.status,\n        dataLimite,\n        diasRestantes,\n        urgencia,\n        criadaEm: avaliacao.criadaEm\n      };\n    });\n  } catch (error) {\n    console.error('Erro ao buscar avaliações para notificação:', error);\n    throw new Error('Não foi possível buscar as avaliações para notificação');\n  }\n}\n\n/**\n * Gera estatísticas de notificações para um usuário\n */\nexport async function gerarEstatisticasNotificacoes(\n  usuarioId?: string\n): Promise<EstatisticasNotificacoes> {\n  try {\n    const avaliacoes = usuarioId \n      ? await buscarAvaliacoesPendentesUsuario(usuarioId)\n      : await buscarTodasAvaliacoesPendentes();\n\n    const stats: EstatisticasNotificacoes = {\n      totalPendentes: avaliacoes.length,\n      criticas: 0,\n      altas: 0,\n      medias: 0,\n      baixas: 0,\n      vencidas: 0,\n      proximasVencer: 0\n    };\n\n    avaliacoes.forEach(avaliacao => {\n      // Contar por urgência\n      switch (avaliacao.urgencia) {\n        case 'critica':\n          stats.criticas++;\n          break;\n        case 'alta':\n          stats.altas++;\n          break;\n        case 'media':\n          stats.medias++;\n          break;\n        case 'baixa':\n          stats.baixas++;\n          break;\n      }\n\n      // Contar vencidas\n      if (avaliacao.diasRestantes < 0) {\n        stats.vencidas++;\n      }\n\n      // Contar próximas a vencer (3 dias)\n      if (avaliacao.diasRestantes >= 0 && avaliacao.diasRestantes <= 3) {\n        stats.proximasVencer++;\n      }\n    });\n\n    return stats;\n  } catch (error) {\n    console.error('Erro ao gerar estatísticas de notificações:', error);\n    throw new Error('Não foi possível gerar as estatísticas');\n  }\n}\n\n/**\n * Busca configurações de notificação de um usuário\n */\nexport async function buscarConfiguracaoNotificacao(\n  usuarioId: string\n): Promise<NotificacaoConfig | null> {\n  try {\n    // Por enquanto, retornamos uma configuração padrão\n    // Em uma implementação real, isso viria do banco de dados\n    return {\n      id: `config-${usuarioId}`,\n      usuarioId,\n      notificacoesEmail: true,\n      notificacoesInterface: true,\n      diasAntecedencia: 3,\n      horarioEnvio: '09:00',\n      frequenciaLembretes: 'diario',\n      ativo: true\n    };\n  } catch (error) {\n    console.error('Erro ao buscar configuração de notificação:', error);\n    return null;\n  }\n}\n\n/**\n * Verifica se um usuário deve receber notificação baseado em suas configurações\n */\nexport async function deveReceberNotificacao(\n  usuarioId: string,\n  tipoNotificacao: 'email' | 'interface'\n): Promise<boolean> {\n  try {\n    const config = await buscarConfiguracaoNotificacao(usuarioId);\n    \n    if (!config || !config.ativo) {\n      return false;\n    }\n\n    if (tipoNotificacao === 'email') {\n      return config.notificacoesEmail;\n    }\n\n    if (tipoNotificacao === 'interface') {\n      return config.notificacoesInterface;\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Erro ao verificar se deve receber notificação:', error);\n    return false;\n  }\n}\n\n/**\n * Formata uma mensagem de notificação\n */\nexport function formatarMensagemNotificacao(\n  avaliacao: AvaliacaoPendente,\n  tipo: 'lembrete' | 'urgente' | 'vencida'\n): { titulo: string; mensagem: string; } {\n  const nomeAvaliado = avaliacao.avaliado.nome;\n  const nomePeriodo = avaliacao.periodo.nome;\n  const diasRestantes = avaliacao.diasRestantes;\n\n  switch (tipo) {\n    case 'lembrete':\n      return {\n        titulo: 'Lembrete: Avaliação Pendente',\n        mensagem: `Você tem uma avaliação pendente de ${nomeAvaliado} no período \"${nomePeriodo}\". ${diasRestantes > 0 ? `Restam ${diasRestantes} dias para o prazo.` : 'O prazo vence hoje!'}`\n      };\n    \n    case 'urgente':\n      return {\n        titulo: 'Urgente: Avaliação Próxima do Vencimento',\n        mensagem: `A avaliação de ${nomeAvaliado} no período \"${nomePeriodo}\" vence em ${diasRestantes} dia(s). Complete a avaliação o quanto antes.`\n      };\n    \n    case 'vencida':\n      return {\n        titulo: 'Avaliação Vencida',\n        mensagem: `A avaliação de ${nomeAvaliado} no período \"${nomePeriodo}\" está vencida há ${Math.abs(diasRestantes)} dia(s). Complete a avaliação imediatamente.`\n      };\n    \n    default:\n      return {\n        titulo: 'Avaliação Pendente',\n        mensagem: `Você tem uma avaliação pendente de ${nomeAvaliado} no período \"${nomePeriodo}\".`\n      };\n  }\n}"],"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","ignoreList":[]}