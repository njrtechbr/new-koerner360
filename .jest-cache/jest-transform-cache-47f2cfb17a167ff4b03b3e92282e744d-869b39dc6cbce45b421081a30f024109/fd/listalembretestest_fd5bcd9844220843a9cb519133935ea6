eb983c3ad2376a9f9429b89427c84be4
"use strict";
// Tipos são importados do hook use-lembretes
// Mock dos hooks
jest.mock('../../../hooks/use-lembretes');
jest.mock('../../../hooks/use-toast');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _listalembretes = require("../../lembretes/lista-lembretes");
const _uselembretes = require("../../../hooks/use-lembretes");
const _usetoast = require("../../../hooks/use-toast");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dos lembretes de teste
const mockLembretes = [
    {
        id: '1',
        usuarioId: 'user1',
        avaliacaoId: 'aval1',
        tipo: 'lembrete',
        dataEnvio: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        enviado: false,
        tentativas: 0,
        ultimaTentativa: undefined,
        dataEnvioReal: undefined,
        erro: undefined,
        observacoes: undefined,
        criadoEm: new Date().toISOString(),
        atualizadoEm: new Date().toISOString(),
        usuario: {
            id: 'user1',
            nome: 'João Silva',
            email: 'joao@empresa.com',
            cargo: 'Analista'
        },
        avaliacao: {
            id: 'aval1',
            prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            status: 'pendente',
            avaliado: {
                id: 'avaliado1',
                nome: 'Pedro Avaliado',
                cargo: 'Desenvolvedor',
                email: 'pedro@empresa.com'
            },
            avaliador: {
                id: 'avaliador1',
                nome: 'Maria Avaliadora',
                email: 'maria@empresa.com'
            },
            periodo: {
                id: 'periodo1',
                nome: 'Período Anual 2024',
                dataInicio: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
                dataFim: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
            }
        }
    },
    {
        id: '2',
        usuarioId: 'user2',
        avaliacaoId: 'aval2',
        tipo: 'vencimento',
        dataEnvio: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        enviado: true,
        tentativas: 1,
        ultimaTentativa: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        dataEnvioReal: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        erro: undefined,
        observacoes: undefined,
        criadoEm: new Date().toISOString(),
        atualizadoEm: new Date().toISOString(),
        usuario: {
            id: 'user2',
            nome: 'Maria Santos',
            email: 'maria@empresa.com',
            cargo: 'Gerente'
        },
        avaliacao: {
            id: 'aval2',
            prazo: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
            status: 'em_andamento',
            avaliado: {
                id: 'avaliado2',
                nome: 'Ana Avaliada',
                cargo: 'Designer',
                email: 'ana@empresa.com'
            },
            avaliador: {
                id: 'avaliador2',
                nome: 'Carlos Avaliador',
                email: 'carlos@empresa.com'
            },
            periodo: {
                id: 'periodo2',
                nome: 'Período Trimestral Q4',
                dataInicio: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
                dataFim: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
            }
        }
    },
    {
        id: '3',
        usuarioId: 'user3',
        avaliacaoId: 'aval3',
        tipo: 'lembrete',
        dataEnvio: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
        enviado: false,
        tentativas: 3,
        ultimaTentativa: new Date(Date.now() - 60 * 60 * 1000).toISOString(),
        dataEnvioReal: undefined,
        erro: 'Falha no envio de e-mail',
        observacoes: 'Múltiplas tentativas falharam',
        criadoEm: new Date().toISOString(),
        atualizadoEm: new Date().toISOString(),
        usuario: {
            id: 'user3',
            nome: 'Pedro Costa',
            email: 'pedro@empresa.com',
            cargo: 'Coordenador'
        },
        avaliacao: {
            id: 'aval3',
            prazo: new Date().toISOString(),
            status: 'atrasada',
            avaliado: {
                id: 'avaliado3',
                nome: 'Lucas Avaliado',
                cargo: 'Analista Jr',
                email: 'lucas@empresa.com'
            },
            avaliador: {
                id: 'avaliador3',
                nome: 'Fernanda Avaliadora',
                email: 'fernanda@empresa.com'
            },
            periodo: {
                id: 'periodo3',
                nome: 'Período de Desempenho 2024',
                dataInicio: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
                dataFim: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
            }
        }
    }
];
const mockPaginacao = {
    paginaAtual: 1,
    totalPaginas: 1,
    totalItens: 3,
    itensPorPagina: 10,
    temProximaPagina: false,
    temPaginaAnterior: false
};
const mockHookReturn = {
    lembretes: mockLembretes,
    paginacao: mockPaginacao,
    carregando: false,
    erro: null,
    buscarLembretes: jest.fn(),
    executarAcaoLembrete: jest.fn()
};
const mockToast = jest.fn();
(0, _globals.describe)('ListaLembretes', ()=>{
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
        _uselembretes.useLembretes.mockReturnValue(mockHookReturn);
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.describe)('Renderização', ()=>{
        (0, _globals.it)('deve renderizar lista de lembretes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Lembretes de Avaliação')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('João Silva')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Maria Santos')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Pedro Costa')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir estado de carregamento', ()=>{
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                carregando: true,
                lembretes: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Carregando lembretes...')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir mensagem quando não há lembretes', ()=>{
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                lembretes: [],
                paginacao: {
                    ...mockPaginacao,
                    total: 0
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Nenhum lembrete encontrado')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir erro quando houver falha', ()=>{
            const errorMessage = 'Erro ao carregar lembretes';
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                erro: errorMessage,
                lembretes: []
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText(errorMessage)).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('Filtros', ()=>{
        (0, _globals.it)('deve filtrar por tipo de lembrete', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroTipo = _react1.screen.getAllByRole('combobox')[0];
            _react1.fireEvent.change(filtroTipo, {
                target: {
                    value: 'lembrete'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalled();
            });
        });
        (0, _globals.it)('deve filtrar por status', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroStatus = _react1.screen.getByLabelText('Status');
            _react1.fireEvent.change(filtroStatus, {
                target: {
                    value: 'pendente'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    status: 'pendente'
                }));
            });
        });
        (0, _globals.it)('deve filtrar por usuário', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroUsuario = _react1.screen.getByLabelText('Usuário');
            _react1.fireEvent.change(filtroUsuario, {
                target: {
                    value: 'user1'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    usuarioId: 'user1'
                }));
            });
        });
        (0, _globals.it)('deve filtrar por avaliação', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroAvaliacao = _react1.screen.getByLabelText('Avaliação');
            _react1.fireEvent.change(filtroAvaliacao, {
                target: {
                    value: 'aval1'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    avaliacaoId: 'aval1'
                }));
            });
        });
        (0, _globals.it)('deve filtrar por período de data', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const dataInicio = _react1.screen.getByLabelText('Data início');
            const dataFim = _react1.screen.getByLabelText('Data fim');
            _react1.fireEvent.change(dataInicio, {
                target: {
                    value: '2024-01-01'
                }
            });
            _react1.fireEvent.change(dataFim, {
                target: {
                    value: '2024-12-31'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    dataInicio: '2024-01-01',
                    dataFim: '2024-12-31'
                }));
            });
        });
        (0, _globals.it)('deve limpar filtros', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Aplicar filtros primeiro
            const filtroTipo = _react1.screen.getAllByRole('combobox')[0];
            _react1.fireEvent.click(filtroTipo);
            // Limpar filtros
            const botaoLimpar = _react1.screen.getByText('Limpar Filtros');
            _react1.fireEvent.click(botaoLimpar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith({});
            });
        });
    });
    (0, _globals.describe)('Busca', ()=>{
        (0, _globals.it)('deve buscar lembretes por texto', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const campoBusca = _react1.screen.getByPlaceholderText('Buscar lembretes...');
            _react1.fireEvent.change(campoBusca, {
                target: {
                    value: 'João'
                }
            });
            // Simular debounce
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    busca: 'João'
                }));
            }, {
                timeout: 1000
            });
        });
        (0, _globals.it)('deve limpar busca', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const campoBusca = _react1.screen.getByPlaceholderText('Buscar lembretes...');
            _react1.fireEvent.change(campoBusca, {
                target: {
                    value: 'João'
                }
            });
            _react1.fireEvent.change(campoBusca, {
                target: {
                    value: ''
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    busca: ''
                }));
            });
        });
    });
    (0, _globals.describe)('Ações de Lembrete', ()=>{
        (0, _globals.it)('deve reenviar lembrete', async ()=>{
            mockHookReturn.executarAcaoLembrete.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoReenviar = _react1.screen.getAllByRole('button').find((btn)=>btn.querySelector('svg')?.classList.contains('lucide-send'));
            _react1.fireEvent.click(botaoReenviar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.executarAcaoLembrete).toHaveBeenCalledWith('1', 'reenviar');
            });
        });
        (0, _globals.it)('deve marcar como enviado', async ()=>{
            mockHookReturn.executarAcaoLembrete.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoMarcar = _react1.screen.getAllByRole('button').find((btn)=>btn.querySelector('svg')?.classList.contains('lucide-check-circle'));
            _react1.fireEvent.click(botaoMarcar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.executarAcaoLembrete).toHaveBeenCalledWith('1', 'marcar_enviado');
            });
        });
        (0, _globals.it)('deve reagendar lembrete', async ()=>{
            mockHookReturn.executarAcaoLembrete.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoReagendar = _react1.screen.getAllByRole('button').find((btn)=>btn.querySelector('svg')?.classList.contains('lucide-edit'));
            _react1.fireEvent.click(botaoReagendar);
            // Preencher nova data
            const inputData = _react1.screen.getByLabelText('Nova data de envio');
            _react1.fireEvent.change(inputData, {
                target: {
                    value: '2024-12-31T10:00'
                }
            });
            const botaoConfirmar = _react1.screen.getByText('Confirmar');
            _react1.fireEvent.click(botaoConfirmar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.executarAcaoLembrete).toHaveBeenCalledWith('1', 'reagendar', {
                    dataEnvio: '2024-12-31T10:00'
                });
            });
        });
        (0, _globals.it)('deve remover lembrete', async ()=>{
            mockHookReturn.executarAcaoLembrete.mockResolvedValueOnce(true);
            window.confirm = jest.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botoes = _react1.screen.getAllByRole('button');
            const botaoRemover = botoes.find((btn)=>btn.className && btn.className.includes('text-red-600'));
            (0, _globals.expect)(botaoRemover).toBeDefined();
            _react1.fireEvent.click(botaoRemover);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.executarAcaoLembrete).toHaveBeenCalledWith('1', 'remover');
            });
        });
        (0, _globals.it)('deve cancelar remoção se usuário não confirmar', async ()=>{
            window.confirm = jest.fn(()=>false);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botoes = _react1.screen.getAllByRole('button');
            const botaoRemover = botoes.find((btn)=>btn.className && btn.className.includes('text-red-600'));
            (0, _globals.expect)(botaoRemover).toBeDefined();
            _react1.fireEvent.click(botaoRemover);
            (0, _globals.expect)(mockHookReturn.executarAcaoLembrete).not.toHaveBeenCalled();
        });
    });
    // Testes de ações em lote removidos pois o componente não implementa essa funcionalidade
    (0, _globals.describe)('Paginação', ()=>{
        (0, _globals.it)('deve navegar para próxima página', async ()=>{
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                paginacao: {
                    ...mockPaginacao,
                    pagina: 1,
                    totalPaginas: 3
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoProxima = _react1.screen.getByText('Próxima');
            _react1.fireEvent.click(botaoProxima);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    pagina: 2
                }));
            });
        });
        (0, _globals.it)('deve navegar para página anterior', async ()=>{
            _uselembretes.useLembretes.mockReturnValue({
                ...mockHookReturn,
                paginacao: {
                    ...mockPaginacao,
                    pagina: 2,
                    totalPaginas: 3
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoAnterior = _react1.screen.getByText('Anterior');
            _react1.fireEvent.click(botaoAnterior);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    pagina: 1
                }));
            });
        });
        (0, _globals.it)('deve alterar limite por página', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const seletorLimite = _react1.screen.getByLabelText('Itens por página');
            _react1.fireEvent.change(seletorLimite, {
                target: {
                    value: '25'
                }
            });
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    limite: 25,
                    pagina: 1
                }));
            });
        });
    });
    (0, _globals.describe)('Ordenação', ()=>{
        (0, _globals.it)('deve ordenar por data de envio', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const cabecalhoData = _react1.screen.getByText('Data de Envio');
            _react1.fireEvent.click(cabecalhoData);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ordenarPor: 'dataEnvio',
                    ordem: 'asc'
                }));
            });
        });
        (0, _globals.it)('deve alternar ordem de classificação', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const cabecalhoData = _react1.screen.getByText('Data de Envio');
            // Primeira clique - ASC
            _react1.fireEvent.click(cabecalhoData);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ordem: 'asc'
                }));
            });
            // Segunda clique - DESC
            _react1.fireEvent.click(cabecalhoData);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ordem: 'desc'
                }));
            });
        });
        (0, _globals.it)('deve ordenar por diferentes campos', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const cabecalhoUsuario = _react1.screen.getByText('Usuário');
            _react1.fireEvent.click(cabecalhoUsuario);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    ordenarPor: 'nomeUsuario'
                }));
            });
        });
    });
    (0, _globals.describe)('Exibição de Dados', ()=>{
        (0, _globals.it)('deve exibir elementos principais da interface', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Lembretes')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Gerencie todos os lembretes de avaliação do sistema')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir dados dos lembretes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('João Silva')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Maria Santos')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('lembrete')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('vencimento')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir badges de status corretamente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Verificar se os status são exibidos baseados nos dados mock
            (0, _globals.expect)(_react1.screen.getByText('João Silva')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Maria Santos')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Pedro Costa')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir badges de tipo corretamente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('lembrete')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('vencimento')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir informações de tentativas', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('0 tentativas')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('1 tentativa')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('3 tentativas')).toBeInTheDocument();
        });
        (0, _globals.it)('deve exibir mensagem de erro quando presente', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByText('Falha no envio de e-mail')).toBeInTheDocument();
        });
    });
    (0, _globals.describe)('Atualização Automática', ()=>{
        (0, _globals.it)('deve atualizar lista após ações', async ()=>{
            mockHookReturn.executarAcaoLembrete.mockResolvedValueOnce(true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoReenviar = _react1.screen.getAllByRole('button').find((btn)=>btn.querySelector('svg')?.classList.contains('lucide-send'));
            _react1.fireEvent.click(botaoReenviar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledTimes(2); // Initial + after action
            });
        });
        (0, _globals.it)('deve atualizar automaticamente a cada 30 segundos', async ()=>{
            jest.useFakeTimers();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Avançar 30 segundos
            jest.advanceTimersByTime(30000);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockHookReturn.buscarLembretes).toHaveBeenCalledTimes(2);
            });
            jest.useRealTimers();
        });
    });
    (0, _globals.describe)('Estados de Erro', ()=>{
        (0, _globals.it)('deve exibir erro ao falhar ao reenviar', async ()=>{
            mockHookReturn.executarAcaoLembrete.mockRejectedValueOnce(new Error('Erro de rede'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botaoReenviar = _react1.screen.getAllByRole('button').find((btn)=>btn.querySelector('svg')?.classList.contains('lucide-send'));
            _react1.fireEvent.click(botaoReenviar);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
        (0, _globals.it)('deve exibir erro ao falhar ao remover', async ()=>{
            mockHookReturn.executarAcaoLembrete.mockRejectedValueOnce(new Error('Erro de rede'));
            window.confirm = jest.fn(()=>true);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const botoes = _react1.screen.getAllByRole('button');
            const botaoRemover = botoes.find((btn)=>btn.className && btn.className.includes('text-red-600'));
            (0, _globals.expect)(botaoRemover).toBeDefined();
            _react1.fireEvent.click(botaoRemover);
            await (0, _react1.waitFor)(()=>{
                (0, _globals.expect)(mockToast).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    title: 'Erro',
                    variant: 'destructive'
                }));
            });
        });
    });
    (0, _globals.describe)('Acessibilidade', ()=>{
        (0, _globals.it)('deve ter labels apropriados para screen readers', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            (0, _globals.expect)(_react1.screen.getByLabelText('Buscar')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Tipo')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('Status')).toBeInTheDocument();
        });
        (0, _globals.it)('deve ter navegação por teclado funcional', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            const filtroTipo = _react1.screen.getAllByRole('combobox')[0];
            filtroTipo.focus();
            (0, _globals.expect)(document.activeElement).toBe(filtroTipo);
        });
        (0, _globals.it)('deve ter descrições adequadas para ações', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Verificar se botões de ação estão presentes
            const botoes = _react1.screen.getAllByRole('button');
            (0, _globals.expect)(botoes.length).toBeGreaterThan(0);
        });
    });
    (0, _globals.describe)('Responsividade', ()=>{
        (0, _globals.it)('deve adaptar layout para telas pequenas', ()=>{
            // Mock window.innerWidth
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 768
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Verificar se o componente renderiza corretamente
            (0, _globals.expect)(_react1.screen.getByText('Lembretes')).toBeInTheDocument();
        });
        (0, _globals.it)('deve mostrar todas as colunas em telas grandes', ()=>{
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 1200
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_listalembretes.ListaLembretes, {}));
            // Verificar se o componente renderiza corretamente em telas grandes
            (0, _globals.expect)(_react1.screen.getByText('Lembretes')).toBeInTheDocument();
            (0, _globals.expect)(_react1.screen.getByText('João Silva')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmVyZXUgSnJcXERvY3VtZW50c1xcRGV2XFxuZXdcXHNyY1xcY29tcG9uZW50c1xcX190ZXN0c19fXFxsZW1icmV0ZXNcXGxpc3RhLWxlbWJyZXRlcy50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QsIGJlZm9yZUVhY2gsIGFmdGVyRWFjaCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuaW1wb3J0IHsgTGlzdGFMZW1icmV0ZXMgfSBmcm9tICcuLi8uLi9sZW1icmV0ZXMvbGlzdGEtbGVtYnJldGVzJztcbmltcG9ydCB7IHVzZUxlbWJyZXRlcyB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1sZW1icmV0ZXMnO1xuaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtdG9hc3QnO1xuLy8gVGlwb3Mgc8OjbyBpbXBvcnRhZG9zIGRvIGhvb2sgdXNlLWxlbWJyZXRlc1xuXG4vLyBNb2NrIGRvcyBob29rc1xuamVzdC5tb2NrKCcuLi8uLi8uLi9ob29rcy91c2UtbGVtYnJldGVzJyk7XG5qZXN0Lm1vY2soJy4uLy4uLy4uL2hvb2tzL3VzZS10b2FzdCcpO1xuXG4vLyBNb2NrIGRvcyBsZW1icmV0ZXMgZGUgdGVzdGVcbmNvbnN0IG1vY2tMZW1icmV0ZXMgPSBbXG4gIHtcbiAgICBpZDogJzEnLFxuICAgIHVzdWFyaW9JZDogJ3VzZXIxJyxcbiAgICBhdmFsaWFjYW9JZDogJ2F2YWwxJyxcbiAgICB0aXBvOiAnbGVtYnJldGUnLFxuICAgIGRhdGFFbnZpbzogbmV3IERhdGUoRGF0ZS5ub3coKSArIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgZW52aWFkbzogZmFsc2UsXG4gICAgdGVudGF0aXZhczogMCxcbiAgICB1bHRpbWFUZW50YXRpdmE6IHVuZGVmaW5lZCxcbiAgICBkYXRhRW52aW9SZWFsOiB1bmRlZmluZWQsXG4gICAgZXJybzogdW5kZWZpbmVkLFxuICAgIG9ic2VydmFjb2VzOiB1bmRlZmluZWQsXG4gICAgY3JpYWRvRW06IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICBhdHVhbGl6YWRvRW06IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB1c3VhcmlvOiB7XG4gICAgICBpZDogJ3VzZXIxJyxcbiAgICAgIG5vbWU6ICdKb8OjbyBTaWx2YScsXG4gICAgICBlbWFpbDogJ2pvYW9AZW1wcmVzYS5jb20nLFxuICAgICAgY2FyZ286ICdBbmFsaXN0YScsXG4gICAgfSxcbiAgICBhdmFsaWFjYW86IHtcbiAgICAgIGlkOiAnYXZhbDEnLFxuICAgICAgcHJhem86IG5ldyBEYXRlKERhdGUubm93KCkgKyA3ICogMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHN0YXR1czogJ3BlbmRlbnRlJyxcbiAgICAgIGF2YWxpYWRvOiB7XG4gICAgICAgIGlkOiAnYXZhbGlhZG8xJyxcbiAgICAgICAgbm9tZTogJ1BlZHJvIEF2YWxpYWRvJyxcbiAgICAgICAgY2FyZ286ICdEZXNlbnZvbHZlZG9yJyxcbiAgICAgICAgZW1haWw6ICdwZWRyb0BlbXByZXNhLmNvbScsXG4gICAgICB9LFxuICAgICAgYXZhbGlhZG9yOiB7XG4gICAgICAgIGlkOiAnYXZhbGlhZG9yMScsXG4gICAgICAgIG5vbWU6ICdNYXJpYSBBdmFsaWFkb3JhJyxcbiAgICAgICAgZW1haWw6ICdtYXJpYUBlbXByZXNhLmNvbScsXG4gICAgICB9LFxuICAgICAgcGVyaW9kbzoge1xuICAgICAgICBpZDogJ3BlcmlvZG8xJyxcbiAgICAgICAgbm9tZTogJ1BlcsOtb2RvIEFudWFsIDIwMjQnLFxuICAgICAgICBkYXRhSW5pY2lvOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgICAgICBkYXRhRmltOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgaWQ6ICcyJyxcbiAgICB1c3VhcmlvSWQ6ICd1c2VyMicsXG4gICAgYXZhbGlhY2FvSWQ6ICdhdmFsMicsXG4gICAgdGlwbzogJ3ZlbmNpbWVudG8nLFxuICAgIGRhdGFFbnZpbzogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgZW52aWFkbzogdHJ1ZSxcbiAgICB0ZW50YXRpdmFzOiAxLFxuICAgIHVsdGltYVRlbnRhdGl2YTogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgZGF0YUVudmlvUmVhbDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgZXJybzogdW5kZWZpbmVkLFxuICAgIG9ic2VydmFjb2VzOiB1bmRlZmluZWQsXG4gICAgY3JpYWRvRW06IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICBhdHVhbGl6YWRvRW06IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB1c3VhcmlvOiB7XG4gICAgICBpZDogJ3VzZXIyJyxcbiAgICAgIG5vbWU6ICdNYXJpYSBTYW50b3MnLFxuICAgICAgZW1haWw6ICdtYXJpYUBlbXByZXNhLmNvbScsXG4gICAgICBjYXJnbzogJ0dlcmVudGUnLFxuICAgIH0sXG4gICAgYXZhbGlhY2FvOiB7XG4gICAgICBpZDogJ2F2YWwyJyxcbiAgICAgIHByYXpvOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHN0YXR1czogJ2VtX2FuZGFtZW50bycsXG4gICAgICBhdmFsaWFkbzoge1xuICAgICAgICBpZDogJ2F2YWxpYWRvMicsXG4gICAgICAgIG5vbWU6ICdBbmEgQXZhbGlhZGEnLFxuICAgICAgICBjYXJnbzogJ0Rlc2lnbmVyJyxcbiAgICAgICAgZW1haWw6ICdhbmFAZW1wcmVzYS5jb20nLFxuICAgICAgfSxcbiAgICAgIGF2YWxpYWRvcjoge1xuICAgICAgICBpZDogJ2F2YWxpYWRvcjInLFxuICAgICAgICBub21lOiAnQ2FybG9zIEF2YWxpYWRvcicsXG4gICAgICAgIGVtYWlsOiAnY2FybG9zQGVtcHJlc2EuY29tJyxcbiAgICAgIH0sXG4gICAgICBwZXJpb2RvOiB7XG4gICAgICAgIGlkOiAncGVyaW9kbzInLFxuICAgICAgICBub21lOiAnUGVyw61vZG8gVHJpbWVzdHJhbCBRNCcsXG4gICAgICAgIGRhdGFJbmljaW86IG5ldyBEYXRlKERhdGUubm93KCkgLSA2MCAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGRhdGFGaW06IG5ldyBEYXRlKERhdGUubm93KCkgKyAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBpZDogJzMnLFxuICAgIHVzdWFyaW9JZDogJ3VzZXIzJyxcbiAgICBhdmFsaWFjYW9JZDogJ2F2YWwzJyxcbiAgICB0aXBvOiAnbGVtYnJldGUnLFxuICAgIGRhdGFFbnZpbzogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDIgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgIGVudmlhZG86IGZhbHNlLFxuICAgIHRlbnRhdGl2YXM6IDMsXG4gICAgdWx0aW1hVGVudGF0aXZhOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgZGF0YUVudmlvUmVhbDogdW5kZWZpbmVkLFxuICAgIGVycm86ICdGYWxoYSBubyBlbnZpbyBkZSBlLW1haWwnLFxuICAgIG9ic2VydmFjb2VzOiAnTcO6bHRpcGxhcyB0ZW50YXRpdmFzIGZhbGhhcmFtJyxcbiAgICBjcmlhZG9FbTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIGF0dWFsaXphZG9FbTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIHVzdWFyaW86IHtcbiAgICAgIGlkOiAndXNlcjMnLFxuICAgICAgbm9tZTogJ1BlZHJvIENvc3RhJyxcbiAgICAgIGVtYWlsOiAncGVkcm9AZW1wcmVzYS5jb20nLFxuICAgICAgY2FyZ286ICdDb29yZGVuYWRvcicsXG4gICAgfSxcbiAgICBhdmFsaWFjYW86IHtcbiAgICAgIGlkOiAnYXZhbDMnLFxuICAgICAgcHJhem86IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHN0YXR1czogJ2F0cmFzYWRhJyxcbiAgICAgIGF2YWxpYWRvOiB7XG4gICAgICAgIGlkOiAnYXZhbGlhZG8zJyxcbiAgICAgICAgbm9tZTogJ0x1Y2FzIEF2YWxpYWRvJyxcbiAgICAgICAgY2FyZ286ICdBbmFsaXN0YSBKcicsXG4gICAgICAgIGVtYWlsOiAnbHVjYXNAZW1wcmVzYS5jb20nLFxuICAgICAgfSxcbiAgICAgIGF2YWxpYWRvcjoge1xuICAgICAgICBpZDogJ2F2YWxpYWRvcjMnLFxuICAgICAgICBub21lOiAnRmVybmFuZGEgQXZhbGlhZG9yYScsXG4gICAgICAgIGVtYWlsOiAnZmVybmFuZGFAZW1wcmVzYS5jb20nLFxuICAgICAgfSxcbiAgICAgIHBlcmlvZG86IHtcbiAgICAgICAgaWQ6ICdwZXJpb2RvMycsXG4gICAgICAgIG5vbWU6ICdQZXLDrW9kbyBkZSBEZXNlbXBlbmhvIDIwMjQnLFxuICAgICAgICBkYXRhSW5pY2lvOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gOTAgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgICAgICBkYXRhRmltOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMSAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG5dO1xuXG5jb25zdCBtb2NrUGFnaW5hY2FvID0ge1xuICBwYWdpbmFBdHVhbDogMSxcbiAgdG90YWxQYWdpbmFzOiAxLFxuICB0b3RhbEl0ZW5zOiAzLFxuICBpdGVuc1BvclBhZ2luYTogMTAsXG4gIHRlbVByb3hpbWFQYWdpbmE6IGZhbHNlLFxuICB0ZW1QYWdpbmFBbnRlcmlvcjogZmFsc2UsXG59O1xuXG5jb25zdCBtb2NrSG9va1JldHVybiA9IHtcbiAgbGVtYnJldGVzOiBtb2NrTGVtYnJldGVzLFxuICBwYWdpbmFjYW86IG1vY2tQYWdpbmFjYW8sXG4gIGNhcnJlZ2FuZG86IGZhbHNlLFxuICBlcnJvOiBudWxsLFxuICBidXNjYXJMZW1icmV0ZXM6IGplc3QuZm4oKSxcbiAgZXhlY3V0YXJBY2FvTGVtYnJldGU6IGplc3QuZm4oKSxcbn07XG5cbmNvbnN0IG1vY2tUb2FzdCA9IGplc3QuZm4oKTtcblxuZGVzY3JpYmUoJ0xpc3RhTGVtYnJldGVzJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAodXNlTGVtYnJldGVzIGFzIGFueSkubW9ja1JldHVyblZhbHVlKG1vY2tIb29rUmV0dXJuKTtcbiAgICAodXNlVG9hc3QgYXMgYW55KS5tb2NrUmV0dXJuVmFsdWUoeyB0b2FzdDogbW9ja1RvYXN0IH0pO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVuZGVyaXphw6fDo28nLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcmVuZGVyaXphciBsaXN0YSBkZSBsZW1icmV0ZXMnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0xlbWJyZXRlcyBkZSBBdmFsaWHDp8OjbycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0pvw6NvIFNpbHZhJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnTWFyaWEgU2FudG9zJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnUGVkcm8gQ29zdGEnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGV4aWJpciBlc3RhZG8gZGUgY2FycmVnYW1lbnRvJywgKCkgPT4ge1xuICAgICAgKHVzZUxlbWJyZXRlcyBhcyBhbnkpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIC4uLm1vY2tIb29rUmV0dXJuLFxuICAgICAgICBjYXJyZWdhbmRvOiB0cnVlLFxuICAgICAgICBsZW1icmV0ZXM6IFtdLFxuICAgICAgfSk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQ2FycmVnYW5kbyBsZW1icmV0ZXMuLi4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGV4aWJpciBtZW5zYWdlbSBxdWFuZG8gbsOjbyBow6EgbGVtYnJldGVzJywgKCkgPT4ge1xuICAgICAgKHVzZUxlbWJyZXRlcyBhcyBhbnkpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIC4uLm1vY2tIb29rUmV0dXJuLFxuICAgICAgICBsZW1icmV0ZXM6IFtdLFxuICAgICAgICBwYWdpbmFjYW86IHtcbiAgICAgICAgICAuLi5tb2NrUGFnaW5hY2FvLFxuICAgICAgICAgIHRvdGFsOiAwLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnTmVuaHVtIGxlbWJyZXRlIGVuY29udHJhZG8nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGV4aWJpciBlcnJvIHF1YW5kbyBob3V2ZXIgZmFsaGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAnRXJybyBhbyBjYXJyZWdhciBsZW1icmV0ZXMnO1xuICAgICAgKHVzZUxlbWJyZXRlcyBhcyBhbnkpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIC4uLm1vY2tIb29rUmV0dXJuLFxuICAgICAgICBlcnJvOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIGxlbWJyZXRlczogW10sXG4gICAgICB9KTtcblxuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KGVycm9yTWVzc2FnZSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdGaWx0cm9zJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGZpbHRyYXIgcG9yIHRpcG8gZGUgbGVtYnJldGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgY29uc3QgZmlsdHJvVGlwbyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2NvbWJvYm94JylbMF07XG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbHRyb1RpcG8sIHsgdGFyZ2V0OiB7IHZhbHVlOiAnbGVtYnJldGUnIH0gfSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0hvb2tSZXR1cm4uYnVzY2FyTGVtYnJldGVzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGZpbHRyYXIgcG9yIHN0YXR1cycsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBmaWx0cm9TdGF0dXMgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoJ1N0YXR1cycpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWx0cm9TdGF0dXMsIHsgdGFyZ2V0OiB7IHZhbHVlOiAncGVuZGVudGUnIH0gfSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0hvb2tSZXR1cm4uYnVzY2FyTGVtYnJldGVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBzdGF0dXM6ICdwZW5kZW50ZScsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgZmlsdHJhciBwb3IgdXN1w6FyaW8nLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgY29uc3QgZmlsdHJvVXN1YXJpbyA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnVXN1w6FyaW8nKTtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsdHJvVXN1YXJpbywgeyB0YXJnZXQ6IHsgdmFsdWU6ICd1c2VyMScgfSB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrSG9va1JldHVybi5idXNjYXJMZW1icmV0ZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIHVzdWFyaW9JZDogJ3VzZXIxJyxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBmaWx0cmFyIHBvciBhdmFsaWHDp8OjbycsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBmaWx0cm9BdmFsaWFjYW8gPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoJ0F2YWxpYcOnw6NvJyk7XG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbHRyb0F2YWxpYWNhbywgeyB0YXJnZXQ6IHsgdmFsdWU6ICdhdmFsMScgfSB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrSG9va1JldHVybi5idXNjYXJMZW1icmV0ZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGF2YWxpYWNhb0lkOiAnYXZhbDEnLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGZpbHRyYXIgcG9yIHBlcsOtb2RvIGRlIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgY29uc3QgZGF0YUluaWNpbyA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnRGF0YSBpbsOtY2lvJyk7XG4gICAgICBjb25zdCBkYXRhRmltID0gc2NyZWVuLmdldEJ5TGFiZWxUZXh0KCdEYXRhIGZpbScpO1xuXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKGRhdGFJbmljaW8sIHsgdGFyZ2V0OiB7IHZhbHVlOiAnMjAyNC0wMS0wMScgfSB9KTtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZGF0YUZpbSwgeyB0YXJnZXQ6IHsgdmFsdWU6ICcyMDI0LTEyLTMxJyB9IH0pO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1vY2tIb29rUmV0dXJuLmJ1c2NhckxlbWJyZXRlcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgZGF0YUluaWNpbzogJzIwMjQtMDEtMDEnLFxuICAgICAgICAgICAgZGF0YUZpbTogJzIwMjQtMTItMzEnLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGxpbXBhciBmaWx0cm9zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIC8vIEFwbGljYXIgZmlsdHJvcyBwcmltZWlyb1xuICAgICAgY29uc3QgZmlsdHJvVGlwbyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2NvbWJvYm94JylbMF07XG4gICAgICBmaXJlRXZlbnQuY2xpY2soZmlsdHJvVGlwbyk7XG5cbiAgICAgIC8vIExpbXBhciBmaWx0cm9zXG4gICAgICBjb25zdCBib3Rhb0xpbXBhciA9IHNjcmVlbi5nZXRCeVRleHQoJ0xpbXBhciBGaWx0cm9zJyk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soYm90YW9MaW1wYXIpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1vY2tIb29rUmV0dXJuLmJ1c2NhckxlbWJyZXRlcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoe30pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCdXNjYScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBidXNjYXIgbGVtYnJldGVzIHBvciB0ZXh0bycsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBjYW1wb0J1c2NhID0gc2NyZWVuLmdldEJ5UGxhY2Vob2xkZXJUZXh0KCdCdXNjYXIgbGVtYnJldGVzLi4uJyk7XG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKGNhbXBvQnVzY2EsIHsgdGFyZ2V0OiB7IHZhbHVlOiAnSm/Do28nIH0gfSk7XG5cbiAgICAgIC8vIFNpbXVsYXIgZGVib3VuY2VcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0hvb2tSZXR1cm4uYnVzY2FyTGVtYnJldGVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBidXNjYTogJ0pvw6NvJyxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSwgeyB0aW1lb3V0OiAxMDAwIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGltcGFyIGJ1c2NhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIGNvbnN0IGNhbXBvQnVzY2EgPSBzY3JlZW4uZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0J1c2NhciBsZW1icmV0ZXMuLi4nKTtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoY2FtcG9CdXNjYSwgeyB0YXJnZXQ6IHsgdmFsdWU6ICdKb8OjbycgfSB9KTtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoY2FtcG9CdXNjYSwgeyB0YXJnZXQ6IHsgdmFsdWU6ICcnIH0gfSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0hvb2tSZXR1cm4uYnVzY2FyTGVtYnJldGVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBidXNjYTogJycsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQcOnw7VlcyBkZSBMZW1icmV0ZScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSByZWVudmlhciBsZW1icmV0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tIb29rUmV0dXJuLmV4ZWN1dGFyQWNhb0xlbWJyZXRlLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh0cnVlKTtcblxuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIGNvbnN0IGJvdGFvUmVlbnZpYXIgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdidXR0b24nKS5maW5kKGJ0biA9PiBcbiAgICAgICAgYnRuLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpPy5jbGFzc0xpc3QuY29udGFpbnMoJ2x1Y2lkZS1zZW5kJylcbiAgICAgICk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soYm90YW9SZWVudmlhcik7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0hvb2tSZXR1cm4uZXhlY3V0YXJBY2FvTGVtYnJldGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcxJywgJ3JlZW52aWFyJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIG1hcmNhciBjb21vIGVudmlhZG8nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrSG9va1JldHVybi5leGVjdXRhckFjYW9MZW1icmV0ZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UodHJ1ZSk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBib3Rhb01hcmNhciA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2J1dHRvbicpLmZpbmQoYnRuID0+IFxuICAgICAgICBidG4ucXVlcnlTZWxlY3Rvcignc3ZnJyk/LmNsYXNzTGlzdC5jb250YWlucygnbHVjaWRlLWNoZWNrLWNpcmNsZScpXG4gICAgICApO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGJvdGFvTWFyY2FyKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrSG9va1JldHVybi5leGVjdXRhckFjYW9MZW1icmV0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJzEnLCAnbWFyY2FyX2VudmlhZG8nKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgcmVhZ2VuZGFyIGxlbWJyZXRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0hvb2tSZXR1cm4uZXhlY3V0YXJBY2FvTGVtYnJldGUubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHRydWUpO1xuXG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgY29uc3QgYm90YW9SZWFnZW5kYXIgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdidXR0b24nKS5maW5kKGJ0biA9PiBcbiAgICAgICAgYnRuLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpPy5jbGFzc0xpc3QuY29udGFpbnMoJ2x1Y2lkZS1lZGl0JylcbiAgICAgICk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soYm90YW9SZWFnZW5kYXIpO1xuXG4gICAgICAvLyBQcmVlbmNoZXIgbm92YSBkYXRhXG4gICAgICBjb25zdCBpbnB1dERhdGEgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoJ05vdmEgZGF0YSBkZSBlbnZpbycpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZShpbnB1dERhdGEsIHsgdGFyZ2V0OiB7IHZhbHVlOiAnMjAyNC0xMi0zMVQxMDowMCcgfSB9KTtcblxuICAgICAgY29uc3QgYm90YW9Db25maXJtYXIgPSBzY3JlZW4uZ2V0QnlUZXh0KCdDb25maXJtYXInKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhib3Rhb0NvbmZpcm1hcik7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0hvb2tSZXR1cm4uZXhlY3V0YXJBY2FvTGVtYnJldGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgICAnMScsXG4gICAgICAgICAgICdyZWFnZW5kYXInLFxuICAgICAgICAgICB7IGRhdGFFbnZpbzogJzIwMjQtMTItMzFUMTA6MDAnIH1cbiAgICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHJlbW92ZXIgbGVtYnJldGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrSG9va1JldHVybi5leGVjdXRhckFjYW9MZW1icmV0ZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UodHJ1ZSk7XG4gICAgICB3aW5kb3cuY29uZmlybSA9IGplc3QuZm4oKCkgPT4gdHJ1ZSk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBib3RvZXMgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdidXR0b24nKTtcbiAgICAgIGNvbnN0IGJvdGFvUmVtb3ZlciA9IGJvdG9lcy5maW5kKGJ0biA9PiBcbiAgICAgICAgYnRuLmNsYXNzTmFtZSAmJiBidG4uY2xhc3NOYW1lLmluY2x1ZGVzKCd0ZXh0LXJlZC02MDAnKVxuICAgICAgKTtcbiAgICAgIGV4cGVjdChib3Rhb1JlbW92ZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soYm90YW9SZW1vdmVyISk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0hvb2tSZXR1cm4uZXhlY3V0YXJBY2FvTGVtYnJldGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcxJywgJ3JlbW92ZXInKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgY2FuY2VsYXIgcmVtb8Onw6NvIHNlIHVzdcOhcmlvIG7Do28gY29uZmlybWFyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgd2luZG93LmNvbmZpcm0gPSBqZXN0LmZuKCgpID0+IGZhbHNlKTtcblxuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIGNvbnN0IGJvdG9lcyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2J1dHRvbicpO1xuICAgICAgY29uc3QgYm90YW9SZW1vdmVyID0gYm90b2VzLmZpbmQoYnRuID0+IFxuICAgICAgICBidG4uY2xhc3NOYW1lICYmIGJ0bi5jbGFzc05hbWUuaW5jbHVkZXMoJ3RleHQtcmVkLTYwMCcpXG4gICAgICApO1xuICAgICAgZXhwZWN0KGJvdGFvUmVtb3ZlcikudG9CZURlZmluZWQoKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhib3Rhb1JlbW92ZXIhKTtcblxuICAgICAgZXhwZWN0KG1vY2tIb29rUmV0dXJuLmV4ZWN1dGFyQWNhb0xlbWJyZXRlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBUZXN0ZXMgZGUgYcOnw7VlcyBlbSBsb3RlIHJlbW92aWRvcyBwb2lzIG8gY29tcG9uZW50ZSBuw6NvIGltcGxlbWVudGEgZXNzYSBmdW5jaW9uYWxpZGFkZVxuXG4gIGRlc2NyaWJlKCdQYWdpbmHDp8OjbycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBuYXZlZ2FyIHBhcmEgcHLDs3hpbWEgcMOhZ2luYScsIGFzeW5jICgpID0+IHtcbiAgICAgICh1c2VMZW1icmV0ZXMgYXMgYW55KS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICAuLi5tb2NrSG9va1JldHVybixcbiAgICAgICAgcGFnaW5hY2FvOiB7XG4gICAgICAgICAgLi4ubW9ja1BhZ2luYWNhbyxcbiAgICAgICAgICBwYWdpbmE6IDEsXG4gICAgICAgICAgdG90YWxQYWdpbmFzOiAzLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBib3Rhb1Byb3hpbWEgPSBzY3JlZW4uZ2V0QnlUZXh0KCdQcsOzeGltYScpO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGJvdGFvUHJveGltYSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0hvb2tSZXR1cm4uYnVzY2FyTGVtYnJldGVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBwYWdpbmE6IDIsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbmF2ZWdhciBwYXJhIHDDoWdpbmEgYW50ZXJpb3InLCBhc3luYyAoKSA9PiB7XG4gICAgICAodXNlTGVtYnJldGVzIGFzIGFueSkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgLi4ubW9ja0hvb2tSZXR1cm4sXG4gICAgICAgIHBhZ2luYWNhbzoge1xuICAgICAgICAgIC4uLm1vY2tQYWdpbmFjYW8sXG4gICAgICAgICAgcGFnaW5hOiAyLFxuICAgICAgICAgIHRvdGFsUGFnaW5hczogMyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgY29uc3QgYm90YW9BbnRlcmlvciA9IHNjcmVlbi5nZXRCeVRleHQoJ0FudGVyaW9yJyk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soYm90YW9BbnRlcmlvcik7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0hvb2tSZXR1cm4uYnVzY2FyTGVtYnJldGVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBwYWdpbmE6IDEsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgYWx0ZXJhciBsaW1pdGUgcG9yIHDDoWdpbmEnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgY29uc3Qgc2VsZXRvckxpbWl0ZSA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnSXRlbnMgcG9yIHDDoWdpbmEnKTtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2Uoc2VsZXRvckxpbWl0ZSwgeyB0YXJnZXQ6IHsgdmFsdWU6ICcyNScgfSB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrSG9va1JldHVybi5idXNjYXJMZW1icmV0ZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGxpbWl0ZTogMjUsXG4gICAgICAgICAgICBwYWdpbmE6IDEsIC8vIFJlc2V0IHBhcmEgcHJpbWVpcmEgcMOhZ2luYVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ09yZGVuYcOnw6NvJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIG9yZGVuYXIgcG9yIGRhdGEgZGUgZW52aW8nLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgY29uc3QgY2FiZWNhbGhvRGF0YSA9IHNjcmVlbi5nZXRCeVRleHQoJ0RhdGEgZGUgRW52aW8nKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhjYWJlY2FsaG9EYXRhKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrSG9va1JldHVybi5idXNjYXJMZW1icmV0ZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIG9yZGVuYXJQb3I6ICdkYXRhRW52aW8nLFxuICAgICAgICAgICAgb3JkZW06ICdhc2MnLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGFsdGVybmFyIG9yZGVtIGRlIGNsYXNzaWZpY2HDp8OjbycsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBjYWJlY2FsaG9EYXRhID0gc2NyZWVuLmdldEJ5VGV4dCgnRGF0YSBkZSBFbnZpbycpO1xuICAgICAgXG4gICAgICAvLyBQcmltZWlyYSBjbGlxdWUgLSBBU0NcbiAgICAgIGZpcmVFdmVudC5jbGljayhjYWJlY2FsaG9EYXRhKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrSG9va1JldHVybi5idXNjYXJMZW1icmV0ZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIG9yZGVtOiAnYXNjJyxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNlZ3VuZGEgY2xpcXVlIC0gREVTQ1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGNhYmVjYWxob0RhdGEpO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1vY2tIb29rUmV0dXJuLmJ1c2NhckxlbWJyZXRlcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgb3JkZW06ICdkZXNjJyxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBvcmRlbmFyIHBvciBkaWZlcmVudGVzIGNhbXBvcycsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBjYWJlY2FsaG9Vc3VhcmlvID0gc2NyZWVuLmdldEJ5VGV4dCgnVXN1w6FyaW8nKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhjYWJlY2FsaG9Vc3VhcmlvKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrSG9va1JldHVybi5idXNjYXJMZW1icmV0ZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIG9yZGVuYXJQb3I6ICdub21lVXN1YXJpbycsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXhpYmnDp8OjbyBkZSBEYWRvcycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBleGliaXIgZWxlbWVudG9zIHByaW5jaXBhaXMgZGEgaW50ZXJmYWNlJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdMZW1icmV0ZXMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdHZXJlbmNpZSB0b2RvcyBvcyBsZW1icmV0ZXMgZGUgYXZhbGlhw6fDo28gZG8gc2lzdGVtYScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgZXhpYmlyIGRhZG9zIGRvcyBsZW1icmV0ZXMnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0pvw6NvIFNpbHZhJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnTWFyaWEgU2FudG9zJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnbGVtYnJldGUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2ZW5jaW1lbnRvJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBleGliaXIgYmFkZ2VzIGRlIHN0YXR1cyBjb3JyZXRhbWVudGUnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHNlIG9zIHN0YXR1cyBzw6NvIGV4aWJpZG9zIGJhc2VhZG9zIG5vcyBkYWRvcyBtb2NrXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnSm/Do28gU2lsdmEnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdNYXJpYSBTYW50b3MnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdQZWRybyBDb3N0YScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgZXhpYmlyIGJhZGdlcyBkZSB0aXBvIGNvcnJldGFtZW50ZScsICgpID0+IHtcbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnbGVtYnJldGUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCd2ZW5jaW1lbnRvJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBleGliaXIgaW5mb3JtYcOnw7VlcyBkZSB0ZW50YXRpdmFzJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCcwIHRlbnRhdGl2YXMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCcxIHRlbnRhdGl2YScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzMgdGVudGF0aXZhcycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgZXhpYmlyIG1lbnNhZ2VtIGRlIGVycm8gcXVhbmRvIHByZXNlbnRlJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdGYWxoYSBubyBlbnZpbyBkZSBlLW1haWwnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0F0dWFsaXphw6fDo28gQXV0b23DoXRpY2EnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgYXR1YWxpemFyIGxpc3RhIGFww7NzIGHDp8O1ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrSG9va1JldHVybi5leGVjdXRhckFjYW9MZW1icmV0ZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UodHJ1ZSk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBib3Rhb1JlZW52aWFyID0gc2NyZWVuLmdldEFsbEJ5Um9sZSgnYnV0dG9uJykuZmluZChidG4gPT4gXG4gICAgICAgIGJ0bi5xdWVyeVNlbGVjdG9yKCdzdmcnKT8uY2xhc3NMaXN0LmNvbnRhaW5zKCdsdWNpZGUtc2VuZCcpXG4gICAgICApO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGJvdGFvUmVlbnZpYXIpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1vY2tIb29rUmV0dXJuLmJ1c2NhckxlbWJyZXRlcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpOyAvLyBJbml0aWFsICsgYWZ0ZXIgYWN0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGF0dWFsaXphciBhdXRvbWF0aWNhbWVudGUgYSBjYWRhIDMwIHNlZ3VuZG9zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICAvLyBBdmFuw6dhciAzMCBzZWd1bmRvc1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDMwMDAwKTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrSG9va1JldHVybi5idXNjYXJMZW1icmV0ZXMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICAgIH0pO1xuXG4gICAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0VzdGFkb3MgZGUgRXJybycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBleGliaXIgZXJybyBhbyBmYWxoYXIgYW8gcmVlbnZpYXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrSG9va1JldHVybi5leGVjdXRhckFjYW9MZW1icmV0ZS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdFcnJvIGRlIHJlZGUnKSk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBib3Rhb1JlZW52aWFyID0gc2NyZWVuLmdldEFsbEJ5Um9sZSgnYnV0dG9uJykuZmluZChidG4gPT4gXG4gICAgICAgIGJ0bi5xdWVyeVNlbGVjdG9yKCdzdmcnKT8uY2xhc3NMaXN0LmNvbnRhaW5zKCdsdWNpZGUtc2VuZCcpXG4gICAgICApO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGJvdGFvUmVlbnZpYXIpO1xuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1vY2tUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgdGl0bGU6ICdFcnJvJyxcbiAgICAgICAgICAgIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgZXhpYmlyIGVycm8gYW8gZmFsaGFyIGFvIHJlbW92ZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrSG9va1JldHVybi5leGVjdXRhckFjYW9MZW1icmV0ZS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdFcnJvIGRlIHJlZGUnKSk7XG4gICAgICB3aW5kb3cuY29uZmlybSA9IGplc3QuZm4oKCkgPT4gdHJ1ZSk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBib3RvZXMgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdidXR0b24nKTtcbiAgICAgIGNvbnN0IGJvdGFvUmVtb3ZlciA9IGJvdG9lcy5maW5kKGJ0biA9PiBcbiAgICAgICAgYnRuLmNsYXNzTmFtZSAmJiBidG4uY2xhc3NOYW1lLmluY2x1ZGVzKCd0ZXh0LXJlZC02MDAnKVxuICAgICAgKTtcbiAgICAgIGV4cGVjdChib3Rhb1JlbW92ZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soYm90YW9SZW1vdmVyISk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja1RvYXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICB0aXRsZTogJ0Vycm8nLFxuICAgICAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBY2Vzc2liaWxpZGFkZScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSB0ZXIgbGFiZWxzIGFwcm9wcmlhZG9zIHBhcmEgc2NyZWVuIHJlYWRlcnMnLCAoKSA9PiB7XG4gICAgICByZW5kZXIoPExpc3RhTGVtYnJldGVzIC8+KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnQnVzY2FyJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVGlwbycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1N0YXR1cycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgdGVyIG5hdmVnYcOnw6NvIHBvciB0ZWNsYWRvIGZ1bmNpb25hbCcsICgpID0+IHtcbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICBjb25zdCBmaWx0cm9UaXBvID0gc2NyZWVuLmdldEFsbEJ5Um9sZSgnY29tYm9ib3gnKVswXTtcbiAgICAgIGZpbHRyb1RpcG8uZm9jdXMoKTtcbiAgICAgIGV4cGVjdChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS50b0JlKGZpbHRyb1RpcG8pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgdGVyIGRlc2NyacOnw7VlcyBhZGVxdWFkYXMgcGFyYSBhw6fDtWVzJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIC8vIFZlcmlmaWNhciBzZSBib3TDtWVzIGRlIGHDp8OjbyBlc3TDo28gcHJlc2VudGVzXG4gICAgICBjb25zdCBib3RvZXMgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdidXR0b24nKTtcbiAgICAgIGV4cGVjdChib3RvZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdSZXNwb25zaXZpZGFkZScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBhZGFwdGFyIGxheW91dCBwYXJhIHRlbGFzIHBlcXVlbmFzJywgKCkgPT4ge1xuICAgICAgLy8gTW9jayB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2lubmVyV2lkdGgnLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiA3NjgsXG4gICAgICB9KTtcblxuICAgICAgcmVuZGVyKDxMaXN0YUxlbWJyZXRlcyAvPik7XG5cbiAgICAgIC8vIFZlcmlmaWNhciBzZSBvIGNvbXBvbmVudGUgcmVuZGVyaXphIGNvcnJldGFtZW50ZVxuICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdMZW1icmV0ZXMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIG1vc3RyYXIgdG9kYXMgYXMgY29sdW5hcyBlbSB0ZWxhcyBncmFuZGVzJywgKCkgPT4ge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2lubmVyV2lkdGgnLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAxMjAwLFxuICAgICAgfSk7XG5cbiAgICAgIHJlbmRlcig8TGlzdGFMZW1icmV0ZXMgLz4pO1xuXG4gICAgICAvLyBWZXJpZmljYXIgc2UgbyBjb21wb25lbnRlIHJlbmRlcml6YSBjb3JyZXRhbWVudGUgZW0gdGVsYXMgZ3JhbmRlc1xuICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdMZW1icmV0ZXMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdKb8OjbyBTaWx2YScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIm1vY2tMZW1icmV0ZXMiLCJpZCIsInVzdWFyaW9JZCIsImF2YWxpYWNhb0lkIiwidGlwbyIsImRhdGFFbnZpbyIsIkRhdGUiLCJub3ciLCJ0b0lTT1N0cmluZyIsImVudmlhZG8iLCJ0ZW50YXRpdmFzIiwidWx0aW1hVGVudGF0aXZhIiwidW5kZWZpbmVkIiwiZGF0YUVudmlvUmVhbCIsImVycm8iLCJvYnNlcnZhY29lcyIsImNyaWFkb0VtIiwiYXR1YWxpemFkb0VtIiwidXN1YXJpbyIsIm5vbWUiLCJlbWFpbCIsImNhcmdvIiwiYXZhbGlhY2FvIiwicHJhem8iLCJzdGF0dXMiLCJhdmFsaWFkbyIsImF2YWxpYWRvciIsInBlcmlvZG8iLCJkYXRhSW5pY2lvIiwiZGF0YUZpbSIsIm1vY2tQYWdpbmFjYW8iLCJwYWdpbmFBdHVhbCIsInRvdGFsUGFnaW5hcyIsInRvdGFsSXRlbnMiLCJpdGVuc1BvclBhZ2luYSIsInRlbVByb3hpbWFQYWdpbmEiLCJ0ZW1QYWdpbmFBbnRlcmlvciIsIm1vY2tIb29rUmV0dXJuIiwibGVtYnJldGVzIiwicGFnaW5hY2FvIiwiY2FycmVnYW5kbyIsImJ1c2NhckxlbWJyZXRlcyIsImZuIiwiZXhlY3V0YXJBY2FvTGVtYnJldGUiLCJtb2NrVG9hc3QiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwidXNlTGVtYnJldGVzIiwibW9ja1JldHVyblZhbHVlIiwidXNlVG9hc3QiLCJ0b2FzdCIsImFmdGVyRWFjaCIsInJlc2V0QWxsTW9ja3MiLCJpdCIsInJlbmRlciIsIkxpc3RhTGVtYnJldGVzIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJ0b3RhbCIsImVycm9yTWVzc2FnZSIsImZpbHRyb1RpcG8iLCJnZXRBbGxCeVJvbGUiLCJmaXJlRXZlbnQiLCJjaGFuZ2UiLCJ0YXJnZXQiLCJ2YWx1ZSIsIndhaXRGb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiZmlsdHJvU3RhdHVzIiwiZ2V0QnlMYWJlbFRleHQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm9iamVjdENvbnRhaW5pbmciLCJmaWx0cm9Vc3VhcmlvIiwiZmlsdHJvQXZhbGlhY2FvIiwiY2xpY2siLCJib3Rhb0xpbXBhciIsImNhbXBvQnVzY2EiLCJnZXRCeVBsYWNlaG9sZGVyVGV4dCIsImJ1c2NhIiwidGltZW91dCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImJvdGFvUmVlbnZpYXIiLCJmaW5kIiwiYnRuIiwicXVlcnlTZWxlY3RvciIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiYm90YW9NYXJjYXIiLCJib3Rhb1JlYWdlbmRhciIsImlucHV0RGF0YSIsImJvdGFvQ29uZmlybWFyIiwid2luZG93IiwiY29uZmlybSIsImJvdG9lcyIsImJvdGFvUmVtb3ZlciIsImNsYXNzTmFtZSIsImluY2x1ZGVzIiwidG9CZURlZmluZWQiLCJub3QiLCJwYWdpbmEiLCJib3Rhb1Byb3hpbWEiLCJib3Rhb0FudGVyaW9yIiwic2VsZXRvckxpbWl0ZSIsImxpbWl0ZSIsImNhYmVjYWxob0RhdGEiLCJvcmRlbmFyUG9yIiwib3JkZW0iLCJjYWJlY2FsaG9Vc3VhcmlvIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidXNlRmFrZVRpbWVycyIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJ1c2VSZWFsVGltZXJzIiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwiRXJyb3IiLCJ0aXRsZSIsInZhcmlhbnQiLCJmb2N1cyIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsInRvQmUiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIl0sIm1hcHBpbmdzIjoiO0FBTUEsNkNBQTZDO0FBRTdDLGlCQUFpQjtBQUNqQkEsS0FBS0MsSUFBSSxDQUFDO0FBQ1ZELEtBQUtDLElBQUksQ0FBQzs7Ozs7OERBVlE7d0JBQ2lDO3lCQUNTO2dDQUM3Qjs4QkFDRjswQkFDSjs7Ozs7O0FBT3pCLDhCQUE4QjtBQUM5QixNQUFNQyxnQkFBZ0I7SUFDcEI7UUFDRUMsSUFBSTtRQUNKQyxXQUFXO1FBQ1hDLGFBQWE7UUFDYkMsTUFBTTtRQUNOQyxXQUFXLElBQUlDLEtBQUtBLEtBQUtDLEdBQUcsS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNQyxXQUFXO1FBQ2pFQyxTQUFTO1FBQ1RDLFlBQVk7UUFDWkMsaUJBQWlCQztRQUNqQkMsZUFBZUQ7UUFDZkUsTUFB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