b8400fc86211f48d9e1b7d2c60f3815c
"use strict";

/* istanbul ignore next */
function cov_1682j1o6ow() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\lembretes\\[id]\\route.ts";
  var hash = "dbc78b23c4afbd78e2f3d2a2d8d3d5bd02dbf9a6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\lembretes\\[id]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 21
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 19
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 26,
          column: 18
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "10": {
        start: {
          line: 27,
          column: 14
        },
        end: {
          line: 27,
          column: 45
        }
      },
      "11": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 49
        }
      },
      "12": {
        start: {
          line: 29,
          column: 13
        },
        end: {
          line: 29,
          column: 27
        }
      },
      "13": {
        start: {
          line: 31,
          column: 32
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "14": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "15": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 40,
          column: 80
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "18": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 29
        }
      },
      "19": {
        start: {
          line: 50,
          column: 25
        },
        end: {
          line: 100,
          column: 10
        }
      },
      "20": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "21": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "22": {
        start: {
          line: 109,
          column: 24
        },
        end: {
          line: 112,
          column: 134
        }
      },
      "23": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "24": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "25": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "26": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 57
        }
      },
      "27": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "28": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 247,
          column: 5
        }
      },
      "29": {
        start: {
          line: 137,
          column: 24
        },
        end: {
          line: 137,
          column: 80
        }
      },
      "30": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "31": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 143,
          column: 15
        }
      },
      "32": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "33": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 154,
          column: 15
        }
      },
      "34": {
        start: {
          line: 156,
          column: 23
        },
        end: {
          line: 156,
          column: 29
        }
      },
      "35": {
        start: {
          line: 158,
          column: 34
        },
        end: {
          line: 162,
          column: 10
        }
      },
      "36": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "37": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "38": {
        start: {
          line: 171,
          column: 21
        },
        end: {
          line: 171,
          column: 41
        }
      },
      "39": {
        start: {
          line: 172,
          column: 31
        },
        end: {
          line: 172,
          column: 66
        }
      },
      "40": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "41": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "42": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 76
        }
      },
      "43": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "44": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 70
        }
      },
      "45": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "46": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 62
        }
      },
      "47": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "48": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 60
        }
      },
      "49": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 79
        }
      },
      "50": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "51": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 56
        }
      },
      "52": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 58
        }
      },
      "53": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 75
        }
      },
      "54": {
        start: {
          line: 198,
          column: 35
        },
        end: {
          line: 225,
          column: 10
        }
      },
      "55": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 230,
          column: 11
        }
      },
      "56": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 60
        }
      },
      "57": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "58": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 239,
          column: 15
        }
      },
      "59": {
        start: {
          line: 236,
          column: 48
        },
        end: {
          line: 236,
          column: 83
        }
      },
      "60": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 246,
          column: 11
        }
      },
      "61": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 329,
          column: 5
        }
      },
      "62": {
        start: {
          line: 252,
          column: 24
        },
        end: {
          line: 252,
          column: 80
        }
      },
      "63": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "64": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 258,
          column: 15
        }
      },
      "65": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "66": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 269,
          column: 15
        }
      },
      "67": {
        start: {
          line: 271,
          column: 23
        },
        end: {
          line: 271,
          column: 29
        }
      },
      "68": {
        start: {
          line: 273,
          column: 34
        },
        end: {
          line: 290,
          column: 10
        }
      },
      "69": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "70": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 296,
          column: 15
        }
      },
      "71": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "72": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 304,
          column: 15
        }
      },
      "73": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 311,
          column: 11
        }
      },
      "74": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 320,
          column: 11
        }
      },
      "75": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 58
        }
      },
      "76": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 328,
          column: 11
        }
      },
      "77": {
        start: {
          line: 332,
          column: 4
        },
        end: {
          line: 470,
          column: 5
        }
      },
      "78": {
        start: {
          line: 334,
          column: 24
        },
        end: {
          line: 334,
          column: 80
        }
      },
      "79": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "80": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 340,
          column: 15
        }
      },
      "81": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "82": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 351,
          column: 15
        }
      },
      "83": {
        start: {
          line: 353,
          column: 23
        },
        end: {
          line: 353,
          column: 29
        }
      },
      "84": {
        start: {
          line: 354,
          column: 21
        },
        end: {
          line: 354,
          column: 41
        }
      },
      "85": {
        start: {
          line: 355,
          column: 25
        },
        end: {
          line: 355,
          column: 29
        }
      },
      "86": {
        start: {
          line: 357,
          column: 25
        },
        end: {
          line: 370,
          column: 10
        }
      },
      "87": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "88": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 376,
          column: 15
        }
      },
      "89": {
        start: {
          line: 378,
          column: 24
        },
        end: {
          line: 378,
          column: 26
        }
      },
      "90": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 452,
          column: 9
        }
      },
      "91": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 391,
          column: 19
        }
      },
      "92": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 395,
          column: 18
        }
      },
      "93": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 22
        }
      },
      "94": {
        start: {
          line: 398,
          column: 16
        },
        end: {
          line: 404,
          column: 17
        }
      },
      "95": {
        start: {
          line: 399,
          column: 20
        },
        end: {
          line: 403,
          column: 23
        }
      },
      "96": {
        start: {
          line: 405,
          column: 16
        },
        end: {
          line: 415,
          column: 19
        }
      },
      "97": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 419,
          column: 18
        }
      },
      "98": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 420,
          column: 22
        }
      },
      "99": {
        start: {
          line: 422,
          column: 37
        },
        end: {
          line: 422,
          column: 41
        }
      },
      "100": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 429,
          column: 17
        }
      },
      "101": {
        start: {
          line: 424,
          column: 20
        },
        end: {
          line: 428,
          column: 23
        }
      },
      "102": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 439,
          column: 19
        }
      },
      "103": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 444,
          column: 18
        }
      },
      "104": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 445,
          column: 22
        }
      },
      "105": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 451,
          column: 19
        }
      },
      "106": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 461,
          column: 11
        }
      },
      "107": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 463,
          column: 67
        }
      },
      "108": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 469,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 17
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 37,
            column: 15
          },
          end: {
            line: 37,
            column: 18
          }
        },
        loc: {
          start: {
            line: 37,
            column: 40
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 37
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 134,
            column: 15
          },
          end: {
            line: 134,
            column: 18
          }
        },
        loc: {
          start: {
            line: 134,
            column: 40
          },
          end: {
            line: 248,
            column: 1
          }
        },
        line: 134
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 236,
            column: 43
          },
          end: {
            line: 236,
            column: 44
          }
        },
        loc: {
          start: {
            line: 236,
            column: 48
          },
          end: {
            line: 236,
            column: 83
          }
        },
        line: 236
      },
      "8": {
        name: "DELETE",
        decl: {
          start: {
            line: 249,
            column: 15
          },
          end: {
            line: 249,
            column: 21
          }
        },
        loc: {
          start: {
            line: 249,
            column: 43
          },
          end: {
            line: 330,
            column: 1
          }
        },
        line: 249
      },
      "9": {
        name: "PATCH",
        decl: {
          start: {
            line: 331,
            column: 15
          },
          end: {
            line: 331,
            column: 20
          }
        },
        loc: {
          start: {
            line: 331,
            column: 42
          },
          end: {
            line: 471,
            column: 1
          }
        },
        line: 331
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "2": {
        loc: {
          start: {
            line: 109,
            column: 24
          },
          end: {
            line: 112,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 24
          },
          end: {
            line: 112,
            column: 38
          }
        }, {
          start: {
            line: 112,
            column: 42
          },
          end: {
            line: 112,
            column: 80
          }
        }, {
          start: {
            line: 112,
            column: 84
          },
          end: {
            line: 112,
            column: 134
          }
        }],
        line: 109
      },
      "3": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "4": {
        loc: {
          start: {
            line: 128,
            column: 22
          },
          end: {
            line: 128,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 47
          },
          end: {
            line: 128,
            column: 60
          }
        }, {
          start: {
            line: 128,
            column: 63
          },
          end: {
            line: 128,
            column: 82
          }
        }],
        line: 128
      },
      "5": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "6": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "7": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "8": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "9": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "10": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "11": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "12": {
        loc: {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 187,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 187,
            column: 38
          }
        }, {
          start: {
            line: 187,
            column: 42
          },
          end: {
            line: 187,
            column: 68
          }
        }],
        line: 187
      },
      "13": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "14": {
        loc: {
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "15": {
        loc: {
          start: {
            line: 243,
            column: 22
          },
          end: {
            line: 243,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 47
          },
          end: {
            line: 243,
            column: 60
          }
        }, {
          start: {
            line: 243,
            column: 63
          },
          end: {
            line: 243,
            column: 82
          }
        }],
        line: 243
      },
      "16": {
        loc: {
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "17": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "18": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "19": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "20": {
        loc: {
          start: {
            line: 325,
            column: 22
          },
          end: {
            line: 325,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 325,
            column: 47
          },
          end: {
            line: 325,
            column: 60
          }
        }, {
          start: {
            line: 325,
            column: 63
          },
          end: {
            line: 325,
            column: 82
          }
        }],
        line: 325
      },
      "21": {
        loc: {
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "22": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "23": {
        loc: {
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "24": {
        loc: {
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 380,
            column: 12
          },
          end: {
            line: 396,
            column: 22
          }
        }, {
          start: {
            line: 397,
            column: 12
          },
          end: {
            line: 420,
            column: 22
          }
        }, {
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 445,
            column: 22
          }
        }, {
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 451,
            column: 19
          }
        }],
        line: 379
      },
      "25": {
        loc: {
          start: {
            line: 398,
            column: 16
          },
          end: {
            line: 404,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 16
          },
          end: {
            line: 404,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "26": {
        loc: {
          start: {
            line: 423,
            column: 16
          },
          end: {
            line: 429,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 16
          },
          end: {
            line: 429,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "27": {
        loc: {
          start: {
            line: 466,
            column: 22
          },
          end: {
            line: 466,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 466,
            column: 47
          },
          end: {
            line: 466,
            column: 60
          }
        }, {
          start: {
            line: 466,
            column: 63
          },
          end: {
            line: 466,
            column: 82
          }
        }],
        line: 466
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\lembretes\\[id]\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { z } from 'zod';\n\n// Schema para atualiza\xE7\xE3o de lembrete\nconst atualizarLembreteSchema = z.object({\n  dataEnvio: z.string().optional(),\n  observacoes: z.string().optional(),\n  enviado: z.boolean().optional(),\n  erro: z.string().optional(),\n});\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * GET /api/lembretes/[id]\n * Busca um lembrete espec\xEDfico por ID\n */\nexport async function GET(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    const { id } = params;\n\n    // Buscar o lembrete\n    const lembrete = await prisma.lembreteAgendado.findUnique({\n      where: { id },\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n            cargo: true,\n          },\n        },\n        avaliacao: {\n          select: {\n            id: true,\n            prazo: true,\n            status: true,\n            avaliado: {\n              select: {\n                id: true,\n                nome: true,\n                cargo: true,\n                email: true,\n              },\n            },\n            avaliador: {\n              select: {\n                id: true,\n                nome: true,\n                email: true,\n              },\n            },\n            periodo: {\n              select: {\n                id: true,\n                nome: true,\n                dataInicio: true,\n                dataFim: true,\n              },\n            },\n          },\n        },\n        criadoPorUsuario: {\n          select: {\n            id: true,\n            nome: true,\n          },\n        },\n      },\n    });\n\n    if (!lembrete) {\n      return NextResponse.json(\n        { erro: 'Lembrete n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar permiss\xF5es\n    const podeVer = \n      ['ADMIN', 'GESTOR'].includes(session.user.papel) ||\n      lembrete.usuarioId === session.user.id ||\n      lembrete.avaliacao.avaliadorId === session.user.id;\n\n    if (!podeVer) {\n      return NextResponse.json(\n        { erro: 'Acesso negado' },\n        { status: 403 }\n      );\n    }\n\n    return NextResponse.json({\n      sucesso: true,\n      dados: lembrete,\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar lembrete:', error);\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PUT /api/lembretes/[id]\n * Atualiza um lembrete espec\xEDfico\n */\nexport async function PUT(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN e GESTOR)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem atualizar lembretes.' },\n        { status: 403 }\n      );\n    }\n\n    const { id } = params;\n\n    // Verificar se o lembrete existe\n    const lembreteExistente = await prisma.lembreteAgendado.findUnique({\n      where: { id },\n    });\n\n    if (!lembreteExistente) {\n      return NextResponse.json(\n        { erro: 'Lembrete n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Validar dados da requisi\xE7\xE3o\n    const body = await request.json();\n    const dadosValidados = atualizarLembreteSchema.parse(body);\n\n    // Preparar dados para atualiza\xE7\xE3o\n    const dadosAtualizacao: any = {\n      atualizadoEm: new Date(),\n      atualizadoPor: session.user.id,\n    };\n\n    if (dadosValidados.dataEnvio) {\n      dadosAtualizacao.dataEnvio = new Date(dadosValidados.dataEnvio);\n    }\n\n    if (dadosValidados.observacoes !== undefined) {\n      dadosAtualizacao.observacoes = dadosValidados.observacoes;\n    }\n\n    if (dadosValidados.enviado !== undefined) {\n      dadosAtualizacao.enviado = dadosValidados.enviado;\n      \n      // Se marcando como enviado, atualizar data de envio\n      if (dadosValidados.enviado && !lembreteExistente.enviado) {\n        dadosAtualizacao.dataEnvioReal = new Date();\n        dadosAtualizacao.tentativas = lembreteExistente.tentativas + 1;\n      }\n    }\n\n    if (dadosValidados.erro !== undefined) {\n      dadosAtualizacao.erro = dadosValidados.erro;\n      dadosAtualizacao.ultimaTentativa = new Date();\n      dadosAtualizacao.tentativas = lembreteExistente.tentativas + 1;\n    }\n\n    // Atualizar o lembrete\n    const lembreteAtualizado = await prisma.lembreteAgendado.update({\n      where: { id },\n      data: dadosAtualizacao,\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n          },\n        },\n        avaliacao: {\n          select: {\n            id: true,\n            prazo: true,\n            status: true,\n            avaliado: {\n              select: {\n                nome: true,\n                cargo: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    return NextResponse.json({\n      sucesso: true,\n      mensagem: 'Lembrete atualizado com sucesso',\n      dados: lembreteAtualizado,\n    });\n\n  } catch (error) {\n    console.error('Erro ao atualizar lembrete:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          erro: 'Dados inv\xE1lidos',\n          detalhes: error.errors.map(e => `${e.path.join('.')}: ${e.message}`)\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/lembretes/[id]\n * Remove um lembrete espec\xEDfico\n */\nexport async function DELETE(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN e GESTOR)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem remover lembretes.' },\n        { status: 403 }\n      );\n    }\n\n    const { id } = params;\n\n    // Verificar se o lembrete existe\n    const lembreteExistente = await prisma.lembreteAgendado.findUnique({\n      where: { id },\n      include: {\n        avaliacao: {\n          select: {\n            id: true,\n            status: true,\n            avaliado: {\n              select: {\n                nome: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    if (!lembreteExistente) {\n      return NextResponse.json(\n        { erro: 'Lembrete n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o lembrete pode ser removido\n    if (lembreteExistente.enviado) {\n      return NextResponse.json(\n        { erro: 'N\xE3o \xE9 poss\xEDvel remover lembretes que j\xE1 foram enviados' },\n        { status: 400 }\n      );\n    }\n\n    // Remover o lembrete\n    await prisma.lembreteAgendado.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({\n      sucesso: true,\n      mensagem: 'Lembrete removido com sucesso',\n      dados: {\n        id: lembreteExistente.id,\n        avaliacaoId: lembreteExistente.avaliacaoId,\n        tipo: lembreteExistente.tipo,\n      },\n    });\n\n  } catch (error) {\n    console.error('Erro ao remover lembrete:', error);\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PATCH /api/lembretes/[id]\n * Executa a\xE7\xF5es espec\xEDficas no lembrete (reenviar, marcar como enviado, etc.)\n */\nexport async function PATCH(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN e GESTOR)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem executar a\xE7\xF5es em lembretes.' },\n        { status: 403 }\n      );\n    }\n\n    const { id } = params;\n    const body = await request.json();\n    const { acao } = body;\n\n    // Verificar se o lembrete existe\n    const lembrete = await prisma.lembreteAgendado.findUnique({\n      where: { id },\n      include: {\n        avaliacao: {\n          include: {\n            avaliador: true,\n            avaliado: true,\n            periodo: true,\n          },\n        },\n      },\n    });\n\n    if (!lembrete) {\n      return NextResponse.json(\n        { erro: 'Lembrete n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    let resultado: any = {};\n\n    switch (acao) {\n      case 'reenviar':\n        // Implementar reenvio do lembrete\n        await prisma.lembreteAgendado.update({\n          where: { id },\n          data: {\n            tentativas: lembrete.tentativas + 1,\n            ultimaTentativa: new Date(),\n            erro: null,\n          },\n        });\n        \n        resultado = {\n          mensagem: 'Lembrete reagendado para reenvio',\n          acao: 'reenviar',\n        };\n        break;\n\n      case 'marcar_enviado':\n        if (lembrete.enviado) {\n          return NextResponse.json(\n            { erro: 'Lembrete j\xE1 foi marcado como enviado' },\n            { status: 400 }\n          );\n        }\n        \n        await prisma.lembreteAgendado.update({\n          where: { id },\n          data: {\n            enviado: true,\n            dataEnvioReal: new Date(),\n            tentativas: lembrete.tentativas + 1,\n            erro: null,\n          },\n        });\n        \n        resultado = {\n          mensagem: 'Lembrete marcado como enviado',\n          acao: 'marcar_enviado',\n        };\n        break;\n\n      case 'reagendar':\n        const { novaData } = body;\n        if (!novaData) {\n          return NextResponse.json(\n            { erro: 'Nova data \xE9 obrigat\xF3ria para reagendamento' },\n            { status: 400 }\n          );\n        }\n        \n        await prisma.lembreteAgendado.update({\n          where: { id },\n          data: {\n            dataEnvio: new Date(novaData),\n            enviado: false,\n            erro: null,\n          },\n        });\n        \n        resultado = {\n          mensagem: 'Lembrete reagendado com sucesso',\n          acao: 'reagendar',\n          novaData,\n        };\n        break;\n\n      default:\n        return NextResponse.json(\n          { erro: 'A\xE7\xE3o n\xE3o reconhecida' },\n          { status: 400 }\n        );\n    }\n\n    return NextResponse.json({\n      sucesso: true,\n      ...resultado,\n      dados: {\n        id: lembrete.id,\n        avaliacaoId: lembrete.avaliacaoId,\n        tipo: lembrete.tipo,\n      },\n    });\n\n  } catch (error) {\n    console.error('Erro ao executar a\xE7\xE3o no lembrete:', error);\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["DELETE", "GET", "PATCH", "PUT", "atualizarLembreteSchema", "z", "object", "dataEnvio", "string", "optional", "observacoes", "enviado", "boolean", "erro", "request", "params", "session", "getServerSession", "authOptions", "user", "NextResponse", "json", "status", "id", "lembrete", "prisma", "lembreteAgendado", "findUnique", "where", "include", "usuario", "select", "nome", "email", "cargo", "avaliacao", "prazo", "avaliado", "avaliador", "periodo", "dataInicio", "dataFim", "criadoPorUsuario", "podeVer", "includes", "papel", "usuarioId", "avaliadorId", "sucesso", "dados", "error", "console", "detalhes", "Error", "message", "lembreteExistente", "body", "dadosValidados", "parse", "dadosAtualizacao", "atualizadoEm", "Date", "atualizadoPor", "undefined", "dataEnvioReal", "tentativas", "ultimaTentativa", "lembreteAtualizado", "update", "data", "mensagem", "ZodError", "errors", "map", "e", "path", "join", "delete", "avaliacaoId", "tipo", "acao", "resultado", "novaData"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dbc78b23c4afbd78e2f3d2a2d8d3d5bd02dbf9a6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1682j1o6ow = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1682j1o6ow();
cov_1682j1o6ow().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1682j1o6ow().f[0]++;
  cov_1682j1o6ow().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1682j1o6ow().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1682j1o6ow().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1682j1o6ow().f[1]++;
    cov_1682j1o6ow().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1682j1o6ow().f[2]++;
    cov_1682j1o6ow().s[5]++;
    return GET;
  },
  get PATCH() {
    /* istanbul ignore next */
    cov_1682j1o6ow().f[3]++;
    cov_1682j1o6ow().s[6]++;
    return PATCH;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_1682j1o6ow().f[4]++;
    cov_1682j1o6ow().s[7]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_1682j1o6ow().s[8]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_1682j1o6ow().s[9]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_1682j1o6ow().s[10]++, require("../../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(cov_1682j1o6ow().s[11]++, require("../../../../lib/prisma"));
const _zod =
/* istanbul ignore next */
(cov_1682j1o6ow().s[12]++, require("zod"));
// Schema para atualização de lembrete
const atualizarLembreteSchema =
/* istanbul ignore next */
(cov_1682j1o6ow().s[13]++, _zod.z.object({
  dataEnvio: _zod.z.string().optional(),
  observacoes: _zod.z.string().optional(),
  enviado: _zod.z.boolean().optional(),
  erro: _zod.z.string().optional()
}));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1682j1o6ow().f[5]++;
  cov_1682j1o6ow().s[14]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[15]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[16]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[0][0]++;
      cov_1682j1o6ow().s[17]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[0][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[18]++, params);
    // Buscar o lembrete
    const lembrete =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[19]++, await _prisma.prisma.lembreteAgendado.findUnique({
      where: {
        id
      },
      include: {
        usuario: {
          select: {
            id: true,
            nome: true,
            email: true,
            cargo: true
          }
        },
        avaliacao: {
          select: {
            id: true,
            prazo: true,
            status: true,
            avaliado: {
              select: {
                id: true,
                nome: true,
                cargo: true,
                email: true
              }
            },
            avaliador: {
              select: {
                id: true,
                nome: true,
                email: true
              }
            },
            periodo: {
              select: {
                id: true,
                nome: true,
                dataInicio: true,
                dataFim: true
              }
            }
          }
        },
        criadoPorUsuario: {
          select: {
            id: true,
            nome: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[20]++;
    if (!lembrete) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[1][0]++;
      cov_1682j1o6ow().s[21]++;
      return _server.NextResponse.json({
        erro: 'Lembrete não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[1][1]++;
    }
    // Verificar permissões
    const podeVer =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[22]++,
    /* istanbul ignore next */
    (cov_1682j1o6ow().b[2][0]++, ['ADMIN', 'GESTOR'].includes(session.user.papel)) ||
    /* istanbul ignore next */
    (cov_1682j1o6ow().b[2][1]++, lembrete.usuarioId === session.user.id) ||
    /* istanbul ignore next */
    (cov_1682j1o6ow().b[2][2]++, lembrete.avaliacao.avaliadorId === session.user.id));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[23]++;
    if (!podeVer) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[3][0]++;
      cov_1682j1o6ow().s[24]++;
      return _server.NextResponse.json({
        erro: 'Acesso negado'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[3][1]++;
    }
    cov_1682j1o6ow().s[25]++;
    return _server.NextResponse.json({
      sucesso: true,
      dados: lembrete
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1682j1o6ow().s[26]++;
    console.error('Erro ao buscar lembrete:', error);
    /* istanbul ignore next */
    cov_1682j1o6ow().s[27]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor',
      detalhes: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[4][1]++, 'Erro desconhecido')
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1682j1o6ow().f[6]++;
  cov_1682j1o6ow().s[28]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[29]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[30]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[5][0]++;
      cov_1682j1o6ow().s[31]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[5][1]++;
    }
    // Verificar permissões (apenas ADMIN e GESTOR)
    cov_1682j1o6ow().s[32]++;
    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[6][0]++;
      cov_1682j1o6ow().s[33]++;
      return _server.NextResponse.json({
        erro: 'Acesso negado. Apenas administradores e gestores podem atualizar lembretes.'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[6][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[34]++, params);
    // Verificar se o lembrete existe
    const lembreteExistente =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[35]++, await _prisma.prisma.lembreteAgendado.findUnique({
      where: {
        id
      }
    }));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[36]++;
    if (!lembreteExistente) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[7][0]++;
      cov_1682j1o6ow().s[37]++;
      return _server.NextResponse.json({
        erro: 'Lembrete não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[7][1]++;
    }
    // Validar dados da requisição
    const body =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[38]++, await request.json());
    const dadosValidados =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[39]++, atualizarLembreteSchema.parse(body));
    // Preparar dados para atualização
    const dadosAtualizacao =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[40]++, {
      atualizadoEm: new Date(),
      atualizadoPor: session.user.id
    });
    /* istanbul ignore next */
    cov_1682j1o6ow().s[41]++;
    if (dadosValidados.dataEnvio) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[8][0]++;
      cov_1682j1o6ow().s[42]++;
      dadosAtualizacao.dataEnvio = new Date(dadosValidados.dataEnvio);
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[8][1]++;
    }
    cov_1682j1o6ow().s[43]++;
    if (dadosValidados.observacoes !== undefined) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[9][0]++;
      cov_1682j1o6ow().s[44]++;
      dadosAtualizacao.observacoes = dadosValidados.observacoes;
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[9][1]++;
    }
    cov_1682j1o6ow().s[45]++;
    if (dadosValidados.enviado !== undefined) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[10][0]++;
      cov_1682j1o6ow().s[46]++;
      dadosAtualizacao.enviado = dadosValidados.enviado;
      // Se marcando como enviado, atualizar data de envio
      /* istanbul ignore next */
      cov_1682j1o6ow().s[47]++;
      if (
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[12][0]++, dadosValidados.enviado) &&
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[12][1]++, !lembreteExistente.enviado)) {
        /* istanbul ignore next */
        cov_1682j1o6ow().b[11][0]++;
        cov_1682j1o6ow().s[48]++;
        dadosAtualizacao.dataEnvioReal = new Date();
        /* istanbul ignore next */
        cov_1682j1o6ow().s[49]++;
        dadosAtualizacao.tentativas = lembreteExistente.tentativas + 1;
      } else
      /* istanbul ignore next */
      {
        cov_1682j1o6ow().b[11][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[10][1]++;
    }
    cov_1682j1o6ow().s[50]++;
    if (dadosValidados.erro !== undefined) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[13][0]++;
      cov_1682j1o6ow().s[51]++;
      dadosAtualizacao.erro = dadosValidados.erro;
      /* istanbul ignore next */
      cov_1682j1o6ow().s[52]++;
      dadosAtualizacao.ultimaTentativa = new Date();
      /* istanbul ignore next */
      cov_1682j1o6ow().s[53]++;
      dadosAtualizacao.tentativas = lembreteExistente.tentativas + 1;
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[13][1]++;
    }
    // Atualizar o lembrete
    const lembreteAtualizado =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[54]++, await _prisma.prisma.lembreteAgendado.update({
      where: {
        id
      },
      data: dadosAtualizacao,
      include: {
        usuario: {
          select: {
            id: true,
            nome: true,
            email: true
          }
        },
        avaliacao: {
          select: {
            id: true,
            prazo: true,
            status: true,
            avaliado: {
              select: {
                nome: true,
                cargo: true
              }
            }
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[55]++;
    return _server.NextResponse.json({
      sucesso: true,
      mensagem: 'Lembrete atualizado com sucesso',
      dados: lembreteAtualizado
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1682j1o6ow().s[56]++;
    console.error('Erro ao atualizar lembrete:', error);
    /* istanbul ignore next */
    cov_1682j1o6ow().s[57]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[14][0]++;
      cov_1682j1o6ow().s[58]++;
      return _server.NextResponse.json({
        erro: 'Dados inválidos',
        detalhes: error.errors.map(e => {
          /* istanbul ignore next */
          cov_1682j1o6ow().f[7]++;
          cov_1682j1o6ow().s[59]++;
          return `${e.path.join('.')}: ${e.message}`;
        })
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[14][1]++;
    }
    cov_1682j1o6ow().s[60]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor',
      detalhes: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[15][1]++, 'Erro desconhecido')
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1682j1o6ow().f[8]++;
  cov_1682j1o6ow().s[61]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[62]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[63]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[16][0]++;
      cov_1682j1o6ow().s[64]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[16][1]++;
    }
    // Verificar permissões (apenas ADMIN e GESTOR)
    cov_1682j1o6ow().s[65]++;
    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[17][0]++;
      cov_1682j1o6ow().s[66]++;
      return _server.NextResponse.json({
        erro: 'Acesso negado. Apenas administradores e gestores podem remover lembretes.'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[17][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[67]++, params);
    // Verificar se o lembrete existe
    const lembreteExistente =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[68]++, await _prisma.prisma.lembreteAgendado.findUnique({
      where: {
        id
      },
      include: {
        avaliacao: {
          select: {
            id: true,
            status: true,
            avaliado: {
              select: {
                nome: true
              }
            }
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[69]++;
    if (!lembreteExistente) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[18][0]++;
      cov_1682j1o6ow().s[70]++;
      return _server.NextResponse.json({
        erro: 'Lembrete não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[18][1]++;
    }
    // Verificar se o lembrete pode ser removido
    cov_1682j1o6ow().s[71]++;
    if (lembreteExistente.enviado) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[19][0]++;
      cov_1682j1o6ow().s[72]++;
      return _server.NextResponse.json({
        erro: 'Não é possível remover lembretes que já foram enviados'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[19][1]++;
    }
    // Remover o lembrete
    cov_1682j1o6ow().s[73]++;
    await _prisma.prisma.lembreteAgendado.delete({
      where: {
        id
      }
    });
    /* istanbul ignore next */
    cov_1682j1o6ow().s[74]++;
    return _server.NextResponse.json({
      sucesso: true,
      mensagem: 'Lembrete removido com sucesso',
      dados: {
        id: lembreteExistente.id,
        avaliacaoId: lembreteExistente.avaliacaoId,
        tipo: lembreteExistente.tipo
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1682j1o6ow().s[75]++;
    console.error('Erro ao remover lembrete:', error);
    /* istanbul ignore next */
    cov_1682j1o6ow().s[76]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor',
      detalhes: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[20][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[20][1]++, 'Erro desconhecido')
    }, {
      status: 500
    });
  }
}
async function PATCH(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1682j1o6ow().f[9]++;
  cov_1682j1o6ow().s[77]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[78]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[79]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[21][0]++;
      cov_1682j1o6ow().s[80]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[21][1]++;
    }
    // Verificar permissões (apenas ADMIN e GESTOR)
    cov_1682j1o6ow().s[81]++;
    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[22][0]++;
      cov_1682j1o6ow().s[82]++;
      return _server.NextResponse.json({
        erro: 'Acesso negado. Apenas administradores e gestores podem executar ações em lembretes.'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[22][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[83]++, params);
    const body =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[84]++, await request.json());
    const {
      acao
    } =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[85]++, body);
    // Verificar se o lembrete existe
    const lembrete =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[86]++, await _prisma.prisma.lembreteAgendado.findUnique({
      where: {
        id
      },
      include: {
        avaliacao: {
          include: {
            avaliador: true,
            avaliado: true,
            periodo: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1682j1o6ow().s[87]++;
    if (!lembrete) {
      /* istanbul ignore next */
      cov_1682j1o6ow().b[23][0]++;
      cov_1682j1o6ow().s[88]++;
      return _server.NextResponse.json({
        erro: 'Lembrete não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1682j1o6ow().b[23][1]++;
    }
    let resultado =
    /* istanbul ignore next */
    (cov_1682j1o6ow().s[89]++, {});
    /* istanbul ignore next */
    cov_1682j1o6ow().s[90]++;
    switch (acao) {
      case 'reenviar':
        /* istanbul ignore next */
        cov_1682j1o6ow().b[24][0]++;
        cov_1682j1o6ow().s[91]++;
        // Implementar reenvio do lembrete
        await _prisma.prisma.lembreteAgendado.update({
          where: {
            id
          },
          data: {
            tentativas: lembrete.tentativas + 1,
            ultimaTentativa: new Date(),
            erro: null
          }
        });
        /* istanbul ignore next */
        cov_1682j1o6ow().s[92]++;
        resultado = {
          mensagem: 'Lembrete reagendado para reenvio',
          acao: 'reenviar'
        };
        /* istanbul ignore next */
        cov_1682j1o6ow().s[93]++;
        break;
      case 'marcar_enviado':
        /* istanbul ignore next */
        cov_1682j1o6ow().b[24][1]++;
        cov_1682j1o6ow().s[94]++;
        if (lembrete.enviado) {
          /* istanbul ignore next */
          cov_1682j1o6ow().b[25][0]++;
          cov_1682j1o6ow().s[95]++;
          return _server.NextResponse.json({
            erro: 'Lembrete já foi marcado como enviado'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_1682j1o6ow().b[25][1]++;
        }
        cov_1682j1o6ow().s[96]++;
        await _prisma.prisma.lembreteAgendado.update({
          where: {
            id
          },
          data: {
            enviado: true,
            dataEnvioReal: new Date(),
            tentativas: lembrete.tentativas + 1,
            erro: null
          }
        });
        /* istanbul ignore next */
        cov_1682j1o6ow().s[97]++;
        resultado = {
          mensagem: 'Lembrete marcado como enviado',
          acao: 'marcar_enviado'
        };
        /* istanbul ignore next */
        cov_1682j1o6ow().s[98]++;
        break;
      case 'reagendar':
        /* istanbul ignore next */
        cov_1682j1o6ow().b[24][2]++;
        const {
          novaData
        } =
        /* istanbul ignore next */
        (cov_1682j1o6ow().s[99]++, body);
        /* istanbul ignore next */
        cov_1682j1o6ow().s[100]++;
        if (!novaData) {
          /* istanbul ignore next */
          cov_1682j1o6ow().b[26][0]++;
          cov_1682j1o6ow().s[101]++;
          return _server.NextResponse.json({
            erro: 'Nova data é obrigatória para reagendamento'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_1682j1o6ow().b[26][1]++;
        }
        cov_1682j1o6ow().s[102]++;
        await _prisma.prisma.lembreteAgendado.update({
          where: {
            id
          },
          data: {
            dataEnvio: new Date(novaData),
            enviado: false,
            erro: null
          }
        });
        /* istanbul ignore next */
        cov_1682j1o6ow().s[103]++;
        resultado = {
          mensagem: 'Lembrete reagendado com sucesso',
          acao: 'reagendar',
          novaData
        };
        /* istanbul ignore next */
        cov_1682j1o6ow().s[104]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1682j1o6ow().b[24][3]++;
        cov_1682j1o6ow().s[105]++;
        return _server.NextResponse.json({
          erro: 'Ação não reconhecida'
        }, {
          status: 400
        });
    }
    /* istanbul ignore next */
    cov_1682j1o6ow().s[106]++;
    return _server.NextResponse.json({
      sucesso: true,
      ...resultado,
      dados: {
        id: lembrete.id,
        avaliacaoId: lembrete.avaliacaoId,
        tipo: lembrete.tipo
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1682j1o6ow().s[107]++;
    console.error('Erro ao executar ação no lembrete:', error);
    /* istanbul ignore next */
    cov_1682j1o6ow().s[108]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor',
      detalhes: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[27][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1682j1o6ow().b[27][1]++, 'Erro desconhecido')
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,