{"version":3,"names":["DELETE","cov_1682j1o6ow","f","s","GET","PATCH","PUT","atualizarLembreteSchema","_zod","z","object","dataEnvio","string","optional","observacoes","enviado","boolean","erro","request","params","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","status","id","lembrete","_prisma","prisma","lembreteAgendado","findUnique","where","include","usuario","select","nome","email","cargo","avaliacao","prazo","avaliado","avaliador","periodo","dataInicio","dataFim","criadoPorUsuario","podeVer","includes","papel","usuarioId","avaliadorId","sucesso","dados","error","console","detalhes","Error","message","lembreteExistente","body","dadosValidados","parse","dadosAtualizacao","atualizadoEm","Date","atualizadoPor","undefined","dataEnvioReal","tentativas","ultimaTentativa","lembreteAtualizado","update","data","mensagem","ZodError","errors","map","e","path","join","delete","avaliacaoId","tipo","acao","resultado","novaData"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\lembretes\\[id]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { z } from 'zod';\n\n// Schema para atualização de lembrete\nconst atualizarLembreteSchema = z.object({\n  dataEnvio: z.string().optional(),\n  observacoes: z.string().optional(),\n  enviado: z.boolean().optional(),\n  erro: z.string().optional(),\n});\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * GET /api/lembretes/[id]\n * Busca um lembrete específico por ID\n */\nexport async function GET(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    const { id } = params;\n\n    // Buscar o lembrete\n    const lembrete = await prisma.lembreteAgendado.findUnique({\n      where: { id },\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n            cargo: true,\n          },\n        },\n        avaliacao: {\n          select: {\n            id: true,\n            prazo: true,\n            status: true,\n            avaliado: {\n              select: {\n                id: true,\n                nome: true,\n                cargo: true,\n                email: true,\n              },\n            },\n            avaliador: {\n              select: {\n                id: true,\n                nome: true,\n                email: true,\n              },\n            },\n            periodo: {\n              select: {\n                id: true,\n                nome: true,\n                dataInicio: true,\n                dataFim: true,\n              },\n            },\n          },\n        },\n        criadoPorUsuario: {\n          select: {\n            id: true,\n            nome: true,\n          },\n        },\n      },\n    });\n\n    if (!lembrete) {\n      return NextResponse.json(\n        { erro: 'Lembrete não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar permissões\n    const podeVer = \n      ['ADMIN', 'GESTOR'].includes(session.user.papel) ||\n      lembrete.usuarioId === session.user.id ||\n      lembrete.avaliacao.avaliadorId === session.user.id;\n\n    if (!podeVer) {\n      return NextResponse.json(\n        { erro: 'Acesso negado' },\n        { status: 403 }\n      );\n    }\n\n    return NextResponse.json({\n      sucesso: true,\n      dados: lembrete,\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar lembrete:', error);\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PUT /api/lembretes/[id]\n * Atualiza um lembrete específico\n */\nexport async function PUT(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN e GESTOR)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem atualizar lembretes.' },\n        { status: 403 }\n      );\n    }\n\n    const { id } = params;\n\n    // Verificar se o lembrete existe\n    const lembreteExistente = await prisma.lembreteAgendado.findUnique({\n      where: { id },\n    });\n\n    if (!lembreteExistente) {\n      return NextResponse.json(\n        { erro: 'Lembrete não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Validar dados da requisição\n    const body = await request.json();\n    const dadosValidados = atualizarLembreteSchema.parse(body);\n\n    // Preparar dados para atualização\n    const dadosAtualizacao: any = {\n      atualizadoEm: new Date(),\n      atualizadoPor: session.user.id,\n    };\n\n    if (dadosValidados.dataEnvio) {\n      dadosAtualizacao.dataEnvio = new Date(dadosValidados.dataEnvio);\n    }\n\n    if (dadosValidados.observacoes !== undefined) {\n      dadosAtualizacao.observacoes = dadosValidados.observacoes;\n    }\n\n    if (dadosValidados.enviado !== undefined) {\n      dadosAtualizacao.enviado = dadosValidados.enviado;\n      \n      // Se marcando como enviado, atualizar data de envio\n      if (dadosValidados.enviado && !lembreteExistente.enviado) {\n        dadosAtualizacao.dataEnvioReal = new Date();\n        dadosAtualizacao.tentativas = lembreteExistente.tentativas + 1;\n      }\n    }\n\n    if (dadosValidados.erro !== undefined) {\n      dadosAtualizacao.erro = dadosValidados.erro;\n      dadosAtualizacao.ultimaTentativa = new Date();\n      dadosAtualizacao.tentativas = lembreteExistente.tentativas + 1;\n    }\n\n    // Atualizar o lembrete\n    const lembreteAtualizado = await prisma.lembreteAgendado.update({\n      where: { id },\n      data: dadosAtualizacao,\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n          },\n        },\n        avaliacao: {\n          select: {\n            id: true,\n            prazo: true,\n            status: true,\n            avaliado: {\n              select: {\n                nome: true,\n                cargo: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    return NextResponse.json({\n      sucesso: true,\n      mensagem: 'Lembrete atualizado com sucesso',\n      dados: lembreteAtualizado,\n    });\n\n  } catch (error) {\n    console.error('Erro ao atualizar lembrete:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          erro: 'Dados inválidos',\n          detalhes: error.errors.map(e => `${e.path.join('.')}: ${e.message}`)\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/lembretes/[id]\n * Remove um lembrete específico\n */\nexport async function DELETE(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN e GESTOR)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem remover lembretes.' },\n        { status: 403 }\n      );\n    }\n\n    const { id } = params;\n\n    // Verificar se o lembrete existe\n    const lembreteExistente = await prisma.lembreteAgendado.findUnique({\n      where: { id },\n      include: {\n        avaliacao: {\n          select: {\n            id: true,\n            status: true,\n            avaliado: {\n              select: {\n                nome: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    if (!lembreteExistente) {\n      return NextResponse.json(\n        { erro: 'Lembrete não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o lembrete pode ser removido\n    if (lembreteExistente.enviado) {\n      return NextResponse.json(\n        { erro: 'Não é possível remover lembretes que já foram enviados' },\n        { status: 400 }\n      );\n    }\n\n    // Remover o lembrete\n    await prisma.lembreteAgendado.delete({\n      where: { id },\n    });\n\n    return NextResponse.json({\n      sucesso: true,\n      mensagem: 'Lembrete removido com sucesso',\n      dados: {\n        id: lembreteExistente.id,\n        avaliacaoId: lembreteExistente.avaliacaoId,\n        tipo: lembreteExistente.tipo,\n      },\n    });\n\n  } catch (error) {\n    console.error('Erro ao remover lembrete:', error);\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PATCH /api/lembretes/[id]\n * Executa ações específicas no lembrete (reenviar, marcar como enviado, etc.)\n */\nexport async function PATCH(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN e GESTOR)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem executar ações em lembretes.' },\n        { status: 403 }\n      );\n    }\n\n    const { id } = params;\n    const body = await request.json();\n    const { acao } = body;\n\n    // Verificar se o lembrete existe\n    const lembrete = await prisma.lembreteAgendado.findUnique({\n      where: { id },\n      include: {\n        avaliacao: {\n          include: {\n            avaliador: true,\n            avaliado: true,\n            periodo: true,\n          },\n        },\n      },\n    });\n\n    if (!lembrete) {\n      return NextResponse.json(\n        { erro: 'Lembrete não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    let resultado: any = {};\n\n    switch (acao) {\n      case 'reenviar':\n        // Implementar reenvio do lembrete\n        await prisma.lembreteAgendado.update({\n          where: { id },\n          data: {\n            tentativas: lembrete.tentativas + 1,\n            ultimaTentativa: new Date(),\n            erro: null,\n          },\n        });\n        \n        resultado = {\n          mensagem: 'Lembrete reagendado para reenvio',\n          acao: 'reenviar',\n        };\n        break;\n\n      case 'marcar_enviado':\n        if (lembrete.enviado) {\n          return NextResponse.json(\n            { erro: 'Lembrete já foi marcado como enviado' },\n            { status: 400 }\n          );\n        }\n        \n        await prisma.lembreteAgendado.update({\n          where: { id },\n          data: {\n            enviado: true,\n            dataEnvioReal: new Date(),\n            tentativas: lembrete.tentativas + 1,\n            erro: null,\n          },\n        });\n        \n        resultado = {\n          mensagem: 'Lembrete marcado como enviado',\n          acao: 'marcar_enviado',\n        };\n        break;\n\n      case 'reagendar':\n        const { novaData } = body;\n        if (!novaData) {\n          return NextResponse.json(\n            { erro: 'Nova data é obrigatória para reagendamento' },\n            { status: 400 }\n          );\n        }\n        \n        await prisma.lembreteAgendado.update({\n          where: { id },\n          data: {\n            dataEnvio: new Date(novaData),\n            enviado: false,\n            erro: null,\n          },\n        });\n        \n        resultado = {\n          mensagem: 'Lembrete reagendado com sucesso',\n          acao: 'reagendar',\n          novaData,\n        };\n        break;\n\n      default:\n        return NextResponse.json(\n          { erro: 'Ação não reconhecida' },\n          { status: 400 }\n        );\n    }\n\n    return NextResponse.json({\n      sucesso: true,\n      ...resultado,\n      dados: {\n        id: lembrete.id,\n        avaliacaoId: lembrete.avaliacaoId,\n        tipo: lembrete.tipo,\n      },\n    });\n\n  } catch (error) {\n    console.error('Erro ao executar ação no lembrete:', error);\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}