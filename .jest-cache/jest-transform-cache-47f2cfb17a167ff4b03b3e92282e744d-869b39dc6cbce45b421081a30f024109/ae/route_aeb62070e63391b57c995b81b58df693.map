{"version":3,"names":["POST","esquemaRedefinicaoSenha","cov_2ghbsfm9s6","s","_zod","z","object","token","string","min","novaSenha","request","f","body","json","parse","usuario","_prisma","prisma","findFirst","where","tokenRecuperacao","expiracaoTokenRecuperacao","gt","Date","b","_server","NextResponse","message","status","senhaHash","_bcryptjs","default","hash","update","id","data","senha","error","console","ZodError","errors"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\reset-password\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { prisma } from '@/lib/prisma';\nimport bcrypt from 'bcryptjs';\n\n// Schema de validação para redefinição de senha\nconst esquemaRedefinicaoSenha = z.object({\n  token: z.string().min(1, 'Token é obrigatório'),\n  novaSenha: z.string().min(6, 'A senha deve ter pelo menos 6 caracteres'),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validar entrada\n    const { token, novaSenha } = esquemaRedefinicaoSenha.parse(body);\n\n    // Verificar se o token existe e não expirou\n    const usuario = await prisma.usuario.findFirst({\n      where: {\n        tokenRecuperacao: token,\n        expiracaoTokenRecuperacao: {\n          gt: new Date(), // Token ainda não expirou\n        },\n      },\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { message: 'Token inválido ou expirado' },\n        { status: 400 }\n      );\n    }\n\n    // Hash da nova senha\n    const senhaHash = await bcrypt.hash(novaSenha, 12);\n\n    // Atualizar a senha e limpar o token de recuperação\n    await prisma.usuario.update({\n      where: { id: usuario.id },\n      data: {\n        senha: senhaHash,\n        tokenRecuperacao: null,\n        expiracaoTokenRecuperacao: null,\n      },\n    });\n\n    return NextResponse.json(\n      { message: 'Senha redefinida com sucesso' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Erro na redefinição de senha:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { message: 'Dados inválidos', errors: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { message: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}