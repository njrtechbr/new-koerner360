{"version":3,"names":["cov_10nfwo81fi","actualCoverage","s","checkDatabaseConnection","f","default","_default","disconnect","executeWithMonitoring","getConnectionPoolStats","performHealthCheck","prisma","configValidation","_databaseconfig","validateDatabaseConfig","valid","b","console","error","errors","Error","join","connectionMonitor","globalThis","process","env","NODE_ENV","createConnectionPoolMonitor","_prisma","PrismaClient","log","getLogConfig","errorFormat","datasources","db","url","buildDatabaseUrl","$disconnect","startTime","Date","now","$queryRaw","duration","success","message","timestamp","toISOString","getStats","environment","healthCheck","database","connectionPool","queryFn","queryName","result","warn"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\prisma.ts"],"sourcesContent":["import { PrismaClient } from '../generated/prisma';\nimport {\n  buildDatabaseUrl,\n  getLogConfig,\n  createConnectionPoolMonitor,\n  validateDatabaseConfig,\n} from './database-config';\n\n// Declara√ß√£o global para evitar m√∫ltiplas inst√¢ncias em desenvolvimento\ndeclare global {\n  var prisma: PrismaClient | undefined;\n  var connectionMonitor:\n    | ReturnType<typeof createConnectionPoolMonitor>\n    | undefined;\n}\n\n// Validar configura√ß√µes antes de inicializar\nconst configValidation = validateDatabaseConfig();\nif (!configValidation.valid) {\n  console.error('‚ùå Configura√ß√£o de banco inv√°lida:', configValidation.errors);\n  throw new Error(\n    `Configura√ß√£o de banco inv√°lida: ${configValidation.errors.join(', ')}`\n  );\n}\n\n// Monitor de conex√µes (apenas em desenvolvimento)\nconst connectionMonitor =\n  globalThis.connectionMonitor ||\n  (process.env.NODE_ENV === 'development'\n    ? createConnectionPoolMonitor()\n    : null);\n\nif (process.env.NODE_ENV === 'development') {\n  globalThis.connectionMonitor = connectionMonitor;\n}\n\n// Configura√ß√£o do cliente Prisma com otimiza√ß√µes e connection pooling\nconst prisma =\n  globalThis.prisma ||\n  new PrismaClient({\n    log: getLogConfig() as any,\n    errorFormat: 'pretty',\n    datasources: {\n      db: {\n        url: buildDatabaseUrl(),\n      },\n    },\n  });\n\n// Em desenvolvimento, reutilizar a inst√¢ncia para evitar m√∫ltiplas conex√µes\nif (process.env.NODE_ENV === 'development') {\n  globalThis.prisma = prisma;\n}\n\n// Exportar o cliente como padr√£o e nomeado\nexport default prisma;\nexport { prisma };\n\n// Fun√ß√£o para desconectar do banco\nexport const disconnect = async () => {\n  try {\n    await prisma.$disconnect();\n    console.log('üîå Desconectado do banco de dados com sucesso');\n  } catch (error) {\n    console.error('‚ùå Erro ao desconectar do banco:', error);\n  }\n};\n\n// Fun√ß√£o para verificar a conex√£o com o banco\nexport const checkDatabaseConnection = async () => {\n  try {\n    const startTime = Date.now();\n    await prisma.$queryRaw`SELECT 1 as connection_test`;\n    const duration = Date.now() - startTime;\n\n    return {\n      success: true,\n      message: 'Conex√£o com o banco de dados estabelecida com sucesso',\n      duration: `${duration}ms`,\n      timestamp: new Date().toISOString(),\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Erro ao conectar com o banco de dados',\n      error: error instanceof Error ? error.message : 'Erro desconhecido',\n      timestamp: new Date().toISOString(),\n    };\n  }\n};\n\n// Fun√ß√£o para obter estat√≠sticas do pool de conex√µes\nexport const getConnectionPoolStats = () => {\n  if (connectionMonitor) {\n    return connectionMonitor.getStats();\n  }\n\n  return {\n    message: 'Monitor de conex√µes n√£o dispon√≠vel neste ambiente',\n    environment: process.env.NODE_ENV || 'unknown',\n  };\n};\n\n// Fun√ß√£o para executar health check completo\nexport const performHealthCheck = async () => {\n  const healthCheck = {\n    database: await checkDatabaseConnection(),\n    connectionPool: getConnectionPoolStats(),\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV || 'development',\n  };\n\n  return healthCheck;\n};\n\n// Fun√ß√£o para executar query com monitoramento de performance\nexport const executeWithMonitoring = async <T>(\n  queryFn: () => Promise<T>,\n  queryName: string = 'unknown'\n): Promise<{ result: T; duration: number; queryName: string }> => {\n  const startTime = Date.now();\n\n  try {\n    const result = await queryFn();\n    const duration = Date.now() - startTime;\n\n    if (process.env.NODE_ENV === 'development' && duration > 1000) {\n      console.warn(`üêå Query lenta detectada: ${queryName} (${duration}ms)`);\n    }\n\n    return { result, duration, queryName };\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    console.error(`‚ùå Erro na query: ${queryName} (${duration}ms)`, error);\n    throw error;\n  }\n};\n"],"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","ignoreList":[]}