a8364d5c36008f322386adc66908e2c5
"use strict";

/* istanbul ignore next */
function cov_10nfwo81fi() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\prisma.ts";
  var hash = "d28b1e8200d3b6b16bc2e6b5071f5d09e13e07e8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\prisma.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 39
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 24
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 26
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 37
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 34
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "11": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 46
        }
      },
      "12": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 36,
          column: 52
        }
      },
      "13": {
        start: {
          line: 38,
          column: 25
        },
        end: {
          line: 38,
          column: 70
        }
      },
      "14": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 42,
          column: 1
        }
      },
      "15": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 80
        }
      },
      "16": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 93
        }
      },
      "17": {
        start: {
          line: 44,
          column: 26
        },
        end: {
          line: 44,
          column: 158
        }
      },
      "18": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 47,
          column: 1
        }
      },
      "19": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 53
        }
      },
      "20": {
        start: {
          line: 49,
          column: 15
        },
        end: {
          line: 57,
          column: 2
        }
      },
      "21": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 61,
          column: 1
        }
      },
      "22": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 31
        }
      },
      "23": {
        start: {
          line: 62,
          column: 17
        },
        end: {
          line: 62,
          column: 23
        }
      },
      "24": {
        start: {
          line: 63,
          column: 19
        },
        end: {
          line: 70,
          column: 1
        }
      },
      "25": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "26": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 35
        }
      },
      "27": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 69
        }
      },
      "28": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 64
        }
      },
      "29": {
        start: {
          line: 71,
          column: 32
        },
        end: {
          line: 90,
          column: 1
        }
      },
      "30": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "31": {
        start: {
          line: 73,
          column: 26
        },
        end: {
          line: 73,
          column: 36
        }
      },
      "32": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 60
        }
      },
      "33": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 75,
          column: 47
        }
      },
      "34": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "35": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 88,
          column: 10
        }
      },
      "36": {
        start: {
          line: 91,
          column: 31
        },
        end: {
          line: 99,
          column: 1
        }
      },
      "37": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 94,
          column: 5
        }
      },
      "38": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 44
        }
      },
      "39": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 98,
          column: 6
        }
      },
      "40": {
        start: {
          line: 100,
          column: 27
        },
        end: {
          line: 108,
          column: 1
        }
      },
      "41": {
        start: {
          line: 101,
          column: 24
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "42": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 23
        }
      },
      "43": {
        start: {
          line: 109,
          column: 30
        },
        end: {
          line: 127,
          column: 1
        }
      },
      "44": {
        start: {
          line: 110,
          column: 22
        },
        end: {
          line: 110,
          column: 32
        }
      },
      "45": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "46": {
        start: {
          line: 112,
          column: 23
        },
        end: {
          line: 112,
          column: 38
        }
      },
      "47": {
        start: {
          line: 113,
          column: 25
        },
        end: {
          line: 113,
          column: 47
        }
      },
      "48": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "49": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 83
        }
      },
      "50": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 121,
          column: 10
        }
      },
      "51": {
        start: {
          line: 123,
          column: 25
        },
        end: {
          line: 123,
          column: 47
        }
      },
      "52": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 78
        }
      },
      "53": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 35
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 22
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 34
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 30
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 18
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 63,
            column: 19
          },
          end: {
            line: 63,
            column: 20
          }
        },
        loc: {
          start: {
            line: 63,
            column: 29
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 63
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 71,
            column: 32
          },
          end: {
            line: 71,
            column: 33
          }
        },
        loc: {
          start: {
            line: 71,
            column: 42
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 71
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 91,
            column: 31
          },
          end: {
            line: 91,
            column: 32
          }
        },
        loc: {
          start: {
            line: 91,
            column: 35
          },
          end: {
            line: 99,
            column: 1
          }
        },
        line: 91
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 100,
            column: 27
          },
          end: {
            line: 100,
            column: 28
          }
        },
        loc: {
          start: {
            line: 100,
            column: 37
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 100
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 109,
            column: 30
          },
          end: {
            line: 109,
            column: 31
          }
        },
        loc: {
          start: {
            line: 109,
            column: 70
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 109
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 0
          },
          end: {
            line: 42,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 0
          },
          end: {
            line: 42,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 26
          },
          end: {
            line: 44,
            column: 158
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 26
          },
          end: {
            line: 44,
            column: 54
          }
        }, {
          start: {
            line: 44,
            column: 59
          },
          end: {
            line: 44,
            column: 157
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 59
          },
          end: {
            line: 44,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 100
          },
          end: {
            line: 44,
            column: 150
          }
        }, {
          start: {
            line: 44,
            column: 153
          },
          end: {
            line: 44,
            column: 157
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 0
          },
          end: {
            line: 47,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 0
          },
          end: {
            line: 47,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 15
          },
          end: {
            line: 57,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 15
          },
          end: {
            line: 49,
            column: 32
          }
        }, {
          start: {
            line: 49,
            column: 36
          },
          end: {
            line: 57,
            column: 2
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 0
          },
          end: {
            line: 61,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 0
          },
          end: {
            line: 61,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 19
          },
          end: {
            line: 86,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 44
          },
          end: {
            line: 86,
            column: 57
          }
        }, {
          start: {
            line: 86,
            column: 60
          },
          end: {
            line: 86,
            column: 79
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 97,
            column: 21
          },
          end: {
            line: 97,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 21
          },
          end: {
            line: 97,
            column: 41
          }
        }, {
          start: {
            line: 97,
            column: 45
          },
          end: {
            line: 97,
            column: 54
          }
        }],
        line: 97
      },
      "9": {
        loc: {
          start: {
            line: 105,
            column: 21
          },
          end: {
            line: 105,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 21
          },
          end: {
            line: 105,
            column: 41
          }
        }, {
          start: {
            line: 105,
            column: 45
          },
          end: {
            line: 105,
            column: 58
          }
        }],
        line: 105
      },
      "10": {
        loc: {
          start: {
            line: 109,
            column: 46
          },
          end: {
            line: 109,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 109,
            column: 58
          },
          end: {
            line: 109,
            column: 67
          }
        }],
        line: 109
      },
      "11": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "12": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 50
          }
        }, {
          start: {
            line: 114,
            column: 54
          },
          end: {
            line: 114,
            column: 69
          }
        }],
        line: 114
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\prisma.ts"],
      sourcesContent: ["import { PrismaClient } from '../generated/prisma';\nimport {\n  buildDatabaseUrl,\n  getLogConfig,\n  createConnectionPoolMonitor,\n  validateDatabaseConfig,\n} from './database-config';\n\n// Declara\xE7\xE3o global para evitar m\xFAltiplas inst\xE2ncias em desenvolvimento\ndeclare global {\n  var prisma: PrismaClient | undefined;\n  var connectionMonitor:\n    | ReturnType<typeof createConnectionPoolMonitor>\n    | undefined;\n}\n\n// Validar configura\xE7\xF5es antes de inicializar\nconst configValidation = validateDatabaseConfig();\nif (!configValidation.valid) {\n  console.error('\u274C Configura\xE7\xE3o de banco inv\xE1lida:', configValidation.errors);\n  throw new Error(\n    `Configura\xE7\xE3o de banco inv\xE1lida: ${configValidation.errors.join(', ')}`\n  );\n}\n\n// Monitor de conex\xF5es (apenas em desenvolvimento)\nconst connectionMonitor =\n  globalThis.connectionMonitor ||\n  (process.env.NODE_ENV === 'development'\n    ? createConnectionPoolMonitor()\n    : null);\n\nif (process.env.NODE_ENV === 'development') {\n  globalThis.connectionMonitor = connectionMonitor;\n}\n\n// Configura\xE7\xE3o do cliente Prisma com otimiza\xE7\xF5es e connection pooling\nconst prisma =\n  globalThis.prisma ||\n  new PrismaClient({\n    log: getLogConfig() as any,\n    errorFormat: 'pretty',\n    datasources: {\n      db: {\n        url: buildDatabaseUrl(),\n      },\n    },\n  });\n\n// Em desenvolvimento, reutilizar a inst\xE2ncia para evitar m\xFAltiplas conex\xF5es\nif (process.env.NODE_ENV === 'development') {\n  globalThis.prisma = prisma;\n}\n\n// Exportar o cliente como padr\xE3o e nomeado\nexport default prisma;\nexport { prisma };\n\n// Fun\xE7\xE3o para desconectar do banco\nexport const disconnect = async () => {\n  try {\n    await prisma.$disconnect();\n    console.log('\uD83D\uDD0C Desconectado do banco de dados com sucesso');\n  } catch (error) {\n    console.error('\u274C Erro ao desconectar do banco:', error);\n  }\n};\n\n// Fun\xE7\xE3o para verificar a conex\xE3o com o banco\nexport const checkDatabaseConnection = async () => {\n  try {\n    const startTime = Date.now();\n    await prisma.$queryRaw`SELECT 1 as connection_test`;\n    const duration = Date.now() - startTime;\n\n    return {\n      success: true,\n      message: 'Conex\xE3o com o banco de dados estabelecida com sucesso',\n      duration: `${duration}ms`,\n      timestamp: new Date().toISOString(),\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Erro ao conectar com o banco de dados',\n      error: error instanceof Error ? error.message : 'Erro desconhecido',\n      timestamp: new Date().toISOString(),\n    };\n  }\n};\n\n// Fun\xE7\xE3o para obter estat\xEDsticas do pool de conex\xF5es\nexport const getConnectionPoolStats = () => {\n  if (connectionMonitor) {\n    return connectionMonitor.getStats();\n  }\n\n  return {\n    message: 'Monitor de conex\xF5es n\xE3o dispon\xEDvel neste ambiente',\n    environment: process.env.NODE_ENV || 'unknown',\n  };\n};\n\n// Fun\xE7\xE3o para executar health check completo\nexport const performHealthCheck = async () => {\n  const healthCheck = {\n    database: await checkDatabaseConnection(),\n    connectionPool: getConnectionPoolStats(),\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV || 'development',\n  };\n\n  return healthCheck;\n};\n\n// Fun\xE7\xE3o para executar query com monitoramento de performance\nexport const executeWithMonitoring = async <T>(\n  queryFn: () => Promise<T>,\n  queryName: string = 'unknown'\n): Promise<{ result: T; duration: number; queryName: string }> => {\n  const startTime = Date.now();\n\n  try {\n    const result = await queryFn();\n    const duration = Date.now() - startTime;\n\n    if (process.env.NODE_ENV === 'development' && duration > 1000) {\n      console.warn(`\uD83D\uDC0C Query lenta detectada: ${queryName} (${duration}ms)`);\n    }\n\n    return { result, duration, queryName };\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    console.error(`\u274C Erro na query: ${queryName} (${duration}ms)`, error);\n    throw error;\n  }\n};\n"],
      names: ["checkDatabaseConnection", "disconnect", "executeWithMonitoring", "getConnectionPoolStats", "performHealthCheck", "prisma", "configValidation", "validateDatabaseConfig", "valid", "console", "error", "errors", "Error", "join", "connectionMonitor", "globalThis", "process", "env", "NODE_ENV", "createConnectionPoolMonitor", "PrismaClient", "log", "getLogConfig", "errorFormat", "datasources", "db", "url", "buildDatabaseUrl", "$disconnect", "startTime", "Date", "now", "$queryRaw", "duration", "success", "message", "timestamp", "toISOString", "getStats", "environment", "healthCheck", "database", "connectionPool", "queryFn", "queryName", "result", "warn"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d28b1e8200d3b6b16bc2e6b5071f5d09e13e07e8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10nfwo81fi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10nfwo81fi();
cov_10nfwo81fi().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_10nfwo81fi().f[0]++;
  cov_10nfwo81fi().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_10nfwo81fi().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_10nfwo81fi().s[3]++;
_export(exports, {
  get checkDatabaseConnection() {
    /* istanbul ignore next */
    cov_10nfwo81fi().f[1]++;
    cov_10nfwo81fi().s[4]++;
    return checkDatabaseConnection;
  },
  get
  // Exportar o cliente como padrão e nomeado
  default() {
    /* istanbul ignore next */
    cov_10nfwo81fi().f[2]++;
    cov_10nfwo81fi().s[5]++;
    return _default;
  },
  get disconnect() {
    /* istanbul ignore next */
    cov_10nfwo81fi().f[3]++;
    cov_10nfwo81fi().s[6]++;
    return disconnect;
  },
  get executeWithMonitoring() {
    /* istanbul ignore next */
    cov_10nfwo81fi().f[4]++;
    cov_10nfwo81fi().s[7]++;
    return executeWithMonitoring;
  },
  get getConnectionPoolStats() {
    /* istanbul ignore next */
    cov_10nfwo81fi().f[5]++;
    cov_10nfwo81fi().s[8]++;
    return getConnectionPoolStats;
  },
  get performHealthCheck() {
    /* istanbul ignore next */
    cov_10nfwo81fi().f[6]++;
    cov_10nfwo81fi().s[9]++;
    return performHealthCheck;
  },
  get prisma() {
    /* istanbul ignore next */
    cov_10nfwo81fi().f[7]++;
    cov_10nfwo81fi().s[10]++;
    return prisma;
  }
});
const _prisma =
/* istanbul ignore next */
(cov_10nfwo81fi().s[11]++, require("../generated/prisma"));
const _databaseconfig =
/* istanbul ignore next */
(cov_10nfwo81fi().s[12]++, require("./database-config"));
// Validar configurações antes de inicializar
const configValidation =
/* istanbul ignore next */
(cov_10nfwo81fi().s[13]++, (0, _databaseconfig.validateDatabaseConfig)());
/* istanbul ignore next */
cov_10nfwo81fi().s[14]++;
if (!configValidation.valid) {
  /* istanbul ignore next */
  cov_10nfwo81fi().b[0][0]++;
  cov_10nfwo81fi().s[15]++;
  console.error('❌ Configuração de banco inválida:', configValidation.errors);
  /* istanbul ignore next */
  cov_10nfwo81fi().s[16]++;
  throw new Error(`Configuração de banco inválida: ${configValidation.errors.join(', ')}`);
} else
/* istanbul ignore next */
{
  cov_10nfwo81fi().b[0][1]++;
}
// Monitor de conexões (apenas em desenvolvimento)
const connectionMonitor =
/* istanbul ignore next */
(cov_10nfwo81fi().s[17]++,
/* istanbul ignore next */
(cov_10nfwo81fi().b[1][0]++, globalThis.connectionMonitor) ||
/* istanbul ignore next */
(cov_10nfwo81fi().b[1][1]++, process.env.NODE_ENV === 'development' ?
/* istanbul ignore next */
(cov_10nfwo81fi().b[2][0]++, (0, _databaseconfig.createConnectionPoolMonitor)()) :
/* istanbul ignore next */
(cov_10nfwo81fi().b[2][1]++, null)));
/* istanbul ignore next */
cov_10nfwo81fi().s[18]++;
if (process.env.NODE_ENV === 'development') {
  /* istanbul ignore next */
  cov_10nfwo81fi().b[3][0]++;
  cov_10nfwo81fi().s[19]++;
  globalThis.connectionMonitor = connectionMonitor;
} else
/* istanbul ignore next */
{
  cov_10nfwo81fi().b[3][1]++;
}
// Configuração do cliente Prisma com otimizações e connection pooling
const prisma =
/* istanbul ignore next */
(cov_10nfwo81fi().s[20]++,
/* istanbul ignore next */
(cov_10nfwo81fi().b[4][0]++, globalThis.prisma) ||
/* istanbul ignore next */
(cov_10nfwo81fi().b[4][1]++, new _prisma.PrismaClient({
  log: (0, _databaseconfig.getLogConfig)(),
  errorFormat: 'pretty',
  datasources: {
    db: {
      url: (0, _databaseconfig.buildDatabaseUrl)()
    }
  }
})));
// Em desenvolvimento, reutilizar a instância para evitar múltiplas conexões
/* istanbul ignore next */
cov_10nfwo81fi().s[21]++;
if (process.env.NODE_ENV === 'development') {
  /* istanbul ignore next */
  cov_10nfwo81fi().b[5][0]++;
  cov_10nfwo81fi().s[22]++;
  globalThis.prisma = prisma;
} else
/* istanbul ignore next */
{
  cov_10nfwo81fi().b[5][1]++;
}
const _default =
/* istanbul ignore next */
(cov_10nfwo81fi().s[23]++, prisma);
/* istanbul ignore next */
cov_10nfwo81fi().s[24]++;
const disconnect = async () => {
  /* istanbul ignore next */
  cov_10nfwo81fi().f[8]++;
  cov_10nfwo81fi().s[25]++;
  try {
    /* istanbul ignore next */
    cov_10nfwo81fi().s[26]++;
    await prisma.$disconnect();
    /* istanbul ignore next */
    cov_10nfwo81fi().s[27]++;
    console.log('🔌 Desconectado do banco de dados com sucesso');
  } catch (error) {
    /* istanbul ignore next */
    cov_10nfwo81fi().s[28]++;
    console.error('❌ Erro ao desconectar do banco:', error);
  }
};
/* istanbul ignore next */
cov_10nfwo81fi().s[29]++;
const checkDatabaseConnection = async () => {
  /* istanbul ignore next */
  cov_10nfwo81fi().f[9]++;
  cov_10nfwo81fi().s[30]++;
  try {
    const startTime =
    /* istanbul ignore next */
    (cov_10nfwo81fi().s[31]++, Date.now());
    /* istanbul ignore next */
    cov_10nfwo81fi().s[32]++;
    await prisma.$queryRaw`SELECT 1 as connection_test`;
    const duration =
    /* istanbul ignore next */
    (cov_10nfwo81fi().s[33]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_10nfwo81fi().s[34]++;
    return {
      success: true,
      message: 'Conexão com o banco de dados estabelecida com sucesso',
      duration: `${duration}ms`,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_10nfwo81fi().s[35]++;
    return {
      success: false,
      message: 'Erro ao conectar com o banco de dados',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_10nfwo81fi().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_10nfwo81fi().b[6][1]++, 'Erro desconhecido'),
      timestamp: new Date().toISOString()
    };
  }
};
/* istanbul ignore next */
cov_10nfwo81fi().s[36]++;
const getConnectionPoolStats = () => {
  /* istanbul ignore next */
  cov_10nfwo81fi().f[10]++;
  cov_10nfwo81fi().s[37]++;
  if (connectionMonitor) {
    /* istanbul ignore next */
    cov_10nfwo81fi().b[7][0]++;
    cov_10nfwo81fi().s[38]++;
    return connectionMonitor.getStats();
  } else
  /* istanbul ignore next */
  {
    cov_10nfwo81fi().b[7][1]++;
  }
  cov_10nfwo81fi().s[39]++;
  return {
    message: 'Monitor de conexões não disponível neste ambiente',
    environment:
    /* istanbul ignore next */
    (cov_10nfwo81fi().b[8][0]++, process.env.NODE_ENV) ||
    /* istanbul ignore next */
    (cov_10nfwo81fi().b[8][1]++, 'unknown')
  };
};
/* istanbul ignore next */
cov_10nfwo81fi().s[40]++;
const performHealthCheck = async () => {
  /* istanbul ignore next */
  cov_10nfwo81fi().f[11]++;
  const healthCheck =
  /* istanbul ignore next */
  (cov_10nfwo81fi().s[41]++, {
    database: await checkDatabaseConnection(),
    connectionPool: getConnectionPoolStats(),
    timestamp: new Date().toISOString(),
    environment:
    /* istanbul ignore next */
    (cov_10nfwo81fi().b[9][0]++, process.env.NODE_ENV) ||
    /* istanbul ignore next */
    (cov_10nfwo81fi().b[9][1]++, 'development')
  });
  /* istanbul ignore next */
  cov_10nfwo81fi().s[42]++;
  return healthCheck;
};
/* istanbul ignore next */
cov_10nfwo81fi().s[43]++;
const executeWithMonitoring = async (queryFn, queryName =
/* istanbul ignore next */
(cov_10nfwo81fi().b[10][0]++, 'unknown')) => {
  /* istanbul ignore next */
  cov_10nfwo81fi().f[12]++;
  const startTime =
  /* istanbul ignore next */
  (cov_10nfwo81fi().s[44]++, Date.now());
  /* istanbul ignore next */
  cov_10nfwo81fi().s[45]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_10nfwo81fi().s[46]++, await queryFn());
    const duration =
    /* istanbul ignore next */
    (cov_10nfwo81fi().s[47]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_10nfwo81fi().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_10nfwo81fi().b[12][0]++, process.env.NODE_ENV === 'development') &&
    /* istanbul ignore next */
    (cov_10nfwo81fi().b[12][1]++, duration > 1000)) {
      /* istanbul ignore next */
      cov_10nfwo81fi().b[11][0]++;
      cov_10nfwo81fi().s[49]++;
      console.warn(`🐌 Query lenta detectada: ${queryName} (${duration}ms)`);
    } else
    /* istanbul ignore next */
    {
      cov_10nfwo81fi().b[11][1]++;
    }
    cov_10nfwo81fi().s[50]++;
    return {
      result,
      duration,
      queryName
    };
  } catch (error) {
    const duration =
    /* istanbul ignore next */
    (cov_10nfwo81fi().s[51]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_10nfwo81fi().s[52]++;
    console.error(`❌ Erro na query: ${queryName} (${duration}ms)`, error);
    /* istanbul ignore next */
    cov_10nfwo81fi().s[53]++;
    throw error;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTBuZndvODFmaSIsImFjdHVhbENvdmVyYWdlIiwicyIsImNoZWNrRGF0YWJhc2VDb25uZWN0aW9uIiwiZiIsImRlZmF1bHQiLCJfZGVmYXVsdCIsImRpc2Nvbm5lY3QiLCJleGVjdXRlV2l0aE1vbml0b3JpbmciLCJnZXRDb25uZWN0aW9uUG9vbFN0YXRzIiwicGVyZm9ybUhlYWx0aENoZWNrIiwicHJpc21hIiwiY29uZmlnVmFsaWRhdGlvbiIsIl9kYXRhYmFzZWNvbmZpZyIsInZhbGlkYXRlRGF0YWJhc2VDb25maWciLCJ2YWxpZCIsImIiLCJjb25zb2xlIiwiZXJyb3IiLCJlcnJvcnMiLCJFcnJvciIsImpvaW4iLCJjb25uZWN0aW9uTW9uaXRvciIsImdsb2JhbFRoaXMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJjcmVhdGVDb25uZWN0aW9uUG9vbE1vbml0b3IiLCJfcHJpc21hIiwiUHJpc21hQ2xpZW50IiwibG9nIiwiZ2V0TG9nQ29uZmlnIiwiZXJyb3JGb3JtYXQiLCJkYXRhc291cmNlcyIsImRiIiwidXJsIiwiYnVpbGREYXRhYmFzZVVybCIsIiRkaXNjb25uZWN0Iiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsIiRxdWVyeVJhdyIsImR1cmF0aW9uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJ0aW1lc3RhbXAiLCJ0b0lTT1N0cmluZyIsImdldFN0YXRzIiwiZW52aXJvbm1lbnQiLCJoZWFsdGhDaGVjayIsImRhdGFiYXNlIiwiY29ubmVjdGlvblBvb2wiLCJxdWVyeUZuIiwicXVlcnlOYW1lIiwicmVzdWx0Iiwid2FybiJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmVyZXUgSnJcXERvY3VtZW50c1xcRGV2XFxuZXdcXHNyY1xcbGliXFxwcmlzbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnLi4vZ2VuZXJhdGVkL3ByaXNtYSc7XG5pbXBvcnQge1xuICBidWlsZERhdGFiYXNlVXJsLFxuICBnZXRMb2dDb25maWcsXG4gIGNyZWF0ZUNvbm5lY3Rpb25Qb29sTW9uaXRvcixcbiAgdmFsaWRhdGVEYXRhYmFzZUNvbmZpZyxcbn0gZnJvbSAnLi9kYXRhYmFzZS1jb25maWcnO1xuXG4vLyBEZWNsYXJhw6fDo28gZ2xvYmFsIHBhcmEgZXZpdGFyIG3Dumx0aXBsYXMgaW5zdMOibmNpYXMgZW0gZGVzZW52b2x2aW1lbnRvXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZDtcbiAgdmFyIGNvbm5lY3Rpb25Nb25pdG9yOlxuICAgIHwgUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlQ29ubmVjdGlvblBvb2xNb25pdG9yPlxuICAgIHwgdW5kZWZpbmVkO1xufVxuXG4vLyBWYWxpZGFyIGNvbmZpZ3VyYcOnw7VlcyBhbnRlcyBkZSBpbmljaWFsaXphclxuY29uc3QgY29uZmlnVmFsaWRhdGlvbiA9IHZhbGlkYXRlRGF0YWJhc2VDb25maWcoKTtcbmlmICghY29uZmlnVmFsaWRhdGlvbi52YWxpZCkge1xuICBjb25zb2xlLmVycm9yKCfinYwgQ29uZmlndXJhw6fDo28gZGUgYmFuY28gaW52w6FsaWRhOicsIGNvbmZpZ1ZhbGlkYXRpb24uZXJyb3JzKTtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGBDb25maWd1cmHDp8OjbyBkZSBiYW5jbyBpbnbDoWxpZGE6ICR7Y29uZmlnVmFsaWRhdGlvbi5lcnJvcnMuam9pbignLCAnKX1gXG4gICk7XG59XG5cbi8vIE1vbml0b3IgZGUgY29uZXjDtWVzIChhcGVuYXMgZW0gZGVzZW52b2x2aW1lbnRvKVxuY29uc3QgY29ubmVjdGlvbk1vbml0b3IgPVxuICBnbG9iYWxUaGlzLmNvbm5lY3Rpb25Nb25pdG9yIHx8XG4gIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50J1xuICAgID8gY3JlYXRlQ29ubmVjdGlvblBvb2xNb25pdG9yKClcbiAgICA6IG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgZ2xvYmFsVGhpcy5jb25uZWN0aW9uTW9uaXRvciA9IGNvbm5lY3Rpb25Nb25pdG9yO1xufVxuXG4vLyBDb25maWd1cmHDp8OjbyBkbyBjbGllbnRlIFByaXNtYSBjb20gb3RpbWl6YcOnw7VlcyBlIGNvbm5lY3Rpb24gcG9vbGluZ1xuY29uc3QgcHJpc21hID1cbiAgZ2xvYmFsVGhpcy5wcmlzbWEgfHxcbiAgbmV3IFByaXNtYUNsaWVudCh7XG4gICAgbG9nOiBnZXRMb2dDb25maWcoKSBhcyBhbnksXG4gICAgZXJyb3JGb3JtYXQ6ICdwcmV0dHknLFxuICAgIGRhdGFzb3VyY2VzOiB7XG4gICAgICBkYjoge1xuICAgICAgICB1cmw6IGJ1aWxkRGF0YWJhc2VVcmwoKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG5cbi8vIEVtIGRlc2Vudm9sdmltZW50bywgcmV1dGlsaXphciBhIGluc3TDom5jaWEgcGFyYSBldml0YXIgbcO6bHRpcGxhcyBjb25leMO1ZXNcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICBnbG9iYWxUaGlzLnByaXNtYSA9IHByaXNtYTtcbn1cblxuLy8gRXhwb3J0YXIgbyBjbGllbnRlIGNvbW8gcGFkcsOjbyBlIG5vbWVhZG9cbmV4cG9ydCBkZWZhdWx0IHByaXNtYTtcbmV4cG9ydCB7IHByaXNtYSB9O1xuXG4vLyBGdW7Dp8OjbyBwYXJhIGRlc2NvbmVjdGFyIGRvIGJhbmNvXG5leHBvcnQgY29uc3QgZGlzY29ubmVjdCA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBwcmlzbWEuJGRpc2Nvbm5lY3QoKTtcbiAgICBjb25zb2xlLmxvZygn8J+UjCBEZXNjb25lY3RhZG8gZG8gYmFuY28gZGUgZGFkb3MgY29tIHN1Y2Vzc28nKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJybyBhbyBkZXNjb25lY3RhciBkbyBiYW5jbzonLCBlcnJvcik7XG4gIH1cbn07XG5cbi8vIEZ1bsOnw6NvIHBhcmEgdmVyaWZpY2FyIGEgY29uZXjDo28gY29tIG8gYmFuY29cbmV4cG9ydCBjb25zdCBjaGVja0RhdGFiYXNlQ29ubmVjdGlvbiA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGF3YWl0IHByaXNtYS4kcXVlcnlSYXdgU0VMRUNUIDEgYXMgY29ubmVjdGlvbl90ZXN0YDtcbiAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICdDb25leMOjbyBjb20gbyBiYW5jbyBkZSBkYWRvcyBlc3RhYmVsZWNpZGEgY29tIHN1Y2Vzc28nLFxuICAgICAgZHVyYXRpb246IGAke2R1cmF0aW9ufW1zYCxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJ0Vycm8gYW8gY29uZWN0YXIgY29tIG8gYmFuY28gZGUgZGFkb3MnLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0Vycm8gZGVzY29uaGVjaWRvJyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH07XG4gIH1cbn07XG5cbi8vIEZ1bsOnw6NvIHBhcmEgb2J0ZXIgZXN0YXTDrXN0aWNhcyBkbyBwb29sIGRlIGNvbmV4w7Vlc1xuZXhwb3J0IGNvbnN0IGdldENvbm5lY3Rpb25Qb29sU3RhdHMgPSAoKSA9PiB7XG4gIGlmIChjb25uZWN0aW9uTW9uaXRvcikge1xuICAgIHJldHVybiBjb25uZWN0aW9uTW9uaXRvci5nZXRTdGF0cygpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlOiAnTW9uaXRvciBkZSBjb25leMO1ZXMgbsOjbyBkaXNwb27DrXZlbCBuZXN0ZSBhbWJpZW50ZScsXG4gICAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICd1bmtub3duJyxcbiAgfTtcbn07XG5cbi8vIEZ1bsOnw6NvIHBhcmEgZXhlY3V0YXIgaGVhbHRoIGNoZWNrIGNvbXBsZXRvXG5leHBvcnQgY29uc3QgcGVyZm9ybUhlYWx0aENoZWNrID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBoZWFsdGhDaGVjayA9IHtcbiAgICBkYXRhYmFzZTogYXdhaXQgY2hlY2tEYXRhYmFzZUNvbm5lY3Rpb24oKSxcbiAgICBjb25uZWN0aW9uUG9vbDogZ2V0Q29ubmVjdGlvblBvb2xTdGF0cygpLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnLFxuICB9O1xuXG4gIHJldHVybiBoZWFsdGhDaGVjaztcbn07XG5cbi8vIEZ1bsOnw6NvIHBhcmEgZXhlY3V0YXIgcXVlcnkgY29tIG1vbml0b3JhbWVudG8gZGUgcGVyZm9ybWFuY2VcbmV4cG9ydCBjb25zdCBleGVjdXRlV2l0aE1vbml0b3JpbmcgPSBhc3luYyA8VD4oXG4gIHF1ZXJ5Rm46ICgpID0+IFByb21pc2U8VD4sXG4gIHF1ZXJ5TmFtZTogc3RyaW5nID0gJ3Vua25vd24nXG4pOiBQcm9taXNlPHsgcmVzdWx0OiBUOyBkdXJhdGlvbjogbnVtYmVyOyBxdWVyeU5hbWU6IHN0cmluZyB9PiA9PiB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBxdWVyeUZuKCk7XG4gICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnICYmIGR1cmF0aW9uID4gMTAwMCkge1xuICAgICAgY29uc29sZS53YXJuKGDwn5CMIFF1ZXJ5IGxlbnRhIGRldGVjdGFkYTogJHtxdWVyeU5hbWV9ICgke2R1cmF0aW9ufW1zKWApO1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlc3VsdCwgZHVyYXRpb24sIHF1ZXJ5TmFtZSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICBjb25zb2xlLmVycm9yKGDinYwgRXJybyBuYSBxdWVyeTogJHtxdWVyeU5hbWV9ICgke2R1cmF0aW9ufW1zKWAsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQXVEQTtJQUFBQSxjQUFBLFlB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