{"version":3,"names":["CONFIGURACOES_HISTORICO","cov_2n82wluqx4","f","s","MENSAGENS_ERRO_HISTORICO","buscarHistoricoSchema","consultaHistoricoGeralSchema","consultaHistoricoSchema","criarHistoricoSchema","estatisticasHistoricoSchema","idHistoricoSchema","listarHistoricoSchema","tipoAlteracaoSchema","validacaoHistorico","validacaoHistoricoCustomizada","_zod","z","string","cuid","enum","object","atendenteId","tipo","campo","max","optional","valorAnterior","valorNovo","descricao","min","ip","userAgent","pagina","number","int","positive","default","limite","dataInicio","date","dataFim","criadoPorId","ordenacao","refine","data","b","message","termo","campos","array","agruparPor","_index","validacaoUtils","paginaSchema","limiteSchema","busca","datetime","inicio","Date","fim","HISTORICO_NAO_ENCONTRADO","ATENDENTE_NAO_ENCONTRADO","DADOS_INVALIDOS","SEM_PERMISSAO","PERIODO_INVALIDO","LIMITE_EXCEDIDO","ERRO_INTERNO","CAMPO_OBRIGATORIO","FORMATO_DATA_INVALIDO","TERMO_BUSCA_MUITO_CURTO","TERMO_BUSCA_MUITO_LONGO","LIMITE_MAXIMO_REGISTROS","LIMITE_PADRAO_REGISTROS","LIMITE_MAXIMO_BUSCA","LIMITE_PADRAO_BUSCA","TAMANHO_MAXIMO_DESCRICAO","TAMANHO_MAXIMO_CAMPO","TAMANHO_MAXIMO_VALOR","TAMANHO_MAXIMO_USER_AGENT","DIAS_RETENCAO_HISTORICO","TIPOS_ALTERACAO_CRITICOS","ehAlteracaoCritica","includes","formatarDadosHistorico","dados","JSON","stringify","String","validarPeriodoConsulta","agora","umAnoAtras","setFullYear","getFullYear","gerarDescricaoAutomatica","descricoes","CRIACAO","ATUALIZACAO","EXCLUSAO","ATIVACAO","DESATIVACAO","MUDANCA_STATUS","UPLOAD_DOCUMENTO","REMOCAO_DOCUMENTO","podeAcessarHistorico","tipoUsuario","usuarioId","calcularEstatisticas","historico","estatisticas","forEach","item","sanitizarDadosHistorico","parse","dadosSanitizados","camposSensiveis","validarEntradaHistorico","erros","length","push","valido"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\historico-atendentes.ts"],"sourcesContent":["import { z } from 'zod';\nimport { validacaoUtils } from './index';\n\n/**\n * Schema para validação de ID de histórico\n */\nexport const idHistoricoSchema = z\n  .string()\n  .cuid('ID do histórico deve ser um CUID válido');\n\n/**\n * Schema para tipos de alteração no histórico\n */\nexport const tipoAlteracaoSchema = z.enum([\n  'CRIACAO',\n  'ATUALIZACAO',\n  'EXCLUSAO',\n  'ATIVACAO',\n  'DESATIVACAO',\n  'MUDANCA_STATUS',\n  'UPLOAD_DOCUMENTO',\n  'REMOCAO_DOCUMENTO',\n]);\n\n/**\n * Schema para criar entrada no histórico\n */\nexport const criarHistoricoSchema = z.object({\n  atendenteId: z.string().cuid('ID do atendente deve ser um CUID válido'),\n  tipo: tipoAlteracaoSchema,\n  campo: z\n    .string()\n    .max(100, 'Campo deve ter no máximo 100 caracteres')\n    .optional(),\n  valorAnterior: z\n    .string()\n    .max(2000, 'Valor anterior deve ter no máximo 2000 caracteres')\n    .optional(),\n  valorNovo: z\n    .string()\n    .max(2000, 'Valor novo deve ter no máximo 2000 caracteres')\n    .optional(),\n  descricao: z\n    .string()\n    .min(1, 'Descrição é obrigatória')\n    .max(500, 'Descrição deve ter no máximo 500 caracteres'),\n  ip: z.string().ip('IP deve ser válido').optional(),\n  userAgent: z\n    .string()\n    .max(500, 'User Agent deve ter no máximo 500 caracteres')\n    .optional(),\n});\n\n/**\n * Schema para listar histórico com filtros\n */\nexport const listarHistoricoSchema = z\n  .object({\n    pagina: z\n      .number()\n      .int()\n      .positive('Página deve ser um número positivo')\n      .default(1),\n    limite: z\n      .number()\n      .int()\n      .positive('Limite deve ser um número positivo')\n      .max(100, 'Limite máximo é 100')\n      .default(20),\n    tipo: tipoAlteracaoSchema.optional(),\n    campo: z\n      .string()\n      .max(100, 'Campo deve ter no máximo 100 caracteres')\n      .optional(),\n    dataInicio: z.date('Data de início deve ser uma data válida').optional(),\n    dataFim: z.date('Data de fim deve ser uma data válida').optional(),\n    criadoPorId: z\n      .string()\n      .cuid('ID do usuário deve ser um CUID válido')\n      .optional(),\n    ordenacao: z.enum(['asc', 'desc']).default('desc'),\n  })\n  .refine(\n    data => {\n      if (data.dataInicio && data.dataFim) {\n        return data.dataInicio <= data.dataFim;\n      }\n      return true;\n    },\n    {\n      message: 'Data de início deve ser anterior ou igual à data de fim',\n    }\n  );\n\n/**\n * Schema para buscar no histórico\n */\nexport const buscarHistoricoSchema = z.object({\n  termo: z\n    .string()\n    .min(1, 'Termo de busca é obrigatório')\n    .max(100, 'Termo deve ter no máximo 100 caracteres'),\n  campos: z\n    .array(z.enum(['descricao', 'campo', 'valorAnterior', 'valorNovo']))\n    .default(['descricao']),\n  pagina: z\n    .number()\n    .int()\n    .positive('Página deve ser um número positivo')\n    .default(1),\n  limite: z\n    .number()\n    .int()\n    .positive('Limite deve ser um número positivo')\n    .max(50, 'Limite máximo é 50')\n    .default(10),\n});\n\n/**\n * Schema para estatísticas do histórico\n */\nexport const estatisticasHistoricoSchema = z\n  .object({\n    dataInicio: z.date('Data de início deve ser uma data válida').optional(),\n    dataFim: z.date('Data de fim deve ser uma data válida').optional(),\n    agruparPor: z.enum(['tipo', 'campo', 'usuario', 'data']).default('tipo'),\n  })\n  .refine(\n    data => {\n      if (data.dataInicio && data.dataFim) {\n        return data.dataInicio <= data.dataFim;\n      }\n      return true;\n    },\n    {\n      message: 'Data de início deve ser anterior ou igual à data de fim',\n    }\n  );\n\n/**\n * Schema para consulta do histórico geral de atendentes\n */\nexport const consultaHistoricoGeralSchema = z\n  .object({\n    pagina: validacaoUtils.paginaSchema,\n    limite: validacaoUtils.limiteSchema,\n    busca: z\n      .string()\n      .max(100, 'Busca deve ter no máximo 100 caracteres')\n      .optional(),\n    atendenteId: z\n      .string()\n      .cuid('ID do atendente deve ser um CUID válido')\n      .optional(),\n    tipo: tipoAlteracaoSchema.optional(),\n    dataInicio: z\n      .string()\n      .datetime('Data de início deve ser uma data válida')\n      .optional(),\n    dataFim: z\n      .string()\n      .datetime('Data de fim deve ser uma data válida')\n      .optional(),\n    criadoPorId: z\n      .string()\n      .cuid('ID do usuário deve ser um CUID válido')\n      .optional(),\n  })\n  .refine(\n    data => {\n      if (data.dataInicio && data.dataFim) {\n        const inicio = new Date(data.dataInicio);\n        const fim = new Date(data.dataFim);\n        return inicio <= fim;\n      }\n      return true;\n    },\n    {\n      message: 'Data de início deve ser anterior ou igual à data de fim',\n    }\n  );\n\n/**\n * Schema para consulta do histórico individual de atendente\n */\nexport const consultaHistoricoSchema = z\n  .object({\n    pagina: validacaoUtils.paginaSchema,\n    limite: validacaoUtils.limiteSchema,\n    tipo: tipoAlteracaoSchema.optional(),\n    dataInicio: z\n      .string()\n      .datetime('Data de início deve ser uma data válida')\n      .optional(),\n    dataFim: z\n      .string()\n      .datetime('Data de fim deve ser uma data válida')\n      .optional(),\n    criadoPorId: z\n      .string()\n      .cuid('ID do usuário deve ser um CUID válido')\n      .optional(),\n  })\n  .refine(\n    data => {\n      if (data.dataInicio && data.dataFim) {\n        const inicio = new Date(data.dataInicio);\n        const fim = new Date(data.dataFim);\n        return inicio <= fim;\n      }\n      return true;\n    },\n    {\n      message: 'Data de início deve ser anterior ou igual à data de fim',\n    }\n  );\n\n/**\n * Tipos TypeScript derivados dos schemas\n */\nexport type TipoAlteracao = z.infer<typeof tipoAlteracaoSchema>;\nexport type CriarHistoricoInput = z.infer<typeof criarHistoricoSchema>;\nexport type ListarHistoricoInput = z.infer<typeof listarHistoricoSchema>;\nexport type BuscarHistoricoInput = z.infer<typeof buscarHistoricoSchema>;\nexport type EstatisticasHistoricoInput = z.infer<\n  typeof estatisticasHistoricoSchema\n>;\nexport type ConsultaHistoricoGeralInput = z.infer<\n  typeof consultaHistoricoGeralSchema\n>;\nexport type ConsultaHistoricoInput = z.infer<typeof consultaHistoricoSchema>;\n\n/**\n * Mensagens de erro específicas para histórico\n */\nexport const MENSAGENS_ERRO_HISTORICO = {\n  HISTORICO_NAO_ENCONTRADO: 'Histórico não encontrado',\n  ATENDENTE_NAO_ENCONTRADO: 'Atendente não encontrado para o histórico',\n  DADOS_INVALIDOS: 'Dados fornecidos são inválidos',\n  SEM_PERMISSAO: 'Sem permissão para acessar o histórico',\n  PERIODO_INVALIDO: 'Período de consulta inválido',\n  LIMITE_EXCEDIDO: 'Limite de registros excedido',\n  ERRO_INTERNO: 'Erro interno do servidor',\n  CAMPO_OBRIGATORIO: 'Campo obrigatório não informado',\n  FORMATO_DATA_INVALIDO: 'Formato de data inválido',\n  TERMO_BUSCA_MUITO_CURTO: 'Termo de busca deve ter pelo menos 1 caractere',\n  TERMO_BUSCA_MUITO_LONGO: 'Termo de busca deve ter no máximo 100 caracteres',\n} as const;\n\n/**\n * Configurações para histórico\n */\nexport const CONFIGURACOES_HISTORICO = {\n  LIMITE_MAXIMO_REGISTROS: 100,\n  LIMITE_PADRAO_REGISTROS: 20,\n  LIMITE_MAXIMO_BUSCA: 50,\n  LIMITE_PADRAO_BUSCA: 10,\n  TAMANHO_MAXIMO_DESCRICAO: 500,\n  TAMANHO_MAXIMO_CAMPO: 100,\n  TAMANHO_MAXIMO_VALOR: 2000,\n  TAMANHO_MAXIMO_USER_AGENT: 500,\n  DIAS_RETENCAO_HISTORICO: 365 * 2, // 2 anos\n  TIPOS_ALTERACAO_CRITICOS: ['EXCLUSAO', 'DESATIVACAO'] as TipoAlteracao[],\n} as const;\n\n/**\n * Utilitários de validação específicos para histórico\n */\nexport const validacaoHistorico = {\n  /**\n   * Valida se o tipo de alteração é crítico\n   */\n  ehAlteracaoCritica: (tipo: TipoAlteracao): boolean => {\n    return CONFIGURACOES_HISTORICO.TIPOS_ALTERACAO_CRITICOS.includes(tipo);\n  },\n\n  /**\n   * Formata dados para o histórico\n   */\n  formatarDadosHistorico: (dados: any): string => {\n    try {\n      return JSON.stringify(dados, null, 0);\n    } catch {\n      return String(dados);\n    }\n  },\n\n  /**\n   * Valida se o período de consulta é válido\n   */\n  validarPeriodoConsulta: (dataInicio?: Date, dataFim?: Date): boolean => {\n    if (!dataInicio || !dataFim) return true;\n\n    const agora = new Date();\n    const umAnoAtras = new Date();\n    umAnoAtras.setFullYear(agora.getFullYear() - 1);\n\n    // Não permitir consultas muito antigas (mais de 1 ano)\n    if (dataInicio < umAnoAtras) return false;\n\n    // Não permitir datas futuras\n    if (dataInicio > agora || dataFim > agora) return false;\n\n    return dataInicio <= dataFim;\n  },\n\n  /**\n   * Gera descrição automática baseada no tipo de alteração\n   */\n  gerarDescricaoAutomatica: (\n    tipo: TipoAlteracao,\n    campo?: string,\n    valorAnterior?: string,\n    valorNovo?: string\n  ): string => {\n    const descricoes: Record<TipoAlteracao, string> = {\n      CRIACAO: 'Atendente criado no sistema',\n      ATUALIZACAO: campo\n        ? `Campo '${campo}' atualizado`\n        : 'Dados do atendente atualizados',\n      EXCLUSAO: 'Atendente removido do sistema',\n      ATIVACAO: 'Atendente ativado',\n      DESATIVACAO: 'Atendente desativado',\n      MUDANCA_STATUS: `Status alterado${valorAnterior && valorNovo ? ` de '${valorAnterior}' para '${valorNovo}'` : ''}`,\n      UPLOAD_DOCUMENTO: 'Documento adicionado',\n      REMOCAO_DOCUMENTO: 'Documento removido',\n    };\n\n    return descricoes[tipo] || 'Alteração realizada';\n  },\n\n  /**\n   * Valida se o usuário pode acessar o histórico\n   */\n  podeAcessarHistorico: (\n    tipoUsuario: string,\n    atendenteId: string,\n    usuarioId: string\n  ): boolean => {\n    // ADMIN e GERENTE podem ver qualquer histórico\n    if (['ADMIN', 'GERENTE'].includes(tipoUsuario)) {\n      return true;\n    }\n\n    // ATENDENTE só pode ver seu próprio histórico\n    if (tipoUsuario === 'ATENDENTE') {\n      return atendenteId === usuarioId;\n    }\n\n    return false;\n  },\n\n  /**\n   * Calcula estatísticas do histórico\n   */\n  calcularEstatisticas: (historico: any[]): Record<string, number> => {\n    const estatisticas: Record<string, number> = {};\n\n    // Contar por tipo de alteração\n    historico.forEach(item => {\n      const tipo = item.tipo;\n      estatisticas[tipo] = (estatisticas[tipo] || 0) + 1;\n    });\n\n    return estatisticas;\n  },\n\n  /**\n   * Sanitiza dados sensíveis do histórico\n   */\n  sanitizarDadosHistorico: (dados: any): any => {\n    if (typeof dados === 'string') {\n      try {\n        dados = JSON.parse(dados);\n      } catch {\n        return dados;\n      }\n    }\n\n    if (typeof dados === 'object' && dados !== null) {\n      const dadosSanitizados = { ...dados };\n\n      // Remover campos sensíveis\n      const camposSensiveis = ['senha', 'password', 'token', 'secret'];\n      camposSensiveis.forEach(campo => {\n        if (dadosSanitizados[campo]) {\n          dadosSanitizados[campo] = '[DADOS SENSÍVEIS]';\n        }\n      });\n\n      return dadosSanitizados;\n    }\n\n    return dados;\n  },\n};\n\n/**\n * Validações customizadas para histórico\n */\nexport const validacaoHistoricoCustomizada = {\n  /**\n   * Valida entrada de histórico com regras de negócio\n   */\n  validarEntradaHistorico: (\n    dados: CriarHistoricoInput\n  ): { valido: boolean; erros: string[] } => {\n    const erros: string[] = [];\n\n    // Validar se alterações críticas têm descrição detalhada\n    if (\n      validacaoHistorico.ehAlteracaoCritica(dados.tipo) &&\n      dados.descricao.length < 20\n    ) {\n      erros.push(\n        'Alterações críticas devem ter descrição detalhada (mínimo 20 caracteres)'\n      );\n    }\n\n    // Validar se campos obrigatórios estão presentes para certos tipos\n    if (\n      ['ATUALIZACAO', 'MUDANCA_STATUS'].includes(dados.tipo) &&\n      !dados.campo\n    ) {\n      erros.push('Campo é obrigatório para este tipo de alteração');\n    }\n\n    return {\n      valido: erros.length === 0,\n      erros,\n    };\n  },\n};\n"],"mappingsaA,wBAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,uBAAA;;MAjBAI,yBAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,wBAAA;;MA1IAC,sBAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAE,qBAAA;;MA6CAC,6BAAA;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAG,4BAAA;;MA2CAC,wBAAA;IAAA;IAAAN,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAI,uBAAA;;MA9JAC,qBAAA;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAK,oBAAA;;MA8FAC,4BAAA;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAM,2BAAA;;MAnHAC,kBAAA;IAAA;IAAAT,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAO,iBAAA;;MAkDAC,sBAAA;IAAA;IAAAV,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAQ,qBAAA;;MA3CAC,oBAAA;IAAA;IAAAX,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAS,mBAAA;;MA+PAC,mBAAA;IAAA;IAAAZ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAU,kBAAA;;MAoIAC,8BAAA;IAAA;IAAAb,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAW,6BAAA;;;;;mCAhZK;;;mCACa;AAKxB,MAAMJ,iBAAA;AAAA;AAAA,CAAAT,cAAA,GAAAE,CAAA,QAAoBY,IAAA,CAAAC,CAAC,CAC/BC,MAAM,GACNC,IAAI,CAAC;AAKD,MAAMN,mBAAA;AAAA;AAAA,CAAAX,cAAA,GAAAE,CAAA,QAAsBY,IAAA,CAAAC,CAAC,CAACG,IAAI,CAAC,CACxC,WACA,eACA,YACA,YACA,eACA,kBACA,oBACA,oBACD;AAKM,MAAMX,oBAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,QAAuBY,IAAA,CAAAC,CAAC,CAACI,MAAM,CAAC;EAC3CC,WAAA,EAAaN,IAAA,CAAAC,CAAC,CAACC,MAAM,GAAGC,IAAI,CAAC;EAC7BI,IAAA,EAAMV,mBAAA;EACNW,KAAA,EAAOR,IAAA,CAAAC,CAAC,CACLC,MAAM,GACNO,GAAG,CAAC,KAAK,2CACTC,QAAQ;EACXC,aAAA,EAAeX,IAAA,CAAAC,CAAC,CACbC,MAAM,GACNO,GAAG,CAAC,MAAM,qDACVC,QAAQ;EACXE,SAAA,EAAWZ,IAAA,CAAAC,CAAC,CACTC,MAAM,GACNO,GAAG,CAAC,MAAM,iDACVC,QAAQ;EACXG,SAAA,EAAWb,IAAA,CAAAC,CAAC,CACTC,MAAM,GACNY,GAAG,CAAC,GAAG,2BACPL,GAAG,CAAC,KAAK;EACZM,EAAA,EAAIf,IAAA,CAAAC,CAAC,CAACC,MAAM,GAAGa,EAAE,CAAC,sBAAsBL,QAAQ;EAChDM,SAAA,EAAWhB,IAAA,CAAAC,CAAC,CACTC,MAAM,GACNO,GAAG,CAAC,KAAK,gDACTC,QAAQ;AACb;AAKO,MAAMd,qBAAA;AAAA;AAAA,CAAAV,cAAA,GAAAE,CAAA,QAAwBY,IAAA,CAAAC,CAAC,CACnCI,MAAM,CAAC;EACNY,MAAA,EAAQjB,IAAA,CAAAC,CAAC,CACNiB,MAAM,GACNC,GAAG,GACHC,QAAQ,CAAC,sCACTC,OAAO,CAAC;EACXC,MAAA,EAAQtB,IAAA,CAAAC,CAAC,CACNiB,MAAM,GACNC,GAAG,GACHC,QAAQ,CAAC,sCACTX,GAAG,CAAC,KAAK,uBACTY,OAAO,CAAC;EACXd,IAAA,EAAMV,mBAAA,CAAoBa,QAAQ;EAClCF,KAAA,EAAOR,IAAA,CAAAC,CAAC,CACLC,MAAM,GACNO,GAAG,CAAC,KAAK,2CACTC,QAAQ;EACXa,UAAA,EAAYvB,IAAA,CAAAC,CAAC,CAACuB,IAAI,CAAC,2CAA2Cd,QAAQ;EACtEe,OAAA,EAASzB,IAAA,CAAAC,CAAC,CAACuB,IAAI,CAAC,wCAAwCd,QAAQ;EAChEgB,WAAA,EAAa1B,IAAA,CAAAC,CAAC,CACXC,MAAM,GACNC,IAAI,CAAC,yCACLO,QAAQ;EACXiB,SAAA,EAAW3B,IAAA,CAAAC,CAAC,CAACG,IAAI,CAAC,CAAC,OAAO,OAAO,EAAEiB,OAAO,CAAC;AAC7C,GACCO,MAAM,CACLC,IAAA;EAAA;EAAA3C,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACE;EAAI;EAAA,CAAAF,cAAA,GAAA4C,CAAA,UAAAD,IAAA,CAAKN,UAAU;EAAA;EAAA,CAAArC,cAAA,GAAA4C,CAAA,UAAID,IAAA,CAAKJ,OAAO,GAAE;IAAA;IAAAvC,cAAA,GAAA4C,CAAA;IAAA5C,cAAA,GAAAE,CAAA;IACnC,OAAOyC,IAAA,CAAKN,UAAU,IAAIM,IAAA,CAAKJ,OAAO;EACxC;EAAA;EAAA;IAAAvC,cAAA,GAAA4C,CAAA;EAAA;EAAA5C,cAAA,GAAAE,CAAA;EACA,OAAO;AACT,GACA;EACE2C,OAAA,EAAS;AACX;AAMG,MAAMzC,qBAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,QAAwBY,IAAA,CAAAC,CAAC,CAACI,MAAM,CAAC;EAC5C2B,KAAA,EAAOhC,IAAA,CAAAC,CAAC,CACLC,MAAM,GACNY,GAAG,CAAC,GAAG,gCACPL,GAAG,CAAC,KAAK;EACZwB,MAAA,EAAQjC,IAAA,CAAAC,CAAC,CACNiC,KAAK,CAAClC,IAAA,CAAAC,CAAC,CAACG,IAAI,CAAC,CAAC,aAAa,SAAS,iBAAiB,YAAY,GACjEiB,OAAO,CAAC,CAAC,YAAY;EACxBJ,MAAA,EAAQjB,IAAA,CAAAC,CAAC,CACNiB,MAAM,GACNC,GAAG,GACHC,QAAQ,CAAC,sCACTC,OAAO,CAAC;EACXC,MAAA,EAAQtB,IAAA,CAAAC,CAAC,CACNiB,MAAM,GACNC,GAAG,GACHC,QAAQ,CAAC,sCACTX,GAAG,CAAC,IAAI,sBACRY,OAAO,CAAC;AACb;AAKO,MAAM3B,2BAAA;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,QAA8BY,IAAA,CAAAC,CAAC,CACzCI,MAAM,CAAC;EACNkB,UAAA,EAAYvB,IAAA,CAAAC,CAAC,CAACuB,IAAI,CAAC,2CAA2Cd,QAAQ;EACtEe,OAAA,EAASzB,IAAA,CAAAC,CAAC,CAACuB,IAAI,CAAC,wCAAwCd,QAAQ;EAChEyB,UAAA,EAAYnC,IAAA,CAAAC,CAAC,CAACG,IAAI,CAAC,CAAC,QAAQ,SAAS,WAAW,OAAO,EAAEiB,OAAO,CAAC;AACnE,GACCO,MAAM,CACLC,IAAA;EAAA;EAAA3C,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACE;EAAI;EAAA,CAAAF,cAAA,GAAA4C,CAAA,UAAAD,IAAA,CAAKN,UAAU;EAAA;EAAA,CAAArC,cAAA,GAAA4C,CAAA,UAAID,IAAA,CAAKJ,OAAO,GAAE;IAAA;IAAAvC,cAAA,GAAA4C,CAAA;IAAA5C,cAAA,GAAAE,CAAA;IACnC,OAAOyC,IAAA,CAAKN,UAAU,IAAIM,IAAA,CAAKJ,OAAO;EACxC;EAAA;EAAA;IAAAvC,cAAA,GAAA4C,CAAA;EAAA;EAAA5C,cAAA,GAAAE,CAAA;EACA,OAAO;AACT,GACA;EACE2C,OAAA,EAAS;AACX;AAMG,MAAMxC,4BAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,QAA+BY,IAAA,CAAAC,CAAC,CAC1CI,MAAM,CAAC;EACNY,MAAA,EAAQmB,MAAA,CAAAC,cAAc,CAACC,YAAY;EACnChB,MAAA,EAAQc,MAAA,CAAAC,cAAc,CAACE,YAAY;EACnCC,KAAA,EAAOxC,IAAA,CAAAC,CAAC,CACLC,MAAM,GACNO,GAAG,CAAC,KAAK,2CACTC,QAAQ;EACXJ,WAAA,EAAaN,IAAA,CAAAC,CAAC,CACXC,MAAM,GACNC,IAAI,CAAC,2CACLO,QAAQ;EACXH,IAAA,EAAMV,mBAAA,CAAoBa,QAAQ;EAClCa,UAAA,EAAYvB,IAAA,CAAAC,CAAC,CACVC,MAAM,GACNuC,QAAQ,CAAC,2CACT/B,QAAQ;EACXe,OAAA,EAASzB,IAAA,CAAAC,CAAC,CACPC,MAAM,GACNuC,QAAQ,CAAC,wCACT/B,QAAQ;EACXgB,WAAA,EAAa1B,IAAA,CAAAC,CAAC,CACXC,MAAM,GACNC,IAAI,CAAC,yCACLO,QAAQ;AACb,GACCkB,MAAM,CACLC,IAAA;EAAA;EAAA3C,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACE;EAAI;EAAA,CAAAF,cAAA,GAAA4C,CAAA,UAAAD,IAAA,CAAKN,UAAU;EAAA;EAAA,CAAArC,cAAA,GAAA4C,CAAA,UAAID,IAAA,CAAKJ,OAAO,GAAE;IAAA;IAAAvC,cAAA,GAAA4C,CAAA;IACnC,MAAMY,MAAA;IAAA;IAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAS,IAAIuD,IAAA,CAAKd,IAAA,CAAKN,UAAU;IACvC,MAAMqB,GAAA;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAM,IAAIuD,IAAA,CAAKd,IAAA,CAAKJ,OAAO;IAAA;IAAAvC,cAAA,GAAAE,CAAA;IACjC,OAAOsD,MAAA,IAAUE,GAAA;EACnB;EAAA;EAAA;IAAA1D,cAAA,GAAA4C,CAAA;EAAA;EAAA5C,cAAA,GAAAE,CAAA;EACA,OAAO;AACT,GACA;EACE2C,OAAA,EAAS;AACX;AAMG,MAAMvC,uBAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,QAA0BY,IAAA,CAAAC,CAAC,CACrCI,MAAM,CAAC;EACNY,MAAA,EAAQmB,MAAA,CAAAC,cAAc,CAACC,YAAY;EACnChB,MAAA,EAAQc,MAAA,CAAAC,cAAc,CAACE,YAAY;EACnChC,IAAA,EAAMV,mBAAA,CAAoBa,QAAQ;EAClCa,UAAA,EAAYvB,IAAA,CAAAC,CAAC,CACVC,MAAM,GACNuC,QAAQ,CAAC,2CACT/B,QAAQ;EACXe,OAAA,EAASzB,IAAA,CAAAC,CAAC,CACPC,MAAM,GACNuC,QAAQ,CAAC,wCACT/B,QAAQ;EACXgB,WAAA,EAAa1B,IAAA,CAAAC,CAAC,CACXC,MAAM,GACNC,IAAI,CAAC,yCACLO,QAAQ;AACb,GACCkB,MAAM,CACLC,IAAA;EAAA;EAAA3C,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACE;EAAI;EAAA,CAAAF,cAAA,GAAA4C,CAAA,UAAAD,IAAA,CAAKN,UAAU;EAAA;EAAA,CAAArC,cAAA,GAAA4C,CAAA,UAAID,IAAA,CAAKJ,OAAO,GAAE;IAAA;IAAAvC,cAAA,GAAA4C,CAAA;IACnC,MAAMY,MAAA;IAAA;IAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAS,IAAIuD,IAAA,CAAKd,IAAA,CAAKN,UAAU;IACvC,MAAMqB,GAAA;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAM,IAAIuD,IAAA,CAAKd,IAAA,CAAKJ,OAAO;IAAA;IAAAvC,cAAA,GAAAE,CAAA;IACjC,OAAOsD,MAAA,IAAUE,GAAA;EACnB;EAAA;EAAA;IAAA1D,cAAA,GAAA4C,CAAA;EAAA;EAAA5C,cAAA,GAAAE,CAAA;EACA,OAAO;AACT,GACA;EACE2C,OAAA,EAAS;AACX;AAqBG,MAAM1C,wBAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,QAA2B;EACtCyD,wBAAA,EAA0B;EAC1BC,wBAAA,EAA0B;EAC1BC,eAAA,EAAiB;EACjBC,aAAA,EAAe;EACfC,gBAAA,EAAkB;EAClBC,eAAA,EAAiB;EACjBC,YAAA,EAAc;EACdC,iBAAA,EAAmB;EACnBC,qBAAA,EAAuB;EACvBC,uBAAA,EAAyB;EACzBC,uBAAA,EAAyB;AAC3B;AAKO,MAAMtE,uBAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAA0B;EACrCoE,uBAAA,EAAyB;EACzBC,uBAAA,EAAyB;EACzBC,mBAAA,EAAqB;EACrBC,mBAAA,EAAqB;EACrBC,wBAAA,EAA0B;EAC1BC,oBAAA,EAAsB;EACtBC,oBAAA,EAAsB;EACtBC,yBAAA,EAA2B;EAC3BC,uBAAA,EAAyB,MAAM;EAC/BC,wBAAA,EAA0B,CAAC,YAAY;AACzC;AAKO,MAAMnE,kBAAA;AAAA;AAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAqB;EAChC;;;EAGA8E,kBAAA,EAAqB3D,IAAA;IAAA;IAAArB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACnB,OAAOH,uBAAA,CAAwBgF,wBAAwB,CAACE,QAAQ,CAAC5D,IAAA;EACnE;EAEA;;;EAGA6D,sBAAA,EAAyBC,KAAA;IAAA;IAAAnF,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACvB,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF,OAAOkF,IAAA,CAAKC,SAAS,CAACF,KAAA,EAAO,MAAM;IACrC,EAAE,MAAM;MAAA;MAAAnF,cAAA,GAAAE,CAAA;MACN,OAAOoF,MAAA,CAAOH,KAAA;IAChB;EACF;EAEA;;;EAGAI,sBAAA,EAAwBA,CAAClD,UAAA,EAAmBE,OAAA;IAAA;IAAAvC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1C;IAAI;IAAA,CAAAF,cAAA,GAAA4C,CAAA,WAACP,UAAA;IAAA;IAAA,CAAArC,cAAA,GAAA4C,CAAA,UAAc,CAACL,OAAA,GAAS;MAAA;MAAAvC,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAE,CAAA;MAAA,OAAO;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAA4C,CAAA;IAAA;IAEpC,MAAM4C,KAAA;IAAA;IAAA,CAAAxF,cAAA,GAAAE,CAAA,QAAQ,IAAIuD,IAAA;IAClB,MAAMgC,UAAA;IAAA;IAAA,CAAAzF,cAAA,GAAAE,CAAA,QAAa,IAAIuD,IAAA;IAAA;IAAAzD,cAAA,GAAAE,CAAA;IACvBuF,UAAA,CAAWC,WAAW,CAACF,KAAA,CAAMG,WAAW,KAAK;IAE7C;IAAA;IAAA3F,cAAA,GAAAE,CAAA;IACA,IAAImC,UAAA,GAAaoD,UAAA,EAAY;MAAA;MAAAzF,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAE,CAAA;MAAA,OAAO;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAA4C,CAAA;IAAA;IAEpC;IAAA5C,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAA4C,CAAA,WAAAP,UAAA,GAAamD,KAAA;IAAA;IAAA,CAAAxF,cAAA,GAAA4C,CAAA,WAASL,OAAA,GAAUiD,KAAA,GAAO;MAAA;MAAAxF,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAE,CAAA;MAAA,OAAO;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAE,CAAA;IAElD,OAAOmC,UAAA,IAAcE,OAAA;EACvB;EAEA;;;EAGAqD,wBAAA,EAA0BA,CACxBvE,IAAA,EACAC,KAAA,EACAG,aAAA,EACAC,SAAA;IAAA;IAAA1B,cAAA,GAAAC,CAAA;IAEA,MAAM4F,UAAA;IAAA;IAAA,CAAA7F,cAAA,GAAAE,CAAA,QAA4C;MAChD4F,OAAA,EAAS;MACTC,WAAA,EAAazE,KAAA;MAAA;MAAA,CAAAtB,cAAA,GAAA4C,CAAA,WACT,UAAUtB,KAAA,cAAmB;MAAA;MAAA,CAAAtB,cAAA,GAAA4C,CAAA,WAC7B;MACJoD,QAAA,EAAU;MACVC,QAAA,EAAU;MACVC,WAAA,EAAa;MACbC,cAAA,EAAgB;MAAkB;MAAA,CAAAnG,cAAA,GAAA4C,CAAA,WAAAnB,aAAA;MAAA;MAAA,CAAAzB,cAAA,GAAA4C,CAAA,WAAiBlB,SAAA;MAAA;MAAA,CAAA1B,cAAA,GAAA4C,CAAA,WAAY,QAAQnB,aAAA,WAAwBC,SAAA,GAAY;MAAA;MAAA,CAAA1B,cAAA,GAAA4C,CAAA,WAAG,KAAI;MAClHwD,gBAAA,EAAkB;MAClBC,iBAAA,EAAmB;IACrB;IAAA;IAAArG,cAAA,GAAAE,CAAA;IAEA,OAAO,2BAAAF,cAAA,GAAA4C,CAAA,WAAAiD,UAAU,CAACxE,IAAA,CAAK;IAAA;IAAA,CAAArB,cAAA,GAAA4C,CAAA,WAAI;EAC7B;EAEA;;;EAGA0D,oBAAA,EAAsBA,CACpBC,WAAA,EACAnF,WAAA,EACAoF,SAAA;IAAA;IAAAxG,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAEA;IACA,IAAI,CAAC,SAAS,UAAU,CAAC+E,QAAQ,CAACsB,WAAA,GAAc;MAAA;MAAAvG,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAE,CAAA;MAC9C,OAAO;IACT;IAAA;IAAA;MAAAF,cAAA,GAAA4C,CAAA;IAAA;IAEA;IAAA5C,cAAA,GAAAE,CAAA;IACA,IAAIqG,WAAA,KAAgB,aAAa;MAAA;MAAAvG,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAE,CAAA;MAC/B,OAAOkB,WAAA,KAAgBoF,SAAA;IACzB;IAAA;IAAA;MAAAxG,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAE,CAAA;IAEA,OAAO;EACT;EAEA;;;EAGAuG,oBAAA,EAAuBC,SAAA;IAAA;IAAA1G,cAAA,GAAAC,CAAA;IACrB,MAAM0G,YAAA;IAAA;IAAA,CAAA3G,cAAA,GAAAE,CAAA,QAAuC,CAAC;IAE9C;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACAwG,SAAA,CAAUE,OAAO,CAACC,IAAA;MAAA;MAAA7G,cAAA,GAAAC,CAAA;MAChB,MAAMoB,IAAA;MAAA;MAAA,CAAArB,cAAA,GAAAE,CAAA,QAAO2G,IAAA,CAAKxF,IAAI;MAAA;MAAArB,cAAA,GAAAE,CAAA;MACtByG,YAAY,CAACtF,IAAA,CAAK,GAAG;MAAC;MAAA,CAAArB,cAAA,GAAA4C,CAAA,WAAA+D,YAAY,CAACtF,IAAA,CAAK;MAAA;MAAA,CAAArB,cAAA,GAAA4C,CAAA,WAAI,MAAK;IACnD;IAAA;IAAA5C,cAAA,GAAAE,CAAA;IAEA,OAAOyG,YAAA;EACT;EAEA;;;EAGAG,uBAAA,EAA0B3B,KAAA;IAAA;IAAAnF,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACxB,IAAI,OAAOiF,KAAA,KAAU,UAAU;MAAA;MAAAnF,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAE,CAAA;MAC7B,IAAI;QAAA;QAAAF,cAAA,GAAAE,CAAA;QACFiF,KAAA,GAAQC,IAAA,CAAK2B,KAAK,CAAC5B,KAAA;MACrB,EAAE,MAAM;QAAA;QAAAnF,cAAA,GAAAE,CAAA;QACN,OAAOiF,KAAA;MACT;IACF;IAAA;IAAA;MAAAnF,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAE,CAAA;IAEA;IAAI;IAAA,CAAAF,cAAA,GAAA4C,CAAA,kBAAOuC,KAAA,KAAU;IAAA;IAAA,CAAAnF,cAAA,GAAA4C,CAAA,WAAYuC,KAAA,KAAU,OAAM;MAAA;MAAAnF,cAAA,GAAA4C,CAAA;MAC/C,MAAMoE,gBAAA;MAAA;MAAA,CAAAhH,cAAA,GAAAE,CAAA,QAAmB;QAAE,GAAGiF;MAAM;MAEpC;MACA,MAAM8B,eAAA;MAAA;MAAA,CAAAjH,cAAA,GAAAE,CAAA,QAAkB,CAAC,SAAS,YAAY,SAAS,SAAS;MAAA;MAAAF,cAAA,GAAAE,CAAA;MAChE+G,eAAA,CAAgBL,OAAO,CAACtF,KAAA;QAAA;QAAAtB,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QACtB,IAAI8G,gBAAgB,CAAC1F,KAAA,CAAM,EAAE;UAAA;UAAAtB,cAAA,GAAA4C,CAAA;UAAA5C,cAAA,GAAAE,CAAA;UAC3B8G,gBAAgB,CAAC1F,KAAA,CAAM,GAAG;QAC5B;QAAA;QAAA;UAAAtB,cAAA,GAAA4C,CAAA;QAAA;MACF;MAAA;MAAA5C,cAAA,GAAAE,CAAA;MAEA,OAAO8G,gBAAA;IACT;IAAA;IAAA;MAAAhH,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAE,CAAA;IAEA,OAAOiF,KAAA;EACT;AACF;AAKO,MAAMtE,6BAAA;AAAA;AAAA,CAAAb,cAAA,GAAAE,CAAA,QAAgC;EAC3C;;;EAGAgH,uBAAA,EACE/B,KAAA;IAAA;IAAAnF,cAAA,GAAAC,CAAA;IAEA,MAAMkH,KAAA;IAAA;IAAA,CAAAnH,cAAA,GAAAE,CAAA,QAAkB,EAAE;IAE1B;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACA;IACE;IAAA,CAAAF,cAAA,GAAA4C,CAAA,WAAAhC,kBAAA,CAAmBoE,kBAAkB,CAACG,KAAA,CAAM9D,IAAI;IAAA;IAAA,CAAArB,cAAA,GAAA4C,CAAA,WAChDuC,KAAA,CAAMxD,SAAS,CAACyF,MAAM,GAAG,KACzB;MAAA;MAAApH,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAE,CAAA;MACAiH,KAAA,CAAME,IAAI,CACR;IAEJ;IAAA;IAAA;MAAArH,cAAA,GAAA4C,CAAA;IAAA;IAEA;IAAA5C,cAAA,GAAAE,CAAA;IACA;IACE;IAAA,CAAAF,cAAA,GAAA4C,CAAA,YAAC,eAAe,iBAAiB,CAACqC,QAAQ,CAACE,KAAA,CAAM9D,IAAI;IAAA;IAAA,CAAArB,cAAA,GAAA4C,CAAA,WACrD,CAACuC,KAAA,CAAM7D,KAAK,GACZ;MAAA;MAAAtB,cAAA,GAAA4C,CAAA;MAAA5C,cAAA,GAAAE,CAAA;MACAiH,KAAA,CAAME,IAAI,CAAC;IACb;IAAA;IAAA;MAAArH,cAAA,GAAA4C,CAAA;IAAA;IAAA5C,cAAA,GAAAE,CAAA;IAEA,OAAO;MACLoH,MAAA,EAAQH,KAAA,CAAMC,MAAM,KAAK;MACzBD;IACF;EACF;AACF","ignoreList":[]}