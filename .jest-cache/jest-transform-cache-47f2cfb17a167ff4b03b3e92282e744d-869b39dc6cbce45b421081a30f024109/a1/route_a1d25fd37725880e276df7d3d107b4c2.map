{"version":3,"names":["GET","cov_1nzx2ufhls","f","s","POST","request","session","_server1","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","_atendentes","MENSAGENS_ERRO_ATENDENTES","SEM_PERMISSAO","searchParams","URL","url","queryParams","Object","fromEntries","entries","parametrosValidados","listarAtendentesSchema","parse","pagina","limite","busca","setor","cargo","departamento","dataAdmissaoInicio","dataAdmissaoFim","ordenarPor","ordem","filtros","OR","usuario","nome","contains","mode","cpf","replace","email","dataAdmissao","gte","Date","lte","ordenacao","offset","atendentes","total","Promise","all","_prisma","prisma","atendente","findMany","where","include","select","id","ativo","criadoEm","atualizadoEm","_count","documentos","historicoAlteracoes","orderBy","skip","take","count","totalPaginas","Math","ceil","temProximaPagina","temPaginaAnterior","map","rg","dataNascimento","telefone","celular","endereco","cep","cidade","estado","salario","observacoes","foto","estatisticas","totalDocumentos","totalAlteracoes","paginacao","paginaAtual","totalItens","itensPorPagina","error","console","_zod","ZodError","DADOS_INVALIDOS","detalhes","errors","ERRO_INTERNO","dadosRequisicao","dadosValidados","criarAtendenteSchema","dadosUsuario","dadosAtendente","emailExiste","validacaoAtendentes","validarEmailUnico","EMAIL_JA_EXISTE","cpfExiste","validarCPFUnico","CPF_JA_EXISTE","senhaHash","_bcryptjs","hash","senha","cpfLimpo","resultado","$transaction","tx","novoUsuario","create","data","novoAtendente","usuarioId","historicoAlteracaoAtendente","atendenteId","tipo","descricao","criadoPorId","ip","headers","get","mensagem"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from '@/lib/auth/server';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { hash } from 'bcryptjs';\nimport {\n  listarAtendentesSchema,\n  criarAtendenteSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n  validacaoAtendentes,\n} from '@/lib/validations/atendentes';\nimport { ZodError } from 'zod';\n\n/**\n * GET /api/atendentes\n * Lista atendentes com paginação e filtros\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN e GERENTE podem listar atendentes)\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Extrair parâmetros da query string\n    const { searchParams } = new URL(request.url);\n    const queryParams = Object.fromEntries(searchParams.entries());\n\n    // Validar parâmetros\n    const parametrosValidados = listarAtendentesSchema.parse(queryParams);\n\n    const {\n      pagina,\n      limite,\n      busca,\n      status,\n      setor,\n      cargo,\n      departamento,\n      dataAdmissaoInicio,\n      dataAdmissaoFim,\n      ordenarPor,\n      ordem,\n    } = parametrosValidados;\n\n    // Construir filtros\n    const filtros: any = {};\n\n    // Filtro de busca (nome, CPF, email)\n    if (busca) {\n      filtros.OR = [\n        {\n          usuario: {\n            nome: {\n              contains: busca,\n              mode: 'insensitive',\n            },\n          },\n        },\n        {\n          cpf: {\n            contains: busca.replace(/\\D/g, ''),\n          },\n        },\n        {\n          usuario: {\n            email: {\n              contains: busca,\n              mode: 'insensitive',\n            },\n          },\n        },\n      ];\n    }\n\n    // Filtros específicos\n    if (status) {\n      filtros.status = status;\n    }\n\n    if (setor) {\n      filtros.setor = {\n        contains: setor,\n        mode: 'insensitive',\n      };\n    }\n\n    if (cargo) {\n      filtros.cargo = {\n        contains: cargo,\n        mode: 'insensitive',\n      };\n    }\n\n    if (departamento) {\n      filtros.departamento = {\n        contains: departamento,\n        mode: 'insensitive',\n      };\n    }\n\n    // Filtro de data de admissão\n    if (dataAdmissaoInicio || dataAdmissaoFim) {\n      filtros.dataAdmissao = {};\n      if (dataAdmissaoInicio) {\n        filtros.dataAdmissao.gte = new Date(dataAdmissaoInicio);\n      }\n      if (dataAdmissaoFim) {\n        filtros.dataAdmissao.lte = new Date(dataAdmissaoFim);\n      }\n    }\n\n    // Configurar ordenação\n    const ordenacao: any = {};\n    if (ordenarPor === 'nome') {\n      ordenacao.usuario = { nome: ordem };\n    } else {\n      ordenacao[ordenarPor] = ordem;\n    }\n\n    // Calcular offset\n    const offset = (pagina - 1) * limite;\n\n    // Buscar atendentes\n    const [atendentes, total] = await Promise.all([\n      prisma.atendente.findMany({\n        where: filtros,\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n              ativo: true,\n              criadoEm: true,\n              atualizadoEm: true,\n            },\n          },\n          _count: {\n            select: {\n              documentos: true,\n              historicoAlteracoes: true,\n            },\n          },\n        },\n        orderBy: ordenacao,\n        skip: offset,\n        take: limite,\n      }),\n      prisma.atendente.count({ where: filtros }),\n    ]);\n\n    // Calcular metadados de paginação\n    const totalPaginas = Math.ceil(total / limite);\n    const temProximaPagina = pagina < totalPaginas;\n    const temPaginaAnterior = pagina > 1;\n\n    return NextResponse.json({\n      atendentes: atendentes.map(atendente => ({\n        id: atendente.id,\n        cpf: atendente.cpf,\n        rg: atendente.rg,\n        dataNascimento: atendente.dataNascimento,\n        telefone: atendente.telefone,\n        celular: atendente.celular,\n        endereco: atendente.endereco,\n        cep: atendente.cep,\n        cidade: atendente.cidade,\n        estado: atendente.estado,\n        dataAdmissao: atendente.dataAdmissao,\n        cargo: atendente.cargo,\n        setor: atendente.setor,\n        departamento: atendente.departamento,\n        salario: atendente.salario,\n        status: atendente.status,\n        observacoes: atendente.observacoes,\n        foto: atendente.foto,\n        criadoEm: atendente.criadoEm,\n        atualizadoEm: atendente.atualizadoEm,\n        usuario: atendente.usuario,\n        estatisticas: {\n          totalDocumentos: atendente._count.documentos,\n          totalAlteracoes: atendente._count.historicoAlteracoes,\n        },\n      })),\n      paginacao: {\n        paginaAtual: pagina,\n        totalPaginas,\n        totalItens: total,\n        itensPorPagina: limite,\n        temProximaPagina,\n        temPaginaAnterior,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao listar atendentes:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/atendentes\n * Cria um novo atendente\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN pode criar atendentes)\n    if (session.user.userType !== 'ADMIN') {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Extrair dados do corpo da requisição\n    const dadosRequisicao = await request.json();\n\n    // Validar dados\n    const dadosValidados = criarAtendenteSchema.parse(dadosRequisicao);\n\n    const { usuario: dadosUsuario, ...dadosAtendente } = dadosValidados;\n\n    // Verificar se o email já existe\n    const emailExiste = await validacaoAtendentes.validarEmailUnico(\n      dadosUsuario.email\n    );\n    if (!emailExiste) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.EMAIL_JA_EXISTE },\n        { status: 409 }\n      );\n    }\n\n    // Verificar se o CPF já existe\n    const cpfExiste = await validacaoAtendentes.validarCPFUnico(\n      dadosAtendente.cpf\n    );\n    if (!cpfExiste) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.CPF_JA_EXISTE },\n        { status: 409 }\n      );\n    }\n\n    // Hash da senha\n    const senhaHash = await hash(dadosUsuario.senha, 12);\n\n    // Limpar CPF (remover formatação)\n    const cpfLimpo = dadosAtendente.cpf.replace(/\\D/g, '');\n\n    // Criar usuário e atendente em uma transação\n    const resultado = await prisma.$transaction(async tx => {\n      // Criar usuário\n      const novoUsuario = await tx.usuario.create({\n        data: {\n          nome: dadosUsuario.nome,\n          email: dadosUsuario.email,\n          senha: senhaHash,\n          userType: 'ATENDENTE',\n          ativo: true,\n        },\n      });\n\n      // Criar atendente\n      const novoAtendente = await tx.atendente.create({\n        data: {\n          usuarioId: novoUsuario.id,\n          cpf: cpfLimpo,\n          rg: dadosAtendente.rg,\n          dataNascimento: dadosAtendente.dataNascimento\n            ? new Date(dadosAtendente.dataNascimento)\n            : null,\n          telefone: dadosAtendente.telefone,\n          celular: dadosAtendente.celular,\n          endereco: dadosAtendente.endereco,\n          cep: dadosAtendente.cep,\n          cidade: dadosAtendente.cidade,\n          estado: dadosAtendente.estado,\n          dataAdmissao: new Date(dadosAtendente.dataAdmissao),\n          cargo: dadosAtendente.cargo,\n          setor: dadosAtendente.setor,\n          departamento: dadosAtendente.departamento,\n          salario: dadosAtendente.salario,\n          status: dadosAtendente.status,\n          observacoes: dadosAtendente.observacoes,\n          foto: dadosAtendente.foto,\n        },\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n              ativo: true,\n              criadoEm: true,\n              atualizadoEm: true,\n            },\n          },\n        },\n      });\n\n      // Registrar no histórico de alterações\n      await tx.historicoAlteracaoAtendente.create({\n        data: {\n          atendenteId: novoAtendente.id,\n          tipo: 'CRIACAO',\n          descricao: `Atendente ${dadosUsuario.nome} foi criado`,\n          criadoEm: new Date(),\n          criadoPorId: session.user.id,\n          ip: request.headers.get('x-forwarded-for') || 'unknown',\n        },\n      });\n\n      return novoAtendente;\n    });\n\n    return NextResponse.json(\n      {\n        mensagem: 'Atendente criado com sucesso',\n        atendente: {\n          id: resultado.id,\n          cpf: resultado.cpf,\n          rg: resultado.rg,\n          dataNascimento: resultado.dataNascimento,\n          telefone: resultado.telefone,\n          celular: resultado.celular,\n          endereco: resultado.endereco,\n          cep: resultado.cep,\n          cidade: resultado.cidade,\n          estado: resultado.estado,\n          dataAdmissao: resultado.dataAdmissao,\n          cargo: resultado.cargo,\n          setor: resultado.setor,\n          departamento: resultado.departamento,\n          salario: resultado.salario,\n          status: resultado.status,\n          observacoes: resultado.observacoes,\n          foto: resultado.foto,\n          criadoEm: resultado.criadoEm,\n          atualizadoEm: resultado.atualizadoEm,\n          usuario: resultado.usuario,\n        },\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Erro ao criar atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],"mappingsiBsBA,IAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,GAAA;;MAkNAI,KAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,IAAA;;;;;kCAnOoB;;;kCACT;;;kCACL;;;kCACL;;;mCACF;;;mCAMd;;;mCACkB;AAMlB,eAAeJ,IAAIK,OAAoB;EAAA;EAAAJ,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC5C,IAAI;IACF;IACA,MAAMG,OAAA;IAAA;IAAA,CAAAL,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAI,QAAA,CAAAC,gBAAgB,EAACC,KAAA,CAAAC,WAAW;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAClD,IAAI,CAACG,OAAA,EAASK,IAAA,EAAM;MAAA;MAAAV,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAClB,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,IAAA,EAAM;MAAiB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACrE;IAAA;IAAA;MAAAhB,cAAA,GAAAW,CAAA;IAAA;IAEA;IAAAX,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC,CAAC,SAAS,UAAU,CAACe,QAAQ,CAACZ,OAAA,CAAQK,IAAI,CAACQ,QAAQ,GAAG;MAAA;MAAAlB,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACzD,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAMI,WAAA,CAAAC,yBAAyB,CAACC;MAAc,GAChD;QAAEL,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAhB,cAAA,GAAAW,CAAA;IAAA;IAEA;IACA,MAAM;MAAEW;IAAY,CAAE;IAAA;IAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAG,IAAIqB,GAAA,CAAInB,OAAA,CAAQoB,GAAG;IAC5C,MAAMC,WAAA;IAAA;IAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAcwB,MAAA,CAAOC,WAAW,CAACL,YAAA,CAAaM,OAAO;IAE3D;IACA,MAAMC,mBAAA;IAAA;IAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAsBiB,WAAA,CAAAW,sBAAsB,CAACC,KAAK,CAACN,WAAA;IAEzD,MAAM;MACJO,MAAM;MACNC,MAAM;MACNC,KAAK;MACLlB,MAAM;MACNmB,KAAK;MACLC,KAAK;MACLC,YAAY;MACZC,kBAAkB;MAClBC,eAAe;MACfC,UAAU;MACVC;IAAK,CACN;IAAA;IAAA,CAAAzC,cAAA,GAAAE,CAAA,QAAG2B,mBAAA;IAEJ;IACA,MAAMa,OAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAe,CAAC;IAEtB;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACA,IAAIgC,KAAA,EAAO;MAAA;MAAAlC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACTwC,OAAA,CAAQC,EAAE,GAAG,CACX;QACEC,OAAA,EAAS;UACPC,IAAA,EAAM;YACJC,QAAA,EAAUZ,KAAA;YACVa,IAAA,EAAM;UACR;QACF;MACF,GACA;QACEC,GAAA,EAAK;UACHF,QAAA,EAAUZ,KAAA,CAAMe,OAAO,CAAC,OAAO;QACjC;MACF,GACA;QACEL,OAAA,EAAS;UACPM,KAAA,EAAO;YACLJ,QAAA,EAAUZ,KAAA;YACVa,IAAA,EAAM;UACR;QACF;MACF,EACD;IACH;IAAA;IAAA;MAAA/C,cAAA,GAAAW,CAAA;IAAA;IAEA;IAAAX,cAAA,GAAAE,CAAA;IACA,IAAIc,MAAA,EAAQ;MAAA;MAAAhB,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACVwC,OAAA,CAAQ1B,MAAM,GAAGA,MAAA;IACnB;IAAA;IAAA;MAAAhB,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAEA,IAAIiC,KAAA,EAAO;MAAA;MAAAnC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACTwC,OAAA,CAAQP,KAAK,GAAG;QACdW,QAAA,EAAUX,KAAA;QACVY,IAAA,EAAM;MACR;IACF;IAAA;IAAA;MAAA/C,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAEA,IAAIkC,KAAA,EAAO;MAAA;MAAApC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACTwC,OAAA,CAAQN,KAAK,GAAG;QACdU,QAAA,EAAUV,KAAA;QACVW,IAAA,EAAM;MACR;IACF;IAAA;IAAA;MAAA/C,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAEA,IAAImC,YAAA,EAAc;MAAA;MAAArC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAChBwC,OAAA,CAAQL,YAAY,GAAG;QACrBS,QAAA,EAAUT,YAAA;QACVU,IAAA,EAAM;MACR;IACF;IAAA;IAAA;MAAA/C,cAAA,GAAAW,CAAA;IAAA;IAEA;IAAAX,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAW,CAAA,UAAA2B,kBAAA;IAAA;IAAA,CAAAtC,cAAA,GAAAW,CAAA,UAAsB4B,eAAA,GAAiB;MAAA;MAAAvC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACzCwC,OAAA,CAAQS,YAAY,GAAG,CAAC;MAAA;MAAAnD,cAAA,GAAAE,CAAA;MACxB,IAAIoC,kBAAA,EAAoB;QAAA;QAAAtC,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QACtBwC,OAAA,CAAQS,YAAY,CAACC,GAAG,GAAG,IAAIC,IAAA,CAAKf,kBAAA;MACtC;MAAA;MAAA;QAAAtC,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAE,CAAA;MACA,IAAIqC,eAAA,EAAiB;QAAA;QAAAvC,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QACnBwC,OAAA,CAAQS,YAAY,CAACG,GAAG,GAAG,IAAID,IAAA,CAAKd,eAAA;MACtC;MAAA;MAAA;QAAAvC,cAAA,GAAAW,CAAA;MAAA;IACF;IAAA;IAAA;MAAAX,cAAA,GAAAW,CAAA;IAAA;IAEA;IACA,MAAM4C,SAAA;IAAA;IAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAiB,CAAC;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACxB,IAAIsC,UAAA,KAAe,QAAQ;MAAA;MAAAxC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACzBqD,SAAA,CAAUX,OAAO,GAAG;QAAEC,IAAA,EAAMJ;MAAM;IACpC,OAAO;MAAA;MAAAzC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACLqD,SAAS,CAACf,UAAA,CAAW,GAAGC,KAAA;IAC1B;IAEA;IACA,MAAMe,MAAA;IAAA;IAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAS,CAAC8B,MAAA,GAAS,KAAKC,MAAA;IAE9B;IACA,MAAM,CAACwB,UAAA,EAAYC,KAAA,CAAM;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAG,MAAMyD,OAAA,CAAQC,GAAG,CAAC,CAC5CC,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC;MACxBC,KAAA,EAAOvB,OAAA;MACPwB,OAAA,EAAS;QACPtB,OAAA,EAAS;UACPuB,MAAA,EAAQ;YACNC,EAAA,EAAI;YACJvB,IAAA,EAAM;YACNK,KAAA,EAAO;YACPmB,KAAA,EAAO;YACPC,QAAA,EAAU;YACVC,YAAA,EAAc;UAChB;QACF;QACAC,MAAA,EAAQ;UACNL,MAAA,EAAQ;YACNM,UAAA,EAAY;YACZC,mBAAA,EAAqB;UACvB;QACF;MACF;MACAC,OAAA,EAASpB,SAAA;MACTqB,IAAA,EAAMpB,MAAA;MACNqB,IAAA,EAAM5C;IACR,IACA4B,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACe,KAAK,CAAC;MAAEb,KAAA,EAAOvB;IAAQ,GACzC;IAED;IACA,MAAMqC,YAAA;IAAA;IAAA,CAAA/E,cAAA,GAAAE,CAAA,QAAe8E,IAAA,CAAKC,IAAI,CAACvB,KAAA,GAAQzB,MAAA;IACvC,MAAMiD,gBAAA;IAAA;IAAA,CAAAlF,cAAA,GAAAE,CAAA,QAAmB8B,MAAA,GAAS+C,YAAA;IAClC,MAAMI,iBAAA;IAAA;IAAA,CAAAnF,cAAA,GAAAE,CAAA,QAAoB8B,MAAA,GAAS;IAAA;IAAAhC,cAAA,GAAAE,CAAA;IAEnC,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvB2C,UAAA,EAAYA,UAAA,CAAW2B,GAAG,CAACrB,SAAA,IAAc;QAAA;QAAA/D,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA;UACvCkE,EAAA,EAAIL,SAAA,CAAUK,EAAE;UAChBpB,GAAA,EAAKe,SAAA,CAAUf,GAAG;UAClBqC,EAAA,EAAItB,SAAA,CAAUsB,EAAE;UAChBC,cAAA,EAAgBvB,SAAA,CAAUuB,cAAc;UACxCC,QAAA,EAAUxB,SAAA,CAAUwB,QAAQ;UAC5BC,OAAA,EAASzB,SAAA,CAAUyB,OAAO;UAC1BC,QAAA,EAAU1B,SAAA,CAAU0B,QAAQ;UAC5BC,GAAA,EAAK3B,SAAA,CAAU2B,GAAG;UAClBC,MAAA,EAAQ5B,SAAA,CAAU4B,MAAM;UACxBC,MAAA,EAAQ7B,SAAA,CAAU6B,MAAM;UACxBzC,YAAA,EAAcY,SAAA,CAAUZ,YAAY;UACpCf,KAAA,EAAO2B,SAAA,CAAU3B,KAAK;UACtBD,KAAA,EAAO4B,SAAA,CAAU5B,KAAK;UACtBE,YAAA,EAAc0B,SAAA,CAAU1B,YAAY;UACpCwD,OAAA,EAAS9B,SAAA,CAAU8B,OAAO;UAC1B7E,MAAA,EAAQ+C,SAAA,CAAU/C,MAAM;UACxB8E,WAAA,EAAa/B,SAAA,CAAU+B,WAAW;UAClCC,IAAA,EAAMhC,SAAA,CAAUgC,IAAI;UACpBzB,QAAA,EAAUP,SAAA,CAAUO,QAAQ;UAC5BC,YAAA,EAAcR,SAAA,CAAUQ,YAAY;UACpC3B,OAAA,EAASmB,SAAA,CAAUnB,OAAO;UAC1BoD,YAAA,EAAc;YACZC,eAAA,EAAiBlC,SAAA,CAAUS,MAAM,CAACC,UAAU;YAC5CyB,eAAA,EAAiBnC,SAAA,CAAUS,MAAM,CAACE;UACpC;QACF;MAAA;MACAyB,SAAA,EAAW;QACTC,WAAA,EAAapE,MAAA;QACb+C,YAAA;QACAsB,UAAA,EAAY3C,KAAA;QACZ4C,cAAA,EAAgBrE,MAAA;QAChBiD,gBAAA;QACAC;MACF;IACF;EACF,EAAE,OAAOoB,KAAA,EAAO;IAAA;IAAAvG,cAAA,GAAAE,CAAA;IACdsG,OAAA,CAAQD,KAAK,CAAC,8BAA8BA,KAAA;IAAA;IAAAvG,cAAA,GAAAE,CAAA;IAE5C,IAAIqG,KAAA,YAAiBE,IAAA,CAAAC,QAAQ,EAAE;MAAA;MAAA1G,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAC7B,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QACEC,IAAA,EAAMI,WAAA,CAAAC,yBAAyB,CAACuF,eAAe;QAC/CC,QAAA,EAAUL,KAAA,CAAMM;MAClB,GACA;QAAE7F,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAhB,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAEA,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,IAAA,EAAMI,WAAA,CAAAC,yBAAyB,CAAC0F;IAAa,GAC/C;MAAE9F,MAAA,EAAQ;IAAI;EAElB;AACF;AAMO,eAAeb,KAAKC,OAAoB;EAAA;EAAAJ,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC7C,IAAI;IACF;IACA,MAAMG,OAAA;IAAA;IAAA,CAAAL,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAI,QAAA,CAAAC,gBAAgB,EAACC,KAAA,CAAAC,WAAW;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAClD,IAAI,CAACG,OAAA,EAASK,IAAA,EAAM;MAAA;MAAAV,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAClB,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,IAAA,EAAM;MAAiB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACrE;IAAA;IAAA;MAAAhB,cAAA,GAAAW,CAAA;IAAA;IAEA;IAAAX,cAAA,GAAAE,CAAA;IACA,IAAIG,OAAA,CAAQK,IAAI,CAACQ,QAAQ,KAAK,SAAS;MAAA;MAAAlB,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACrC,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAMI,WAAA,CAAAC,yBAAyB,CAACC;MAAc,GAChD;QAAEL,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAhB,cAAA,GAAAW,CAAA;IAAA;IAEA;IACA,MAAMoG,eAAA;IAAA;IAAA,CAAA/G,cAAA,GAAAE,CAAA,QAAkB,MAAME,OAAA,CAAQU,IAAI;IAE1C;IACA,MAAMkG,cAAA;IAAA;IAAA,CAAAhH,cAAA,GAAAE,CAAA,QAAiBiB,WAAA,CAAA8F,oBAAoB,CAAClF,KAAK,CAACgF,eAAA;IAElD,MAAM;MAAEnE,OAAA,EAASsE,YAAY;MAAE,GAAGC;IAAA,CAAgB;IAAA;IAAA,CAAAnH,cAAA,GAAAE,CAAA,QAAG8G,cAAA;IAErD;IACA,MAAMI,WAAA;IAAA;IAAA,CAAApH,cAAA,GAAAE,CAAA,QAAc,MAAMiB,WAAA,CAAAkG,mBAAmB,CAACC,iBAAiB,CAC7DJ,YAAA,CAAahE,KAAK;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IAEpB,IAAI,CAACkH,WAAA,EAAa;MAAA;MAAApH,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAChB,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAMI,WAAA,CAAAC,yBAAyB,CAACmG;MAAgB,GAClD;QAAEvG,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAhB,cAAA,GAAAW,CAAA;IAAA;IAEA;IACA,MAAM6G,SAAA;IAAA;IAAA,CAAAxH,cAAA,GAAAE,CAAA,QAAY,MAAMiB,WAAA,CAAAkG,mBAAmB,CAACI,eAAe,CACzDN,cAAA,CAAenE,GAAG;IAAA;IAAAhD,cAAA,GAAAE,CAAA;IAEpB,IAAI,CAACsH,SAAA,EAAW;MAAA;MAAAxH,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MACd,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAMI,WAAA,CAAAC,yBAAyB,CAACsG;MAAc,GAChD;QAAE1G,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAhB,cAAA,GAAAW,CAAA;IAAA;IAEA;IACA,MAAMgH,SAAA;IAAA;IAAA,CAAA3H,cAAA,GAAAE,CAAA,QAAY,MAAM,IAAA0H,SAAA,CAAAC,IAAI,EAACX,YAAA,CAAaY,KAAK,EAAE;IAEjD;IACA,MAAMC,QAAA;IAAA;IAAA,CAAA/H,cAAA,GAAAE,CAAA,QAAWiH,cAAA,CAAenE,GAAG,CAACC,OAAO,CAAC,OAAO;IAEnD;IACA,MAAM+E,SAAA;IAAA;IAAA,CAAAhI,cAAA,GAAAE,CAAA,QAAY,MAAM2D,OAAA,CAAAC,MAAM,CAACmE,YAAY,CAAC,MAAMC,EAAA;MAAA;MAAAlI,cAAA,GAAAC,CAAA;MAChD;MACA,MAAMkI,WAAA;MAAA;MAAA,CAAAnI,cAAA,GAAAE,CAAA,QAAc,MAAMgI,EAAA,CAAGtF,OAAO,CAACwF,MAAM,CAAC;QAC1CC,IAAA,EAAM;UACJxF,IAAA,EAAMqE,YAAA,CAAarE,IAAI;UACvBK,KAAA,EAAOgE,YAAA,CAAahE,KAAK;UACzB4E,KAAA,EAAOH,SAAA;UACPzG,QAAA,EAAU;UACVmD,KAAA,EAAO;QACT;MACF;MAEA;MACA,MAAMiE,aAAA;MAAA;MAAA,CAAAtI,cAAA,GAAAE,CAAA,QAAgB,MAAMgI,EAAA,CAAGnE,SAAS,CAACqE,MAAM,CAAC;QAC9CC,IAAA,EAAM;UACJE,SAAA,EAAWJ,WAAA,CAAY/D,EAAE;UACzBpB,GAAA,EAAK+E,QAAA;UACL1C,EAAA,EAAI8B,cAAA,CAAe9B,EAAE;UACrBC,cAAA,EAAgB6B,cAAA,CAAe7B,cAAc;UAAA;UAAA,CAAAtF,cAAA,GAAAW,CAAA,WACzC,IAAI0C,IAAA,CAAK8D,cAAA,CAAe7B,cAAc;UAAA;UAAA,CAAAtF,cAAA,GAAAW,CAAA,WACtC;UACJ4E,QAAA,EAAU4B,cAAA,CAAe5B,QAAQ;UACjCC,OAAA,EAAS2B,cAAA,CAAe3B,OAAO;UAC/BC,QAAA,EAAU0B,cAAA,CAAe1B,QAAQ;UACjCC,GAAA,EAAKyB,cAAA,CAAezB,GAAG;UACvBC,MAAA,EAAQwB,cAAA,CAAexB,MAAM;UAC7BC,MAAA,EAAQuB,cAAA,CAAevB,MAAM;UAC7BzC,YAAA,EAAc,IAAIE,IAAA,CAAK8D,cAAA,CAAehE,YAAY;UAClDf,KAAA,EAAO+E,cAAA,CAAe/E,KAAK;UAC3BD,KAAA,EAAOgF,cAAA,CAAehF,KAAK;UAC3BE,YAAA,EAAc8E,cAAA,CAAe9E,YAAY;UACzCwD,OAAA,EAASsB,cAAA,CAAetB,OAAO;UAC/B7E,MAAA,EAAQmG,cAAA,CAAenG,MAAM;UAC7B8E,WAAA,EAAaqB,cAAA,CAAerB,WAAW;UACvCC,IAAA,EAAMoB,cAAA,CAAepB;QACvB;QACA7B,OAAA,EAAS;UACPtB,OAAA,EAAS;YACPuB,MAAA,EAAQ;cACNC,EAAA,EAAI;cACJvB,IAAA,EAAM;cACNK,KAAA,EAAO;cACPmB,KAAA,EAAO;cACPC,QAAA,EAAU;cACVC,YAAA,EAAc;YAChB;UACF;QACF;MACF;MAEA;MAAA;MAAAvE,cAAA,GAAAE,CAAA;MACA,MAAMgI,EAAA,CAAGM,2BAA2B,CAACJ,MAAM,CAAC;QAC1CC,IAAA,EAAM;UACJI,WAAA,EAAaH,aAAA,CAAclE,EAAE;UAC7BsE,IAAA,EAAM;UACNC,SAAA,EAAW,aAAazB,YAAA,CAAarE,IAAI,aAAa;UACtDyB,QAAA,EAAU,IAAIjB,IAAA;UACduF,WAAA,EAAavI,OAAA,CAAQK,IAAI,CAAC0D,EAAE;UAC5ByE,EAAA;UAAI;UAAA,CAAA7I,cAAA,GAAAW,CAAA,WAAAP,OAAA,CAAQ0I,OAAO,CAACC,GAAG,CAAC;UAAA;UAAA,CAAA/I,cAAA,GAAAW,CAAA,WAAsB;QAChD;MACF;MAAA;MAAAX,cAAA,GAAAE,CAAA;MAEA,OAAOoI,aAAA;IACT;IAAA;IAAAtI,cAAA,GAAAE,CAAA;IAEA,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MACEkI,QAAA,EAAU;MACVjF,SAAA,EAAW;QACTK,EAAA,EAAI4D,SAAA,CAAU5D,EAAE;QAChBpB,GAAA,EAAKgF,SAAA,CAAUhF,GAAG;QAClBqC,EAAA,EAAI2C,SAAA,CAAU3C,EAAE;QAChBC,cAAA,EAAgB0C,SAAA,CAAU1C,cAAc;QACxCC,QAAA,EAAUyC,SAAA,CAAUzC,QAAQ;QAC5BC,OAAA,EAASwC,SAAA,CAAUxC,OAAO;QAC1BC,QAAA,EAAUuC,SAAA,CAAUvC,QAAQ;QAC5BC,GAAA,EAAKsC,SAAA,CAAUtC,GAAG;QAClBC,MAAA,EAAQqC,SAAA,CAAUrC,MAAM;QACxBC,MAAA,EAAQoC,SAAA,CAAUpC,MAAM;QACxBzC,YAAA,EAAc6E,SAAA,CAAU7E,YAAY;QACpCf,KAAA,EAAO4F,SAAA,CAAU5F,KAAK;QACtBD,KAAA,EAAO6F,SAAA,CAAU7F,KAAK;QACtBE,YAAA,EAAc2F,SAAA,CAAU3F,YAAY;QACpCwD,OAAA,EAASmC,SAAA,CAAUnC,OAAO;QAC1B7E,MAAA,EAAQgH,SAAA,CAAUhH,MAAM;QACxB8E,WAAA,EAAakC,SAAA,CAAUlC,WAAW;QAClCC,IAAA,EAAMiC,SAAA,CAAUjC,IAAI;QACpBzB,QAAA,EAAU0D,SAAA,CAAU1D,QAAQ;QAC5BC,YAAA,EAAcyD,SAAA,CAAUzD,YAAY;QACpC3B,OAAA,EAASoF,SAAA,CAAUpF;MACrB;IACF,GACA;MAAE5B,MAAA,EAAQ;IAAI;EAElB,EAAE,OAAOuF,KAAA,EAAO;IAAA;IAAAvG,cAAA,GAAAE,CAAA;IACdsG,OAAA,CAAQD,KAAK,CAAC,4BAA4BA,KAAA;IAAA;IAAAvG,cAAA,GAAAE,CAAA;IAE1C,IAAIqG,KAAA,YAAiBE,IAAA,CAAAC,QAAQ,EAAE;MAAA;MAAA1G,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAE,CAAA;MAC7B,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QACEC,IAAA,EAAMI,WAAA,CAAAC,yBAAyB,CAACuF,eAAe;QAC/CC,QAAA,EAAUL,KAAA,CAAMM;MAClB,GACA;QAAE7F,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAhB,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAEA,OAAOU,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,IAAA,EAAMI,WAAA,CAAAC,yBAAyB,CAAC0F;IAAa,GAC/C;MAAE9F,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}