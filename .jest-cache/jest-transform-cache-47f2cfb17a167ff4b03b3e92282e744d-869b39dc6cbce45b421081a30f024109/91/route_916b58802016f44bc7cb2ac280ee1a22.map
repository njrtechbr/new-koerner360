{"version":3,"names":["GET","cov_k67apmuj7","f","s","POST","rankingSchema","_zod","z","object","filtros","periodoIds","array","string","optional","atendenteIds","setores","departamentos","dataInicio","transform","str","b","Date","undefined","dataFim","notaMinima","number","min","max","notaMaxima","limite","default","request","session","_nextauth","getServerSession","_auth","authOptions","_server","NextResponse","json","error","status","includes","user","userType","body","validacao","safeParse","success","details","errors","data","ranking","_metricasavaliacoes","buscarRankingAtendentes","message","length","meta","total","console","searchParams","URL","url","parseInt","get","periodoId","setor","departamento"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\metricas\\ranking\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { buscarRankingAtendentes, FiltrosMetricas } from '@/lib/utils/metricas-avaliacoes';\nimport { z } from 'zod';\n\n// Schema de validação para os filtros e parâmetros\nconst rankingSchema = z.object({\n  filtros: z.object({\n    periodoIds: z.array(z.string()).optional(),\n    atendenteIds: z.array(z.string()).optional(),\n    setores: z.array(z.string()).optional(),\n    departamentos: z.array(z.string()).optional(),\n    dataInicio: z.string().transform(str => str ? new Date(str) : undefined).optional(),\n    dataFim: z.string().transform(str => str ? new Date(str) : undefined).optional(),\n    notaMinima: z.number().min(1).max(5).optional(),\n    notaMaxima: z.number().min(1).max(5).optional()\n  }).optional(),\n  limite: z.number().min(1).max(100).optional().default(10)\n});\n\n/**\n * POST /api/avaliacoes/metricas/ranking\n * Busca ranking de atendentes por média de avaliações\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN e GESTOR podem acessar métricas)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { error: 'Acesso negado. Apenas administradores e gestores podem acessar métricas.' },\n        { status: 403 }\n      );\n    }\n\n    // Validar dados da requisição\n    const body = await request.json();\n    const validacao = rankingSchema.safeParse(body);\n    \n    if (!validacao.success) {\n      return NextResponse.json(\n        { \n          error: 'Dados inválidos',\n          details: validacao.error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    const { filtros = {}, limite } = validacao.data;\n\n    // Buscar ranking de atendentes\n    const ranking = await buscarRankingAtendentes(filtros, limite);\n\n    return NextResponse.json({\n      success: true,\n      data: ranking,\n      message: `Ranking de ${ranking.length} atendentes obtido com sucesso`,\n      meta: {\n        total: ranking.length,\n        limite\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar ranking de atendentes:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        message: 'Não foi possível buscar o ranking de atendentes'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/avaliacoes/metricas/ranking\n * Busca ranking de atendentes com parâmetros de query\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões\n    if (!['ADMIN', 'GESTOR'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { error: 'Acesso negado. Apenas administradores e gestores podem acessar métricas.' },\n        { status: 403 }\n      );\n    }\n\n    // Extrair parâmetros de query\n    const { searchParams } = new URL(request.url);\n    const limite = parseInt(searchParams.get('limite') || '10');\n    const periodoId = searchParams.get('periodoId');\n    const setor = searchParams.get('setor');\n    const departamento = searchParams.get('departamento');\n\n    // Construir filtros\n    const filtros: FiltrosMetricas = {};\n    \n    if (periodoId) {\n      filtros.periodoIds = [periodoId];\n    }\n    \n    if (setor) {\n      filtros.setores = [setor];\n    }\n    \n    if (departamento) {\n      filtros.departamentos = [departamento];\n    }\n\n    // Validar limite\n    if (limite < 1 || limite > 100) {\n      return NextResponse.json(\n        { error: 'Limite deve estar entre 1 e 100' },\n        { status: 400 }\n      );\n    }\n\n    // Buscar ranking de atendentes\n    const ranking = await buscarRankingAtendentes(filtros, limite);\n\n    return NextResponse.json({\n      success: true,\n      data: ranking,\n      message: `Ranking de ${ranking.length} atendentes obtido com sucesso`,\n      meta: {\n        total: ranking.length,\n        limite,\n        filtros: {\n          periodoId,\n          setor,\n          departamento\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar ranking de atendentes:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        message: 'Não foi possível buscar o ranking de atendentes'\n      },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}