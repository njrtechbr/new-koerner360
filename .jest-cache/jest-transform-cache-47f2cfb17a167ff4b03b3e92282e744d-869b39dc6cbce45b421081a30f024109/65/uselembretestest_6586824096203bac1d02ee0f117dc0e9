26491b540a4c55f08af6a3a1e5e8fee8
"use strict";
jest.mock('@/hooks/use-toast', ()=>({
        useToast: ()=>({
                toast: mockToast
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _uselembretes = require("../use-lembretes");
// Mock do hook useToast
const mockToast = jest.fn();
// Mock do fetch global
const mockFetch = jest.fn();
global.fetch = mockFetch;
// Mock dos dados de teste
const mockResultadoLembretes = {
    dados: [
        {
            id: '1',
            avaliacaoId: '1',
            usuarioId: '1',
            tipo: 'lembrete',
            dataEnvio: new Date().toISOString(),
            enviado: false,
            tentativas: 0,
            ultimaTentativa: null,
            erro: null,
            criadoEm: new Date().toISOString(),
            usuario: {
                id: '1',
                nome: 'João Silva',
                email: 'joao@teste.com'
            },
            avaliacao: {
                id: '1',
                prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
                status: 'pendente',
                avaliado: {
                    id: '1',
                    nome: 'João Silva',
                    email: 'joao@teste.com'
                },
                avaliador: {
                    id: '2',
                    nome: 'Maria Santos',
                    email: 'maria@teste.com'
                },
                periodo: {
                    id: '1',
                    nome: 'Q1 2024',
                    dataInicio: '2024-01-01',
                    dataFim: '2024-03-31'
                }
            }
        }
    ],
    paginacao: {
        paginaAtual: 1,
        totalPaginas: 1,
        totalItens: 1,
        itensPorPagina: 50,
        temProximaPagina: false,
        temPaginaAnterior: false
    }
};
(0, _globals.describe)('useLembretes', ()=>{
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
        // Mock inicial para useEffect
        mockFetch.mockResolvedValue({
            ok: true,
            json: async ()=>mockResultadoLembretes
        });
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.describe)('inicialização', ()=>{
        (0, _globals.it)('deve carregar lembretes na inicialização', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar o useEffect executar
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            (0, _globals.expect)(result.current.lembretes).toEqual(mockResultadoLembretes.dados);
            (0, _globals.expect)(result.current.erro).toBeNull();
            (0, _globals.expect)(mockFetch).toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('buscarLembretes', ()=>{
        (0, _globals.it)('deve buscar lembretes com sucesso', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            // Fazer nova busca
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            await (0, _react.act)(async ()=>{
                await result.current.buscarLembretes();
            });
            (0, _globals.expect)(result.current.lembretes).toEqual(mockResultadoLembretes.dados);
            (0, _globals.expect)(result.current.carregando).toBe(false);
            (0, _globals.expect)(result.current.erro).toBeNull();
        });
        (0, _globals.it)('deve lidar com erro na busca', async ()=>{
            const errorMessage = 'Erro ao buscar lembretes';
            // Cobrir possíveis chamadas duplicadas do useEffect (React 18 StrictMode)
            mockFetch.mockResolvedValueOnce({
                ok: false,
                json: async ()=>({
                        erro: errorMessage
                    })
            });
            mockFetch.mockResolvedValueOnce({
                ok: false,
                json: async ()=>({
                        erro: errorMessage
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguarda estado ser atualizado pelo fluxo de erro
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
                (0, _globals.expect)(result.current.erro).toBe(errorMessage);
            }, {
                timeout: 15000
            });
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro ao buscar lembretes',
                description: errorMessage,
                variant: 'destructive'
            });
            // Não afirmar contagem exata devido a possíveis chamadas duplicadas em StrictMode
            (0, _globals.expect)(mockFetch).toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('buscarLembrete', ()=>{
        (0, _globals.it)('deve buscar lembrete específico com sucesso', async ()=>{
            // Configurar mocks separadamente para evitar interferência e cobrir chamadas duplicadas
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            // Mock para buscarLembrete específico
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        dados: mockResultadoLembretes.dados[0]
                    })
            });
            let lembrete;
            await (0, _react.act)(async ()=>{
                lembrete = await result.current.buscarLembrete('1');
            });
            // Verifica se retorna o objeto direto
            (0, _globals.expect)(lembrete).toEqual(mockResultadoLembretes.dados[0]);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/lembretes/1');
        });
        (0, _globals.it)('deve lidar com erro ao buscar lembrete específico', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            const errorMessage = 'Lembrete não encontrado';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            let lembrete;
            await (0, _react.act)(async ()=>{
                lembrete = await result.current.buscarLembrete('999');
            });
            (0, _globals.expect)(lembrete).toBeNull();
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro ao buscar lembrete',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('criarLembrete', ()=>{
        (0, _globals.it)('deve criar lembrete com sucesso', async ()=>{
            const novoLembrete = {
                avaliacaoId: '1',
                usuarioId: '1',
                tipo: 'lembrete',
                dataEnvio: new Date().toISOString()
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        dados: {
                            ...novoLembrete,
                            id: '2'
                        }
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.criarLembrete(novoLembrete);
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Lembrete criado',
                description: 'Lembrete criado com sucesso'
            });
        });
        (0, _globals.it)('deve lidar com erro ao criar lembrete', async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            const errorMessage = 'Erro ao criar lembrete';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const novoLembrete = {
                avaliacaoId: '1',
                usuarioId: '1',
                tipo: 'lembrete',
                dataEnvio: new Date().toISOString()
            };
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.criarLembrete(novoLembrete);
            });
            (0, _globals.expect)(sucesso).toBe(false);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro ao criar lembrete',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('atualizarLembrete', ()=>{
        (0, _globals.it)('deve atualizar lembrete com sucesso', async ()=>{
            const dadosAtualizacao = {
                dataEnvio: new Date().toISOString(),
                observacoes: 'Observação atualizada'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        dados: {
                            ...mockResultadoLembretes.dados[0],
                            ...dadosAtualizacao
                        }
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.atualizarLembrete('1', dadosAtualizacao);
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Lembrete atualizado',
                description: 'Lembrete atualizado com sucesso'
            });
        });
    });
    (0, _globals.describe)('removerLembrete', ()=>{
        (0, _globals.it)('deve remover lembrete com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.removerLembrete('1');
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Lembrete removido',
                description: 'Lembrete removido com sucesso'
            });
        });
    });
    (0, _globals.describe)('executarAcaoLembrete', ()=>{
        (0, _globals.it)('deve executar ação no lembrete com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        mensagem: 'Ação executada com sucesso'
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.executarAcaoLembrete('1', 'reenviar');
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Ação executada',
                description: 'Ação executada com sucesso'
            });
        });
    });
    (0, _globals.describe)('removerLembretesLote', ()=>{
        (0, _globals.it)('deve remover lembretes em lote com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        mensagem: 'Lembretes removidos com sucesso'
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguardar inicialização
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            });
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.removerLembretesLote('limpeza', {
                    dias: 30
                });
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Lembretes removidos',
                description: 'Lembretes removidos com sucesso'
            });
        });
    });
    (0, _globals.describe)('estados', ()=>{
        (0, _globals.it)('deve gerenciar estado de carregamento corretamente', async ()=>{
            let resolvePromise;
            const promise = new Promise((resolve)=>{
                resolvePromise = resolve;
            });
            // Mock fetch para simular delay
            mockFetch.mockImplementationOnce(()=>promise);
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Inicialmente deve estar carregando (buscarLembretes é chamado no useEffect)
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(true);
            }, {
                timeout: 15000
            });
            // Resolve promise para finalizar carregamento
            resolvePromise({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            // Aguarda o carregamento terminar
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            }, {
                timeout: 15000
            });
        }, 20000);
        (0, _globals.it)('deve gerenciar paginação corretamente', async ()=>{
            const resultadoComPaginacao = {
                ...mockResultadoLembretes,
                paginacao: {
                    paginaAtual: 1,
                    totalPaginas: 3,
                    totalItens: 25,
                    itensPorPagina: 10
                }
            };
            // Cobrir possíveis chamadas duplicadas do useEffect (React 18 StrictMode)
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>resultadoComPaginacao
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>resultadoComPaginacao
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Aguarda o carregamento inicial
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.carregando).toBe(false);
            }, {
                timeout: 15000
            });
            // Verifica estado inicial da paginação
            (0, _globals.expect)(result.current.paginacao.paginaAtual).toBe(1);
            (0, _globals.expect)(result.current.paginacao.totalPaginas).toBe(3);
            // Mock para a troca de página
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...resultadoComPaginacao,
                        paginacao: {
                            ...resultadoComPaginacao.paginacao,
                            paginaAtual: 2
                        }
                    })
            });
            // Testa navegação para próxima página usando a API real do hook
            await (0, _react.act)(async ()=>{
                await result.current.buscarLembretes({
                    pagina: 2
                });
            });
            await (0, _react.waitFor)(()=>{
                (0, _globals.expect)(result.current.paginacao.paginaAtual).toBe(2);
            }, {
                timeout: 15000
            });
        }, 20000);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmVyZXUgSnJcXERvY3VtZW50c1xcRGV2XFxuZXdcXHNyY1xcaG9va3NcXF9fdGVzdHNfX1xcdXNlLWxlbWJyZXRlcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QsIGJlZm9yZUVhY2gsIGFmdGVyRWFjaCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuaW1wb3J0IHsgdXNlTGVtYnJldGVzIH0gZnJvbSAnLi4vdXNlLWxlbWJyZXRlcyc7XG5cbi8vIE1vY2sgZG8gaG9vayB1c2VUb2FzdFxuY29uc3QgbW9ja1RvYXN0ID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCdAL2hvb2tzL3VzZS10b2FzdCcsICgpID0+ICh7XG4gIHVzZVRvYXN0OiAoKSA9PiAoe1xuICAgIHRvYXN0OiBtb2NrVG9hc3QsXG4gIH0pLFxufSkpO1xuXG4vLyBNb2NrIGRvIGZldGNoIGdsb2JhbFxuY29uc3QgbW9ja0ZldGNoID0gamVzdC5mbigpO1xuKGdsb2JhbCBhcyBhbnkpLmZldGNoID0gbW9ja0ZldGNoO1xuXG4vLyBNb2NrIGRvcyBkYWRvcyBkZSB0ZXN0ZVxuY29uc3QgbW9ja1Jlc3VsdGFkb0xlbWJyZXRlcyA9IHtcbiAgZGFkb3M6IFtcbiAgICB7XG4gICAgICBpZDogJzEnLFxuICAgICAgYXZhbGlhY2FvSWQ6ICcxJyxcbiAgICAgIHVzdWFyaW9JZDogJzEnLFxuICAgICAgdGlwbzogJ2xlbWJyZXRlJyxcbiAgICAgIGRhdGFFbnZpbzogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgZW52aWFkbzogZmFsc2UsXG4gICAgICB0ZW50YXRpdmFzOiAwLFxuICAgICAgdWx0aW1hVGVudGF0aXZhOiBudWxsLFxuICAgICAgZXJybzogbnVsbCxcbiAgICAgIGNyaWFkb0VtOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB1c3VhcmlvOiB7XG4gICAgICAgIGlkOiAnMScsXG4gICAgICAgIG5vbWU6ICdKb8OjbyBTaWx2YScsXG4gICAgICAgIGVtYWlsOiAnam9hb0B0ZXN0ZS5jb20nLFxuICAgICAgfSxcbiAgICAgIGF2YWxpYWNhbzoge1xuICAgICAgICBpZDogJzEnLFxuICAgICAgICBwcmF6bzogbmV3IERhdGUoRGF0ZS5ub3coKSArIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgICAgICBzdGF0dXM6ICdwZW5kZW50ZScsXG4gICAgICAgIGF2YWxpYWRvOiB7XG4gICAgICAgICAgaWQ6ICcxJyxcbiAgICAgICAgICBub21lOiAnSm/Do28gU2lsdmEnLFxuICAgICAgICAgIGVtYWlsOiAnam9hb0B0ZXN0ZS5jb20nLFxuICAgICAgICB9LFxuICAgICAgICBhdmFsaWFkb3I6IHtcbiAgICAgICAgICBpZDogJzInLFxuICAgICAgICAgIG5vbWU6ICdNYXJpYSBTYW50b3MnLFxuICAgICAgICAgIGVtYWlsOiAnbWFyaWFAdGVzdGUuY29tJyxcbiAgICAgICAgfSxcbiAgICAgICAgcGVyaW9kbzoge1xuICAgICAgICAgIGlkOiAnMScsXG4gICAgICAgICAgbm9tZTogJ1ExIDIwMjQnLFxuICAgICAgICAgIGRhdGFJbmljaW86ICcyMDI0LTAxLTAxJyxcbiAgICAgICAgICBkYXRhRmltOiAnMjAyNC0wMy0zMScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIF0sXG4gIHBhZ2luYWNhbzoge1xuICAgIHBhZ2luYUF0dWFsOiAxLFxuICAgIHRvdGFsUGFnaW5hczogMSxcbiAgICB0b3RhbEl0ZW5zOiAxLFxuICAgIGl0ZW5zUG9yUGFnaW5hOiA1MCxcbiAgICB0ZW1Qcm94aW1hUGFnaW5hOiBmYWxzZSxcbiAgICB0ZW1QYWdpbmFBbnRlcmlvcjogZmFsc2UsXG4gIH0sXG59O1xuXG5kZXNjcmliZSgndXNlTGVtYnJldGVzJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAvLyBNb2NrIGluaWNpYWwgcGFyYSB1c2VFZmZlY3RcbiAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgb2s6IHRydWUsXG4gICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrUmVzdWx0YWRvTGVtYnJldGVzLFxuICAgIH0pO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnaW5pY2lhbGl6YcOnw6NvJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGNhcnJlZ2FyIGxlbWJyZXRlcyBuYSBpbmljaWFsaXphw6fDo28nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VMZW1icmV0ZXMoKSk7XG5cbiAgICAgIC8vIEFndWFyZGFyIG8gdXNlRWZmZWN0IGV4ZWN1dGFyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNhcnJlZ2FuZG8pLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5sZW1icmV0ZXMpLnRvRXF1YWwobW9ja1Jlc3VsdGFkb0xlbWJyZXRlcy5kYWRvcyk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJybykudG9CZU51bGwoKTtcbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2J1c2NhckxlbWJyZXRlcycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBidXNjYXIgbGVtYnJldGVzIGNvbSBzdWNlc3NvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVtYnJldGVzKCkpO1xuXG4gICAgICAvLyBBZ3VhcmRhciBpbmljaWFsaXphw6fDo29cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gRmF6ZXIgbm92YSBidXNjYVxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrUmVzdWx0YWRvTGVtYnJldGVzLFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmJ1c2NhckxlbWJyZXRlcygpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5sZW1icmV0ZXMpLnRvRXF1YWwobW9ja1Jlc3VsdGFkb0xlbWJyZXRlcy5kYWRvcyk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJybykudG9CZU51bGwoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGxpZGFyIGNvbSBlcnJvIG5hIGJ1c2NhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ0Vycm8gYW8gYnVzY2FyIGxlbWJyZXRlcyc7XG5cbiAgICAgIC8vIENvYnJpciBwb3Nzw612ZWlzIGNoYW1hZGFzIGR1cGxpY2FkYXMgZG8gdXNlRWZmZWN0IChSZWFjdCAxOCBTdHJpY3RNb2RlKVxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgZXJybzogZXJyb3JNZXNzYWdlIH0pLFxuICAgICAgfSBhcyBhbnkpO1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgZXJybzogZXJyb3JNZXNzYWdlIH0pLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VMZW1icmV0ZXMoKSk7XG5cbiAgICAgIC8vIEFndWFyZGEgZXN0YWRvIHNlciBhdHVhbGl6YWRvIHBlbG8gZmx1eG8gZGUgZXJyb1xuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jYXJyZWdhbmRvKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm8pLnRvQmUoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH0sIHsgdGltZW91dDogMTUwMDAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrVG9hc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgdGl0bGU6ICdFcnJvIGFvIGJ1c2NhciBsZW1icmV0ZXMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3JNZXNzYWdlLFxuICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgICAgfSk7XG4gICAgICAvLyBOw6NvIGFmaXJtYXIgY29udGFnZW0gZXhhdGEgZGV2aWRvIGEgcG9zc8OtdmVpcyBjaGFtYWRhcyBkdXBsaWNhZGFzIGVtIFN0cmljdE1vZGVcbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2J1c2NhckxlbWJyZXRlJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGJ1c2NhciBsZW1icmV0ZSBlc3BlY8OtZmljbyBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENvbmZpZ3VyYXIgbW9ja3Mgc2VwYXJhZGFtZW50ZSBwYXJhIGV2aXRhciBpbnRlcmZlcsOqbmNpYSBlIGNvYnJpciBjaGFtYWRhcyBkdXBsaWNhZGFzXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IG1vY2tSZXN1bHRhZG9MZW1icmV0ZXMsXG4gICAgICB9IGFzIGFueSk7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IG1vY2tSZXN1bHRhZG9MZW1icmV0ZXMsXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUxlbWJyZXRlcygpKTtcblxuICAgICAgLy8gQWd1YXJkYXIgaW5pY2lhbGl6YcOnw6NvXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNhcnJlZ2FuZG8pLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE1vY2sgcGFyYSBidXNjYXJMZW1icmV0ZSBlc3BlY8OtZmljb1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBkYWRvczogbW9ja1Jlc3VsdGFkb0xlbWJyZXRlcy5kYWRvc1swXSB9KSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgbGV0IGxlbWJyZXRlO1xuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgbGVtYnJldGUgPSBhd2FpdCByZXN1bHQuY3VycmVudC5idXNjYXJMZW1icmV0ZSgnMScpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFZlcmlmaWNhIHNlIHJldG9ybmEgbyBvYmpldG8gZGlyZXRvXG4gICAgICBleHBlY3QobGVtYnJldGUpLnRvRXF1YWwobW9ja1Jlc3VsdGFkb0xlbWJyZXRlcy5kYWRvc1swXSk7XG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2FwaS9sZW1icmV0ZXMvMScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGlkYXIgY29tIGVycm8gYW8gYnVzY2FyIGxlbWJyZXRlIGVzcGVjw61maWNvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVtYnJldGVzKCkpO1xuXG4gICAgICAvLyBBZ3VhcmRhciBpbmljaWFsaXphw6fDo29cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ0xlbWJyZXRlIG7Do28gZW5jb250cmFkbyc7XG4gICAgICBtb2NrRmV0Y2gubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpKTtcblxuICAgICAgbGV0IGxlbWJyZXRlO1xuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgbGVtYnJldGUgPSBhd2FpdCByZXN1bHQuY3VycmVudC5idXNjYXJMZW1icmV0ZSgnOTk5Jyk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KGxlbWJyZXRlKS50b0JlTnVsbCgpO1xuICAgICAgZXhwZWN0KG1vY2tUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0aXRsZTogJ0Vycm8gYW8gYnVzY2FyIGxlbWJyZXRlJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yTWVzc2FnZSxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JpYXJMZW1icmV0ZScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBjcmlhciBsZW1icmV0ZSBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG5vdm9MZW1icmV0ZSA9IHtcbiAgICAgICAgYXZhbGlhY2FvSWQ6ICcxJyxcbiAgICAgICAgdXN1YXJpb0lkOiAnMScsXG4gICAgICAgIHRpcG86ICdsZW1icmV0ZScgYXMgY29uc3QsXG4gICAgICAgIGRhdGFFbnZpbzogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfTtcblxuICAgICAgbW9ja0ZldGNoXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIG9rOiB0cnVlLFxuICAgICAgICAgIGpzb246IGFzeW5jICgpID0+ICh7IGRhZG9zOiB7IC4uLm5vdm9MZW1icmV0ZSwgaWQ6ICcyJyB9IH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrUmVzdWx0YWRvTGVtYnJldGVzLFxuICAgICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVtYnJldGVzKCkpO1xuXG4gICAgICAvLyBBZ3VhcmRhciBpbmljaWFsaXphw6fDo29cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgbGV0IHN1Y2Vzc287XG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBzdWNlc3NvID0gYXdhaXQgcmVzdWx0LmN1cnJlbnQuY3JpYXJMZW1icmV0ZShub3ZvTGVtYnJldGUpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChzdWNlc3NvKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG1vY2tUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0aXRsZTogJ0xlbWJyZXRlIGNyaWFkbycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTGVtYnJldGUgY3JpYWRvIGNvbSBzdWNlc3NvJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGlkYXIgY29tIGVycm8gYW8gY3JpYXIgbGVtYnJldGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VMZW1icmV0ZXMoKSk7XG5cbiAgICAgIC8vIEFndWFyZGFyIGluaWNpYWxpemHDp8Ojb1xuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jYXJyZWdhbmRvKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAnRXJybyBhbyBjcmlhciBsZW1icmV0ZSc7XG4gICAgICBtb2NrRmV0Y2gubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpKTtcblxuICAgICAgY29uc3Qgbm92b0xlbWJyZXRlID0ge1xuICAgICAgICBhdmFsaWFjYW9JZDogJzEnLFxuICAgICAgICB1c3VhcmlvSWQ6ICcxJyxcbiAgICAgICAgdGlwbzogJ2xlbWJyZXRlJyBhcyBjb25zdCxcbiAgICAgICAgZGF0YUVudmlvOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9O1xuXG4gICAgICBsZXQgc3VjZXNzbztcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIHN1Y2Vzc28gPSBhd2FpdCByZXN1bHQuY3VycmVudC5jcmlhckxlbWJyZXRlKG5vdm9MZW1icmV0ZSk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHN1Y2Vzc28pLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KG1vY2tUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0aXRsZTogJ0Vycm8gYW8gY3JpYXIgbGVtYnJldGUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3JNZXNzYWdlLFxuICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhdHVhbGl6YXJMZW1icmV0ZScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBhdHVhbGl6YXIgbGVtYnJldGUgY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkYWRvc0F0dWFsaXphY2FvID0ge1xuICAgICAgICBkYXRhRW52aW86IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgb2JzZXJ2YWNvZXM6ICdPYnNlcnZhw6fDo28gYXR1YWxpemFkYScsXG4gICAgICB9O1xuXG4gICAgICBtb2NrRmV0Y2hcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgZGFkb3M6IHsgLi4ubW9ja1Jlc3VsdGFkb0xlbWJyZXRlcy5kYWRvc1swXSwgLi4uZGFkb3NBdHVhbGl6YWNhbyB9IH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrUmVzdWx0YWRvTGVtYnJldGVzLFxuICAgICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVtYnJldGVzKCkpO1xuXG4gICAgICAvLyBBZ3VhcmRhciBpbmljaWFsaXphw6fDo29cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgbGV0IHN1Y2Vzc287XG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBzdWNlc3NvID0gYXdhaXQgcmVzdWx0LmN1cnJlbnQuYXR1YWxpemFyTGVtYnJldGUoJzEnLCBkYWRvc0F0dWFsaXphY2FvKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc3VjZXNzbykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChtb2NrVG9hc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgdGl0bGU6ICdMZW1icmV0ZSBhdHVhbGl6YWRvJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMZW1icmV0ZSBhdHVhbGl6YWRvIGNvbSBzdWNlc3NvJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVtb3ZlckxlbWJyZXRlJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIHJlbW92ZXIgbGVtYnJldGUgY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2hcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgICAgICAgfSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogYXN5bmMgKCkgPT4gbW9ja1Jlc3VsdGFkb0xlbWJyZXRlcyxcbiAgICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUxlbWJyZXRlcygpKTtcblxuICAgICAgLy8gQWd1YXJkYXIgaW5pY2lhbGl6YcOnw6NvXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNhcnJlZ2FuZG8pLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICAgIGxldCBzdWNlc3NvO1xuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgc3VjZXNzbyA9IGF3YWl0IHJlc3VsdC5jdXJyZW50LnJlbW92ZXJMZW1icmV0ZSgnMScpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChzdWNlc3NvKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG1vY2tUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0aXRsZTogJ0xlbWJyZXRlIHJlbW92aWRvJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMZW1icmV0ZSByZW1vdmlkbyBjb20gc3VjZXNzbycsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2V4ZWN1dGFyQWNhb0xlbWJyZXRlJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGV4ZWN1dGFyIGHDp8OjbyBubyBsZW1icmV0ZSBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaFxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBtZW5zYWdlbTogJ0HDp8OjbyBleGVjdXRhZGEgY29tIHN1Y2Vzc28nIH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrUmVzdWx0YWRvTGVtYnJldGVzLFxuICAgICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVtYnJldGVzKCkpO1xuXG4gICAgICAvLyBBZ3VhcmRhciBpbmljaWFsaXphw6fDo29cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgbGV0IHN1Y2Vzc287XG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBzdWNlc3NvID0gYXdhaXQgcmVzdWx0LmN1cnJlbnQuZXhlY3V0YXJBY2FvTGVtYnJldGUoJzEnLCAncmVlbnZpYXInKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc3VjZXNzbykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChtb2NrVG9hc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgdGl0bGU6ICdBw6fDo28gZXhlY3V0YWRhJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdBw6fDo28gZXhlY3V0YWRhIGNvbSBzdWNlc3NvJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVtb3ZlckxlbWJyZXRlc0xvdGUnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcmVtb3ZlciBsZW1icmV0ZXMgZW0gbG90ZSBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaFxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBtZW5zYWdlbTogJ0xlbWJyZXRlcyByZW1vdmlkb3MgY29tIHN1Y2Vzc28nIH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrUmVzdWx0YWRvTGVtYnJldGVzLFxuICAgICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVtYnJldGVzKCkpO1xuXG4gICAgICAvLyBBZ3VhcmRhciBpbmljaWFsaXphw6fDo29cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgbGV0IHN1Y2Vzc287XG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBzdWNlc3NvID0gYXdhaXQgcmVzdWx0LmN1cnJlbnQucmVtb3ZlckxlbWJyZXRlc0xvdGUoJ2xpbXBlemEnLCB7IGRpYXM6IDMwIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChzdWNlc3NvKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG1vY2tUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0aXRsZTogJ0xlbWJyZXRlcyByZW1vdmlkb3MnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0xlbWJyZXRlcyByZW1vdmlkb3MgY29tIHN1Y2Vzc28nLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdlc3RhZG9zJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGdlcmVuY2lhciBlc3RhZG8gZGUgY2FycmVnYW1lbnRvIGNvcnJldGFtZW50ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCByZXNvbHZlUHJvbWlzZTogKHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE1vY2sgZmV0Y2ggcGFyYSBzaW11bGFyIGRlbGF5XG4gICAgICBtb2NrRmV0Y2gubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiBwcm9taXNlIGFzIGFueSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUxlbWJyZXRlcygpKTtcblxuICAgICAgLy8gSW5pY2lhbG1lbnRlIGRldmUgZXN0YXIgY2FycmVnYW5kbyAoYnVzY2FyTGVtYnJldGVzIMOpIGNoYW1hZG8gbm8gdXNlRWZmZWN0KVxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jYXJyZWdhbmRvKS50b0JlKHRydWUpO1xuICAgICAgfSwgeyB0aW1lb3V0OiAxNTAwMCB9KTtcblxuICAgICAgLy8gUmVzb2x2ZSBwcm9taXNlIHBhcmEgZmluYWxpemFyIGNhcnJlZ2FtZW50b1xuICAgICAgcmVzb2x2ZVByb21pc2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gbW9ja1Jlc3VsdGFkb0xlbWJyZXRlc1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFndWFyZGEgbyBjYXJyZWdhbWVudG8gdGVybWluYXJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgICB9LCB7IHRpbWVvdXQ6IDE1MDAwIH0pO1xuICAgIH0sIDIwMDAwKTtcblxuICAgIGl0KCdkZXZlIGdlcmVuY2lhciBwYWdpbmHDp8OjbyBjb3JyZXRhbWVudGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHRhZG9Db21QYWdpbmFjYW8gPSB7XG4gICAgICAgIC4uLm1vY2tSZXN1bHRhZG9MZW1icmV0ZXMsXG4gICAgICAgIHBhZ2luYWNhbzoge1xuICAgICAgICAgIHBhZ2luYUF0dWFsOiAxLFxuICAgICAgICAgIHRvdGFsUGFnaW5hczogMyxcbiAgICAgICAgICB0b3RhbEl0ZW5zOiAyNSxcbiAgICAgICAgICBpdGVuc1BvclBhZ2luYTogMTBcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gQ29icmlyIHBvc3PDrXZlaXMgY2hhbWFkYXMgZHVwbGljYWRhcyBkbyB1c2VFZmZlY3QgKFJlYWN0IDE4IFN0cmljdE1vZGUpXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IHJlc3VsdGFkb0NvbVBhZ2luYWNhb1xuICAgICAgfSBhcyBhbnkpO1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiByZXN1bHRhZG9Db21QYWdpbmFjYW9cbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlTGVtYnJldGVzKCkpO1xuXG4gICAgICAvLyBBZ3VhcmRhIG8gY2FycmVnYW1lbnRvIGluaWNpYWxcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgICB9LCB7IHRpbWVvdXQ6IDE1MDAwIH0pO1xuXG4gICAgICAvLyBWZXJpZmljYSBlc3RhZG8gaW5pY2lhbCBkYSBwYWdpbmHDp8Ojb1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnBhZ2luYWNhby5wYWdpbmFBdHVhbCkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wYWdpbmFjYW8udG90YWxQYWdpbmFzKS50b0JlKDMpO1xuXG4gICAgICAvLyBNb2NrIHBhcmEgYSB0cm9jYSBkZSBww6FnaW5hXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+ICh7XG4gICAgICAgICAgLi4ucmVzdWx0YWRvQ29tUGFnaW5hY2FvLFxuICAgICAgICAgIHBhZ2luYWNhbzogeyAuLi5yZXN1bHRhZG9Db21QYWdpbmFjYW8ucGFnaW5hY2FvLCBwYWdpbmFBdHVhbDogMiB9XG4gICAgICAgIH0pXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIC8vIFRlc3RhIG5hdmVnYcOnw6NvIHBhcmEgcHLDs3hpbWEgcMOhZ2luYSB1c2FuZG8gYSBBUEkgcmVhbCBkbyBob29rXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5idXNjYXJMZW1icmV0ZXMoeyBwYWdpbmE6IDIgfSk7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wYWdpbmFjYW8ucGFnaW5hQXR1YWwpLnRvQmUoMik7XG4gICAgICB9LCB7IHRpbWVvdXQ6IDE1MDAwIH0pO1xuICAgIH0sIDIwMDAwKTtcbiAgfSk7XG59KTsiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ1c2VUb2FzdCIsInRvYXN0IiwibW9ja1RvYXN0IiwiZm4iLCJtb2NrRmV0Y2giLCJnbG9iYWwiLCJmZXRjaCIsIm1vY2tSZXN1bHRhZG9MZW1icmV0ZXMiLCJkYWRvcyIsImlkIiwiYXZhbGlhY2FvSWQiLCJ1c3VhcmlvSWQiLCJ0aXBvIiwiZGF0YUVudmlvIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZW52aWFkbyIsInRlbnRhdGl2YXMiLCJ1bHRpbWFUZW50YXRpdmEiLCJlcnJvIiwiY3JpYWRvRW0iLCJ1c3VhcmlvIiwibm9tZSIsImVtYWlsIiwiYXZhbGlhY2FvIiwicHJhem8iLCJub3ciLCJzdGF0dXMiLCJhdmFsaWFkbyIsImF2YWxpYWRvciIsInBlcmlvZG8iLCJkYXRhSW5pY2lvIiwiZGF0YUZpbSIsInBhZ2luYWNhbyIsInBhZ2luYUF0dWFsIiwidG90YWxQYWdpbmFzIiwidG90YWxJdGVucyIsIml0ZW5zUG9yUGFnaW5hIiwidGVtUHJveGltYVBhZ2luYSIsInRlbVBhZ2luYUFudGVyaW9yIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIm1vY2tSZXNvbHZlZFZhbHVlIiwib2siLCJqc29uIiwiYWZ0ZXJFYWNoIiwicmVzZXRBbGxNb2NrcyIsIml0IiwicmVzdWx0IiwicmVuZGVySG9vayIsInVzZUxlbWJyZXRlcyIsIndhaXRGb3IiLCJleHBlY3QiLCJjdXJyZW50IiwiY2FycmVnYW5kbyIsInRvQmUiLCJsZW1icmV0ZXMiLCJ0b0VxdWFsIiwidG9CZU51bGwiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiYWN0IiwiYnVzY2FyTGVtYnJldGVzIiwiZXJyb3JNZXNzYWdlIiwidGltZW91dCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInZhcmlhbnQiLCJsZW1icmV0ZSIsImJ1c2NhckxlbWJyZXRlIiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwiRXJyb3IiLCJub3ZvTGVtYnJldGUiLCJzdWNlc3NvIiwiY3JpYXJMZW1icmV0ZSIsImRhZG9zQXR1YWxpemFjYW8iLCJvYnNlcnZhY29lcyIsImF0dWFsaXphckxlbWJyZXRlIiwic3VjY2VzcyIsInJlbW92ZXJMZW1icmV0ZSIsIm1lbnNhZ2VtIiwiZXhlY3V0YXJBY2FvTGVtYnJldGUiLCJyZW1vdmVyTGVtYnJldGVzTG90ZSIsImRpYXMiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UiLCJyZXN1bHRhZG9Db21QYWdpbmFjYW8iLCJwYWdpbmEiXSwibWFwcGluZ3MiOiI7QUFNQUEsS0FBS0MsSUFBSSxDQUFDLHFCQUFxQixJQUFPLENBQUE7UUFDcENDLFVBQVUsSUFBTyxDQUFBO2dCQUNmQyxPQUFPQztZQUNULENBQUE7SUFDRixDQUFBOzs7O3VCQVZ5Qzt5QkFDbUI7OEJBQy9CO0FBRTdCLHdCQUF3QjtBQUN4QixNQUFNQSxZQUFZSixLQUFLSyxFQUFFO0FBT3pCLHVCQUF1QjtBQUN2QixNQUFNQyxZQUFZTixLQUFLSyxFQUFFO0FBQ3hCRSxPQUFlQyxLQUFL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