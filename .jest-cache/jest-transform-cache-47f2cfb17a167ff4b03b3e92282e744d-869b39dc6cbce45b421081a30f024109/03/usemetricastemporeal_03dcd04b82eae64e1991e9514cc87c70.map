{"version":3,"names":["cov_4275vweda","actualCoverage","s","default","f","_default","useMetricasAtendenteTempoReal","useMetricasDashboardTempoReal","useMetricasTempoReal","useMultiplasMetricasTempoReal","configuracao","intervalo","b","ativo","endpoint","parametros","onError","onSuccess","onUpdate","dados","setDados","_react","useState","carregando","setCarregando","status","setStatus","conectado","tentativasReconexao","intervalRef","useRef","abortControllerRef","dadosAnterioresRef","buscarDados","useCallback","current","abort","AbortController","url","URL","window","location","origin","Object","entries","forEach","key","value","undefined","searchParams","append","String","response","fetch","toString","method","headers","signal","ok","Error","statusText","novosDados","json","dadosAlteraram","JSON","stringify","prev","ultimaAtualizacao","Date","erro","_sonner","toast","info","description","duration","error","name","console","message","iniciarPolling","setInterval","pararPolling","clearInterval","forcarAtualizacao","reconectar","setTimeout","useEffect","timeout","Math","min","pow","clearTimeout","atendenteId","filtros","log","configuracoes","resultados","map","config","carregandoGeral","some","r","conectadoGeral","every","errosGerais","filter","Boolean","forcarAtualizacaoTodas","reconectarTodas"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-metricas-tempo-real.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { toast } from 'sonner';\n\n/**\n * Interface para configuração de atualização em tempo real\n */\nexport interface ConfiguracaoTempoReal {\n  intervalo?: number; // em milissegundos\n  ativo?: boolean;\n  endpoint: string;\n  parametros?: Record<string, any>;\n  onError?: (error: Error) => void;\n  onSuccess?: (data: any) => void;\n  onUpdate?: (data: any) => void;\n}\n\n/**\n * Interface para status da conexão\n */\nexport interface StatusConexao {\n  conectado: boolean;\n  ultimaAtualizacao?: Date;\n  tentativasReconexao: number;\n  erro?: string;\n}\n\n/**\n * Hook para atualização em tempo real de métricas\n */\nexport function useMetricasTempoReal<T = any>(\n  configuracao: ConfiguracaoTempoReal\n) {\n  const {\n    intervalo = 30000, // 30 segundos por padrão\n    ativo = true,\n    endpoint,\n    parametros = {},\n    onError,\n    onSuccess,\n    onUpdate,\n  } = configuracao;\n\n  const [dados, setDados] = useState<T | null>(null);\n  const [carregando, setCarregando] = useState(false);\n  const [status, setStatus] = useState<StatusConexao>({\n    conectado: false,\n    tentativasReconexao: 0,\n  });\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const dadosAnterioresRef = useRef<T | null>(null);\n\n  // Função para buscar dados\n  const buscarDados = useCallback(async () => {\n    if (!ativo || !endpoint) return;\n\n    try {\n      // Cancelar requisição anterior se ainda estiver pendente\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n\n      abortControllerRef.current = new AbortController();\n\n      setCarregando(true);\n\n      // Construir URL com parâmetros\n      const url = new URL(endpoint, window.location.origin);\n      Object.entries(parametros).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, String(value));\n        }\n      });\n\n      const response = await fetch(url.toString(), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: abortControllerRef.current.signal,\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Erro HTTP: ${response.status} - ${response.statusText}`\n        );\n      }\n\n      const novosDados = await response.json();\n\n      // Verificar se os dados mudaram\n      const dadosAlteraram =\n        JSON.stringify(dadosAnterioresRef.current) !==\n        JSON.stringify(novosDados);\n\n      setDados(novosDados);\n      dadosAnterioresRef.current = novosDados;\n\n      setStatus(prev => ({\n        ...prev,\n        conectado: true,\n        ultimaAtualizacao: new Date(),\n        tentativasReconexao: 0,\n        erro: undefined,\n      }));\n\n      // Chamar callbacks\n      onSuccess?.(novosDados);\n\n      if (dadosAlteraram && dadosAnterioresRef.current !== null) {\n        onUpdate?.(novosDados);\n\n        // Mostrar notificação de atualização\n        toast.info('Métricas atualizadas', {\n          description: 'Os dados foram atualizados automaticamente',\n          duration: 3000,\n        });\n      }\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n        return; // Requisição foi cancelada, não é um erro\n      }\n\n      console.error('Erro ao buscar métricas:', error);\n\n      setStatus(prev => ({\n        ...prev,\n        conectado: false,\n        tentativasReconexao: prev.tentativasReconexao + 1,\n        erro: error.message,\n      }));\n\n      onError?.(error);\n\n      // Mostrar toast de erro apenas se não for muitas tentativas\n      if (status.tentativasReconexao < 3) {\n        toast.error('Erro ao atualizar métricas', {\n          description: error.message,\n          duration: 5000,\n        });\n      }\n    } finally {\n      setCarregando(false);\n    }\n  }, [\n    ativo,\n    endpoint,\n    parametros,\n    onError,\n    onSuccess,\n    onUpdate,\n    status.tentativasReconexao,\n  ]);\n\n  // Função para iniciar polling\n  const iniciarPolling = useCallback(() => {\n    if (!ativo || intervalRef.current) return;\n\n    // Buscar dados imediatamente\n    buscarDados();\n\n    // Configurar intervalo\n    intervalRef.current = setInterval(buscarDados, intervalo);\n  }, [ativo, buscarDados, intervalo]);\n\n  // Função para parar polling\n  const pararPolling = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n\n    setStatus(prev => ({\n      ...prev,\n      conectado: false,\n    }));\n  }, []);\n\n  // Função para forçar atualização\n  const forcarAtualizacao = useCallback(() => {\n    buscarDados();\n  }, [buscarDados]);\n\n  // Função para reconectar\n  const reconectar = useCallback(() => {\n    pararPolling();\n    setStatus(prev => ({\n      ...prev,\n      tentativasReconexao: 0,\n      erro: undefined,\n    }));\n\n    setTimeout(() => {\n      iniciarPolling();\n    }, 1000);\n  }, [pararPolling, iniciarPolling]);\n\n  // Effect para gerenciar o ciclo de vida do polling\n  useEffect(() => {\n    if (ativo) {\n      iniciarPolling();\n    } else {\n      pararPolling();\n    }\n\n    return () => {\n      pararPolling();\n    };\n  }, [ativo, iniciarPolling, pararPolling]);\n\n  // Effect para detectar mudanças nos parâmetros\n  useEffect(() => {\n    if (ativo && intervalRef.current) {\n      // Reiniciar polling com novos parâmetros\n      pararPolling();\n      iniciarPolling();\n    }\n  }, [parametros, ativo, pararPolling, iniciarPolling]);\n\n  // Effect para limpeza na desmontagem\n  useEffect(() => {\n    return () => {\n      pararPolling();\n    };\n  }, [pararPolling]);\n\n  // Effect para gerenciar reconexão automática\n  useEffect(() => {\n    if (\n      !status.conectado &&\n      status.tentativasReconexao > 0 &&\n      status.tentativasReconexao < 5 &&\n      ativo\n    ) {\n      const timeout = setTimeout(\n        () => {\n          reconectar();\n        },\n        Math.min(1000 * Math.pow(2, status.tentativasReconexao), 30000)\n      ); // Backoff exponencial\n\n      return () => clearTimeout(timeout);\n    }\n  }, [status.conectado, status.tentativasReconexao, ativo, reconectar]);\n\n  return {\n    dados,\n    carregando,\n    status,\n    forcarAtualizacao,\n    reconectar,\n    pararPolling,\n    iniciarPolling,\n  };\n}\n\n/**\n * Hook específico para métricas de atendente individual\n */\nexport function useMetricasAtendenteTempoReal(\n  atendenteId: string,\n  filtros?: Record<string, any>\n) {\n  return useMetricasTempoReal({\n    endpoint: `/api/atendentes/${atendenteId}/metricas`,\n    parametros: filtros,\n    intervalo: 30000, // 30 segundos\n    onUpdate: dados => {\n      console.log('Métricas do atendente atualizadas:', dados);\n    },\n  });\n}\n\n/**\n * Hook específico para dashboard geral\n */\nexport function useMetricasDashboardTempoReal(filtros?: Record<string, any>) {\n  return useMetricasTempoReal({\n    endpoint: '/api/atendentes/dashboard',\n    parametros: filtros,\n    intervalo: 60000, // 1 minuto\n    onUpdate: dados => {\n      console.log('Dashboard atualizado:', dados);\n    },\n  });\n}\n\n/**\n * Hook para múltiplas métricas em tempo real\n */\nexport function useMultiplasMetricasTempoReal(\n  configuracoes: ConfiguracaoTempoReal[]\n) {\n  const resultados = configuracoes.map(config => useMetricasTempoReal(config));\n\n  const carregandoGeral = resultados.some(r => r.carregando);\n  const conectadoGeral = resultados.every(r => r.status.conectado);\n  const errosGerais = resultados\n    .filter(r => r.status.erro)\n    .map(r => r.status.erro)\n    .filter(Boolean);\n\n  const forcarAtualizacaoTodas = useCallback(() => {\n    resultados.forEach(r => r.forcarAtualizacao());\n  }, [resultados]);\n\n  const reconectarTodas = useCallback(() => {\n    resultados.forEach(r => r.reconectar());\n  }, [resultados]);\n\n  return {\n    resultados,\n    carregandoGeral,\n    conectadoGeral,\n    errosGerais,\n    forcarAtualizacaoTodas,\n    reconectarTodas,\n  };\n}\n\nexport default useMetricasTempoReal;\n"],"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","ignoreList":[]}