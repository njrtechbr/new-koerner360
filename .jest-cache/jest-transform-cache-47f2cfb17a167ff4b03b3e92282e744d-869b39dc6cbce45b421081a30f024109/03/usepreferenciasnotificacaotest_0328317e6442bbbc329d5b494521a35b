11a98388465281b6288cb0b9101c8e2c
"use strict";
// Mock do hook useToast
jest.mock('../use-toast', ()=>({
        useToast: vi.fn(()=>({
                toast: jest.fn()
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _usepreferenciasnotificacao = require("../use-preferencias-notificacao");
const _usetoast = require("../use-toast");
// Mock do fetch global
const mockFetch = jest.fn();
global.fetch = mockFetch;
// Mock dos dados de teste
const mockPreferencias = {
    id: '1',
    usuarioId: 'user-1',
    ativo: true,
    email: {
        ativo: true,
        formato: 'html'
    },
    idioma: 'pt-BR',
    conteudo: {
        incluirDetalhesAvaliacao: true,
        incluirLinkDireto: true,
        incluirResumoEstatisticas: false
    },
    urgenciaMinima: 'media',
    tipos: {
        avaliacaoPendente: {
            ativo: true,
            frequencia: 'diaria',
            diasAntecedencia: 3
        },
        avaliacaoVencida: {
            ativo: true,
            frequencia: 'imediata'
        },
        avaliacaoProximaVencimento: {
            ativo: true,
            frequencia: 'diaria',
            diasAntecedencia: 1
        },
        novaAvaliacao: {
            ativo: false,
            frequencia: 'imediata'
        },
        avaliacaoCompletada: {
            ativo: false,
            frequencia: 'semanal'
        },
        lembretePersonalizado: {
            ativo: true,
            frequencia: 'conforme_agendado'
        }
    },
    horario: {
        envio: '09:00',
        incluirFinsDeSemanaSemana: false,
        incluirFeriados: false
    },
    filtros: {
        apenasMinhasAvaliacoes: false,
        apenasAvaliacoesQueAvalia: true
    },
    pausa: {
        ativo: false,
        ate: null,
        motivo: null
    },
    criadoEm: new Date().toISOString(),
    atualizadoEm: new Date().toISOString()
};
const mockStatusPausa = {
    pausado: false,
    ate: null,
    motivo: null
};
(0, _globals.describe)('usePreferenciasNotificacao', ()=>{
    const mockToast = jest.fn();
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.describe)('buscarPreferencias', ()=>{
        (0, _globals.it)('deve buscar preferências com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockPreferencias
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarPreferencias();
            });
            (0, _globals.expect)(result.current.preferencias).toEqual(mockPreferencias);
            (0, _globals.expect)(result.current.carregando).toBe(false);
            (0, _globals.expect)(result.current.erro).toBeNull();
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/preferencias-notificacao', _globals.expect.objectContaining({
                method: 'GET'
            }));
        });
        (0, _globals.it)('deve lidar com erro na busca das preferências', async ()=>{
            const errorMessage = 'Erro ao buscar preferências';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarPreferencias();
            });
            (0, _globals.expect)(result.current.preferencias).toBeNull();
            (0, _globals.expect)(result.current.carregando).toBe(false);
            (0, _globals.expect)(result.current.erro).toBe(errorMessage);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
        (0, _globals.it)('deve buscar preferências automaticamente no mount', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockPreferencias
            });
            (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            // Aguardar um tick para o useEffect executar
            await (0, _react.act)(async ()=>{
                await new Promise((resolve)=>setTimeout(resolve, 0));
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/preferencias-notificacao', _globals.expect.objectContaining({
                method: 'GET'
            }));
        });
    });
    (0, _globals.describe)('atualizarPreferencias', ()=>{
        (0, _globals.it)('deve atualizar preferências com sucesso', async ()=>{
            const novasPreferencias = {
                ativo: false,
                email: {
                    ativo: false,
                    formato: 'texto'
                },
                urgenciaMinima: 'alta'
            };
            const preferenciasAtualizadas = {
                ...mockPreferencias,
                ...novasPreferencias
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>preferenciasAtualizadas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            let resultado;
            await (0, _react.act)(async ()=>{
                resultado = await result.current.atualizarPreferencias(novasPreferencias);
            });
            (0, _globals.expect)(resultado).toEqual(preferenciasAtualizadas);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/preferencias-notificacao', _globals.expect.objectContaining({
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(novasPreferencias)
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Preferências atualizadas com sucesso'
            });
        });
        (0, _globals.it)('deve lidar com erro ao atualizar preferências', async ()=>{
            const errorMessage = 'Erro ao atualizar preferências';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            const novasPreferencias = {
                ativo: false
            };
            let resultado;
            await (0, _react.act)(async ()=>{
                resultado = await result.current.atualizarPreferencias(novasPreferencias);
            });
            (0, _globals.expect)(resultado).toBeNull();
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('resetarPreferencias', ()=>{
        (0, _globals.it)('deve resetar preferências com sucesso', async ()=>{
            const preferenciasDefault = {
                ...mockPreferencias,
                ativo: false,
                tipos: {
                    avaliacaoPendente: {
                        ativo: false,
                        frequencia: 'diaria'
                    },
                    avaliacaoVencida: {
                        ativo: false,
                        frequencia: 'imediata'
                    },
                    avaliacaoProximaVencimento: {
                        ativo: false,
                        frequencia: 'diaria'
                    },
                    novaAvaliacao: {
                        ativo: false,
                        frequencia: 'imediata'
                    },
                    avaliacaoCompletada: {
                        ativo: false,
                        frequencia: 'semanal'
                    },
                    lembretePersonalizado: {
                        ativo: false,
                        frequencia: 'conforme_agendado'
                    }
                }
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>preferenciasDefault
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            let resultado;
            await (0, _react.act)(async ()=>{
                resultado = await result.current.resetarPreferencias();
            });
            (0, _globals.expect)(resultado).toEqual(preferenciasDefault);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/preferencias-notificacao', _globals.expect.objectContaining({
                method: 'DELETE'
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Preferências resetadas para os valores padrão'
            });
        });
    });
    (0, _globals.describe)('pausarNotificacoes', ()=>{
        (0, _globals.it)('deve pausar notificações com sucesso', async ()=>{
            const ate = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 dias
            const motivo = 'Férias';
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.pausarNotificacoes(ate, motivo);
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/preferencias-notificacao/pausar', _globals.expect.objectContaining({
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ate: ate.toISOString(),
                    motivo
                })
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Notificações pausadas com sucesso'
            });
        });
        (0, _globals.it)('deve pausar notificações sem motivo', async ()=>{
            const ate = new Date(Date.now() + 24 * 60 * 60 * 1000); // 1 dia
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            await (0, _react.act)(async ()=>{
                await result.current.pausarNotificacoes(ate);
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/preferencias-notificacao/pausar', _globals.expect.objectContaining({
                body: JSON.stringify({
                    ate: ate.toISOString()
                })
            }));
        });
        (0, _globals.it)('deve lidar com erro ao pausar notificações', async ()=>{
            const errorMessage = 'Erro ao pausar notificações';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            const ate = new Date(Date.now() + 24 * 60 * 60 * 1000);
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.pausarNotificacoes(ate);
            });
            (0, _globals.expect)(sucesso).toBe(false);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('retomarNotificacoes', ()=>{
        (0, _globals.it)('deve retomar notificações com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.retomarNotificacoes();
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/preferencias-notificacao/pausar', _globals.expect.objectContaining({
                method: 'DELETE'
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Notificações retomadas com sucesso'
            });
        });
        (0, _globals.it)('deve lidar com erro ao retomar notificações', async ()=>{
            const errorMessage = 'Erro ao retomar notificações';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.retomarNotificacoes();
            });
            (0, _globals.expect)(sucesso).toBe(false);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('verificarStatusPausa', ()=>{
        (0, _globals.it)('deve verificar status de pausa com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatusPausa
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            await (0, _react.act)(async ()=>{
                await result.current.verificarStatusPausa();
            });
            (0, _globals.expect)(result.current.statusPausa).toEqual(mockStatusPausa);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/preferencias-notificacao/pausar', _globals.expect.objectContaining({
                method: 'GET'
            }));
        });
        (0, _globals.it)('deve verificar status de pausa pausado', async ()=>{
            const statusPausado = {
                pausado: true,
                ate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
                motivo: 'Férias'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>statusPausado
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            await (0, _react.act)(async ()=>{
                await result.current.verificarStatusPausa();
            });
            (0, _globals.expect)(result.current.statusPausa).toEqual(statusPausado);
        });
        (0, _globals.it)('deve lidar com erro ao verificar status de pausa', async ()=>{
            const errorMessage = 'Erro ao verificar status';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            await (0, _react.act)(async ()=>{
                await result.current.verificarStatusPausa();
            });
            (0, _globals.expect)(result.current.statusPausa).toBeNull();
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('estados de carregamento', ()=>{
        (0, _globals.it)('deve gerenciar estado de carregamento corretamente', async ()=>{
            let resolvePromise;
            const promise = new Promise((resolve)=>{
                resolvePromise = resolve;
            });
            mockFetch.mockReturnValueOnce(promise);
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            // Iniciar busca
            (0, _react.act)(()=>{
                result.current.buscarPreferencias();
            });
            // Verificar que está carregando
            (0, _globals.expect)(result.current.carregando).toBe(true);
            // Resolver promise
            await (0, _react.act)(async ()=>{
                resolvePromise({
                    ok: true,
                    json: async ()=>mockPreferencias
                });
            });
            // Verificar que não está mais carregando
            (0, _globals.expect)(result.current.carregando).toBe(false);
        });
    });
    (0, _globals.describe)('atualização automática após ações', ()=>{
        (0, _globals.it)('deve atualizar preferências após pausar notificações', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockPreferencias
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...mockStatusPausa,
                        pausado: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            const ate = new Date(Date.now() + 24 * 60 * 60 * 1000);
            await (0, _react.act)(async ()=>{
                await result.current.pausarNotificacoes(ate, 'Teste');
            });
            // Verificar que as funções de busca foram chamadas após a ação
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(3); // pausar + buscarPreferencias + verificarStatusPausa
        });
        (0, _globals.it)('deve atualizar preferências após retomar notificações', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockPreferencias
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatusPausa
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            await (0, _react.act)(async ()=>{
                await result.current.retomarNotificacoes();
            });
            // Verificar que as funções de busca foram chamadas após a ação
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(3); // retomar + buscarPreferencias + verificarStatusPausa
        });
    });
    (0, _globals.describe)('integração completa', ()=>{
        (0, _globals.it)('deve executar fluxo completo de configuração', async ()=>{
            // Setup mocks para todas as chamadas
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockPreferencias
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatusPausa
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...mockPreferencias,
                        ativo: false
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockPreferencias
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...mockStatusPausa,
                        pausado: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usepreferenciasnotificacao.usePreferenciasNotificacao)());
            // Aguardar carregamento inicial
            await (0, _react.act)(async ()=>{
                await new Promise((resolve)=>setTimeout(resolve, 0));
            });
            // 1. Verificar status de pausa
            await (0, _react.act)(async ()=>{
                await result.current.verificarStatusPausa();
            });
            (0, _globals.expect)(result.current.statusPausa).toEqual(mockStatusPausa);
            // 2. Atualizar preferências
            await (0, _react.act)(async ()=>{
                await result.current.atualizarPreferencias({
                    ativo: false
                });
            });
            // 3. Pausar notificações
            const ate = new Date(Date.now() + 24 * 60 * 60 * 1000);
            await (0, _react.act)(async ()=>{
                await result.current.pausarNotificacoes(ate, 'Teste');
            });
            // Verificar que todas as chamadas foram feitas
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(6);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,