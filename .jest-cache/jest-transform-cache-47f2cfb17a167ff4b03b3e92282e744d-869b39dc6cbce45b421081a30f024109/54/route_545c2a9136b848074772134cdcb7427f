844440b5db34a73adf720556a15cc32c
"use strict";

/* istanbul ignore next */
function cov_8xheitasy() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\historico\\route.ts";
  var hash = "10a54c7a8e48232f6a1c058fc6a4816b058e85b2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\historico\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 48
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 52
        }
      },
      "7": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 72
        }
      },
      "8": {
        start: {
          line: 16,
          column: 29
        },
        end: {
          line: 16,
          column: 91
        }
      },
      "9": {
        start: {
          line: 17,
          column: 13
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "10": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "11": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 80
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "13": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 27,
          column: 15
        }
      },
      "14": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "15": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 38,
          column: 15
        }
      },
      "16": {
        start: {
          line: 41,
          column: 28
        },
        end: {
          line: 41,
          column: 74
        }
      },
      "17": {
        start: {
          line: 43,
          column: 26
        },
        end: {
          line: 56,
          column: 10
        }
      },
      "18": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "19": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "20": {
        start: {
          line: 65,
          column: 33
        },
        end: {
          line: 65,
          column: 53
        }
      },
      "21": {
        start: {
          line: 66,
          column: 35
        },
        end: {
          line: 66,
          column: 77
        }
      },
      "22": {
        start: {
          line: 68,
          column: 84
        },
        end: {
          line: 68,
          column: 154
        }
      },
      "23": {
        start: {
          line: 70,
          column: 24
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "24": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "26": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "27": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 34
        }
      },
      "28": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "29": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 60
        }
      },
      "30": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "31": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 57
        }
      },
      "32": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "33": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 46
        }
      },
      "34": {
        start: {
          line: 89,
          column: 23
        },
        end: {
          line: 89,
          column: 44
        }
      },
      "35": {
        start: {
          line: 91,
          column: 35
        },
        end: {
          line: 111,
          column: 10
        }
      },
      "36": {
        start: {
          line: 113,
          column: 29
        },
        end: {
          line: 113,
          column: 54
        }
      },
      "37": {
        start: {
          line: 114,
          column: 33
        },
        end: {
          line: 114,
          column: 54
        }
      },
      "38": {
        start: {
          line: 115,
          column: 34
        },
        end: {
          line: 115,
          column: 44
        }
      },
      "39": {
        start: {
          line: 117,
          column: 29
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "40": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 168,
          column: 11
        }
      },
      "41": {
        start: {
          line: 134,
          column: 46
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "42": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 158,
          column: 52
        }
      },
      "43": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 159,
          column: 31
        }
      },
      "44": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 71
        }
      },
      "45": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "46": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "47": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 18
          }
        },
        loc: {
          start: {
            line: 18,
            column: 40
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 134,
            column: 37
          },
          end: {
            line: 134,
            column: 38
          }
        },
        loc: {
          start: {
            line: 134,
            column: 46
          },
          end: {
            line: 146,
            column: 17
          }
        },
        line: 134
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 157,
            column: 45
          },
          end: {
            line: 157,
            column: 46
          }
        },
        loc: {
          start: {
            line: 157,
            column: 58
          },
          end: {
            line: 160,
            column: 17
          }
        },
        line: 157
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 68,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 68,
            column: 25
          },
          end: {
            line: 68,
            column: 26
          }
        }],
        line: 68
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 28
          },
          end: {
            line: 68,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 68,
            column: 37
          },
          end: {
            line: 68,
            column: 39
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 22
          }
        }, {
          start: {
            line: 76,
            column: 26
          },
          end: {
            line: 76,
            column: 33
          }
        }],
        line: 76
      },
      "8": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "9": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "10": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "11": {
        loc: {
          start: {
            line: 138,
            column: 37
          },
          end: {
            line: 138,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 60
          },
          end: {
            line: 138,
            column: 92
          }
        }, {
          start: {
            line: 138,
            column: 95
          },
          end: {
            line: 138,
            column: 99
          }
        }],
        line: 138
      },
      "12": {
        loc: {
          start: {
            line: 139,
            column: 32
          },
          end: {
            line: 139,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 50
          },
          end: {
            line: 139,
            column: 77
          }
        }, {
          start: {
            line: 139,
            column: 80
          },
          end: {
            line: 139,
            column: 84
          }
        }],
        line: 139
      },
      "13": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\historico\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { z } from 'zod';\nimport {\n  idAtendenteSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n} from '@/lib/validations/atendentes';\nimport { consultaHistoricoSchema } from '@/lib/validations/historico-atendentes';\nimport { ZodError } from 'zod';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * GET /api/atendentes/[id]/historico\n * Lista o hist\xF3rico de altera\xE7\xF5es de um atendente\n */\nexport async function GET(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'N\xE3o autorizado' }, { status: 401 });\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN e GERENTE podem ver hist\xF3rico)\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Verificar se o atendente existe\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      select: {\n        id: true,\n        usuario: {\n          select: {\n            nome: true,\n            email: true,\n          },\n        },\n      },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Extrair par\xE2metros de consulta\n    const { searchParams } = new URL(request.url);\n    const parametrosConsulta = Object.fromEntries(searchParams.entries());\n\n    // Validar par\xE2metros\n    const {\n      pagina = 1,\n      limite = 20,\n      tipo,\n      dataInicio,\n      dataFim,\n      criadoPorId,\n    } = consultaHistoricoSchema.parse(parametrosConsulta);\n\n    // Construir filtros\n    const filtros: any = {\n      atendenteId,\n    };\n\n    if (tipo) {\n      filtros.tipo = tipo;\n    }\n\n    if (dataInicio || dataFim) {\n      filtros.criadoEm = {};\n      if (dataInicio) {\n        filtros.criadoEm.gte = new Date(dataInicio);\n      }\n      if (dataFim) {\n        filtros.criadoEm.lte = new Date(dataFim);\n      }\n    }\n\n    if (criadoPorId) {\n      filtros.criadoPorId = criadoPorId;\n    }\n\n    // Calcular offset\n    const offset = (pagina - 1) * limite;\n\n    // Buscar hist\xF3rico com pagina\xE7\xE3o\n    const [historico, total] = await Promise.all([\n      prisma.historicoAlteracaoAtendente.findMany({\n        where: filtros,\n        include: {\n          usuario: {\n            select: {\n              nome: true,\n              email: true,\n            },\n          },\n        },\n        orderBy: {\n          criadoEm: 'desc',\n        },\n        skip: offset,\n        take: limite,\n      }),\n      prisma.historicoAlteracaoAtendente.count({\n        where: filtros,\n      }),\n    ]);\n\n    // Calcular informa\xE7\xF5es de pagina\xE7\xE3o\n    const totalPaginas = Math.ceil(total / limite);\n    const temProximaPagina = pagina < totalPaginas;\n    const temPaginaAnterior = pagina > 1;\n\n    // Buscar estat\xEDsticas do hist\xF3rico\n    const estatisticas = await prisma.historicoAlteracaoAtendente.groupBy({\n      by: ['tipo'],\n      where: { atendenteId },\n      _count: {\n        id: true,\n      },\n    });\n\n    return NextResponse.json({\n      atendente: {\n        id: atendente.id,\n        nome: atendente.usuario.nome,\n        email: atendente.usuario.email,\n      },\n      historico: historico.map(item => ({\n        id: item.id,\n        tipoAlteracao: item.tipo,\n        descricao: item.descricao,\n        dadosAnteriores: item.dadosAnteriores\n          ? JSON.parse(item.dadosAnteriores)\n          : null,\n        dadosNovos: item.dadosNovos ? JSON.parse(item.dadosNovos) : null,\n        alteradoPor: {\n          id: item.criadoPorId,\n          nome: item.usuario.nome,\n          email: item.usuario.email,\n        },\n        criadoEm: item.criadoEm,\n      })),\n      paginacao: {\n        paginaAtual: pagina,\n        totalPaginas,\n        totalItens: total,\n        itensPorPagina: limite,\n        temProximaPagina,\n        temPaginaAnterior,\n      },\n      estatisticas: {\n        totalAlteracoes: total,\n        porTipo: estatisticas.reduce(\n          (acc, item) => {\n            acc[item.tipo] = item._count.id;\n            return acc;\n          },\n          {} as Record<string, number>\n        ),\n      },\n      filtros: {\n        tipo,\n        dataInicio,\n        dataFim,\n        criadoPorId,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao buscar hist\xF3rico do atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["GET", "request", "params", "session", "getServerSession", "authOptions", "user", "NextResponse", "json", "erro", "status", "includes", "userType", "MENSAGENS_ERRO_ATENDENTES", "SEM_PERMISSAO", "atendenteId", "idAtendenteSchema", "parse", "id", "atendente", "prisma", "findUnique", "where", "select", "usuario", "nome", "email", "ATENDENTE_NAO_ENCONTRADO", "searchParams", "URL", "url", "parametrosConsulta", "Object", "fromEntries", "entries", "pagina", "limite", "tipo", "dataInicio", "dataFim", "criadoPorId", "consultaHistoricoSchema", "filtros", "criadoEm", "gte", "Date", "lte", "offset", "historico", "total", "Promise", "all", "historicoAlteracaoAtendente", "findMany", "include", "orderBy", "skip", "take", "count", "totalPaginas", "Math", "ceil", "temProximaPagina", "temPaginaAnterior", "estatisticas", "groupBy", "by", "_count", "map", "item", "tipoAlteracao", "descricao", "dadosAnteriores", "JSON", "dadosNovos", "alteradoPor", "paginacao", "paginaAtual", "totalItens", "itensPorPagina", "totalAlteracoes", "porTipo", "reduce", "acc", "error", "console", "ZodError", "DADOS_INVALIDOS", "detalhes", "errors", "ERRO_INTERNO"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "10a54c7a8e48232f6a1c058fc6a4816b058e85b2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_8xheitasy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_8xheitasy();
cov_8xheitasy().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_8xheitasy().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_8xheitasy().f[0]++;
    cov_8xheitasy().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_8xheitasy().s[3]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_8xheitasy().s[4]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_8xheitasy().s[5]++, require("../../../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(cov_8xheitasy().s[6]++, require("../../../../../lib/prisma"));
const _atendentes =
/* istanbul ignore next */
(cov_8xheitasy().s[7]++, require("../../../../../lib/validations/atendentes"));
const _historicoatendentes =
/* istanbul ignore next */
(cov_8xheitasy().s[8]++, require("../../../../../lib/validations/historico-atendentes"));
const _zod =
/* istanbul ignore next */
(cov_8xheitasy().s[9]++, require("zod"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_8xheitasy().f[1]++;
  cov_8xheitasy().s[10]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_8xheitasy().s[11]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_8xheitasy().s[12]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_8xheitasy().b[0][0]++;
      cov_8xheitasy().s[13]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_8xheitasy().b[0][1]++;
    }
    // Verificar permissões (apenas ADMIN e GERENTE podem ver histórico)
    cov_8xheitasy().s[14]++;
    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {
      /* istanbul ignore next */
      cov_8xheitasy().b[1][0]++;
      cov_8xheitasy().s[15]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_8xheitasy().b[1][1]++;
    }
    // Validar ID
    const atendenteId =
    /* istanbul ignore next */
    (cov_8xheitasy().s[16]++, _atendentes.idAtendenteSchema.parse(params.id));
    // Verificar se o atendente existe
    const atendente =
    /* istanbul ignore next */
    (cov_8xheitasy().s[17]++, await _prisma.prisma.atendente.findUnique({
      where: {
        id: atendenteId
      },
      select: {
        id: true,
        usuario: {
          select: {
            nome: true,
            email: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_8xheitasy().s[18]++;
    if (!atendente) {
      /* istanbul ignore next */
      cov_8xheitasy().b[2][0]++;
      cov_8xheitasy().s[19]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_8xheitasy().b[2][1]++;
    }
    // Extrair parâmetros de consulta
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_8xheitasy().s[20]++, new URL(request.url));
    const parametrosConsulta =
    /* istanbul ignore next */
    (cov_8xheitasy().s[21]++, Object.fromEntries(searchParams.entries()));
    // Validar parâmetros
    const {
      pagina =
      /* istanbul ignore next */
      (cov_8xheitasy().b[3][0]++, 1),
      limite =
      /* istanbul ignore next */
      (cov_8xheitasy().b[4][0]++, 20),
      tipo,
      dataInicio,
      dataFim,
      criadoPorId
    } =
    /* istanbul ignore next */
    (cov_8xheitasy().s[22]++, _historicoatendentes.consultaHistoricoSchema.parse(parametrosConsulta));
    // Construir filtros
    const filtros =
    /* istanbul ignore next */
    (cov_8xheitasy().s[23]++, {
      atendenteId
    });
    /* istanbul ignore next */
    cov_8xheitasy().s[24]++;
    if (tipo) {
      /* istanbul ignore next */
      cov_8xheitasy().b[5][0]++;
      cov_8xheitasy().s[25]++;
      filtros.tipo = tipo;
    } else
    /* istanbul ignore next */
    {
      cov_8xheitasy().b[5][1]++;
    }
    cov_8xheitasy().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_8xheitasy().b[7][0]++, dataInicio) ||
    /* istanbul ignore next */
    (cov_8xheitasy().b[7][1]++, dataFim)) {
      /* istanbul ignore next */
      cov_8xheitasy().b[6][0]++;
      cov_8xheitasy().s[27]++;
      filtros.criadoEm = {};
      /* istanbul ignore next */
      cov_8xheitasy().s[28]++;
      if (dataInicio) {
        /* istanbul ignore next */
        cov_8xheitasy().b[8][0]++;
        cov_8xheitasy().s[29]++;
        filtros.criadoEm.gte = new Date(dataInicio);
      } else
      /* istanbul ignore next */
      {
        cov_8xheitasy().b[8][1]++;
      }
      cov_8xheitasy().s[30]++;
      if (dataFim) {
        /* istanbul ignore next */
        cov_8xheitasy().b[9][0]++;
        cov_8xheitasy().s[31]++;
        filtros.criadoEm.lte = new Date(dataFim);
      } else
      /* istanbul ignore next */
      {
        cov_8xheitasy().b[9][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_8xheitasy().b[6][1]++;
    }
    cov_8xheitasy().s[32]++;
    if (criadoPorId) {
      /* istanbul ignore next */
      cov_8xheitasy().b[10][0]++;
      cov_8xheitasy().s[33]++;
      filtros.criadoPorId = criadoPorId;
    } else
    /* istanbul ignore next */
    {
      cov_8xheitasy().b[10][1]++;
    }
    // Calcular offset
    const offset =
    /* istanbul ignore next */
    (cov_8xheitasy().s[34]++, (pagina - 1) * limite);
    // Buscar histórico com paginação
    const [historico, total] =
    /* istanbul ignore next */
    (cov_8xheitasy().s[35]++, await Promise.all([_prisma.prisma.historicoAlteracaoAtendente.findMany({
      where: filtros,
      include: {
        usuario: {
          select: {
            nome: true,
            email: true
          }
        }
      },
      orderBy: {
        criadoEm: 'desc'
      },
      skip: offset,
      take: limite
    }), _prisma.prisma.historicoAlteracaoAtendente.count({
      where: filtros
    })]));
    // Calcular informações de paginação
    const totalPaginas =
    /* istanbul ignore next */
    (cov_8xheitasy().s[36]++, Math.ceil(total / limite));
    const temProximaPagina =
    /* istanbul ignore next */
    (cov_8xheitasy().s[37]++, pagina < totalPaginas);
    const temPaginaAnterior =
    /* istanbul ignore next */
    (cov_8xheitasy().s[38]++, pagina > 1);
    // Buscar estatísticas do histórico
    const estatisticas =
    /* istanbul ignore next */
    (cov_8xheitasy().s[39]++, await _prisma.prisma.historicoAlteracaoAtendente.groupBy({
      by: ['tipo'],
      where: {
        atendenteId
      },
      _count: {
        id: true
      }
    }));
    /* istanbul ignore next */
    cov_8xheitasy().s[40]++;
    return _server.NextResponse.json({
      atendente: {
        id: atendente.id,
        nome: atendente.usuario.nome,
        email: atendente.usuario.email
      },
      historico: historico.map(item => {
        /* istanbul ignore next */
        cov_8xheitasy().f[2]++;
        cov_8xheitasy().s[41]++;
        return {
          id: item.id,
          tipoAlteracao: item.tipo,
          descricao: item.descricao,
          dadosAnteriores: item.dadosAnteriores ?
          /* istanbul ignore next */
          (cov_8xheitasy().b[11][0]++, JSON.parse(item.dadosAnteriores)) :
          /* istanbul ignore next */
          (cov_8xheitasy().b[11][1]++, null),
          dadosNovos: item.dadosNovos ?
          /* istanbul ignore next */
          (cov_8xheitasy().b[12][0]++, JSON.parse(item.dadosNovos)) :
          /* istanbul ignore next */
          (cov_8xheitasy().b[12][1]++, null),
          alteradoPor: {
            id: item.criadoPorId,
            nome: item.usuario.nome,
            email: item.usuario.email
          },
          criadoEm: item.criadoEm
        };
      }),
      paginacao: {
        paginaAtual: pagina,
        totalPaginas,
        totalItens: total,
        itensPorPagina: limite,
        temProximaPagina,
        temPaginaAnterior
      },
      estatisticas: {
        totalAlteracoes: total,
        porTipo: estatisticas.reduce((acc, item) => {
          /* istanbul ignore next */
          cov_8xheitasy().f[3]++;
          cov_8xheitasy().s[42]++;
          acc[item.tipo] = item._count.id;
          /* istanbul ignore next */
          cov_8xheitasy().s[43]++;
          return acc;
        }, {})
      },
      filtros: {
        tipo,
        dataInicio,
        dataFim,
        criadoPorId
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_8xheitasy().s[44]++;
    console.error('Erro ao buscar histórico do atendente:', error);
    /* istanbul ignore next */
    cov_8xheitasy().s[45]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_8xheitasy().b[13][0]++;
      cov_8xheitasy().s[46]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_8xheitasy().b[13][1]++;
    }
    cov_8xheitasy().s[47]++;
    return _server.NextResponse.json({
      erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,