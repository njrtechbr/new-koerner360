{"version":3,"names":["GET","request","params","cov_8xheitasy","f","s","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","_atendentes","MENSAGENS_ERRO_ATENDENTES","SEM_PERMISSAO","atendenteId","idAtendenteSchema","parse","id","atendente","_prisma","prisma","findUnique","where","select","usuario","nome","email","ATENDENTE_NAO_ENCONTRADO","searchParams","URL","url","parametrosConsulta","Object","fromEntries","entries","pagina","limite","tipo","dataInicio","dataFim","criadoPorId","_historicoatendentes","consultaHistoricoSchema","filtros","criadoEm","gte","Date","lte","offset","historico","total","Promise","all","historicoAlteracaoAtendente","findMany","include","orderBy","skip","take","count","totalPaginas","Math","ceil","temProximaPagina","temPaginaAnterior","estatisticas","groupBy","by","_count","map","item","tipoAlteracao","descricao","dadosAnteriores","JSON","dadosNovos","alteradoPor","paginacao","paginaAtual","totalItens","itensPorPagina","totalAlteracoes","porTipo","reduce","acc","error","console","_zod","ZodError","DADOS_INVALIDOS","detalhes","errors","ERRO_INTERNO"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\historico\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { z } from 'zod';\nimport {\n  idAtendenteSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n} from '@/lib/validations/atendentes';\nimport { consultaHistoricoSchema } from '@/lib/validations/historico-atendentes';\nimport { ZodError } from 'zod';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * GET /api/atendentes/[id]/historico\n * Lista o histórico de alterações de um atendente\n */\nexport async function GET(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN e GERENTE podem ver histórico)\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Verificar se o atendente existe\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      select: {\n        id: true,\n        usuario: {\n          select: {\n            nome: true,\n            email: true,\n          },\n        },\n      },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Extrair parâmetros de consulta\n    const { searchParams } = new URL(request.url);\n    const parametrosConsulta = Object.fromEntries(searchParams.entries());\n\n    // Validar parâmetros\n    const {\n      pagina = 1,\n      limite = 20,\n      tipo,\n      dataInicio,\n      dataFim,\n      criadoPorId,\n    } = consultaHistoricoSchema.parse(parametrosConsulta);\n\n    // Construir filtros\n    const filtros: any = {\n      atendenteId,\n    };\n\n    if (tipo) {\n      filtros.tipo = tipo;\n    }\n\n    if (dataInicio || dataFim) {\n      filtros.criadoEm = {};\n      if (dataInicio) {\n        filtros.criadoEm.gte = new Date(dataInicio);\n      }\n      if (dataFim) {\n        filtros.criadoEm.lte = new Date(dataFim);\n      }\n    }\n\n    if (criadoPorId) {\n      filtros.criadoPorId = criadoPorId;\n    }\n\n    // Calcular offset\n    const offset = (pagina - 1) * limite;\n\n    // Buscar histórico com paginação\n    const [historico, total] = await Promise.all([\n      prisma.historicoAlteracaoAtendente.findMany({\n        where: filtros,\n        include: {\n          usuario: {\n            select: {\n              nome: true,\n              email: true,\n            },\n          },\n        },\n        orderBy: {\n          criadoEm: 'desc',\n        },\n        skip: offset,\n        take: limite,\n      }),\n      prisma.historicoAlteracaoAtendente.count({\n        where: filtros,\n      }),\n    ]);\n\n    // Calcular informações de paginação\n    const totalPaginas = Math.ceil(total / limite);\n    const temProximaPagina = pagina < totalPaginas;\n    const temPaginaAnterior = pagina > 1;\n\n    // Buscar estatísticas do histórico\n    const estatisticas = await prisma.historicoAlteracaoAtendente.groupBy({\n      by: ['tipo'],\n      where: { atendenteId },\n      _count: {\n        id: true,\n      },\n    });\n\n    return NextResponse.json({\n      atendente: {\n        id: atendente.id,\n        nome: atendente.usuario.nome,\n        email: atendente.usuario.email,\n      },\n      historico: historico.map(item => ({\n        id: item.id,\n        tipoAlteracao: item.tipo,\n        descricao: item.descricao,\n        dadosAnteriores: item.dadosAnteriores\n          ? JSON.parse(item.dadosAnteriores)\n          : null,\n        dadosNovos: item.dadosNovos ? JSON.parse(item.dadosNovos) : null,\n        alteradoPor: {\n          id: item.criadoPorId,\n          nome: item.usuario.nome,\n          email: item.usuario.email,\n        },\n        criadoEm: item.criadoEm,\n      })),\n      paginacao: {\n        paginaAtual: pagina,\n        totalPaginas,\n        totalItens: total,\n        itensPorPagina: limite,\n        temProximaPagina,\n        temPaginaAnterior,\n      },\n      estatisticas: {\n        totalAlteracoes: total,\n        porTipo: estatisticas.reduce(\n          (acc, item) => {\n            acc[item.tipo] = item._count.id;\n            return acc;\n          },\n          {} as Record<string, number>\n        ),\n      },\n      filtros: {\n        tipo,\n        dataInicio,\n        dataFim,\n        criadoPorId,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao buscar histórico do atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}