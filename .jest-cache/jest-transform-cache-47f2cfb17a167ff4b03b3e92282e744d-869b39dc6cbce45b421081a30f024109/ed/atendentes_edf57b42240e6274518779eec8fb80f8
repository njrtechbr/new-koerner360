d2c0bcfb59676e0870d88a3769653465
"use strict";

/* istanbul ignore next */
function cov_2fzr0olc6x() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\atendentes.ts";
  var hash = "09ca0102ea222f8d44e4cb9a9c1ad371bda3b027";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\atendentes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 54,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 40
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 25
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 25
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 36
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 40
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 48
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 33
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 38
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 37
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 30
        }
      },
      "17": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 35
        }
      },
      "18": {
        start: {
          line: 55,
          column: 13
        },
        end: {
          line: 55,
          column: 27
        }
      },
      "19": {
        start: {
          line: 56,
          column: 15
        },
        end: {
          line: 56,
          column: 33
        }
      },
      "20": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 51
        }
      },
      "21": {
        start: {
          line: 58,
          column: 39
        },
        end: {
          line: 58,
          column: 51
        }
      },
      "22": {
        start: {
          line: 59,
          column: 28
        },
        end: {
          line: 59,
          column: 41
        }
      },
      "23": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 60,
          column: 40
        }
      },
      "24": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 63,
          column: 20
        }
      },
      "25": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 66
        }
      },
      "26": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 19
        }
      },
      "28": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "29": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 72,
          column: 10
        }
      },
      "30": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 53
        }
      },
      "31": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "32": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 30
        }
      },
      "33": {
        start: {
          line: 78,
          column: 17
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "34": {
        start: {
          line: 81,
          column: 32
        },
        end: {
          line: 81,
          column: 88
        }
      },
      "35": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "36": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "37": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 84,
          column: 95
        }
      },
      "38": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "39": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 57
        }
      },
      "40": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 39
        }
      },
      "41": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 25
        }
      },
      "42": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "43": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 31
        }
      },
      "44": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 96,
          column: 18
        }
      },
      "45": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 89
        }
      },
      "46": {
        start: {
          line: 99,
          column: 18
        },
        end: {
          line: 101,
          column: 2
        }
      },
      "47": {
        start: {
          line: 99,
          column: 131
        },
        end: {
          line: 99,
          column: 182
        }
      },
      "48": {
        start: {
          line: 102,
          column: 23
        },
        end: {
          line: 104,
          column: 2
        }
      },
      "49": {
        start: {
          line: 102,
          column: 159
        },
        end: {
          line: 102,
          column: 201
        }
      },
      "50": {
        start: {
          line: 105,
          column: 18
        },
        end: {
          line: 105,
          column: 96
        }
      },
      "51": {
        start: {
          line: 106,
          column: 30
        },
        end: {
          line: 115,
          column: 2
        }
      },
      "52": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 144,
          column: 2
        }
      },
      "53": {
        start: {
          line: 145,
          column: 33
        },
        end: {
          line: 165,
          column: 2
        }
      },
      "54": {
        start: {
          line: 166,
          column: 31
        },
        end: {
          line: 189,
          column: 2
        }
      },
      "55": {
        start: {
          line: 190,
          column: 41
        },
        end: {
          line: 199,
          column: 2
        }
      },
      "56": {
        start: {
          line: 200,
          column: 31
        },
        end: {
          line: 202,
          column: 2
        }
      },
      "57": {
        start: {
          line: 203,
          column: 30
        },
        end: {
          line: 210,
          column: 2
        }
      },
      "58": {
        start: {
          line: 211,
          column: 33
        },
        end: {
          line: 234,
          column: 2
        }
      },
      "59": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 222,
          column: 5
        }
      },
      "60": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 21
        }
      },
      "61": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "62": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 21
        }
      },
      "63": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 230,
          column: 5
        }
      },
      "64": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 21
        }
      },
      "65": {
        start: {
          line: 231,
          column: 4
        },
        end: {
          line: 231,
          column: 16
        }
      },
      "66": {
        start: {
          line: 235,
          column: 34
        },
        end: {
          line: 248,
          column: 1
        }
      },
      "67": {
        start: {
          line: 249,
          column: 28
        },
        end: {
          line: 302,
          column: 1
        }
      },
      "68": {
        start: {
          line: 253,
          column: 27
        },
        end: {
          line: 253,
          column: 122
        }
      },
      "69": {
        start: {
          line: 253,
          column: 74
        },
        end: {
          line: 253,
          column: 121
        }
      },
      "70": {
        start: {
          line: 254,
          column: 25
        },
        end: {
          line: 254,
          column: 47
        }
      },
      "71": {
        start: {
          line: 255,
          column: 35
        },
        end: {
          line: 264,
          column: 10
        }
      },
      "72": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 35
        }
      },
      "73": {
        start: {
          line: 270,
          column: 27
        },
        end: {
          line: 270,
          column: 122
        }
      },
      "74": {
        start: {
          line: 270,
          column: 74
        },
        end: {
          line: 270,
          column: 121
        }
      },
      "75": {
        start: {
          line: 271,
          column: 33
        },
        end: {
          line: 280,
          column: 10
        }
      },
      "76": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 33
        }
      },
      "77": {
        start: {
          line: 286,
          column: 21
        },
        end: {
          line: 286,
          column: 31
        }
      },
      "78": {
        start: {
          line: 287,
          column: 20
        },
        end: {
          line: 287,
          column: 69
        }
      },
      "79": {
        start: {
          line: 288,
          column: 25
        },
        end: {
          line: 288,
          column: 40
        }
      },
      "80": {
        start: {
          line: 289,
          column: 25
        },
        end: {
          line: 289,
          column: 39
        }
      },
      "81": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "82": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 20
        }
      },
      "83": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 21
        }
      },
      "84": {
        start: {
          line: 298,
          column: 21
        },
        end: {
          line: 298,
          column: 31
        }
      },
      "85": {
        start: {
          line: 299,
          column: 22
        },
        end: {
          line: 299,
          column: 122
        }
      },
      "86": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 37
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 34
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 21
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 21
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 32
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 36
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 44
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 29
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 34
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 48
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 31
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 51
      },
      "15": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 57,
            column: 9
          },
          end: {
            line: 57,
            column: 33
          }
        },
        loc: {
          start: {
            line: 57,
            column: 47
          },
          end: {
            line: 64,
            column: 1
          }
        },
        line: 57
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 61,
            column: 39
          },
          end: {
            line: 61,
            column: 40
          }
        },
        loc: {
          start: {
            line: 61,
            column: 61
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 61
      },
      "17": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 65,
            column: 9
          },
          end: {
            line: 65,
            column: 34
          }
        },
        loc: {
          start: {
            line: 65,
            column: 53
          },
          end: {
            line: 97,
            column: 1
          }
        },
        line: 65
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 99,
            column: 124
          },
          end: {
            line: 99,
            column: 125
          }
        },
        loc: {
          start: {
            line: 99,
            column: 131
          },
          end: {
            line: 99,
            column: 182
          }
        },
        line: 99
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 102,
            column: 147
          },
          end: {
            line: 102,
            column: 148
          }
        },
        loc: {
          start: {
            line: 102,
            column: 159
          },
          end: {
            line: 102,
            column: 201
          }
        },
        line: 102
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 218,
            column: 10
          },
          end: {
            line: 218,
            column: 11
          }
        },
        loc: {
          start: {
            line: 218,
            column: 18
          },
          end: {
            line: 232,
            column: 1
          }
        },
        line: 218
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 252,
            column: 23
          },
          end: {
            line: 252,
            column: 24
          }
        },
        loc: {
          start: {
            line: 252,
            column: 49
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 252
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 253,
            column: 56
          },
          end: {
            line: 253,
            column: 57
          }
        },
        loc: {
          start: {
            line: 253,
            column: 74
          },
          end: {
            line: 253,
            column: 121
          }
        },
        line: 253
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 269,
            column: 25
          },
          end: {
            line: 269,
            column: 26
          }
        },
        loc: {
          start: {
            line: 269,
            column: 51
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 269
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 270,
            column: 56
          },
          end: {
            line: 270,
            column: 57
          }
        },
        loc: {
          start: {
            line: 270,
            column: 74
          },
          end: {
            line: 270,
            column: 121
          }
        },
        line: 270
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 285,
            column: 21
          },
          end: {
            line: 285,
            column: 22
          }
        },
        loc: {
          start: {
            line: 285,
            column: 39
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 285
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 297,
            column: 28
          },
          end: {
            line: 297,
            column: 29
          }
        },
        loc: {
          start: {
            line: 297,
            column: 44
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 297
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "1": {
        loc: {
          start: {
            line: 62,
            column: 15
          },
          end: {
            line: 62,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 62,
            column: 29
          },
          end: {
            line: 62,
            column: 45
          }
        }, {
          start: {
            line: 62,
            column: 48
          },
          end: {
            line: 62,
            column: 65
          }
        }],
        line: 62
      },
      "2": {
        loc: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 20
          }
        }, {
          start: {
            line: 66,
            column: 24
          },
          end: {
            line: 66,
            column: 27
          }
        }, {
          start: {
            line: 66,
            column: 31
          },
          end: {
            line: 66,
            column: 45
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 69,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 69,
            column: 20
          }
        }, {
          start: {
            line: 69,
            column: 24
          },
          end: {
            line: 69,
            column: 47
          }
        }, {
          start: {
            line: 69,
            column: 51
          },
          end: {
            line: 69,
            column: 76
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "7": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 75,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: 75,
            column: 17
          },
          end: {
            line: 75,
            column: 31
          }
        }],
        line: 75
      },
      "8": {
        loc: {
          start: {
            line: 81,
            column: 32
          },
          end: {
            line: 81,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 32
          },
          end: {
            line: 81,
            column: 53
          }
        }, {
          start: {
            line: 81,
            column: 57
          },
          end: {
            line: 81,
            column: 88
          }
        }],
        line: 81
      },
      "9": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "10": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 29
          }
        }, {
          start: {
            line: 83,
            column: 33
          },
          end: {
            line: 83,
            column: 79
          }
        }],
        line: 83
      },
      "11": {
        loc: {
          start: {
            line: 84,
            column: 23
          },
          end: {
            line: 84,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 47
          },
          end: {
            line: 84,
            column: 88
          }
        }, {
          start: {
            line: 84,
            column: 91
          },
          end: {
            line: 84,
            column: 95
          }
        }],
        line: 84
      },
      "12": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: 87,
            column: 19
          },
          end: {
            line: 89,
            column: 13
          }
        }],
        line: 85
      },
      "13": {
        loc: {
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 85,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 16
          },
          end: {
            line: 85,
            column: 20
          }
        }, {
          start: {
            line: 85,
            column: 25
          },
          end: {
            line: 85,
            column: 33
          }
        }, {
          start: {
            line: 85,
            column: 37
          },
          end: {
            line: 85,
            column: 45
          }
        }],
        line: 85
      },
      "14": {
        loc: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "15": {
        loc: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "16": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 220,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 220,
            column: 45
          }
        }, {
          start: {
            line: 220,
            column: 49
          },
          end: {
            line: 220,
            column: 69
          }
        }],
        line: 220
      },
      "17": {
        loc: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "18": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 224,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 224,
            column: 45
          }
        }, {
          start: {
            line: 224,
            column: 49
          },
          end: {
            line: 224,
            column: 68
          }
        }],
        line: 224
      },
      "19": {
        loc: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "20": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 228,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 228,
            column: 27
          }
        }, {
          start: {
            line: 228,
            column: 31
          },
          end: {
            line: 228,
            column: 74
          }
        }],
        line: 228
      },
      "21": {
        loc: {
          start: {
            line: 258,
            column: 19
          },
          end: {
            line: 262,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 19
          },
          end: {
            line: 258,
            column: 30
          }
        }, {
          start: {
            line: 258,
            column: 34
          },
          end: {
            line: 262,
            column: 17
          }
        }],
        line: 258
      },
      "22": {
        loc: {
          start: {
            line: 274,
            column: 19
          },
          end: {
            line: 278,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 19
          },
          end: {
            line: 274,
            column: 28
          }
        }, {
          start: {
            line: 274,
            column: 32
          },
          end: {
            line: 278,
            column: 17
          }
        }],
        line: 274
      },
      "23": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "24": {
        loc: {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 290,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 290,
            column: 48
          }
        }, {
          start: {
            line: 290,
            column: 52
          },
          end: {
            line: 290,
            column: 90
          }
        }, {
          start: {
            line: 290,
            column: 94
          },
          end: {
            line: 290,
            column: 129
          }
        }],
        line: 290
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\atendentes.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { validacaoUtils } from './index';\n\n/**\n * Schema para valida\xE7\xE3o de ID de atendente\n */\nexport const idAtendenteSchema = z\n  .string()\n  .cuid('ID do atendente deve ser um CUID v\xE1lido');\n\n/**\n * Schema para valida\xE7\xE3o de CPF\n */\nexport const cpfSchema = z\n  .string()\n  .min(11, 'CPF deve ter 11 d\xEDgitos')\n  .max(14, 'CPF deve ter no m\xE1ximo 14 caracteres')\n  .refine(cpf => validacaoUtils.isCPF(cpf.replace(/\\D/g, '')), {\n    message: 'CPF inv\xE1lido',\n  });\n\n/**\n * Schema para valida\xE7\xE3o de telefone\n */\nexport const telefoneSchema = z\n  .string()\n  .min(10, 'Telefone deve ter pelo menos 10 d\xEDgitos')\n  .max(15, 'Telefone deve ter no m\xE1ximo 15 d\xEDgitos')\n  .refine(telefone => validacaoUtils.isTelefone(telefone), {\n    message: 'Formato de telefone inv\xE1lido',\n  });\n\n/**\n * Schema para valida\xE7\xE3o de CEP\n */\nexport const cepSchema = z\n  .string()\n  .regex(/^\\d{5}-?\\d{3}$/, 'CEP deve estar no formato 00000-000');\n\n/**\n * Schema para status de atendente\n */\nexport const statusAtendenteSchema = z.enum([\n  'ATIVO',\n  'INATIVO',\n  'SUSPENSO',\n  'TREINAMENTO',\n  'FERIAS',\n  'AFASTADO',\n  'LICENCA_MEDICA',\n  'LICENCA_MATERNIDADE',\n]);\n\n/**\n * Schema para criar atendente\n */\nexport const criarAtendenteSchema = z.object({\n  // Dados do usu\xE1rio relacionado\n  usuario: z.object({\n    nome: z\n      .string()\n      .min(3, 'Nome deve ter pelo menos 3 caracteres')\n      .max(100, 'Nome deve ter no m\xE1ximo 100 caracteres'),\n    email: z.string().email('Email inv\xE1lido'),\n    senha: z.string().min(8, 'Senha deve ter pelo menos 8 caracteres'),\n    userType: z.literal('ATENDENTE'),\n  }),\n\n  // Dados pessoais\n  cpf: cpfSchema,\n  rg: z.string().optional(),\n  dataNascimento: z.string().datetime().optional(),\n  telefone: telefoneSchema,\n  celular: telefoneSchema.optional(),\n\n  // Endere\xE7o\n  endereco: z\n    .string()\n    .max(255, 'Endere\xE7o deve ter no m\xE1ximo 255 caracteres')\n    .optional(),\n  cep: cepSchema.optional(),\n  cidade: z\n    .string()\n    .max(100, 'Cidade deve ter no m\xE1ximo 100 caracteres')\n    .optional(),\n  estado: z.string().length(2, 'Estado deve ter 2 caracteres').optional(),\n\n  // Dados profissionais\n  dataAdmissao: z\n    .string()\n    .datetime('Data de admiss\xE3o deve ser uma data v\xE1lida'),\n  cargo: z\n    .string()\n    .min(2, 'Cargo deve ter pelo menos 2 caracteres')\n    .max(100, 'Cargo deve ter no m\xE1ximo 100 caracteres'),\n  setor: z\n    .string()\n    .min(2, 'Setor deve ter pelo menos 2 caracteres')\n    .max(100, 'Setor deve ter no m\xE1ximo 100 caracteres'),\n  departamento: z\n    .string()\n    .max(100, 'Departamento deve ter no m\xE1ximo 100 caracteres')\n    .optional(),\n  salario: z.number().positive('Sal\xE1rio deve ser um valor positivo').optional(),\n  status: statusAtendenteSchema.default('ATIVO'),\n  observacoes: z\n    .string()\n    .max(1000, 'Observa\xE7\xF5es devem ter no m\xE1ximo 1000 caracteres')\n    .optional(),\n  foto: z.string().url('URL da foto deve ser v\xE1lida').optional(),\n});\n\n/**\n * Schema para atualizar atendente\n */\nexport const atualizarAtendenteSchema = z.object({\n  // Dados pessoais\n  rg: z.string().optional(),\n  dataNascimento: z.string().datetime().optional(),\n  telefone: telefoneSchema.optional(),\n  celular: telefoneSchema.optional(),\n\n  // Endere\xE7o\n  endereco: z\n    .string()\n    .max(255, 'Endere\xE7o deve ter no m\xE1ximo 255 caracteres')\n    .optional(),\n  cep: cepSchema.optional(),\n  cidade: z\n    .string()\n    .max(100, 'Cidade deve ter no m\xE1ximo 100 caracteres')\n    .optional(),\n  estado: z.string().length(2, 'Estado deve ter 2 caracteres').optional(),\n\n  // Dados profissionais\n  dataAdmissao: z\n    .string()\n    .datetime('Data de admiss\xE3o deve ser uma data v\xE1lida')\n    .optional(),\n  cargo: z\n    .string()\n    .min(2, 'Cargo deve ter pelo menos 2 caracteres')\n    .max(100, 'Cargo deve ter no m\xE1ximo 100 caracteres')\n    .optional(),\n  setor: z\n    .string()\n    .min(2, 'Setor deve ter pelo menos 2 caracteres')\n    .max(100, 'Setor deve ter no m\xE1ximo 100 caracteres')\n    .optional(),\n  departamento: z\n    .string()\n    .max(100, 'Departamento deve ter no m\xE1ximo 100 caracteres')\n    .optional(),\n  salario: z.number().positive('Sal\xE1rio deve ser um valor positivo').optional(),\n  status: statusAtendenteSchema.optional(),\n  observacoes: z\n    .string()\n    .max(1000, 'Observa\xE7\xF5es devem ter no m\xE1ximo 1000 caracteres')\n    .optional(),\n  foto: z.string().url('URL da foto deve ser v\xE1lida').optional(),\n});\n\n/**\n * Schema para listar atendentes\n */\nexport const listarAtendentesSchema = z.object({\n  pagina: z.coerce\n    .number()\n    .int()\n    .min(1, 'P\xE1gina deve ser um n\xFAmero inteiro positivo')\n    .default(1),\n  limite: z.coerce\n    .number()\n    .int()\n    .min(1, 'Limite deve ser um n\xFAmero inteiro positivo')\n    .max(100, 'Limite m\xE1ximo \xE9 100')\n    .default(10),\n  busca: z.string().optional(),\n  status: statusAtendenteSchema.optional(),\n  setor: z.string().optional(),\n  cargo: z.string().optional(),\n  departamento: z.string().optional(),\n  dataAdmissaoInicio: z.string().datetime().optional(),\n  dataAdmissaoFim: z.string().datetime().optional(),\n  ordenarPor: z\n    .enum([\n      'nome',\n      'cpf',\n      'cargo',\n      'setor',\n      'dataAdmissao',\n      'status',\n      'criadoEm',\n    ])\n    .default('nome'),\n  ordem: z.enum(['asc', 'desc']).default('asc'),\n});\n\n/**\n * Schema para filtros avan\xE7ados de atendentes\n */\nexport const filtrosAvancadosAtendentesSchema = z.object({\n  ativo: z.boolean().optional(),\n  temFoto: z.boolean().optional(),\n  salarioMinimo: z.number().positive().optional(),\n  salarioMaximo: z.number().positive().optional(),\n  idadeMinima: z.number().int().min(16).optional(),\n  idadeMaxima: z.number().int().max(100).optional(),\n  tempoEmpresaMinimo: z.number().int().min(0).optional(), // em meses\n  tempoEmpresaMaximo: z.number().int().optional(), // em meses\n});\n\n/**\n * Schema para busca de atendentes\n */\nexport const buscarAtendentesSchema = listarAtendentesSchema.extend({\n  filtrosAvancados: filtrosAvancadosAtendentesSchema.optional(),\n});\n\n/**\n * Schema para ativar atendente\n */\nexport const ativarAtendenteSchema = z.object({\n  motivo: z\n    .string()\n    .min(1, 'Motivo da ativa\xE7\xE3o \xE9 obrigat\xF3rio')\n    .max(500, 'Motivo deve ter no m\xE1ximo 500 caracteres'),\n  novoStatus: z\n    .enum(['ATIVO', 'FERIAS', 'AFASTADO'])\n    .optional()\n    .default('ATIVO'),\n});\n\n/**\n * Schema para desativar atendente\n */\nexport const desativarAtendenteSchema = z\n  .object({\n    motivo: z\n      .string()\n      .min(1, 'Motivo da desativa\xE7\xE3o \xE9 obrigat\xF3rio')\n      .max(500, 'Motivo deve ter no m\xE1ximo 500 caracteres'),\n    tipoDesativacao: z.enum(['TEMPORARIA', 'DEFINITIVA']).default('TEMPORARIA'),\n    dataReativacao: z\n      .string()\n      .datetime('Data de reativa\xE7\xE3o deve ser uma data v\xE1lida')\n      .optional(),\n  })\n  .refine(\n    data => {\n      // Se for desativa\xE7\xE3o tempor\xE1ria, data de reativa\xE7\xE3o \xE9 obrigat\xF3ria\n      if (data.tipoDesativacao === 'TEMPORARIA' && !data.dataReativacao) {\n        return false;\n      }\n      // Se for definitiva, n\xE3o deve ter data de reativa\xE7\xE3o\n      if (data.tipoDesativacao === 'DEFINITIVA' && data.dataReativacao) {\n        return false;\n      }\n      // Se tem data de reativa\xE7\xE3o, deve ser futura\n      if (data.dataReativacao && new Date(data.dataReativacao) <= new Date()) {\n        return false;\n      }\n      return true;\n    },\n    {\n      message:\n        'Para desativa\xE7\xE3o tempor\xE1ria, informe uma data de reativa\xE7\xE3o futura. Para desativa\xE7\xE3o definitiva, n\xE3o informe data de reativa\xE7\xE3o.',\n    }\n  );\n\n// Tipos TypeScript derivados dos schemas\nexport type CriarAtendenteInput = z.infer<typeof criarAtendenteSchema>;\nexport type AtualizarAtendenteInput = z.infer<typeof atualizarAtendenteSchema>;\nexport type ListarAtendentesInput = z.infer<typeof listarAtendentesSchema>;\nexport type BuscarAtendentesInput = z.infer<typeof buscarAtendentesSchema>;\nexport type FiltrosAvancadosAtendentesInput = z.infer<\n  typeof filtrosAvancadosAtendentesSchema\n>;\nexport type StatusAtendente = z.infer<typeof statusAtendenteSchema>;\nexport type AtivarAtendenteInput = z.infer<typeof ativarAtendenteSchema>;\nexport type DesativarAtendenteInput = z.infer<typeof desativarAtendenteSchema>;\n\n/**\n * Mensagens de erro personalizadas\n */\nexport const MENSAGENS_ERRO_ATENDENTES = {\n  CPF_INVALIDO: 'CPF informado \xE9 inv\xE1lido',\n  CPF_JA_EXISTE: 'CPF j\xE1 est\xE1 cadastrado no sistema',\n  EMAIL_JA_EXISTE: 'Email j\xE1 est\xE1 cadastrado no sistema',\n  ATENDENTE_NAO_ENCONTRADO: 'Atendente n\xE3o encontrado',\n  DADOS_INVALIDOS: 'Dados fornecidos s\xE3o inv\xE1lidos',\n  ERRO_INTERNO: 'Erro interno do servidor',\n  SEM_PERMISSAO: 'Sem permiss\xE3o para realizar esta opera\xE7\xE3o',\n  TELEFONE_INVALIDO: 'Formato de telefone inv\xE1lido',\n  CEP_INVALIDO: 'CEP deve estar no formato 00000-000',\n  DATA_INVALIDA: 'Data fornecida \xE9 inv\xE1lida',\n  SALARIO_INVALIDO: 'Sal\xE1rio deve ser um valor positivo',\n  STATUS_INVALIDO: 'Status fornecido \xE9 inv\xE1lido',\n} as const;\n\n/**\n * Utilit\xE1rios de valida\xE7\xE3o espec\xEDficos para atendentes\n */\nexport const validacaoAtendentes = {\n  /**\n   * Valida se um CPF j\xE1 existe no sistema\n   */\n  validarCPFUnico: async (\n    cpf: string,\n    atendenteId?: string\n  ): Promise<boolean> => {\n    const { prisma } = await import('@/lib/prisma');\n\n    const cpfLimpo = cpf.replace(/\\D/g, '');\n    const atendenteExistente = await prisma.atendente.findFirst({\n      where: {\n        cpf: cpfLimpo,\n        ...(atendenteId && { id: { not: atendenteId } }),\n      },\n    });\n\n    return !atendenteExistente;\n  },\n\n  /**\n   * Valida se um email j\xE1 existe no sistema\n   */\n  validarEmailUnico: async (\n    email: string,\n    usuarioId?: string\n  ): Promise<boolean> => {\n    const { prisma } = await import('@/lib/prisma');\n\n    const usuarioExistente = await prisma.usuario.findFirst({\n      where: {\n        email,\n        ...(usuarioId && { id: { not: usuarioId } }),\n      },\n    });\n\n    return !usuarioExistente;\n  },\n\n  /**\n   * Calcula a idade baseada na data de nascimento\n   */\n  calcularIdade: (dataNascimento: Date): number => {\n    const hoje = new Date();\n    let idade = hoje.getFullYear() - dataNascimento.getFullYear();\n    const mesAtual = hoje.getMonth();\n    const diaAtual = hoje.getDate();\n\n    if (\n      mesAtual < dataNascimento.getMonth() ||\n      (mesAtual === dataNascimento.getMonth() &&\n        diaAtual < dataNascimento.getDate())\n    ) {\n      idade--;\n    }\n\n    return idade;\n  },\n\n  /**\n   * Calcula o tempo de empresa em meses\n   */\n  calcularTempoEmpresa: (dataAdmissao: Date): number => {\n    const hoje = new Date();\n    const meses =\n      (hoje.getFullYear() - dataAdmissao.getFullYear()) * 12 +\n      (hoje.getMonth() - dataAdmissao.getMonth());\n    return Math.max(0, meses);\n  },\n};\n"],
      names: ["MENSAGENS_ERRO_ATENDENTES", "ativarAtendenteSchema", "atualizarAtendenteSchema", "buscarAtendentesSchema", "cepSchema", "cpfSchema", "criarAtendenteSchema", "desativarAtendenteSchema", "filtrosAvancadosAtendentesSchema", "idAtendenteSchema", "listarAtendentesSchema", "statusAtendenteSchema", "telefoneSchema", "validacaoAtendentes", "z", "string", "cuid", "min", "max", "refine", "cpf", "validacaoUtils", "isCPF", "replace", "message", "telefone", "isTelefone", "regex", "enum", "object", "usuario", "nome", "email", "senha", "userType", "literal", "rg", "optional", "dataNascimento", "datetime", "celular", "endereco", "cep", "cidade", "estado", "length", "dataAdmissao", "cargo", "setor", "departamento", "salario", "number", "positive", "status", "default", "observacoes", "foto", "url", "pagina", "coerce", "int", "limite", "busca", "dataAdmissaoInicio", "dataAdmissaoFim", "ordenarPor", "ordem", "ativo", "boolean", "temFoto", "salarioMinimo", "salarioMaximo", "idadeMinima", "idadeMaxima", "tempoEmpresaMinimo", "tempoEmpresaMaximo", "extend", "filtrosAvancados", "motivo", "novoStatus", "tipoDesativacao", "dataReativacao", "data", "Date", "CPF_INVALIDO", "CPF_JA_EXISTE", "EMAIL_JA_EXISTE", "ATENDENTE_NAO_ENCONTRADO", "DADOS_INVALIDOS", "ERRO_INTERNO", "SEM_PERMISSAO", "TELEFONE_INVALIDO", "CEP_INVALIDO", "DATA_INVALIDA", "SALARIO_INVALIDO", "STATUS_INVALIDO", "validarCPFUnico", "atendenteId", "prisma", "cpfLimpo", "atendenteExistente", "atendente", "findFirst", "where", "id", "not", "validarEmailUnico", "usuarioId", "usuarioExistente", "calcularIdade", "hoje", "idade", "getFullYear", "mesAtual", "getMonth", "diaAtual", "getDate", "calcularTempoEmpresa", "meses", "Math"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "09ca0102ea222f8d44e4cb9a9c1ad371bda3b027"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2fzr0olc6x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2fzr0olc6x();
cov_2fzr0olc6x().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2fzr0olc6x().f[0]++;
  cov_2fzr0olc6x().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2fzr0olc6x().s[3]++;
_export(exports, {
  get MENSAGENS_ERRO_ATENDENTES() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[1]++;
    cov_2fzr0olc6x().s[4]++;
    return MENSAGENS_ERRO_ATENDENTES;
  },
  get ativarAtendenteSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[2]++;
    cov_2fzr0olc6x().s[5]++;
    return ativarAtendenteSchema;
  },
  get atualizarAtendenteSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[3]++;
    cov_2fzr0olc6x().s[6]++;
    return atualizarAtendenteSchema;
  },
  get buscarAtendentesSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[4]++;
    cov_2fzr0olc6x().s[7]++;
    return buscarAtendentesSchema;
  },
  get cepSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[5]++;
    cov_2fzr0olc6x().s[8]++;
    return cepSchema;
  },
  get cpfSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[6]++;
    cov_2fzr0olc6x().s[9]++;
    return cpfSchema;
  },
  get criarAtendenteSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[7]++;
    cov_2fzr0olc6x().s[10]++;
    return criarAtendenteSchema;
  },
  get desativarAtendenteSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[8]++;
    cov_2fzr0olc6x().s[11]++;
    return desativarAtendenteSchema;
  },
  get filtrosAvancadosAtendentesSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[9]++;
    cov_2fzr0olc6x().s[12]++;
    return filtrosAvancadosAtendentesSchema;
  },
  get idAtendenteSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[10]++;
    cov_2fzr0olc6x().s[13]++;
    return idAtendenteSchema;
  },
  get listarAtendentesSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[11]++;
    cov_2fzr0olc6x().s[14]++;
    return listarAtendentesSchema;
  },
  get statusAtendenteSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[12]++;
    cov_2fzr0olc6x().s[15]++;
    return statusAtendenteSchema;
  },
  get telefoneSchema() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[13]++;
    cov_2fzr0olc6x().s[16]++;
    return telefoneSchema;
  },
  get validacaoAtendentes() {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[14]++;
    cov_2fzr0olc6x().s[17]++;
    return validacaoAtendentes;
  }
});
const _zod =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[18]++, require("zod"));
const _index =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[19]++, require("./index"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_2fzr0olc6x().f[15]++;
  cov_2fzr0olc6x().s[20]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_2fzr0olc6x().b[0][0]++;
    cov_2fzr0olc6x().s[21]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_2fzr0olc6x().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_2fzr0olc6x().s[22]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_2fzr0olc6x().s[23]++, new WeakMap());
  /* istanbul ignore next */
  cov_2fzr0olc6x().s[24]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[16]++;
    cov_2fzr0olc6x().s[25]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_2fzr0olc6x().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_2fzr0olc6x().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_2fzr0olc6x().f[17]++;
  cov_2fzr0olc6x().s[26]++;
  if (
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().b[2][0]++;
    cov_2fzr0olc6x().s[27]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_2fzr0olc6x().b[2][1]++;
  }
  cov_2fzr0olc6x().s[28]++;
  if (
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().b[4][0]++;
    cov_2fzr0olc6x().s[29]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_2fzr0olc6x().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_2fzr0olc6x().s[30]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_2fzr0olc6x().s[31]++;
  if (
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().b[6][0]++;
    cov_2fzr0olc6x().s[32]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_2fzr0olc6x().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_2fzr0olc6x().s[33]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_2fzr0olc6x().s[34]++,
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_2fzr0olc6x().s[35]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_2fzr0olc6x().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_2fzr0olc6x().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_2fzr0olc6x().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_2fzr0olc6x().s[37]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_2fzr0olc6x().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_2fzr0olc6x().b[11][1]++, null));
      /* istanbul ignore next */
      cov_2fzr0olc6x().s[38]++;
      if (
      /* istanbul ignore next */
      (cov_2fzr0olc6x().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_2fzr0olc6x().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_2fzr0olc6x().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_2fzr0olc6x().b[12][0]++;
        cov_2fzr0olc6x().s[39]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_2fzr0olc6x().b[12][1]++;
        cov_2fzr0olc6x().s[40]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_2fzr0olc6x().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_2fzr0olc6x().s[41]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_2fzr0olc6x().s[42]++;
  if (cache) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().b[14][0]++;
    cov_2fzr0olc6x().s[43]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_2fzr0olc6x().b[14][1]++;
  }
  cov_2fzr0olc6x().s[44]++;
  return newObj;
}
const idAtendenteSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[45]++, _zod.z.string().cuid('ID do atendente deve ser um CUID válido'));
const cpfSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[46]++, _zod.z.string().min(11, 'CPF deve ter 11 dígitos').max(14, 'CPF deve ter no máximo 14 caracteres').refine(cpf => {
  /* istanbul ignore next */
  cov_2fzr0olc6x().f[18]++;
  cov_2fzr0olc6x().s[47]++;
  return _index.validacaoUtils.isCPF(cpf.replace(/\D/g, ''));
}, {
  message: 'CPF inválido'
}));
const telefoneSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[48]++, _zod.z.string().min(10, 'Telefone deve ter pelo menos 10 dígitos').max(15, 'Telefone deve ter no máximo 15 dígitos').refine(telefone => {
  /* istanbul ignore next */
  cov_2fzr0olc6x().f[19]++;
  cov_2fzr0olc6x().s[49]++;
  return _index.validacaoUtils.isTelefone(telefone);
}, {
  message: 'Formato de telefone inválido'
}));
const cepSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[50]++, _zod.z.string().regex(/^\d{5}-?\d{3}$/, 'CEP deve estar no formato 00000-000'));
const statusAtendenteSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[51]++, _zod.z.enum(['ATIVO', 'INATIVO', 'SUSPENSO', 'TREINAMENTO', 'FERIAS', 'AFASTADO', 'LICENCA_MEDICA', 'LICENCA_MATERNIDADE']));
const criarAtendenteSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[52]++, _zod.z.object({
  // Dados do usuário relacionado
  usuario: _zod.z.object({
    nome: _zod.z.string().min(3, 'Nome deve ter pelo menos 3 caracteres').max(100, 'Nome deve ter no máximo 100 caracteres'),
    email: _zod.z.string().email('Email inválido'),
    senha: _zod.z.string().min(8, 'Senha deve ter pelo menos 8 caracteres'),
    userType: _zod.z.literal('ATENDENTE')
  }),
  // Dados pessoais
  cpf: cpfSchema,
  rg: _zod.z.string().optional(),
  dataNascimento: _zod.z.string().datetime().optional(),
  telefone: telefoneSchema,
  celular: telefoneSchema.optional(),
  // Endereço
  endereco: _zod.z.string().max(255, 'Endereço deve ter no máximo 255 caracteres').optional(),
  cep: cepSchema.optional(),
  cidade: _zod.z.string().max(100, 'Cidade deve ter no máximo 100 caracteres').optional(),
  estado: _zod.z.string().length(2, 'Estado deve ter 2 caracteres').optional(),
  // Dados profissionais
  dataAdmissao: _zod.z.string().datetime('Data de admissão deve ser uma data válida'),
  cargo: _zod.z.string().min(2, 'Cargo deve ter pelo menos 2 caracteres').max(100, 'Cargo deve ter no máximo 100 caracteres'),
  setor: _zod.z.string().min(2, 'Setor deve ter pelo menos 2 caracteres').max(100, 'Setor deve ter no máximo 100 caracteres'),
  departamento: _zod.z.string().max(100, 'Departamento deve ter no máximo 100 caracteres').optional(),
  salario: _zod.z.number().positive('Salário deve ser um valor positivo').optional(),
  status: statusAtendenteSchema.default('ATIVO'),
  observacoes: _zod.z.string().max(1000, 'Observações devem ter no máximo 1000 caracteres').optional(),
  foto: _zod.z.string().url('URL da foto deve ser válida').optional()
}));
const atualizarAtendenteSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[53]++, _zod.z.object({
  // Dados pessoais
  rg: _zod.z.string().optional(),
  dataNascimento: _zod.z.string().datetime().optional(),
  telefone: telefoneSchema.optional(),
  celular: telefoneSchema.optional(),
  // Endereço
  endereco: _zod.z.string().max(255, 'Endereço deve ter no máximo 255 caracteres').optional(),
  cep: cepSchema.optional(),
  cidade: _zod.z.string().max(100, 'Cidade deve ter no máximo 100 caracteres').optional(),
  estado: _zod.z.string().length(2, 'Estado deve ter 2 caracteres').optional(),
  // Dados profissionais
  dataAdmissao: _zod.z.string().datetime('Data de admissão deve ser uma data válida').optional(),
  cargo: _zod.z.string().min(2, 'Cargo deve ter pelo menos 2 caracteres').max(100, 'Cargo deve ter no máximo 100 caracteres').optional(),
  setor: _zod.z.string().min(2, 'Setor deve ter pelo menos 2 caracteres').max(100, 'Setor deve ter no máximo 100 caracteres').optional(),
  departamento: _zod.z.string().max(100, 'Departamento deve ter no máximo 100 caracteres').optional(),
  salario: _zod.z.number().positive('Salário deve ser um valor positivo').optional(),
  status: statusAtendenteSchema.optional(),
  observacoes: _zod.z.string().max(1000, 'Observações devem ter no máximo 1000 caracteres').optional(),
  foto: _zod.z.string().url('URL da foto deve ser válida').optional()
}));
const listarAtendentesSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[54]++, _zod.z.object({
  pagina: _zod.z.coerce.number().int().min(1, 'Página deve ser um número inteiro positivo').default(1),
  limite: _zod.z.coerce.number().int().min(1, 'Limite deve ser um número inteiro positivo').max(100, 'Limite máximo é 100').default(10),
  busca: _zod.z.string().optional(),
  status: statusAtendenteSchema.optional(),
  setor: _zod.z.string().optional(),
  cargo: _zod.z.string().optional(),
  departamento: _zod.z.string().optional(),
  dataAdmissaoInicio: _zod.z.string().datetime().optional(),
  dataAdmissaoFim: _zod.z.string().datetime().optional(),
  ordenarPor: _zod.z.enum(['nome', 'cpf', 'cargo', 'setor', 'dataAdmissao', 'status', 'criadoEm']).default('nome'),
  ordem: _zod.z.enum(['asc', 'desc']).default('asc')
}));
const filtrosAvancadosAtendentesSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[55]++, _zod.z.object({
  ativo: _zod.z.boolean().optional(),
  temFoto: _zod.z.boolean().optional(),
  salarioMinimo: _zod.z.number().positive().optional(),
  salarioMaximo: _zod.z.number().positive().optional(),
  idadeMinima: _zod.z.number().int().min(16).optional(),
  idadeMaxima: _zod.z.number().int().max(100).optional(),
  tempoEmpresaMinimo: _zod.z.number().int().min(0).optional(),
  tempoEmpresaMaximo: _zod.z.number().int().optional()
}));
const buscarAtendentesSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[56]++, listarAtendentesSchema.extend({
  filtrosAvancados: filtrosAvancadosAtendentesSchema.optional()
}));
const ativarAtendenteSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[57]++, _zod.z.object({
  motivo: _zod.z.string().min(1, 'Motivo da ativação é obrigatório').max(500, 'Motivo deve ter no máximo 500 caracteres'),
  novoStatus: _zod.z.enum(['ATIVO', 'FERIAS', 'AFASTADO']).optional().default('ATIVO')
}));
const desativarAtendenteSchema =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[58]++, _zod.z.object({
  motivo: _zod.z.string().min(1, 'Motivo da desativação é obrigatório').max(500, 'Motivo deve ter no máximo 500 caracteres'),
  tipoDesativacao: _zod.z.enum(['TEMPORARIA', 'DEFINITIVA']).default('TEMPORARIA'),
  dataReativacao: _zod.z.string().datetime('Data de reativação deve ser uma data válida').optional()
}).refine(data => {
  /* istanbul ignore next */
  cov_2fzr0olc6x().f[20]++;
  cov_2fzr0olc6x().s[59]++;
  // Se for desativação temporária, data de reativação é obrigatória
  if (
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[16][0]++, data.tipoDesativacao === 'TEMPORARIA') &&
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[16][1]++, !data.dataReativacao)) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().b[15][0]++;
    cov_2fzr0olc6x().s[60]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_2fzr0olc6x().b[15][1]++;
  }
  // Se for definitiva, não deve ter data de reativação
  cov_2fzr0olc6x().s[61]++;
  if (
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[18][0]++, data.tipoDesativacao === 'DEFINITIVA') &&
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[18][1]++, data.dataReativacao)) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().b[17][0]++;
    cov_2fzr0olc6x().s[62]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_2fzr0olc6x().b[17][1]++;
  }
  // Se tem data de reativação, deve ser futura
  cov_2fzr0olc6x().s[63]++;
  if (
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[20][0]++, data.dataReativacao) &&
  /* istanbul ignore next */
  (cov_2fzr0olc6x().b[20][1]++, new Date(data.dataReativacao) <= new Date())) {
    /* istanbul ignore next */
    cov_2fzr0olc6x().b[19][0]++;
    cov_2fzr0olc6x().s[64]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_2fzr0olc6x().b[19][1]++;
  }
  cov_2fzr0olc6x().s[65]++;
  return true;
}, {
  message: 'Para desativação temporária, informe uma data de reativação futura. Para desativação definitiva, não informe data de reativação.'
}));
const MENSAGENS_ERRO_ATENDENTES =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[66]++, {
  CPF_INVALIDO: 'CPF informado é inválido',
  CPF_JA_EXISTE: 'CPF já está cadastrado no sistema',
  EMAIL_JA_EXISTE: 'Email já está cadastrado no sistema',
  ATENDENTE_NAO_ENCONTRADO: 'Atendente não encontrado',
  DADOS_INVALIDOS: 'Dados fornecidos são inválidos',
  ERRO_INTERNO: 'Erro interno do servidor',
  SEM_PERMISSAO: 'Sem permissão para realizar esta operação',
  TELEFONE_INVALIDO: 'Formato de telefone inválido',
  CEP_INVALIDO: 'CEP deve estar no formato 00000-000',
  DATA_INVALIDA: 'Data fornecida é inválida',
  SALARIO_INVALIDO: 'Salário deve ser um valor positivo',
  STATUS_INVALIDO: 'Status fornecido é inválido'
});
const validacaoAtendentes =
/* istanbul ignore next */
(cov_2fzr0olc6x().s[67]++, {
  /**
  * Valida se um CPF já existe no sistema
  */
  validarCPFUnico: async (cpf, atendenteId) => {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[21]++;
    const {
      prisma
    } =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[68]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_2fzr0olc6x().f[22]++;
      cov_2fzr0olc6x().s[69]++;
      return /*#__PURE__*/_interop_require_wildcard(require("../prisma"));
    }));
    const cpfLimpo =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[70]++, cpf.replace(/\D/g, ''));
    const atendenteExistente =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[71]++, await prisma.atendente.findFirst({
      where: {
        cpf: cpfLimpo,
        ...(
        /* istanbul ignore next */
        (cov_2fzr0olc6x().b[21][0]++, atendenteId) &&
        /* istanbul ignore next */
        (cov_2fzr0olc6x().b[21][1]++, {
          id: {
            not: atendenteId
          }
        }))
      }
    }));
    /* istanbul ignore next */
    cov_2fzr0olc6x().s[72]++;
    return !atendenteExistente;
  },
  /**
  * Valida se um email já existe no sistema
  */
  validarEmailUnico: async (email, usuarioId) => {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[23]++;
    const {
      prisma
    } =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[73]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_2fzr0olc6x().f[24]++;
      cov_2fzr0olc6x().s[74]++;
      return /*#__PURE__*/_interop_require_wildcard(require("../prisma"));
    }));
    const usuarioExistente =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[75]++, await prisma.usuario.findFirst({
      where: {
        email,
        ...(
        /* istanbul ignore next */
        (cov_2fzr0olc6x().b[22][0]++, usuarioId) &&
        /* istanbul ignore next */
        (cov_2fzr0olc6x().b[22][1]++, {
          id: {
            not: usuarioId
          }
        }))
      }
    }));
    /* istanbul ignore next */
    cov_2fzr0olc6x().s[76]++;
    return !usuarioExistente;
  },
  /**
  * Calcula a idade baseada na data de nascimento
  */
  calcularIdade: dataNascimento => {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[25]++;
    const hoje =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[77]++, new Date());
    let idade =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[78]++, hoje.getFullYear() - dataNascimento.getFullYear());
    const mesAtual =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[79]++, hoje.getMonth());
    const diaAtual =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[80]++, hoje.getDate());
    /* istanbul ignore next */
    cov_2fzr0olc6x().s[81]++;
    if (
    /* istanbul ignore next */
    (cov_2fzr0olc6x().b[24][0]++, mesAtual < dataNascimento.getMonth()) ||
    /* istanbul ignore next */
    (cov_2fzr0olc6x().b[24][1]++, mesAtual === dataNascimento.getMonth()) &&
    /* istanbul ignore next */
    (cov_2fzr0olc6x().b[24][2]++, diaAtual < dataNascimento.getDate())) {
      /* istanbul ignore next */
      cov_2fzr0olc6x().b[23][0]++;
      cov_2fzr0olc6x().s[82]++;
      idade--;
    } else
    /* istanbul ignore next */
    {
      cov_2fzr0olc6x().b[23][1]++;
    }
    cov_2fzr0olc6x().s[83]++;
    return idade;
  },
  /**
  * Calcula o tempo de empresa em meses
  */
  calcularTempoEmpresa: dataAdmissao => {
    /* istanbul ignore next */
    cov_2fzr0olc6x().f[26]++;
    const hoje =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[84]++, new Date());
    const meses =
    /* istanbul ignore next */
    (cov_2fzr0olc6x().s[85]++, (hoje.getFullYear() - dataAdmissao.getFullYear()) * 12 + (hoje.getMonth() - dataAdmissao.getMonth()));
    /* istanbul ignore next */
    cov_2fzr0olc6x().s[86]++;
    return Math.max(0, meses);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,