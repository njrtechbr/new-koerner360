{"version":3,"names":["POST","esquemaGerarSenhaTemporaria","cov_zh3ogwmdy","s","_zod","z","object","email","string","adminKey","min","gerarSenhaTemporaria","f","caracteres","senha","i","charAt","Math","floor","random","length","request","body","json","parse","process","env","ADMIN_TEMP_PASSWORD_KEY","b","_server","NextResponse","message","status","usuario","_prisma","prisma","findUnique","where","senhaTemporaria","senhaHash","_bcryptjs","default","hash","tokenExpiracao","Date","now","update","id","data","tokenRecuperacao","_crypto","randomBytes","toString","expiracaoTokenRecuperacao","console","log","toLocaleString","expiraEm","error","ZodError","errors"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\generate-temp-password\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { prisma } from '@/lib/prisma';\nimport bcrypt from 'bcryptjs';\nimport crypto from 'crypto';\n\n// Schema de validação para geração de senha temporária\nconst esquemaGerarSenhaTemporaria = z.object({\n  email: z.string().email('Email inválido'),\n  adminKey: z.string().min(1, 'Chave de administrador é obrigatória'),\n});\n\n// Função para gerar senha temporária\nfunction gerarSenhaTemporaria(): string {\n  const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let senha = '';\n  for (let i = 0; i < 8; i++) {\n    senha += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\n  }\n  return senha;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validar entrada\n    const { email, adminKey } = esquemaGerarSenhaTemporaria.parse(body);\n\n    // Verificar chave de administrador (em produção, usar uma chave mais segura)\n    if (adminKey !== process.env.ADMIN_TEMP_PASSWORD_KEY) {\n      return NextResponse.json({ message: 'Acesso negado' }, { status: 403 });\n    }\n\n    // Verificar se o usuário existe\n    const usuario = await prisma.usuario.findUnique({\n      where: { email },\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { message: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Gerar senha temporária\n    const senhaTemporaria = gerarSenhaTemporaria();\n    const senhaHash = await bcrypt.hash(senhaTemporaria, 12);\n\n    // Gerar token de expiração (24 horas)\n    const tokenExpiracao = new Date(Date.now() + 24 * 60 * 60 * 1000);\n\n    // Atualizar usuário com senha temporária\n    await prisma.usuario.update({\n      where: { id: usuario.id },\n      data: {\n        senha: senhaHash,\n        tokenRecuperacao: crypto.randomBytes(16).toString('hex'), // Usar como flag de senha temporária\n        expiracaoTokenRecuperacao: tokenExpiracao,\n      },\n    });\n\n    // TODO: Implementar envio de email com a senha temporária\n    // Por enquanto, apenas logamos a senha (em produção, isso deve ser removido)\n    console.log(`Senha temporária para ${email}: ${senhaTemporaria}`);\n    console.log(`A senha expira em: ${tokenExpiracao.toLocaleString('pt-BR')}`);\n\n    return NextResponse.json(\n      {\n        message: 'Senha temporária gerada com sucesso',\n        senhaTemporaria, // Em produção, remover este campo\n        expiraEm: tokenExpiracao,\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Erro na geração de senha temporária:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { message: 'Dados inválidos', errors: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { message: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}