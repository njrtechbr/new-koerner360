{"version":3,"names":["cov_19g8125gyx","actualCoverage","s","config","f","default","_default","ROTAS_POR_TIPO","podeAcessarRota","pathname","userType","b","includes","rota","tipos","Object","entries","startsWith","obterDashboardPorTipo","_route","auth","req","session","isAuth","user","isAuthPage","nextUrl","isApiAuthRoute","isPublicApiRoute","_server","NextResponse","next","dashboardUrl","redirect","URL","url","loginUrl","searchParams","set","podeAcessar","matcher"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { auth } from '@/app/api/auth/[...nextauth]/route';\nimport { TipoUsuario } from '@prisma/client';\n\n// Definição de rotas protegidas por tipo de usuário\nconst ROTAS_POR_TIPO: Record<string, TipoUsuario[]> = {\n  '/dashboard': ['ADMIN', 'GESTOR', 'ATENDENTE'],\n  '/usuarios': ['ADMIN', 'GESTOR'],\n  '/atendentes': ['ADMIN', 'GESTOR'],\n  '/relatorios': ['ADMIN', 'GESTOR'],\n  '/configuracoes': ['ADMIN'],\n  '/feedbacks': ['ADMIN', 'GESTOR', 'ATENDENTE'],\n  '/gamificacao': ['ADMIN', 'GESTOR', 'ATENDENTE'],\n  // Rotas da API\n  '/api/usuarios': ['ADMIN', 'GESTOR', 'ATENDENTE'],\n  '/api/atendentes': ['ADMIN', 'GESTOR'],\n  '/api/relatorios': ['ADMIN', 'GESTOR'],\n};\n\n// Função para verificar se o usuário pode acessar uma rota\nfunction podeAcessarRota(pathname: string, userType: string): boolean {\n  // Verifica rotas exatas\n  if (ROTAS_POR_TIPO[pathname]) {\n    return ROTAS_POR_TIPO[pathname].includes(userType as TipoUsuario);\n  }\n\n  // Verifica rotas que começam com um padrão\n  for (const [rota, tipos] of Object.entries(ROTAS_POR_TIPO)) {\n    if (pathname.startsWith(rota)) {\n      return tipos.includes(userType as TipoUsuario);\n    }\n  }\n\n  return true; // Permite acesso se a rota não está protegida\n}\n\n// Função para obter a rota de dashboard baseada no tipo de usuário\nfunction obterDashboardPorTipo(userType: string): string {\n  // Todos os tipos de usuário vão para o dashboard principal\n  // A diferenciação de acesso é feita pelos componentes internos\n  return '/dashboard';\n}\n\n// Middleware para proteger rotas que requerem autenticação\nexport default auth(req => {\n  const session = req.auth;\n  const isAuth = !!session?.user;\n  const isAuthPage = req.nextUrl.pathname.startsWith('/auth');\n  const isApiAuthRoute = req.nextUrl.pathname.startsWith('/api/auth');\n  const isPublicApiRoute = req.nextUrl.pathname.startsWith('/api/public');\n  const userType = session?.user?.userType as string;\n\n  // Permitir acesso às rotas de API de autenticação\n  if (isApiAuthRoute) {\n    return NextResponse.next();\n  }\n\n  // Permitir acesso às rotas de API públicas\n  if (isPublicApiRoute) {\n    return NextResponse.next();\n  }\n\n  // Se o usuário está autenticado e tenta acessar páginas de auth, redireciona para dashboard apropriado\n  if (isAuth && isAuthPage) {\n    const dashboardUrl = userType\n      ? obterDashboardPorTipo(userType)\n      : '/dashboard';\n    return NextResponse.redirect(new URL(dashboardUrl, req.url));\n  }\n\n  // Se o usuário não está autenticado e tenta acessar páginas protegidas, redireciona para login\n  if (!isAuth && !isAuthPage && req.nextUrl.pathname !== '/') {\n    const loginUrl = new URL('/auth/login', req.url);\n    loginUrl.searchParams.set('callbackUrl', req.nextUrl.pathname);\n    return NextResponse.redirect(loginUrl);\n  }\n\n  // Se o usuário está autenticado, verifica permissões de acesso\n  if (isAuth && !isAuthPage && userType) {\n    const podeAcessar = podeAcessarRota(req.nextUrl.pathname, userType);\n\n    if (!podeAcessar) {\n      // Redireciona para o dashboard apropriado se não tem permissão\n      const dashboardUrl = obterDashboardPorTipo(userType);\n      return NextResponse.redirect(new URL(dashboardUrl, req.url));\n    }\n  }\n\n  return NextResponse.next();\n});\n\n// Configuração das rotas que o middleware deve processar\nexport const config = {\n  matcher: [\n    /*\n     * Corresponde a todos os caminhos de solicitação, exceto aqueles que começam com:\n     * - _next/static (arquivos estáticos)\n     * - _next/image (otimização de imagem)\n     * - favicon.ico (arquivo de favicon)\n     * - arquivos públicos (imagens, etc.)\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n};\n"],"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","ignoreList":[]}