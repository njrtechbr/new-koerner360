{"version":3,"names":["cov_2385z86y4e","actualCoverage","s","PATCH","request","params","f","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","perfil","id","_validations","idUsuarioSchema","parse","usuarioExistente","_prisma","prisma","usuario","findUnique","where","ativo","usuarioAtivado","update","data","atualizadoEm","Date","select","nome","email","mensagem","error","console","z","ZodError","detalhes","errors"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\usuarios\\[id]\\ativar\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { idUsuarioSchema } from '@/lib/validations';\n\n/**\n * PATCH /api/usuarios/[id]/ativar - Ativar/reativar usuário\n */\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Apenas admins e gestores podem ativar usuários\n    if (!['ADMIN', 'GESTOR'].includes(session.user.perfil)) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para ativar usuários' },\n        { status: 403 }\n      );\n    }\n\n    const id = idUsuarioSchema.parse(params.id);\n\n    // Verificar se o usuário existe\n    const usuarioExistente = await prisma.usuario.findUnique({\n      where: { id },\n    });\n\n    if (!usuarioExistente) {\n      return NextResponse.json(\n        { erro: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o usuário já está ativo\n    if (usuarioExistente.ativo) {\n      return NextResponse.json(\n        { erro: 'Usuário já está ativo' },\n        { status: 400 }\n      );\n    }\n\n    // Ativar usuário\n    const usuarioAtivado = await prisma.usuario.update({\n      where: { id },\n      data: {\n        ativo: true,\n        atualizadoEm: new Date(),\n      },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        ativo: true,\n        atualizadoEm: true,\n      },\n    });\n\n    return NextResponse.json({\n      mensagem: 'Usuário ativado com sucesso',\n      usuario: usuarioAtivado,\n    });\n  } catch (error) {\n    console.error('Erro ao ativar usuário:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { erro: 'ID inválido', detalhes: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}