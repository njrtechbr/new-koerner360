81e3d1ddbca0f02b2a95f4a2a4ba49af
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _vitest = require("vitest");
const _usenotificacoesavaliacoes = require("../use-notificacoes-avaliacoes");
const _usetoast = require("../use-toast");
// Mock do hook useToast
_vitest.vi.mock('../use-toast', ()=>({
        useToast: _vitest.vi.fn(()=>({
                toast: _vitest.vi.fn()
            }))
    }));
// Mock do fetch global
const mockFetch = _vitest.vi.fn();
global.fetch = mockFetch;
// Mock dos dados de teste
const mockNotificacoes = [
    {
        id: '1',
        tipo: 'AVALIACAO_PENDENTE',
        titulo: 'Avaliação Pendente',
        mensagem: 'Você tem uma avaliação pendente',
        urgencia: 'MEDIA',
        lida: false,
        criadaEm: new Date().toISOString(),
        usuario: {
            id: '1',
            nome: 'João Silva',
            email: 'joao@teste.com'
        },
        avaliacao: {
            id: '1',
            titulo: 'Avaliação Q1 2024',
            prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
        }
    }
];
const mockEstatisticas = {
    totalNotificacoes: 5,
    naoLidas: 3,
    porTipo: {
        AVALIACAO_PENDENTE: 2,
        AVALIACAO_VENCIDA: 1,
        AVALIACAO_PROXIMA_VENCIMENTO: 0,
        NOVA_AVALIACAO_RECEBIDA: 1,
        AVALIACAO_COMPLETADA: 1,
        LEMBRETE_PERSONALIZADO: 0
    },
    porUrgencia: {
        BAIXA: 1,
        MEDIA: 3,
        ALTA: 1
    }
};
(0, _vitest.describe)('useNotificacoesAvaliacoes', ()=>{
    const mockToast = _vitest.vi.fn();
    (0, _vitest.beforeEach)(()=>{
        _vitest.vi.clearAllMocks();
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _vitest.afterEach)(()=>{
        _vitest.vi.resetAllMocks();
    });
    (0, _vitest.describe)('buscarNotificacoes', ()=>{
        (0, _vitest.it)('deve buscar notificações com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        notificacoes: mockNotificacoes,
                        total: 1,
                        pagina: 1,
                        totalPaginas: 1
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarNotificacoes();
            });
            (0, _vitest.expect)(result.current.notificacoes).toEqual(mockNotificacoes);
            (0, _vitest.expect)(result.current.carregando).toBe(false);
            (0, _vitest.expect)(result.current.erro).toBeNull();
        });
        (0, _vitest.it)('deve lidar com erro na busca', async ()=>{
            const errorMessage = 'Erro ao buscar notificações';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarNotificacoes();
            });
            (0, _vitest.expect)(result.current.notificacoes).toEqual([]);
            (0, _vitest.expect)(result.current.carregando).toBe(false);
            (0, _vitest.expect)(result.current.erro).toBe(errorMessage);
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
        (0, _vitest.it)('deve aplicar filtros corretamente', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        notificacoes: mockNotificacoes,
                        total: 1,
                        pagina: 1,
                        totalPaginas: 1
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            const filtros = {
                tipo: 'AVALIACAO_PENDENTE',
                urgencia: 'ALTA',
                lida: false,
                dataInicio: new Date('2024-01-01'),
                dataFim: new Date('2024-12-31')
            };
            await (0, _react.act)(async ()=>{
                await result.current.buscarNotificacoes(filtros);
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith(_vitest.expect.stringContaining('/api/notificacoes-avaliacoes'), _vitest.expect.objectContaining({
                method: 'GET'
            }));
            // Verificar se os parâmetros de query foram construídos corretamente
            const url = mockFetch.mock.calls[0][0];
            (0, _vitest.expect)(url).toContain('tipo=AVALIACAO_PENDENTE');
            (0, _vitest.expect)(url).toContain('urgencia=ALTA');
            (0, _vitest.expect)(url).toContain('lida=false');
        });
    });
    (0, _vitest.describe)('marcarComoLida', ()=>{
        (0, _vitest.it)('deve marcar notificação como lida com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            // Definir notificações iniciais
            (0, _react.act)(()=>{
                result.current.notificacoes = mockNotificacoes;
            });
            await (0, _react.act)(async ()=>{
                await result.current.marcarComoLida('1');
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/notificacoes-avaliacoes/1', _vitest.expect.objectContaining({
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    acao: 'marcar_lida'
                })
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Notificação marcada como lida'
            });
        });
        (0, _vitest.it)('deve lidar com erro ao marcar como lida', async ()=>{
            const errorMessage = 'Erro ao marcar como lida';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            await (0, _react.act)(async ()=>{
                await result.current.marcarComoLida('1');
            });
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _vitest.describe)('marcarTodasComoLidas', ()=>{
        (0, _vitest.it)('deve marcar todas as notificações como lidas com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        marcadas: 3
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            await (0, _react.act)(async ()=>{
                await result.current.marcarTodasComoLidas();
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/notificacoes-avaliacoes/marcar-todas-lidas', _vitest.expect.objectContaining({
                method: 'POST'
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: '3 notificações marcadas como lidas'
            });
        });
    });
    (0, _vitest.describe)('removerNotificacao', ()=>{
        (0, _vitest.it)('deve remover notificação com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            await (0, _react.act)(async ()=>{
                await result.current.removerNotificacao('1');
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/notificacoes-avaliacoes/1', _vitest.expect.objectContaining({
                method: 'DELETE'
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Notificação removida com sucesso'
            });
        });
    });
    (0, _vitest.describe)('buscarEstatisticas', ()=>{
        (0, _vitest.it)('deve buscar estatísticas com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarEstatisticas();
            });
            (0, _vitest.expect)(result.current.estatisticas).toEqual(mockEstatisticas);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/notificacoes-avaliacoes/estatisticas', _vitest.expect.objectContaining({
                method: 'GET'
            }));
        });
    });
    (0, _vitest.describe)('gerarNotificacoes', ()=>{
        (0, _vitest.it)('deve gerar notificações com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        geradas: 5
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            await (0, _react.act)(async ()=>{
                await result.current.gerarNotificacoes();
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/notificacoes-avaliacoes/gerar', _vitest.expect.objectContaining({
                method: 'POST'
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: '5 notificações geradas com sucesso'
            });
        });
    });
    (0, _vitest.describe)('limparNotificacoes', ()=>{
        (0, _vitest.it)('deve limpar notificações antigas com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        removidas: 10
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            await (0, _react.act)(async ()=>{
                await result.current.limparNotificacoes(30);
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/notificacoes-avaliacoes/limpar', _vitest.expect.objectContaining({
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    diasAntigos: 30
                })
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: '10 notificações antigas removidas'
            });
        });
    });
    (0, _vitest.describe)('estados de carregamento', ()=>{
        (0, _vitest.it)('deve gerenciar estado de carregamento corretamente', async ()=>{
            let resolvePromise;
            const promise = new Promise((resolve)=>{
                resolvePromise = resolve;
            });
            mockFetch.mockReturnValueOnce(promise);
            const { result } = (0, _react.renderHook)(()=>(0, _usenotificacoesavaliacoes.useNotificacoesAvaliacoes)());
            // Iniciar busca
            (0, _react.act)(()=>{
                result.current.buscarNotificacoes();
            });
            // Verificar que está carregando
            (0, _vitest.expect)(result.current.carregando).toBe(true);
            // Resolver promise
            await (0, _react.act)(async ()=>{
                resolvePromise({
                    ok: true,
                    json: async ()=>({
                            notificacoes: [],
                            total: 0,
                            pagina: 1,
                            totalPaginas: 1
                        })
                });
            });
            // Verificar que não está mais carregando
            (0, _vitest.expect)(result.current.carregando).toBe(false);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,