{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\__tests__\\use-notificacoes-avaliacoes.test.ts"],"sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { useNotificacoesAvaliacoes } from '../use-notificacoes-avaliacoes';\nimport { useToast } from '../use-toast';\n\n// Mock do hook useToast\nvi.mock('../use-toast', () => ({\n  useToast: vi.fn(() => ({\n    toast: vi.fn(),\n  })),\n}));\n\n// Mock do fetch global\nconst mockFetch = vi.fn();\nglobal.fetch = mockFetch;\n\n// Mock dos dados de teste\nconst mockNotificacoes = [\n  {\n    id: '1',\n    tipo: 'AVALIACAO_PENDENTE' as const,\n    titulo: 'Avaliação Pendente',\n    mensagem: 'Você tem uma avaliação pendente',\n    urgencia: 'MEDIA' as const,\n    lida: false,\n    criadaEm: new Date().toISOString(),\n    usuario: {\n      id: '1',\n      nome: 'João Silva',\n      email: 'joao@teste.com',\n    },\n    avaliacao: {\n      id: '1',\n      titulo: 'Avaliação Q1 2024',\n      prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    },\n  },\n];\n\nconst mockEstatisticas = {\n  totalNotificacoes: 5,\n  naoLidas: 3,\n  porTipo: {\n    AVALIACAO_PENDENTE: 2,\n    AVALIACAO_VENCIDA: 1,\n    AVALIACAO_PROXIMA_VENCIMENTO: 0,\n    NOVA_AVALIACAO_RECEBIDA: 1,\n    AVALIACAO_COMPLETADA: 1,\n    LEMBRETE_PERSONALIZADO: 0,\n  },\n  porUrgencia: {\n    BAIXA: 1,\n    MEDIA: 3,\n    ALTA: 1,\n  },\n};\n\ndescribe('useNotificacoesAvaliacoes', () => {\n  const mockToast = vi.fn();\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    (useToast as any).mockReturnValue({ toast: mockToast });\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  describe('buscarNotificacoes', () => {\n    it('deve buscar notificações com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          notificacoes: mockNotificacoes,\n          total: 1,\n          pagina: 1,\n          totalPaginas: 1,\n        }),\n      });\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      await act(async () => {\n        await result.current.buscarNotificacoes();\n      });\n\n      expect(result.current.notificacoes).toEqual(mockNotificacoes);\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBeNull();\n    });\n\n    it('deve lidar com erro na busca', async () => {\n      const errorMessage = 'Erro ao buscar notificações';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      await act(async () => {\n        await result.current.buscarNotificacoes();\n      });\n\n      expect(result.current.notificacoes).toEqual([]);\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBe(errorMessage);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n\n    it('deve aplicar filtros corretamente', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          notificacoes: mockNotificacoes,\n          total: 1,\n          pagina: 1,\n          totalPaginas: 1,\n        }),\n      });\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      const filtros = {\n        tipo: 'AVALIACAO_PENDENTE' as const,\n        urgencia: 'ALTA' as const,\n        lida: false,\n        dataInicio: new Date('2024-01-01'),\n        dataFim: new Date('2024-12-31'),\n      };\n\n      await act(async () => {\n        await result.current.buscarNotificacoes(filtros);\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/notificacoes-avaliacoes'),\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n\n      // Verificar se os parâmetros de query foram construídos corretamente\n      const url = mockFetch.mock.calls[0][0];\n      expect(url).toContain('tipo=AVALIACAO_PENDENTE');\n      expect(url).toContain('urgencia=ALTA');\n      expect(url).toContain('lida=false');\n    });\n  });\n\n  describe('marcarComoLida', () => {\n    it('deve marcar notificação como lida com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      // Definir notificações iniciais\n      act(() => {\n        result.current.notificacoes = mockNotificacoes;\n      });\n\n      await act(async () => {\n        await result.current.marcarComoLida('1');\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/notificacoes-avaliacoes/1',\n        expect.objectContaining({\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ acao: 'marcar_lida' }),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Notificação marcada como lida',\n      });\n    });\n\n    it('deve lidar com erro ao marcar como lida', async () => {\n      const errorMessage = 'Erro ao marcar como lida';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      await act(async () => {\n        await result.current.marcarComoLida('1');\n      });\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('marcarTodasComoLidas', () => {\n    it('deve marcar todas as notificações como lidas com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ marcadas: 3 }),\n      });\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      await act(async () => {\n        await result.current.marcarTodasComoLidas();\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/notificacoes-avaliacoes/marcar-todas-lidas',\n        expect.objectContaining({\n          method: 'POST',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: '3 notificações marcadas como lidas',\n      });\n    });\n  });\n\n  describe('removerNotificacao', () => {\n    it('deve remover notificação com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      await act(async () => {\n        await result.current.removerNotificacao('1');\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/notificacoes-avaliacoes/1',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Notificação removida com sucesso',\n      });\n    });\n  });\n\n  describe('buscarEstatisticas', () => {\n    it('deve buscar estatísticas com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockEstatisticas,\n      });\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      await act(async () => {\n        await result.current.buscarEstatisticas();\n      });\n\n      expect(result.current.estatisticas).toEqual(mockEstatisticas);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/notificacoes-avaliacoes/estatisticas',\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n    });\n  });\n\n  describe('gerarNotificacoes', () => {\n    it('deve gerar notificações com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ geradas: 5 }),\n      });\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      await act(async () => {\n        await result.current.gerarNotificacoes();\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/notificacoes-avaliacoes/gerar',\n        expect.objectContaining({\n          method: 'POST',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: '5 notificações geradas com sucesso',\n      });\n    });\n  });\n\n  describe('limparNotificacoes', () => {\n    it('deve limpar notificações antigas com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ removidas: 10 }),\n      });\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      await act(async () => {\n        await result.current.limparNotificacoes(30);\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/notificacoes-avaliacoes/limpar',\n        expect.objectContaining({\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ diasAntigos: 30 }),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: '10 notificações antigas removidas',\n      });\n    });\n  });\n\n  describe('estados de carregamento', () => {\n    it('deve gerenciar estado de carregamento corretamente', async () => {\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n\n      mockFetch.mockReturnValueOnce(promise);\n\n      const { result } = renderHook(() => useNotificacoesAvaliacoes());\n\n      // Iniciar busca\n      act(() => {\n        result.current.buscarNotificacoes();\n      });\n\n      // Verificar que está carregando\n      expect(result.current.carregando).toBe(true);\n\n      // Resolver promise\n      await act(async () => {\n        resolvePromise!({\n          ok: true,\n          json: async () => ({\n            notificacoes: [],\n            total: 0,\n            pagina: 1,\n            totalPaginas: 1,\n          }),\n        });\n      });\n\n      // Verificar que não está mais carregando\n      expect(result.current.carregando).toBe(false);\n    });\n  });\n});"],"names":["vi","mock","useToast","fn","toast","mockFetch","global","fetch","mockNotificacoes","id","tipo","titulo","mensagem","urgencia","lida","criadaEm","Date","toISOString","usuario","nome","email","avaliacao","prazo","now","mockEstatisticas","totalNotificacoes","naoLidas","porTipo","AVALIACAO_PENDENTE","AVALIACAO_VENCIDA","AVALIACAO_PROXIMA_VENCIMENTO","NOVA_AVALIACAO_RECEBIDA","AVALIACAO_COMPLETADA","LEMBRETE_PERSONALIZADO","porUrgencia","BAIXA","MEDIA","ALTA","describe","mockToast","beforeEach","clearAllMocks","mockReturnValue","afterEach","resetAllMocks","it","mockResolvedValueOnce","ok","json","notificacoes","total","pagina","totalPaginas","result","renderHook","useNotificacoesAvaliacoes","act","current","buscarNotificacoes","expect","toEqual","carregando","toBe","erro","toBeNull","errorMessage","mockRejectedValueOnce","Error","toHaveBeenCalledWith","title","description","variant","filtros","dataInicio","dataFim","stringContaining","objectContaining","method","url","calls","toContain","success","marcarComoLida","headers","body","JSON","stringify","acao","marcadas","marcarTodasComoLidas","removerNotificacao","buscarEstatisticas","estatisticas","geradas","gerarNotificacoes","removidas","limparNotificacoes","diasAntigos","resolvePromise","promise","Promise","resolve","mockReturnValueOnce"],"mappings":"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"}