{"version":3,"names":["PreferenciasNotificacaoService","buscarPorUsuario","usuarioId","cov_y7dw7nkhq","f","s","preferencias","_prisma","prisma","preferenciaNotificacao","findUnique","where","b","criarPreferenciasDefault","formatarPreferencias","error","console","Error","atualizar","dados","preferenciasExistentes","dadosAtualizados","mesclarDados","preferenciasAtualizadas","update","data","atualizadoEm","Date","versao","increment","resetarParaDefault","preferenciasResetadas","upsert","criarDadosDefault","create","pausarNotificacoes","dataInicio","dataFim","motivo","ativo","retomarNotificacoes","undefined","verificarNotificacoesPausadas","agora","buscarUsuariosParaNotificacao","tipoNotificacao","urgencia","whereClause","notificacoesAtivas","path","equals","urgenciaOrder","BAIXA","MEDIA","ALTA","urgenciaMinima","OR","findMany","select","map","p","atualizarUltimaNotificacao","ultimaNotificacaoEnviada","_preferenciasnotificacao","PREFERENCIAS_DEFAULTS","emailAtivo","diasAntecedenciaLembrete","horarioEnvio","incluirFinsDeSemanaSemana","incluirFeriados","tiposNotificacao","frequenciaLembretes","incluirDetalhesAvaliacao","incluirLinkDireto","incluirResumoEstatisticas","formatoEmail","idiomaNotificacao","filtros","criadoEm","existentes","novos","resultado","Object","keys","forEach","key","id"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\preferencias-notificacao.ts"],"sourcesContent":["import { \n  PreferenciasNotificacao, \n  PreferenciasNotificacaoInput, \n  PREFERENCIAS_DEFAULTS \n} from '../types/preferencias-notificacao';\nimport { prisma } from '../prisma';\n\nexport class PreferenciasNotificacaoService {\n  /**\n   * Busca as preferências de notificação de um usuário\n   * Se não existir, cria com valores padrão\n   */\n  static async buscarPorUsuario(usuarioId: string): Promise<PreferenciasNotificacao> {\n    try {\n      let preferencias = await prisma.preferenciaNotificacao.findUnique({\n        where: { usuarioId },\n      });\n\n      if (!preferencias) {\n        preferencias = await this.criarPreferenciasDefault(usuarioId);\n      }\n\n      return this.formatarPreferencias(preferencias);\n    } catch (error) {\n      console.error('Erro ao buscar preferências de notificação:', error);\n      throw new Error('Falha ao buscar preferências de notificação');\n    }\n  }\n\n  /**\n   * Atualiza as preferências de notificação de um usuário\n   */\n  static async atualizar(\n    usuarioId: string, \n    dados: PreferenciasNotificacaoInput\n  ): Promise<PreferenciasNotificacao> {\n    try {\n      // Busca preferências existentes ou cria com defaults\n      let preferenciasExistentes = await prisma.preferenciaNotificacao.findUnique({\n        where: { usuarioId },\n      });\n\n      if (!preferenciasExistentes) {\n        preferenciasExistentes = await this.criarPreferenciasDefault(usuarioId);\n      }\n\n      // Mescla dados existentes com novos dados\n      const dadosAtualizados = this.mesclarDados(preferenciasExistentes, dados);\n\n      const preferenciasAtualizadas = await prisma.preferenciaNotificacao.update({\n        where: { usuarioId },\n        data: {\n          ...dadosAtualizados,\n          atualizadoEm: new Date(),\n          versao: { increment: 1 },\n        },\n      });\n\n      return this.formatarPreferencias(preferenciasAtualizadas);\n    } catch (error) {\n      console.error('Erro ao atualizar preferências de notificação:', error);\n      throw new Error('Falha ao atualizar preferências de notificação');\n    }\n  }\n\n  /**\n   * Reseta as preferências para os valores padrão\n   */\n  static async resetarParaDefault(usuarioId: string): Promise<PreferenciasNotificacao> {\n    try {\n      const preferenciasResetadas = await prisma.preferenciaNotificacao.upsert({\n        where: { usuarioId },\n        update: {\n          ...this.criarDadosDefault(),\n          atualizadoEm: new Date(),\n          versao: { increment: 1 },\n        },\n        create: {\n          usuarioId,\n          ...this.criarDadosDefault(),\n        },\n      });\n\n      return this.formatarPreferencias(preferenciasResetadas);\n    } catch (error) {\n      console.error('Erro ao resetar preferências de notificação:', error);\n      throw new Error('Falha ao resetar preferências de notificação');\n    }\n  }\n\n  /**\n   * Pausa as notificações por um período\n   */\n  static async pausarNotificacoes(\n    usuarioId: string,\n    dataInicio: Date,\n    dataFim: Date,\n    motivo?: string\n  ): Promise<PreferenciasNotificacao> {\n    return this.atualizar(usuarioId, {\n      pausarNotificacoes: {\n        ativo: true,\n        dataInicio,\n        dataFim,\n        motivo,\n      },\n    });\n  }\n\n  /**\n   * Retoma as notificações (remove pausa)\n   */\n  static async retomarNotificacoes(usuarioId: string): Promise<PreferenciasNotificacao> {\n    return this.atualizar(usuarioId, {\n      pausarNotificacoes: {\n        ativo: false,\n        dataInicio: undefined,\n        dataFim: undefined,\n        motivo: undefined,\n      },\n    });\n  }\n\n  /**\n   * Verifica se as notificações estão pausadas para um usuário\n   */\n  static async verificarNotificacoesPausadas(usuarioId: string): Promise<boolean> {\n    try {\n      const preferencias = await this.buscarPorUsuario(usuarioId);\n      \n      if (!preferencias.pausarNotificacoes.ativo) {\n        return false;\n      }\n\n      const agora = new Date();\n      const dataInicio = preferencias.pausarNotificacoes.dataInicio;\n      const dataFim = preferencias.pausarNotificacoes.dataFim;\n\n      if (dataInicio && agora < dataInicio) {\n        return false;\n      }\n\n      if (dataFim && agora > dataFim) {\n        // Auto-retomar se passou do período\n        await this.retomarNotificacoes(usuarioId);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Erro ao verificar notificações pausadas:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Busca usuários que devem receber notificações de um tipo específico\n   */\n  static async buscarUsuariosParaNotificacao(\n    tipoNotificacao: keyof PreferenciasNotificacao['tiposNotificacao'],\n    urgencia?: PreferenciasNotificacao['urgenciaMinima']\n  ): Promise<string[]> {\n    try {\n      const whereClause: any = {\n        notificacoesAtivas: true,\n        [`tiposNotificacao.${tipoNotificacao}`]: true,\n        pausarNotificacoes: {\n          path: ['ativo'],\n          equals: false,\n        },\n      };\n\n      if (urgencia) {\n        const urgenciaOrder = { BAIXA: 1, MEDIA: 2, ALTA: 3 };\n        const urgenciaMinima = urgenciaOrder[urgencia];\n        \n        whereClause.OR = [\n          { urgenciaMinima: 'BAIXA' },\n          ...(urgenciaMinima >= 2 ? [{ urgenciaMinima: 'MEDIA' }] : []),\n          ...(urgenciaMinima >= 3 ? [{ urgenciaMinima: 'ALTA' }] : []),\n        ];\n      }\n\n      const preferencias = await prisma.preferenciaNotificacao.findMany({\n        where: whereClause,\n        select: { usuarioId: true },\n      });\n\n      return preferencias.map(p => p.usuarioId);\n    } catch (error) {\n      console.error('Erro ao buscar usuários para notificação:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Atualiza a data da última notificação enviada\n   */\n  static async atualizarUltimaNotificacao(usuarioId: string): Promise<void> {\n    try {\n      await prisma.preferenciaNotificacao.update({\n        where: { usuarioId },\n        data: { ultimaNotificacaoEnviada: new Date() },\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar última notificação:', error);\n    }\n  }\n\n  /**\n   * Cria preferências com valores padrão para um usuário\n   */\n  private static async criarPreferenciasDefault(usuarioId: string): Promise<any> {\n    return prisma.preferenciaNotificacao.create({\n      data: {\n        usuarioId,\n        ...this.criarDadosDefault(),\n      },\n    });\n  }\n\n  /**\n   * Cria objeto com dados padrão\n   */\n  private static criarDadosDefault(): any {\n    return {\n      notificacoesAtivas: PREFERENCIAS_DEFAULTS.notificacoesAtivas,\n      emailAtivo: PREFERENCIAS_DEFAULTS.emailAtivo,\n      diasAntecedenciaLembrete: PREFERENCIAS_DEFAULTS.diasAntecedenciaLembrete,\n      horarioEnvio: PREFERENCIAS_DEFAULTS.horarioEnvio,\n      incluirFinsDeSemanaSemana: PREFERENCIAS_DEFAULTS.incluirFinsDeSemanaSemana,\n      incluirFeriados: PREFERENCIAS_DEFAULTS.incluirFeriados,\n      tiposNotificacao: PREFERENCIAS_DEFAULTS.tiposNotificacao,\n      urgenciaMinima: PREFERENCIAS_DEFAULTS.urgenciaMinima,\n      frequenciaLembretes: PREFERENCIAS_DEFAULTS.frequenciaLembretes,\n      incluirDetalhesAvaliacao: PREFERENCIAS_DEFAULTS.incluirDetalhesAvaliacao,\n      incluirLinkDireto: PREFERENCIAS_DEFAULTS.incluirLinkDireto,\n      incluirResumoEstatisticas: PREFERENCIAS_DEFAULTS.incluirResumoEstatisticas,\n      formatoEmail: PREFERENCIAS_DEFAULTS.formatoEmail,\n      idiomaNotificacao: PREFERENCIAS_DEFAULTS.idiomaNotificacao,\n      pausarNotificacoes: {\n        ativo: false,\n      },\n      filtros: PREFERENCIAS_DEFAULTS.filtros,\n      criadoEm: new Date(),\n      atualizadoEm: new Date(),\n      versao: 1,\n    };\n  }\n\n  /**\n   * Mescla dados existentes com novos dados\n   */\n  private static mesclarDados(existentes: any, novos: PreferenciasNotificacaoInput): any {\n    const resultado = { ...existentes };\n\n    // Atualiza campos simples\n    Object.keys(novos).forEach(key => {\n      if (key === 'tiposNotificacao' || key === 'frequenciaLembretes' || \n          key === 'pausarNotificacoes' || key === 'filtros') {\n        // Para objetos aninhados, mescla propriedades\n        resultado[key] = {\n          ...resultado[key],\n          ...novos[key as keyof PreferenciasNotificacaoInput],\n        };\n      } else {\n        resultado[key] = novos[key as keyof PreferenciasNotificacaoInput];\n      }\n    });\n\n    return resultado;\n  }\n\n  /**\n   * Formata dados do banco para o tipo TypeScript\n   */\n  private static formatarPreferencias(dados: any): PreferenciasNotificacao {\n    return {\n      id: dados.id,\n      usuarioId: dados.usuarioId,\n      notificacoesAtivas: dados.notificacoesAtivas,\n      emailAtivo: dados.emailAtivo,\n      diasAntecedenciaLembrete: dados.diasAntecedenciaLembrete,\n      horarioEnvio: dados.horarioEnvio,\n      incluirFinsDeSemanaSemana: dados.incluirFinsDeSemanaSemana,\n      incluirFeriados: dados.incluirFeriados,\n      tiposNotificacao: dados.tiposNotificacao,\n      urgenciaMinima: dados.urgenciaMinima,\n      frequenciaLembretes: dados.frequenciaLembretes,\n      incluirDetalhesAvaliacao: dados.incluirDetalhesAvaliacao,\n      incluirLinkDireto: dados.incluirLinkDireto,\n      incluirResumoEstatisticas: dados.incluirResumoEstatisticas,\n      formatoEmail: dados.formatoEmail,\n      idiomaNotificacao: dados.idiomaNotificacao,\n      pausarNotificacoes: dados.pausarNotificacoes || { ativo: false },\n      filtros: dados.filtros,\n      criadoEm: dados.criadoEm,\n      atualizadoEm: dados.atualizadoEm,\n      ultimaNotificacaoEnviada: dados.ultimaNotificacaoEnviada,\n      versao: dados.versao,\n    };\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}