e3c9c19be0b7f246f0e078e13a783c5f
"use strict";

/* istanbul ignore next */
function cov_y7dw7nkhq() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\preferencias-notificacao.ts";
  var hash = "887028e61947a082be8c0809fb630130ce366225";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\preferencias-notificacao.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 46
        }
      },
      "3": {
        start: {
          line: 11,
          column: 33
        },
        end: {
          line: 11,
          column: 77
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 36
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "6": {
        start: {
          line: 19,
          column: 31
        },
        end: {
          line: 23,
          column: 14
        }
      },
      "7": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "8": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 78
        }
      },
      "9": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 59
        }
      },
      "10": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 80
        }
      },
      "11": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 75
        }
      },
      "12": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "13": {
        start: {
          line: 38,
          column: 41
        },
        end: {
          line: 42,
          column: 14
        }
      },
      "14": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "15": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 88
        }
      },
      "16": {
        start: {
          line: 47,
          column: 37
        },
        end: {
          line: 47,
          column: 85
        }
      },
      "17": {
        start: {
          line: 48,
          column: 44
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "18": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 70
        }
      },
      "19": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 83
        }
      },
      "20": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 78
        }
      },
      "21": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "22": {
        start: {
          line: 70,
          column: 42
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "23": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 68
        }
      },
      "24": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 81
        }
      },
      "25": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 76
        }
      },
      "26": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "27": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 114,
          column: 11
        }
      },
      "28": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "29": {
        start: {
          line: 120,
          column: 33
        },
        end: {
          line: 120,
          column: 71
        }
      },
      "30": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "31": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 29
        }
      },
      "32": {
        start: {
          line: 124,
          column: 26
        },
        end: {
          line: 124,
          column: 36
        }
      },
      "33": {
        start: {
          line: 125,
          column: 31
        },
        end: {
          line: 125,
          column: 73
        }
      },
      "34": {
        start: {
          line: 126,
          column: 28
        },
        end: {
          line: 126,
          column: 67
        }
      },
      "35": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "36": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 29
        }
      },
      "37": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "38": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 58
        }
      },
      "39": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 29
        }
      },
      "40": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 24
        }
      },
      "41": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 77
        }
      },
      "42": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 25
        }
      },
      "43": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "44": {
        start: {
          line: 145,
          column: 32
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "45": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "46": {
        start: {
          line: 156,
          column: 38
        },
        end: {
          line: 160,
          column: 17
        }
      },
      "47": {
        start: {
          line: 161,
          column: 39
        },
        end: {
          line: 161,
          column: 62
        }
      },
      "48": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 176,
          column: 18
        }
      },
      "49": {
        start: {
          line: 178,
          column: 33
        },
        end: {
          line: 183,
          column: 14
        }
      },
      "50": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 54
        }
      },
      "51": {
        start: {
          line: 184,
          column: 41
        },
        end: {
          line: 184,
          column: 52
        }
      },
      "52": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 78
        }
      },
      "53": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 22
        }
      },
      "54": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "55": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 201,
          column: 15
        }
      },
      "56": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 74
        }
      },
      "57": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "58": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 241,
          column: 10
        }
      },
      "59": {
        start: {
          line: 246,
          column: 26
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "60": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 260,
          column: 11
        }
      },
      "61": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 259,
          column: 13
        }
      },
      "62": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 256,
          column: 18
        }
      },
      "63": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 44
        }
      },
      "64": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 25
        }
      },
      "65": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 291,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 6
          },
          end: {
            line: 17,
            column: 7
          }
        },
        loc: {
          start: {
            line: 17,
            column: 47
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 35,
            column: 7
          }
        },
        loc: {
          start: {
            line: 35,
            column: 47
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 68,
            column: 6
          },
          end: {
            line: 68,
            column: 7
          }
        },
        loc: {
          start: {
            line: 68,
            column: 49
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 94,
            column: 6
          },
          end: {
            line: 94,
            column: 7
          }
        },
        loc: {
          start: {
            line: 94,
            column: 78
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 94
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 106,
            column: 7
          }
        },
        loc: {
          start: {
            line: 106,
            column: 50
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 106
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 118,
            column: 6
          },
          end: {
            line: 118,
            column: 7
          }
        },
        loc: {
          start: {
            line: 118,
            column: 60
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 118
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 143,
            column: 6
          },
          end: {
            line: 143,
            column: 7
          }
        },
        loc: {
          start: {
            line: 143,
            column: 76
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 143
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 184,
            column: 36
          },
          end: {
            line: 184,
            column: 37
          }
        },
        loc: {
          start: {
            line: 184,
            column: 41
          },
          end: {
            line: 184,
            column: 52
          }
        },
        line: 184
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 192,
            column: 6
          },
          end: {
            line: 192,
            column: 7
          }
        },
        loc: {
          start: {
            line: 192,
            column: 57
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 192
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 208,
            column: 6
          },
          end: {
            line: 208,
            column: 7
          }
        },
        loc: {
          start: {
            line: 208,
            column: 55
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 208
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 218,
            column: 6
          },
          end: {
            line: 218,
            column: 7
          }
        },
        loc: {
          start: {
            line: 218,
            column: 33
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 218
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 245,
            column: 6
          },
          end: {
            line: 245,
            column: 7
          }
        },
        loc: {
          start: {
            line: 245,
            column: 45
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 245
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 250,
            column: 35
          },
          end: {
            line: 250,
            column: 36
          }
        },
        loc: {
          start: {
            line: 250,
            column: 42
          },
          end: {
            line: 260,
            column: 9
          }
        },
        line: 250
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 265,
            column: 6
          },
          end: {
            line: 265,
            column: 7
          }
        },
        loc: {
          start: {
            line: 265,
            column: 41
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 265
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "3": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "4": {
        loc: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 26
          }
        }, {
          start: {
            line: 127,
            column: 30
          },
          end: {
            line: 127,
            column: 48
          }
        }],
        line: 127
      },
      "5": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "6": {
        loc: {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 23
          }
        }, {
          start: {
            line: 130,
            column: 27
          },
          end: {
            line: 130,
            column: 42
          }
        }],
        line: 130
      },
      "7": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 177,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "8": {
        loc: {
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 170,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 45
          },
          end: {
            line: 170,
            column: 21
          }
        }, {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 26
          }
        }],
        line: 166
      },
      "9": {
        loc: {
          start: {
            line: 171,
            column: 23
          },
          end: {
            line: 175,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 45
          },
          end: {
            line: 175,
            column: 21
          }
        }, {
          start: {
            line: 175,
            column: 24
          },
          end: {
            line: 175,
            column: 26
          }
        }],
        line: 171
      },
      "10": {
        loc: {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        }, {
          start: {
            line: 257,
            column: 19
          },
          end: {
            line: 259,
            column: 13
          }
        }],
        line: 251
      },
      "11": {
        loc: {
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 251,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 251,
            column: 42
          }
        }, {
          start: {
            line: 251,
            column: 46
          },
          end: {
            line: 251,
            column: 75
          }
        }, {
          start: {
            line: 251,
            column: 79
          },
          end: {
            line: 251,
            column: 107
          }
        }, {
          start: {
            line: 251,
            column: 111
          },
          end: {
            line: 251,
            column: 128
          }
        }],
        line: 251
      },
      "12": {
        loc: {
          start: {
            line: 283,
            column: 32
          },
          end: {
            line: 285,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 32
          },
          end: {
            line: 283,
            column: 56
          }
        }, {
          start: {
            line: 283,
            column: 60
          },
          end: {
            line: 285,
            column: 13
          }
        }],
        line: 283
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\preferencias-notificacao.ts"],
      sourcesContent: ["import { \n  PreferenciasNotificacao, \n  PreferenciasNotificacaoInput, \n  PREFERENCIAS_DEFAULTS \n} from '../types/preferencias-notificacao';\nimport { prisma } from '../prisma';\n\nexport class PreferenciasNotificacaoService {\n  /**\n   * Busca as prefer\xEAncias de notifica\xE7\xE3o de um usu\xE1rio\n   * Se n\xE3o existir, cria com valores padr\xE3o\n   */\n  static async buscarPorUsuario(usuarioId: string): Promise<PreferenciasNotificacao> {\n    try {\n      let preferencias = await prisma.preferenciaNotificacao.findUnique({\n        where: { usuarioId },\n      });\n\n      if (!preferencias) {\n        preferencias = await this.criarPreferenciasDefault(usuarioId);\n      }\n\n      return this.formatarPreferencias(preferencias);\n    } catch (error) {\n      console.error('Erro ao buscar prefer\xEAncias de notifica\xE7\xE3o:', error);\n      throw new Error('Falha ao buscar prefer\xEAncias de notifica\xE7\xE3o');\n    }\n  }\n\n  /**\n   * Atualiza as prefer\xEAncias de notifica\xE7\xE3o de um usu\xE1rio\n   */\n  static async atualizar(\n    usuarioId: string, \n    dados: PreferenciasNotificacaoInput\n  ): Promise<PreferenciasNotificacao> {\n    try {\n      // Busca prefer\xEAncias existentes ou cria com defaults\n      let preferenciasExistentes = await prisma.preferenciaNotificacao.findUnique({\n        where: { usuarioId },\n      });\n\n      if (!preferenciasExistentes) {\n        preferenciasExistentes = await this.criarPreferenciasDefault(usuarioId);\n      }\n\n      // Mescla dados existentes com novos dados\n      const dadosAtualizados = this.mesclarDados(preferenciasExistentes, dados);\n\n      const preferenciasAtualizadas = await prisma.preferenciaNotificacao.update({\n        where: { usuarioId },\n        data: {\n          ...dadosAtualizados,\n          atualizadoEm: new Date(),\n          versao: { increment: 1 },\n        },\n      });\n\n      return this.formatarPreferencias(preferenciasAtualizadas);\n    } catch (error) {\n      console.error('Erro ao atualizar prefer\xEAncias de notifica\xE7\xE3o:', error);\n      throw new Error('Falha ao atualizar prefer\xEAncias de notifica\xE7\xE3o');\n    }\n  }\n\n  /**\n   * Reseta as prefer\xEAncias para os valores padr\xE3o\n   */\n  static async resetarParaDefault(usuarioId: string): Promise<PreferenciasNotificacao> {\n    try {\n      const preferenciasResetadas = await prisma.preferenciaNotificacao.upsert({\n        where: { usuarioId },\n        update: {\n          ...this.criarDadosDefault(),\n          atualizadoEm: new Date(),\n          versao: { increment: 1 },\n        },\n        create: {\n          usuarioId,\n          ...this.criarDadosDefault(),\n        },\n      });\n\n      return this.formatarPreferencias(preferenciasResetadas);\n    } catch (error) {\n      console.error('Erro ao resetar prefer\xEAncias de notifica\xE7\xE3o:', error);\n      throw new Error('Falha ao resetar prefer\xEAncias de notifica\xE7\xE3o');\n    }\n  }\n\n  /**\n   * Pausa as notifica\xE7\xF5es por um per\xEDodo\n   */\n  static async pausarNotificacoes(\n    usuarioId: string,\n    dataInicio: Date,\n    dataFim: Date,\n    motivo?: string\n  ): Promise<PreferenciasNotificacao> {\n    return this.atualizar(usuarioId, {\n      pausarNotificacoes: {\n        ativo: true,\n        dataInicio,\n        dataFim,\n        motivo,\n      },\n    });\n  }\n\n  /**\n   * Retoma as notifica\xE7\xF5es (remove pausa)\n   */\n  static async retomarNotificacoes(usuarioId: string): Promise<PreferenciasNotificacao> {\n    return this.atualizar(usuarioId, {\n      pausarNotificacoes: {\n        ativo: false,\n        dataInicio: undefined,\n        dataFim: undefined,\n        motivo: undefined,\n      },\n    });\n  }\n\n  /**\n   * Verifica se as notifica\xE7\xF5es est\xE3o pausadas para um usu\xE1rio\n   */\n  static async verificarNotificacoesPausadas(usuarioId: string): Promise<boolean> {\n    try {\n      const preferencias = await this.buscarPorUsuario(usuarioId);\n      \n      if (!preferencias.pausarNotificacoes.ativo) {\n        return false;\n      }\n\n      const agora = new Date();\n      const dataInicio = preferencias.pausarNotificacoes.dataInicio;\n      const dataFim = preferencias.pausarNotificacoes.dataFim;\n\n      if (dataInicio && agora < dataInicio) {\n        return false;\n      }\n\n      if (dataFim && agora > dataFim) {\n        // Auto-retomar se passou do per\xEDodo\n        await this.retomarNotificacoes(usuarioId);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Erro ao verificar notifica\xE7\xF5es pausadas:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Busca usu\xE1rios que devem receber notifica\xE7\xF5es de um tipo espec\xEDfico\n   */\n  static async buscarUsuariosParaNotificacao(\n    tipoNotificacao: keyof PreferenciasNotificacao['tiposNotificacao'],\n    urgencia?: PreferenciasNotificacao['urgenciaMinima']\n  ): Promise<string[]> {\n    try {\n      const whereClause: any = {\n        notificacoesAtivas: true,\n        [`tiposNotificacao.${tipoNotificacao}`]: true,\n        pausarNotificacoes: {\n          path: ['ativo'],\n          equals: false,\n        },\n      };\n\n      if (urgencia) {\n        const urgenciaOrder = { BAIXA: 1, MEDIA: 2, ALTA: 3 };\n        const urgenciaMinima = urgenciaOrder[urgencia];\n        \n        whereClause.OR = [\n          { urgenciaMinima: 'BAIXA' },\n          ...(urgenciaMinima >= 2 ? [{ urgenciaMinima: 'MEDIA' }] : []),\n          ...(urgenciaMinima >= 3 ? [{ urgenciaMinima: 'ALTA' }] : []),\n        ];\n      }\n\n      const preferencias = await prisma.preferenciaNotificacao.findMany({\n        where: whereClause,\n        select: { usuarioId: true },\n      });\n\n      return preferencias.map(p => p.usuarioId);\n    } catch (error) {\n      console.error('Erro ao buscar usu\xE1rios para notifica\xE7\xE3o:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Atualiza a data da \xFAltima notifica\xE7\xE3o enviada\n   */\n  static async atualizarUltimaNotificacao(usuarioId: string): Promise<void> {\n    try {\n      await prisma.preferenciaNotificacao.update({\n        where: { usuarioId },\n        data: { ultimaNotificacaoEnviada: new Date() },\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar \xFAltima notifica\xE7\xE3o:', error);\n    }\n  }\n\n  /**\n   * Cria prefer\xEAncias com valores padr\xE3o para um usu\xE1rio\n   */\n  private static async criarPreferenciasDefault(usuarioId: string): Promise<any> {\n    return prisma.preferenciaNotificacao.create({\n      data: {\n        usuarioId,\n        ...this.criarDadosDefault(),\n      },\n    });\n  }\n\n  /**\n   * Cria objeto com dados padr\xE3o\n   */\n  private static criarDadosDefault(): any {\n    return {\n      notificacoesAtivas: PREFERENCIAS_DEFAULTS.notificacoesAtivas,\n      emailAtivo: PREFERENCIAS_DEFAULTS.emailAtivo,\n      diasAntecedenciaLembrete: PREFERENCIAS_DEFAULTS.diasAntecedenciaLembrete,\n      horarioEnvio: PREFERENCIAS_DEFAULTS.horarioEnvio,\n      incluirFinsDeSemanaSemana: PREFERENCIAS_DEFAULTS.incluirFinsDeSemanaSemana,\n      incluirFeriados: PREFERENCIAS_DEFAULTS.incluirFeriados,\n      tiposNotificacao: PREFERENCIAS_DEFAULTS.tiposNotificacao,\n      urgenciaMinima: PREFERENCIAS_DEFAULTS.urgenciaMinima,\n      frequenciaLembretes: PREFERENCIAS_DEFAULTS.frequenciaLembretes,\n      incluirDetalhesAvaliacao: PREFERENCIAS_DEFAULTS.incluirDetalhesAvaliacao,\n      incluirLinkDireto: PREFERENCIAS_DEFAULTS.incluirLinkDireto,\n      incluirResumoEstatisticas: PREFERENCIAS_DEFAULTS.incluirResumoEstatisticas,\n      formatoEmail: PREFERENCIAS_DEFAULTS.formatoEmail,\n      idiomaNotificacao: PREFERENCIAS_DEFAULTS.idiomaNotificacao,\n      pausarNotificacoes: {\n        ativo: false,\n      },\n      filtros: PREFERENCIAS_DEFAULTS.filtros,\n      criadoEm: new Date(),\n      atualizadoEm: new Date(),\n      versao: 1,\n    };\n  }\n\n  /**\n   * Mescla dados existentes com novos dados\n   */\n  private static mesclarDados(existentes: any, novos: PreferenciasNotificacaoInput): any {\n    const resultado = { ...existentes };\n\n    // Atualiza campos simples\n    Object.keys(novos).forEach(key => {\n      if (key === 'tiposNotificacao' || key === 'frequenciaLembretes' || \n          key === 'pausarNotificacoes' || key === 'filtros') {\n        // Para objetos aninhados, mescla propriedades\n        resultado[key] = {\n          ...resultado[key],\n          ...novos[key as keyof PreferenciasNotificacaoInput],\n        };\n      } else {\n        resultado[key] = novos[key as keyof PreferenciasNotificacaoInput];\n      }\n    });\n\n    return resultado;\n  }\n\n  /**\n   * Formata dados do banco para o tipo TypeScript\n   */\n  private static formatarPreferencias(dados: any): PreferenciasNotificacao {\n    return {\n      id: dados.id,\n      usuarioId: dados.usuarioId,\n      notificacoesAtivas: dados.notificacoesAtivas,\n      emailAtivo: dados.emailAtivo,\n      diasAntecedenciaLembrete: dados.diasAntecedenciaLembrete,\n      horarioEnvio: dados.horarioEnvio,\n      incluirFinsDeSemanaSemana: dados.incluirFinsDeSemanaSemana,\n      incluirFeriados: dados.incluirFeriados,\n      tiposNotificacao: dados.tiposNotificacao,\n      urgenciaMinima: dados.urgenciaMinima,\n      frequenciaLembretes: dados.frequenciaLembretes,\n      incluirDetalhesAvaliacao: dados.incluirDetalhesAvaliacao,\n      incluirLinkDireto: dados.incluirLinkDireto,\n      incluirResumoEstatisticas: dados.incluirResumoEstatisticas,\n      formatoEmail: dados.formatoEmail,\n      idiomaNotificacao: dados.idiomaNotificacao,\n      pausarNotificacoes: dados.pausarNotificacoes || { ativo: false },\n      filtros: dados.filtros,\n      criadoEm: dados.criadoEm,\n      atualizadoEm: dados.atualizadoEm,\n      ultimaNotificacaoEnviada: dados.ultimaNotificacaoEnviada,\n      versao: dados.versao,\n    };\n  }\n}"],
      names: ["PreferenciasNotificacaoService", "buscarPorUsuario", "usuarioId", "preferencias", "prisma", "preferenciaNotificacao", "findUnique", "where", "criarPreferenciasDefault", "formatarPreferencias", "error", "console", "Error", "atualizar", "dados", "preferenciasExistentes", "dadosAtualizados", "mesclarDados", "preferenciasAtualizadas", "update", "data", "atualizadoEm", "Date", "versao", "increment", "resetarParaDefault", "preferenciasResetadas", "upsert", "criarDadosDefault", "create", "pausarNotificacoes", "dataInicio", "dataFim", "motivo", "ativo", "retomarNotificacoes", "undefined", "verificarNotificacoesPausadas", "agora", "buscarUsuariosParaNotificacao", "tipoNotificacao", "urgencia", "whereClause", "notificacoesAtivas", "path", "equals", "urgenciaOrder", "BAIXA", "MEDIA", "ALTA", "urgenciaMinima", "OR", "findMany", "select", "map", "p", "atualizarUltimaNotificacao", "ultimaNotificacaoEnviada", "PREFERENCIAS_DEFAULTS", "emailAtivo", "diasAntecedenciaLembrete", "horarioEnvio", "incluirFinsDeSemanaSemana", "incluirFeriados", "tiposNotificacao", "frequenciaLembretes", "incluirDetalhesAvaliacao", "incluirLinkDireto", "incluirResumoEstatisticas", "formatoEmail", "idiomaNotificacao", "filtros", "criadoEm", "existentes", "novos", "resultado", "Object", "keys", "forEach", "key", "id"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "887028e61947a082be8c0809fb630130ce366225"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_y7dw7nkhq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_y7dw7nkhq();
cov_y7dw7nkhq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_y7dw7nkhq().s[1]++;
Object.defineProperty(exports, "PreferenciasNotificacaoService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[0]++;
    cov_y7dw7nkhq().s[2]++;
    return PreferenciasNotificacaoService;
  }
});
const _preferenciasnotificacao =
/* istanbul ignore next */
(cov_y7dw7nkhq().s[3]++, require("../types/preferencias-notificacao"));
const _prisma =
/* istanbul ignore next */
(cov_y7dw7nkhq().s[4]++, require("../prisma"));
class PreferenciasNotificacaoService {
  /**
  * Busca as preferências de notificação de um usuário
  * Se não existir, cria com valores padrão
  */
  static async buscarPorUsuario(usuarioId) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[1]++;
    cov_y7dw7nkhq().s[5]++;
    try {
      let preferencias =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[6]++, await _prisma.prisma.preferenciaNotificacao.findUnique({
        where: {
          usuarioId
        }
      }));
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[7]++;
      if (!preferencias) {
        /* istanbul ignore next */
        cov_y7dw7nkhq().b[0][0]++;
        cov_y7dw7nkhq().s[8]++;
        preferencias = await this.criarPreferenciasDefault(usuarioId);
      } else
      /* istanbul ignore next */
      {
        cov_y7dw7nkhq().b[0][1]++;
      }
      cov_y7dw7nkhq().s[9]++;
      return this.formatarPreferencias(preferencias);
    } catch (error) {
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[10]++;
      console.error('Erro ao buscar preferências de notificação:', error);
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[11]++;
      throw new Error('Falha ao buscar preferências de notificação');
    }
  }
  /**
  * Atualiza as preferências de notificação de um usuário
  */
  static async atualizar(usuarioId, dados) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[2]++;
    cov_y7dw7nkhq().s[12]++;
    try {
      // Busca preferências existentes ou cria com defaults
      let preferenciasExistentes =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[13]++, await _prisma.prisma.preferenciaNotificacao.findUnique({
        where: {
          usuarioId
        }
      }));
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[14]++;
      if (!preferenciasExistentes) {
        /* istanbul ignore next */
        cov_y7dw7nkhq().b[1][0]++;
        cov_y7dw7nkhq().s[15]++;
        preferenciasExistentes = await this.criarPreferenciasDefault(usuarioId);
      } else
      /* istanbul ignore next */
      {
        cov_y7dw7nkhq().b[1][1]++;
      }
      // Mescla dados existentes com novos dados
      const dadosAtualizados =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[16]++, this.mesclarDados(preferenciasExistentes, dados));
      const preferenciasAtualizadas =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[17]++, await _prisma.prisma.preferenciaNotificacao.update({
        where: {
          usuarioId
        },
        data: {
          ...dadosAtualizados,
          atualizadoEm: new Date(),
          versao: {
            increment: 1
          }
        }
      }));
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[18]++;
      return this.formatarPreferencias(preferenciasAtualizadas);
    } catch (error) {
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[19]++;
      console.error('Erro ao atualizar preferências de notificação:', error);
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[20]++;
      throw new Error('Falha ao atualizar preferências de notificação');
    }
  }
  /**
  * Reseta as preferências para os valores padrão
  */
  static async resetarParaDefault(usuarioId) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[3]++;
    cov_y7dw7nkhq().s[21]++;
    try {
      const preferenciasResetadas =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[22]++, await _prisma.prisma.preferenciaNotificacao.upsert({
        where: {
          usuarioId
        },
        update: {
          ...this.criarDadosDefault(),
          atualizadoEm: new Date(),
          versao: {
            increment: 1
          }
        },
        create: {
          usuarioId,
          ...this.criarDadosDefault()
        }
      }));
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[23]++;
      return this.formatarPreferencias(preferenciasResetadas);
    } catch (error) {
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[24]++;
      console.error('Erro ao resetar preferências de notificação:', error);
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[25]++;
      throw new Error('Falha ao resetar preferências de notificação');
    }
  }
  /**
  * Pausa as notificações por um período
  */
  static async pausarNotificacoes(usuarioId, dataInicio, dataFim, motivo) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[4]++;
    cov_y7dw7nkhq().s[26]++;
    return this.atualizar(usuarioId, {
      pausarNotificacoes: {
        ativo: true,
        dataInicio,
        dataFim,
        motivo
      }
    });
  }
  /**
  * Retoma as notificações (remove pausa)
  */
  static async retomarNotificacoes(usuarioId) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[5]++;
    cov_y7dw7nkhq().s[27]++;
    return this.atualizar(usuarioId, {
      pausarNotificacoes: {
        ativo: false,
        dataInicio: undefined,
        dataFim: undefined,
        motivo: undefined
      }
    });
  }
  /**
  * Verifica se as notificações estão pausadas para um usuário
  */
  static async verificarNotificacoesPausadas(usuarioId) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[6]++;
    cov_y7dw7nkhq().s[28]++;
    try {
      const preferencias =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[29]++, await this.buscarPorUsuario(usuarioId));
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[30]++;
      if (!preferencias.pausarNotificacoes.ativo) {
        /* istanbul ignore next */
        cov_y7dw7nkhq().b[2][0]++;
        cov_y7dw7nkhq().s[31]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_y7dw7nkhq().b[2][1]++;
      }
      const agora =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[32]++, new Date());
      const dataInicio =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[33]++, preferencias.pausarNotificacoes.dataInicio);
      const dataFim =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[34]++, preferencias.pausarNotificacoes.dataFim);
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[35]++;
      if (
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[4][0]++, dataInicio) &&
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[4][1]++, agora < dataInicio)) {
        /* istanbul ignore next */
        cov_y7dw7nkhq().b[3][0]++;
        cov_y7dw7nkhq().s[36]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_y7dw7nkhq().b[3][1]++;
      }
      cov_y7dw7nkhq().s[37]++;
      if (
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[6][0]++, dataFim) &&
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[6][1]++, agora > dataFim)) {
        /* istanbul ignore next */
        cov_y7dw7nkhq().b[5][0]++;
        cov_y7dw7nkhq().s[38]++;
        // Auto-retomar se passou do período
        await this.retomarNotificacoes(usuarioId);
        /* istanbul ignore next */
        cov_y7dw7nkhq().s[39]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_y7dw7nkhq().b[5][1]++;
      }
      cov_y7dw7nkhq().s[40]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[41]++;
      console.error('Erro ao verificar notificações pausadas:', error);
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[42]++;
      return false;
    }
  }
  /**
  * Busca usuários que devem receber notificações de um tipo específico
  */
  static async buscarUsuariosParaNotificacao(tipoNotificacao, urgencia) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[7]++;
    cov_y7dw7nkhq().s[43]++;
    try {
      const whereClause =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[44]++, {
        notificacoesAtivas: true,
        [`tiposNotificacao.${tipoNotificacao}`]: true,
        pausarNotificacoes: {
          path: ['ativo'],
          equals: false
        }
      });
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[45]++;
      if (urgencia) {
        /* istanbul ignore next */
        cov_y7dw7nkhq().b[7][0]++;
        const urgenciaOrder =
        /* istanbul ignore next */
        (cov_y7dw7nkhq().s[46]++, {
          BAIXA: 1,
          MEDIA: 2,
          ALTA: 3
        });
        const urgenciaMinima =
        /* istanbul ignore next */
        (cov_y7dw7nkhq().s[47]++, urgenciaOrder[urgencia]);
        /* istanbul ignore next */
        cov_y7dw7nkhq().s[48]++;
        whereClause.OR = [{
          urgenciaMinima: 'BAIXA'
        }, ...(urgenciaMinima >= 2 ?
        /* istanbul ignore next */
        (cov_y7dw7nkhq().b[8][0]++, [{
          urgenciaMinima: 'MEDIA'
        }]) :
        /* istanbul ignore next */
        (cov_y7dw7nkhq().b[8][1]++, [])), ...(urgenciaMinima >= 3 ?
        /* istanbul ignore next */
        (cov_y7dw7nkhq().b[9][0]++, [{
          urgenciaMinima: 'ALTA'
        }]) :
        /* istanbul ignore next */
        (cov_y7dw7nkhq().b[9][1]++, []))];
      } else
      /* istanbul ignore next */
      {
        cov_y7dw7nkhq().b[7][1]++;
      }
      const preferencias =
      /* istanbul ignore next */
      (cov_y7dw7nkhq().s[49]++, await _prisma.prisma.preferenciaNotificacao.findMany({
        where: whereClause,
        select: {
          usuarioId: true
        }
      }));
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[50]++;
      return preferencias.map(p => {
        /* istanbul ignore next */
        cov_y7dw7nkhq().f[8]++;
        cov_y7dw7nkhq().s[51]++;
        return p.usuarioId;
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[52]++;
      console.error('Erro ao buscar usuários para notificação:', error);
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[53]++;
      return [];
    }
  }
  /**
  * Atualiza a data da última notificação enviada
  */
  static async atualizarUltimaNotificacao(usuarioId) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[9]++;
    cov_y7dw7nkhq().s[54]++;
    try {
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[55]++;
      await _prisma.prisma.preferenciaNotificacao.update({
        where: {
          usuarioId
        },
        data: {
          ultimaNotificacaoEnviada: new Date()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_y7dw7nkhq().s[56]++;
      console.error('Erro ao atualizar última notificação:', error);
    }
  }
  /**
  * Cria preferências com valores padrão para um usuário
  */
  static async criarPreferenciasDefault(usuarioId) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[10]++;
    cov_y7dw7nkhq().s[57]++;
    return _prisma.prisma.preferenciaNotificacao.create({
      data: {
        usuarioId,
        ...this.criarDadosDefault()
      }
    });
  }
  /**
  * Cria objeto com dados padrão
  */
  static criarDadosDefault() {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[11]++;
    cov_y7dw7nkhq().s[58]++;
    return {
      notificacoesAtivas: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.notificacoesAtivas,
      emailAtivo: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.emailAtivo,
      diasAntecedenciaLembrete: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.diasAntecedenciaLembrete,
      horarioEnvio: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.horarioEnvio,
      incluirFinsDeSemanaSemana: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirFinsDeSemanaSemana,
      incluirFeriados: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirFeriados,
      tiposNotificacao: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.tiposNotificacao,
      urgenciaMinima: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.urgenciaMinima,
      frequenciaLembretes: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.frequenciaLembretes,
      incluirDetalhesAvaliacao: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirDetalhesAvaliacao,
      incluirLinkDireto: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirLinkDireto,
      incluirResumoEstatisticas: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirResumoEstatisticas,
      formatoEmail: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.formatoEmail,
      idiomaNotificacao: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.idiomaNotificacao,
      pausarNotificacoes: {
        ativo: false
      },
      filtros: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.filtros,
      criadoEm: new Date(),
      atualizadoEm: new Date(),
      versao: 1
    };
  }
  /**
  * Mescla dados existentes com novos dados
  */
  static mesclarDados(existentes, novos) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[12]++;
    const resultado =
    /* istanbul ignore next */
    (cov_y7dw7nkhq().s[59]++, {
      ...existentes
    });
    // Atualiza campos simples
    /* istanbul ignore next */
    cov_y7dw7nkhq().s[60]++;
    Object.keys(novos).forEach(key => {
      /* istanbul ignore next */
      cov_y7dw7nkhq().f[13]++;
      cov_y7dw7nkhq().s[61]++;
      if (
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[11][0]++, key === 'tiposNotificacao') ||
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[11][1]++, key === 'frequenciaLembretes') ||
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[11][2]++, key === 'pausarNotificacoes') ||
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[11][3]++, key === 'filtros')) {
        /* istanbul ignore next */
        cov_y7dw7nkhq().b[10][0]++;
        cov_y7dw7nkhq().s[62]++;
        // Para objetos aninhados, mescla propriedades
        resultado[key] = {
          ...resultado[key],
          ...novos[key]
        };
      } else {
        /* istanbul ignore next */
        cov_y7dw7nkhq().b[10][1]++;
        cov_y7dw7nkhq().s[63]++;
        resultado[key] = novos[key];
      }
    });
    /* istanbul ignore next */
    cov_y7dw7nkhq().s[64]++;
    return resultado;
  }
  /**
  * Formata dados do banco para o tipo TypeScript
  */
  static formatarPreferencias(dados) {
    /* istanbul ignore next */
    cov_y7dw7nkhq().f[14]++;
    cov_y7dw7nkhq().s[65]++;
    return {
      id: dados.id,
      usuarioId: dados.usuarioId,
      notificacoesAtivas: dados.notificacoesAtivas,
      emailAtivo: dados.emailAtivo,
      diasAntecedenciaLembrete: dados.diasAntecedenciaLembrete,
      horarioEnvio: dados.horarioEnvio,
      incluirFinsDeSemanaSemana: dados.incluirFinsDeSemanaSemana,
      incluirFeriados: dados.incluirFeriados,
      tiposNotificacao: dados.tiposNotificacao,
      urgenciaMinima: dados.urgenciaMinima,
      frequenciaLembretes: dados.frequenciaLembretes,
      incluirDetalhesAvaliacao: dados.incluirDetalhesAvaliacao,
      incluirLinkDireto: dados.incluirLinkDireto,
      incluirResumoEstatisticas: dados.incluirResumoEstatisticas,
      formatoEmail: dados.formatoEmail,
      idiomaNotificacao: dados.idiomaNotificacao,
      pausarNotificacoes:
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[12][0]++, dados.pausarNotificacoes) ||
      /* istanbul ignore next */
      (cov_y7dw7nkhq().b[12][1]++, {
        ativo: false
      }),
      filtros: dados.filtros,
      criadoEm: dados.criadoEm,
      atualizadoEm: dados.atualizadoEm,
      ultimaNotificacaoEnviada: dados.ultimaNotificacaoEnviada,
      versao: dados.versao
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,