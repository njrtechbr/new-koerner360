{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\components\\metricas\\graficos-desempenho.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Interface para dados de métricas\n */\ninterface DadosMetricas {\n  atendente?: {\n    id: string;\n    nome: string;\n    cargo: string;\n    setor: string;\n  };\n  periodo: {\n    dataInicio: string;\n    dataFim: string;\n    periodo: string;\n  };\n  avaliacoes: {\n    total: number;\n    media: number;\n    ultima?: {\n      nota: number;\n      data: string;\n    };\n  };\n  documentos: {\n    total: number;\n    ativosNoPeriodo: number;\n  };\n  atividade: {\n    totalAlteracoes: number;\n    porTipo: Record<string, number>;\n  };\n  resumo: {\n    produtividade: string;\n    statusGeral: string;\n  };\n}\n\n/**\n * Interface para dados do dashboard\n */\ninterface DadosDashboard {\n  resumoGeral: {\n    totalAtendentes: number;\n    atendentesPorStatus: Record<string, number>;\n    atendentesPorSetor: Record<string, number>;\n  };\n  metricas: {\n    avaliacoes: {\n      mediaGeral: number;\n      distribuicaoPerformance: {\n        alta: number;\n        media: number;\n        baixa: number;\n      };\n    };\n    documentos: {\n      totalNoPeriodo: number;\n      mediaPorAtendente: number;\n    };\n  };\n  tendencias: {\n    avaliacoes: {\n      atual: number;\n      anterior: number;\n      variacao: number;\n    };\n    documentos: {\n      atual: number;\n      anterior: number;\n      variacao: number;\n    };\n  };\n  topPerformers: Array<{\n    id: string;\n    nome: string;\n    cargo: string;\n    mediaAvaliacoes: number;\n  }>;\n}\n\n/**\n * Props do componente\n */\ninterface GraficosDesempenhoProps {\n  atendenteId?: string;\n  dadosMetricas?: DadosMetricas;\n  dadosDashboard?: DadosDashboard;\n  carregando?: boolean;\n  erro?: string;\n  className?: string;\n}\n\n/**\n * Cores para os gráficos\n */\nconst CORES = {\n  primaria: '#3b82f6',\n  secundaria: '#10b981',\n  terciaria: '#f59e0b',\n  quaternaria: '#ef4444',\n  quinaria: '#8b5cf6',\n  sexta: '#06b6d4',\n};\n\nconst CORES_STATUS = {\n  ATIVO: '#10b981',\n  INATIVO: '#6b7280',\n  SUSPENSO: '#ef4444',\n};\n\nconst CORES_PERFORMANCE = {\n  alta: '#10b981',\n  media: '#f59e0b',\n  baixa: '#ef4444',\n};\n\n/**\n * Componente de gráficos de desempenho\n */\nexport function GraficosDesempenho({\n  atendenteId,\n  dadosMetricas,\n  dadosDashboard,\n  carregando = false,\n  erro,\n  className,\n}: GraficosDesempenhoProps) {\n  const [abaSelecionada, setAbaSelecionada] = useState('visao-geral');\n\n  // Preparar dados para gráficos individuais\n  const prepararDadosIndividuais = () => {\n    if (!dadosMetricas) return null;\n\n    // Dados de atividade por tipo\n    const dadosAtividade = Object.entries(dadosMetricas.atividade.porTipo).map(\n      ([tipo, quantidade]) => ({\n        tipo: tipo\n          .replace('_', ' ')\n          .toLowerCase()\n          .replace(/\\b\\w/g, l => l.toUpperCase()),\n        quantidade,\n        porcentagem: (\n          (quantidade / dadosMetricas.atividade.totalAlteracoes) *\n          100\n        ).toFixed(1),\n      })\n    );\n\n    // Dados de produtividade\n    const dadosProdutividade = [\n      {\n        categoria: 'Documentos',\n        valor: dadosMetricas.documentos.total,\n        meta: 10, // Meta exemplo\n        porcentagem: Math.min((dadosMetricas.documentos.total / 10) * 100, 100),\n      },\n      {\n        categoria: 'Avaliações',\n        valor: dadosMetricas.avaliacoes.media,\n        meta: 10,\n        porcentagem: (dadosMetricas.avaliacoes.media / 10) * 100,\n      },\n      {\n        categoria: 'Atividade',\n        valor: dadosMetricas.atividade.totalAlteracoes,\n        meta: 20,\n        porcentagem: Math.min(\n          (dadosMetricas.atividade.totalAlteracoes / 20) * 100,\n          100\n        ),\n      },\n    ];\n\n    return { dadosAtividade, dadosProdutividade };\n  };\n\n  // Preparar dados para dashboard geral\n  const prepararDadosDashboard = () => {\n    if (!dadosDashboard) return null;\n\n    // Dados de status dos atendentes\n    const dadosStatus = Object.entries(\n      dadosDashboard.resumoGeral.atendentesPorStatus\n    ).map(([status, quantidade]) => ({\n      status,\n      quantidade,\n      porcentagem: (\n        (quantidade / dadosDashboard.resumoGeral.totalAtendentes) *\n        100\n      ).toFixed(1),\n    }));\n\n    // Dados de performance\n    const dadosPerformance = Object.entries(\n      dadosDashboard.metricas.avaliacoes.distribuicaoPerformance\n    ).map(([nivel, quantidade]) => ({\n      nivel: nivel.charAt(0).toUpperCase() + nivel.slice(1),\n      quantidade,\n      porcentagem: (\n        (quantidade /\n          (dadosDashboard.metricas.avaliacoes.distribuicaoPerformance.alta +\n            dadosDashboard.metricas.avaliacoes.distribuicaoPerformance.media +\n            dadosDashboard.metricas.avaliacoes.distribuicaoPerformance.baixa)) *\n        100\n      ).toFixed(1),\n    }));\n\n    // Dados de setores\n    const dadosSetores = Object.entries(\n      dadosDashboard.resumoGeral.atendentesPorSetor\n    ).map(([setor, quantidade]) => ({\n      setor,\n      quantidade,\n      porcentagem: (\n        (quantidade / dadosDashboard.resumoGeral.totalAtendentes) *\n        100\n      ).toFixed(1),\n    }));\n\n    return { dadosStatus, dadosPerformance, dadosSetores };\n  };\n\n  // Renderizar indicador de tendência\n  const renderizarTendencia = (variacao: number) => {\n    if (variacao > 0) {\n      return (\n        <div className=\"flex items-center text-green-600\">\n          <TrendingUp className=\"h-4 w-4 mr-1\" />\n          <span className=\"text-sm font-medium\">+{variacao.toFixed(1)}%</span>\n        </div>\n      );\n    } else if (variacao < 0) {\n      return (\n        <div className=\"flex items-center text-red-600\">\n          <TrendingDown className=\"h-4 w-4 mr-1\" />\n          <span className=\"text-sm font-medium\">{variacao.toFixed(1)}%</span>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"flex items-center text-gray-500\">\n          <Minus className=\"h-4 w-4 mr-1\" />\n          <span className=\"text-sm font-medium\">0%</span>\n        </div>\n      );\n    }\n  };\n\n  if (carregando) {\n    return (\n      <div className={cn('flex items-center justify-center p-8', className)}>\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n        <span className=\"ml-2\">Carregando gráficos...</span>\n      </div>\n    );\n  }\n\n  if (erro) {\n    return (\n      <div className={cn('p-8 text-center', className)}>\n        <p className=\"text-red-600\">Erro ao carregar gráficos: {erro}</p>\n      </div>\n    );\n  }\n\n  const dadosIndividuais = prepararDadosIndividuais();\n  const dadosGerais = prepararDadosDashboard();\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      <Tabs value={abaSelecionada} onValueChange={setAbaSelecionada}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"visao-geral\">Visão Geral</TabsTrigger>\n          {atendenteId && (\n            <TabsTrigger value=\"individual\">Individual</TabsTrigger>\n          )}\n          <TabsTrigger value=\"comparativo\">Comparativo</TabsTrigger>\n        </TabsList>\n\n        {/* Visão Geral */}\n        <TabsContent value=\"visao-geral\" className=\"space-y-6\">\n          {dadosDashboard && dadosGerais && (\n            <>\n              {/* Métricas de Tendência */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      Avaliações\n                      {renderizarTendencia(\n                        dadosDashboard.tendencias.avaliacoes.variacao\n                      )}\n                    </CardTitle>\n                    <CardDescription>\n                      Média geral:{' '}\n                      {dadosDashboard.metricas.avaliacoes.mediaGeral.toFixed(1)}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={200}>\n                      <BarChart data={dadosGerais.dadosPerformance}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"nivel\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Bar dataKey=\"quantidade\" fill={CORES.primaria} />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      Documentos\n                      {renderizarTendencia(\n                        dadosDashboard.tendencias.documentos.variacao\n                      )}\n                    </CardTitle>\n                    <CardDescription>\n                      Total no período:{' '}\n                      {dadosDashboard.metricas.documentos.totalNoPeriodo}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <span>Média por atendente</span>\n                        <Badge variant=\"secondary\">\n                          {dadosDashboard.metricas.documentos.mediaPorAtendente}\n                        </Badge>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div\n                          className=\"bg-blue-600 h-2 rounded-full\"\n                          style={{\n                            width: `${Math.min((dadosDashboard.metricas.documentos.mediaPorAtendente / 10) * 100, 100)}%`,\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Status dos Atendentes */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Distribuição por Status</CardTitle>\n                  <CardDescription>\n                    Total de {dadosDashboard.resumoGeral.totalAtendentes}{' '}\n                    atendentes\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={dadosGerais.dadosStatus}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ status, porcentagem }) =>\n                          `${status} (${porcentagem}%)`\n                        }\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"quantidade\"\n                      >\n                        {dadosGerais.dadosStatus.map((entry, index) => (\n                          <Cell\n                            key={`cell-${index}`}\n                            fill={\n                              CORES_STATUS[\n                                entry.status as keyof typeof CORES_STATUS\n                              ] || CORES.primaria\n                            }\n                          />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Top Performers */}\n              {dadosDashboard.topPerformers.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Top Performers</CardTitle>\n                    <CardDescription>\n                      Atendentes com melhor desempenho\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={dadosDashboard.topPerformers.slice(0, 5)}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"nome\" />\n                        <YAxis domain={[0, 10]} />\n                        <Tooltip />\n                        <Bar\n                          dataKey=\"mediaAvaliacoes\"\n                          fill={CORES.secundaria}\n                        />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n        </TabsContent>\n\n        {/* Individual */}\n        {atendenteId && (\n          <TabsContent value=\"individual\" className=\"space-y-6\">\n            {dadosMetricas && dadosIndividuais && (\n              <>\n                {/* Informações do Atendente */}\n                {dadosMetricas.atendente && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>{dadosMetricas.atendente.nome}</CardTitle>\n                      <CardDescription>\n                        {dadosMetricas.atendente.cargo} -{' '}\n                        {dadosMetricas.atendente.setor}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-blue-600\">\n                            {dadosMetricas.avaliacoes.media.toFixed(1)}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Média Avaliações\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-green-600\">\n                            {dadosMetricas.documentos.total}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Documentos\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-purple-600\">\n                            {dadosMetricas.atividade.totalAlteracoes}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Atividades\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <Badge\n                            variant={\n                              dadosMetricas.resumo.produtividade === 'Alta'\n                                ? 'default'\n                                : dadosMetricas.resumo.produtividade === 'Média'\n                                  ? 'secondary'\n                                  : 'destructive'\n                            }\n                          >\n                            {dadosMetricas.resumo.produtividade}\n                          </Badge>\n                          <div className=\"text-sm text-gray-500 mt-1\">\n                            Produtividade\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Gráfico de Atividades */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Atividades por Tipo</CardTitle>\n                    <CardDescription>\n                      Distribuição das atividades realizadas\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <PieChart>\n                        <Pie\n                          data={dadosIndividuais.dadosAtividade}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={({ tipo, porcentagem }) =>\n                            `${tipo} (${porcentagem}%)`\n                          }\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"quantidade\"\n                        >\n                          {dadosIndividuais.dadosAtividade.map(\n                            (entry, index) => (\n                              <Cell\n                                key={`cell-${index}`}\n                                fill={\n                                  Object.values(CORES)[\n                                    index % Object.values(CORES).length\n                                  ]\n                                }\n                              />\n                            )\n                          )}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n\n                {/* Gráfico de Produtividade */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Indicadores de Produtividade</CardTitle>\n                    <CardDescription>\n                      Performance em relação às metas\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <BarChart data={dadosIndividuais.dadosProdutividade}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"categoria\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Bar\n                          dataKey=\"valor\"\n                          fill={CORES.primaria}\n                          name=\"Atual\"\n                        />\n                        <Bar\n                          dataKey=\"meta\"\n                          fill={CORES.secundaria}\n                          name=\"Meta\"\n                        />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              </>\n            )}\n          </TabsContent>\n        )}\n\n        {/* Comparativo */}\n        <TabsContent value=\"comparativo\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Análise Comparativa</CardTitle>\n              <CardDescription>\n                Em desenvolvimento - Comparação entre atendentes\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-gray-500\">\n                <p>Funcionalidade de comparação será implementada em breve</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default GraficosDesempenho;\n"],"names":["GraficosDesempenho","CORES","primaria","secundaria","terciaria","quaternaria","quinaria","sexta","CORES_STATUS","ATIVO","INATIVO","SUSPENSO","CORES_PERFORMANCE","alta","media","baixa","atendenteId","dadosMetricas","dadosDashboard","carregando","erro","className","abaSelecionada","setAbaSelecionada","useState","prepararDadosIndividuais","dadosAtividade","Object","entries","atividade","porTipo","map","tipo","quantidade","replace","toLowerCase","l","toUpperCase","porcentagem","totalAlteracoes","toFixed","dadosProdutividade","categoria","valor","documentos","total","meta","Math","min","avaliacoes","prepararDadosDashboard","dadosStatus","resumoGeral","atendentesPorStatus","status","totalAtendentes","dadosPerformance","metricas","distribuicaoPerformance","nivel","charAt","slice","dadosSetores","atendentesPorSetor","setor","renderizarTendencia","variacao","div","TrendingUp","span","TrendingDown","Minus","cn","Loader2","p","dadosIndividuais","dadosGerais","Tabs","value","onValueChange","TabsList","TabsTrigger","TabsContent","Card","CardHeader","CardTitle","tendencias","CardDescription","mediaGeral","CardContent","ResponsiveContainer","width","height","BarChart","data","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Bar","fill","totalNoPeriodo","Badge","variant","mediaPorAtendente","style","PieChart","Pie","cx","cy","labelLine","label","outerRadius","entry","index","Cell","Legend","topPerformers","length","domain","atendente","nome","cargo","resumo","produtividade","values","name"],"mappings":"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"}