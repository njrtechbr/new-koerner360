{"version":3,"names":["DELETE","cov_2d0r4f6yic","f","s","GET","POST","PUT","configuracaoAgendadorSchema","_zod","z","object","ativo","boolean","intervaloVerificacao","number","min","max","horarioExpediente","inicio","string","regex","fim","diasUteis","array","maxTentativas","delayEntreTentativas","maxTarefasSimultaneas","prioridadeMaxima","enum","agendarTarefaSchema","tipo","destinatarios","usuarioId","email","nome","dadosPersonalizacao","avaliacaoId","optional","nomeAvaliacao","prazoVencimento","diasRestantes","urlAvaliacao","estatisticas","totalPendentes","totalVencidas","totalConcluidas","agendarPara","datetime","prioridade","default","tentativas","agendadorInstance","obterAgendador","b","_agendadoremail","AgendadorEmail","request","session","_auth","auth","user","id","_server","NextResponse","json","erro","status","temPermissao","_permissoes","verificarPermissao","agendador","searchParams","URL","url","incluirEstatisticas","get","incluirTarefas","estaAtivo","configuracao","obterConfiguracao","obterEstatisticas","tarefasPendentes","obterTarefasPendentes","mensagem","error","console","body","dadosValidados","parse","parar","atualizarConfiguracao","iniciar","ZodError","detalhes","errors","map","err","campo","path","join","message","acao","resultado","agendarNotificacoesAutomaticas","tarefasAgendadas","agendarResumoSemanal","tarefaId","agendarTarefa","Date","limparTodas","limparTarefas","tarefasRemovidas","sucesso","cancelarTarefa"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\notificacoes\\email\\agendamento\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { auth } from '@/lib/auth';\nimport { verificarPermissao } from '@/lib/utils/permissoes';\nimport { AgendadorEmail } from '@/lib/services/agendador-email';\n\n// Schema de validação para configuração do agendador\nconst configuracaoAgendadorSchema = z.object({\n  ativo: z.boolean(),\n  intervaloVerificacao: z.number().min(60000).max(86400000), // 1 minuto a 24 horas em ms\n  horarioExpediente: z.object({\n    inicio: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),\n    fim: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),\n  }),\n  diasUteis: z.array(z.number().min(0).max(6)).min(1).max(7),\n  maxTentativas: z.number().min(1).max(10),\n  delayEntreTentativas: z.number().min(1000).max(3600000), // 1 segundo a 1 hora em ms\n  maxTarefasSimultaneas: z.number().min(1).max(50),\n  prioridadeMaxima: z.enum(['baixa', 'normal', 'alta', 'urgente']),\n});\n\n// Schema para agendar tarefa específica\nconst agendarTarefaSchema = z.object({\n  tipo: z.enum(['avaliacao_pendente', 'lembrete_prazo', 'avaliacao_vencida', 'resumo_semanal']),\n  destinatarios: z.array(z.object({\n    usuarioId: z.string(),\n    email: z.string().email(),\n    nome: z.string(),\n  })).min(1),\n  dadosPersonalizacao: z.object({\n    avaliacaoId: z.string().optional(),\n    nomeAvaliacao: z.string().optional(),\n    prazoVencimento: z.string().optional(),\n    diasRestantes: z.number().optional(),\n    urlAvaliacao: z.string().optional(),\n    estatisticas: z.object({\n      totalPendentes: z.number().optional(),\n      totalVencidas: z.number().optional(),\n      totalConcluidas: z.number().optional(),\n    }).optional(),\n  }).optional(),\n  agendarPara: z.string().datetime(),\n  prioridade: z.enum(['baixa', 'normal', 'alta', 'urgente']).default('normal'),\n  tentativas: z.number().min(1).max(10).default(3),\n});\n\n// Instância singleton do agendador\nlet agendadorInstance: AgendadorEmail | null = null;\n\nfunction obterAgendador(): AgendadorEmail {\n  if (!agendadorInstance) {\n    agendadorInstance = new AgendadorEmail({\n      ativo: false,\n      intervaloVerificacao: 300000, // 5 minutos\n      horarioExpediente: {\n        inicio: '08:00',\n        fim: '18:00',\n      },\n      diasUteis: [1, 2, 3, 4, 5], // Segunda a sexta\n      maxTentativas: 3,\n      delayEntreTentativas: 60000, // 1 minuto\n      maxTarefasSimultaneas: 10,\n      prioridadeMaxima: 'urgente',\n    });\n  }\n  return agendadorInstance;\n}\n\n// GET - Obter status e configuração do agendador\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões\n    const temPermissao = await verificarPermissao(\n      session.user.id,\n      ['ADMIN', 'GESTOR']\n    );\n    \n    if (!temPermissao) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para visualizar agendador de e-mails' },\n        { status: 403 }\n      );\n    }\n\n    const agendador = obterAgendador();\n    const { searchParams } = new URL(request.url);\n    const incluirEstatisticas = searchParams.get('estatisticas') === 'true';\n    const incluirTarefas = searchParams.get('tarefas') === 'true';\n\n    const status = {\n      ativo: agendador.estaAtivo(),\n      configuracao: agendador.obterConfiguracao(),\n    };\n\n    if (incluirEstatisticas) {\n      status.estatisticas = agendador.obterEstatisticas();\n    }\n\n    if (incluirTarefas) {\n      status.tarefasPendentes = agendador.obterTarefasPendentes();\n    }\n\n    return NextResponse.json({\n      status,\n      mensagem: 'Status do agendador obtido com sucesso',\n    });\n\n  } catch (error) {\n    console.error('Erro ao obter status do agendador:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT - Atualizar configuração do agendador\nexport async function PUT(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN pode alterar configurações)\n    const temPermissao = await verificarPermissao(\n      session.user.id,\n      ['ADMIN']\n    );\n    \n    if (!temPermissao) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para alterar configurações do agendador' },\n        { status: 403 }\n      );\n    }\n\n    const body = await request.json();\n    const dadosValidados = configuracaoAgendadorSchema.parse(body);\n\n    const agendador = obterAgendador();\n    \n    // Parar agendador se estiver ativo\n    if (agendador.estaAtivo()) {\n      agendador.parar();\n    }\n\n    // Atualizar configuração\n    agendador.atualizarConfiguracao(dadosValidados);\n\n    // Reiniciar se deve estar ativo\n    if (dadosValidados.ativo) {\n      agendador.iniciar();\n    }\n\n    return NextResponse.json({\n      configuracao: agendador.obterConfiguracao(),\n      ativo: agendador.estaAtivo(),\n      mensagem: 'Configuração do agendador atualizada com sucesso',\n    });\n\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        {\n          erro: 'Dados inválidos',\n          detalhes: error.errors.map(err => ({\n            campo: err.path.join('.'),\n            mensagem: err.message,\n          })),\n        },\n        { status: 400 }\n      );\n    }\n\n    console.error('Erro ao atualizar configuração do agendador:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Agendar nova tarefa de e-mail\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões\n    const temPermissao = await verificarPermissao(\n      session.user.id,\n      ['ADMIN', 'GESTOR']\n    );\n    \n    if (!temPermissao) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para agendar e-mails' },\n        { status: 403 }\n      );\n    }\n\n    const body = await request.json();\n    const { searchParams } = new URL(request.url);\n    const acao = searchParams.get('acao');\n\n    const agendador = obterAgendador();\n\n    if (acao === 'iniciar') {\n      // Iniciar agendador\n      if (agendador.estaAtivo()) {\n        return NextResponse.json(\n          { erro: 'Agendador já está ativo' },\n          { status: 400 }\n        );\n      }\n\n      agendador.iniciar();\n      \n      return NextResponse.json({\n        ativo: true,\n        mensagem: 'Agendador iniciado com sucesso',\n      });\n\n    } else if (acao === 'parar') {\n      // Parar agendador\n      if (!agendador.estaAtivo()) {\n        return NextResponse.json(\n          { erro: 'Agendador já está inativo' },\n          { status: 400 }\n        );\n      }\n\n      agendador.parar();\n      \n      return NextResponse.json({\n        ativo: false,\n        mensagem: 'Agendador parado com sucesso',\n      });\n\n    } else if (acao === 'agendar-automatico') {\n      // Agendar notificações automáticas\n      const resultado = await agendador.agendarNotificacoesAutomaticas();\n      \n      return NextResponse.json({\n        resultado,\n        mensagem: `${resultado.tarefasAgendadas} tarefas agendadas automaticamente`,\n      });\n\n    } else if (acao === 'agendar-resumo') {\n      // Agendar resumo semanal\n      const resultado = await agendador.agendarResumoSemanal();\n      \n      return NextResponse.json({\n        resultado,\n        mensagem: `${resultado.tarefasAgendadas} resumos semanais agendados`,\n      });\n\n    } else {\n      // Agendar tarefa específica\n      const dadosValidados = agendarTarefaSchema.parse(body);\n      \n      const tarefaId = await agendador.agendarTarefa(\n        dadosValidados.tipo,\n        dadosValidados.destinatarios,\n        dadosValidados.dadosPersonalizacao || {},\n        new Date(dadosValidados.agendarPara),\n        dadosValidados.prioridade,\n        dadosValidados.tentativas\n      );\n\n      return NextResponse.json(\n        {\n          tarefaId,\n          mensagem: 'Tarefa agendada com sucesso',\n        },\n        { status: 201 }\n      );\n    }\n\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        {\n          erro: 'Dados inválidos',\n          detalhes: error.errors.map(err => ({\n            campo: err.path.join('.'),\n            mensagem: err.message,\n          })),\n        },\n        { status: 400 }\n      );\n    }\n\n    console.error('Erro ao processar agendamento:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Cancelar tarefa agendada\nexport async function DELETE(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões\n    const temPermissao = await verificarPermissao(\n      session.user.id,\n      ['ADMIN', 'GESTOR']\n    );\n    \n    if (!temPermissao) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para cancelar tarefas agendadas' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const tarefaId = searchParams.get('tarefaId');\n    const limparTodas = searchParams.get('limparTodas') === 'true';\n\n    const agendador = obterAgendador();\n\n    if (limparTodas) {\n      // Limpar todas as tarefas\n      const resultado = agendador.limparTarefas();\n      \n      return NextResponse.json({\n        tarefasRemovidas: resultado.tarefasRemovidas,\n        mensagem: `${resultado.tarefasRemovidas} tarefas removidas`,\n      });\n\n    } else if (tarefaId) {\n      // Cancelar tarefa específica\n      const sucesso = agendador.cancelarTarefa(tarefaId);\n      \n      if (!sucesso) {\n        return NextResponse.json(\n          { erro: 'Tarefa não encontrada' },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({\n        tarefaId,\n        mensagem: 'Tarefa cancelada com sucesso',\n      });\n\n    } else {\n      return NextResponse.json(\n        { erro: 'ID da tarefa ou parâmetro limparTodas é obrigatório' },\n        { status: 400 }\n      );\n    }\n\n  } catch (error) {\n    console.error('Erro ao cancelar tarefa:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}