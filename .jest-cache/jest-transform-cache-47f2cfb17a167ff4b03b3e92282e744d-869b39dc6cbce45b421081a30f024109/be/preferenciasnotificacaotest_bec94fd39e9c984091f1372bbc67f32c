50d520430c059faf21fe3e9ad0a89de6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _vitest = require("vitest");
const _preferenciasnotificacao = require("../preferencias-notificacao");
// Mock do Prisma
const mockPrisma = {
    preferenciasNotificacao: {
        findUnique: _vitest.vi.fn(),
        create: _vitest.vi.fn(),
        update: _vitest.vi.fn(),
        upsert: _vitest.vi.fn(),
        delete: _vitest.vi.fn()
    },
    pausaNotificacao: {
        findFirst: _vitest.vi.fn(),
        create: _vitest.vi.fn(),
        update: _vitest.vi.fn(),
        delete: _vitest.vi.fn()
    }
};
// Dados de teste
const mockPreferencias = {
    id: 'pref1',
    usuarioId: 'user1',
    ativo: true,
    notificacaoEmail: true,
    formatoEmail: 'html',
    idioma: 'pt-BR',
    conteudo: {
        incluirDetalhesAvaliacao: true,
        incluirLinkDireto: true,
        incluirResumoEstatisticas: false
    },
    urgenciaMinima: 'media',
    tiposNotificacao: {
        pendente: {
            ativo: true,
            frequencia: 'diaria',
            diasAntecedencia: [
                7,
                3,
                1
            ],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        },
        vencida: {
            ativo: true,
            frequencia: 'imediata',
            diasAntecedencia: [
                0
            ],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: true,
            incluirFeriados: true
        },
        proximaVencimento: {
            ativo: true,
            frequencia: 'semanal',
            diasAntecedencia: [
                7,
                3
            ],
            horarioEnvio: '14:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        },
        nova: {
            ativo: false,
            frequencia: 'imediata',
            diasAntecedencia: [
                0
            ],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: true,
            incluirFeriados: true
        },
        completada: {
            ativo: false,
            frequencia: 'imediata',
            diasAntecedencia: [
                0
            ],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: true,
            incluirFeriados: true
        },
        personalizada: {
            ativo: false,
            frequencia: 'personalizada',
            diasAntecedencia: [],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        }
    },
    filtros: {
        avaliacoesUsuario: true,
        avaliacoesQueAvalia: true
    },
    criadaEm: new Date().toISOString(),
    atualizadaEm: new Date().toISOString()
};
const mockPausa = {
    id: 'pausa1',
    usuarioId: 'user1',
    ativo: true,
    dataInicio: new Date().toISOString(),
    dataFim: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
    motivo: 'Férias',
    criadaEm: new Date().toISOString(),
    atualizadaEm: new Date().toISOString()
};
const mockPreferenciasPadrao = {
    ativo: true,
    notificacaoEmail: true,
    formatoEmail: 'html',
    idioma: 'pt-BR',
    conteudo: {
        incluirDetalhesAvaliacao: true,
        incluirLinkDireto: true,
        incluirResumoEstatisticas: false
    },
    urgenciaMinima: 'baixa',
    tiposNotificacao: {
        pendente: {
            ativo: true,
            frequencia: 'diaria',
            diasAntecedencia: [
                7,
                3,
                1
            ],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        },
        vencida: {
            ativo: true,
            frequencia: 'imediata',
            diasAntecedencia: [
                0
            ],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: true,
            incluirFeriados: true
        },
        proximaVencimento: {
            ativo: true,
            frequencia: 'semanal',
            diasAntecedencia: [
                7,
                3
            ],
            horarioEnvio: '14:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        },
        nova: {
            ativo: false,
            frequencia: 'imediata',
            diasAntecedencia: [
                0
            ],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: true,
            incluirFeriados: true
        },
        completada: {
            ativo: false,
            frequencia: 'imediata',
            diasAntecedencia: [
                0
            ],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: true,
            incluirFeriados: true
        },
        personalizada: {
            ativo: false,
            frequencia: 'personalizada',
            diasAntecedencia: [],
            horarioEnvio: '09:00',
            incluirFinsDeSemanaSemana: false,
            incluirFeriados: false
        }
    },
    filtros: {
        avaliacoesUsuario: true,
        avaliacoesQueAvalia: true
    }
};
(0, _vitest.describe)('PreferenciasNotificacaoService', ()=>{
    let service;
    (0, _vitest.beforeEach)(()=>{
        _vitest.vi.clearAllMocks();
        service = new _preferenciasnotificacao.PreferenciasNotificacaoService(mockPrisma);
    });
    (0, _vitest.afterEach)(()=>{
        _vitest.vi.resetAllMocks();
    });
    (0, _vitest.describe)('buscarPreferencias', ()=>{
        (0, _vitest.it)('deve buscar preferências existentes', async ()=>{
            mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);
            const resultado = await service.buscarPreferencias('user1');
            (0, _vitest.expect)(mockPrisma.preferenciasNotificacao.findUnique).toHaveBeenCalledWith({
                where: {
                    usuarioId: 'user1'
                }
            });
            (0, _vitest.expect)(resultado).toEqual(mockPreferencias);
        });
        (0, _vitest.it)('deve retornar preferências padrão se não existir', async ()=>{
            mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(null);
            const resultado = await service.buscarPreferencias('user1');
            (0, _vitest.expect)(resultado).toEqual({
                usuarioId: 'user1',
                ...mockPreferenciasPadrao
            });
        });
        (0, _vitest.it)('deve tratar erro de banco de dados', async ()=>{
            mockPrisma.preferenciasNotificacao.findUnique.mockRejectedValueOnce(new Error('Database error'));
            await (0, _vitest.expect)(service.buscarPreferencias('user1')).rejects.toThrow('Database error');
        });
    });
    (0, _vitest.describe)('atualizarPreferencias', ()=>{
        (0, _vitest.it)('deve atualizar preferências existentes', async ()=>{
            const novasPreferencias = {
                ativo: false,
                notificacaoEmail: false,
                urgenciaMinima: 'alta'
            };
            const preferenciasAtualizadas = {
                ...mockPreferencias,
                ...novasPreferencias
            };
            mockPrisma.preferenciasNotificacao.upsert.mockResolvedValueOnce(preferenciasAtualizadas);
            const resultado = await service.atualizarPreferencias('user1', novasPreferencias);
            (0, _vitest.expect)(mockPrisma.preferenciasNotificacao.upsert).toHaveBeenCalledWith({
                where: {
                    usuarioId: 'user1'
                },
                create: {
                    usuarioId: 'user1',
                    ...mockPreferenciasPadrao,
                    ...novasPreferencias
                },
                update: novasPreferencias
            });
            (0, _vitest.expect)(resultado.ativo).toBe(false);
            (0, _vitest.expect)(resultado.notificacaoEmail).toBe(false);
            (0, _vitest.expect)(resultado.urgenciaMinima).toBe('alta');
        });
        (0, _vitest.it)('deve criar preferências se não existir', async ()=>{
            const novasPreferencias = {
                idioma: 'en-US',
                formatoEmail: 'texto'
            };
            const preferenciasCompletas = {
                id: 'pref2',
                usuarioId: 'user2',
                ...mockPreferenciasPadrao,
                ...novasPreferencias
            };
            mockPrisma.preferenciasNotificacao.upsert.mockResolvedValueOnce(preferenciasCompletas);
            const resultado = await service.atualizarPreferencias('user2', novasPreferencias);
            (0, _vitest.expect)(resultado.idioma).toBe('en-US');
            (0, _vitest.expect)(resultado.formatoEmail).toBe('texto');
        });
        (0, _vitest.it)('deve validar dados de entrada', async ()=>{
            const preferenciasInvalidas = {
                urgenciaMinima: 'invalida'
            };
            await (0, _vitest.expect)(service.atualizarPreferencias('user1', preferenciasInvalidas)).rejects.toThrow('Urgência inválida');
        });
        (0, _vitest.it)('deve validar horários de envio', async ()=>{
            const preferenciasInvalidas = {
                tiposNotificacao: {
                    pendente: {
                        horarioEnvio: '25:00'
                    }
                }
            };
            await (0, _vitest.expect)(service.atualizarPreferencias('user1', preferenciasInvalidas)).rejects.toThrow('Horário inválido');
        });
        (0, _vitest.it)('deve validar dias de antecedência', async ()=>{
            const preferenciasInvalidas = {
                tiposNotificacao: {
                    pendente: {
                        diasAntecedencia: [
                            -1,
                            0
                        ]
                    }
                }
            };
            await (0, _vitest.expect)(service.atualizarPreferencias('user1', preferenciasInvalidas)).rejects.toThrow('Dias de antecedência devem ser positivos');
        });
    });
    (0, _vitest.describe)('resetarPreferencias', ()=>{
        (0, _vitest.it)('deve resetar preferências para padrões', async ()=>{
            const preferenciasResetadas = {
                id: 'pref1',
                usuarioId: 'user1',
                ...mockPreferenciasPadrao
            };
            mockPrisma.preferenciasNotificacao.upsert.mockResolvedValueOnce(preferenciasResetadas);
            const resultado = await service.resetarPreferencias('user1');
            (0, _vitest.expect)(mockPrisma.preferenciasNotificacao.upsert).toHaveBeenCalledWith({
                where: {
                    usuarioId: 'user1'
                },
                create: {
                    usuarioId: 'user1',
                    ...mockPreferenciasPadrao
                },
                update: mockPreferenciasPadrao
            });
            (0, _vitest.expect)(resultado.ativo).toBe(true);
            (0, _vitest.expect)(resultado.urgenciaMinima).toBe('baixa');
            (0, _vitest.expect)(resultado.tiposNotificacao.pendente.ativo).toBe(true);
        });
        (0, _vitest.it)('deve tratar erro ao resetar', async ()=>{
            mockPrisma.preferenciasNotificacao.upsert.mockRejectedValueOnce(new Error('Reset failed'));
            await (0, _vitest.expect)(service.resetarPreferencias('user1')).rejects.toThrow('Reset failed');
        });
    });
    (0, _vitest.describe)('pausarNotificacoes', ()=>{
        (0, _vitest.it)('deve pausar notificações por período específico', async ()=>{
            const dataInicio = new Date();
            const dataFim = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
            const motivo = 'Férias de fim de ano';
            mockPrisma.pausaNotificacao.create.mockResolvedValueOnce({
                ...mockPausa,
                dataInicio: dataInicio.toISOString(),
                dataFim: dataFim.toISOString(),
                motivo
            });
            const resultado = await service.pausarNotificacoes('user1', dataInicio, dataFim, motivo);
            (0, _vitest.expect)(mockPrisma.pausaNotificacao.create).toHaveBeenCalledWith({
                data: {
                    usuarioId: 'user1',
                    ativo: true,
                    dataInicio,
                    dataFim,
                    motivo
                }
            });
            (0, _vitest.expect)(resultado.ativo).toBe(true);
            (0, _vitest.expect)(resultado.motivo).toBe(motivo);
        });
        (0, _vitest.it)('deve pausar notificações indefinidamente', async ()=>{
            const dataInicio = new Date();
            const motivo = 'Licença médica';
            mockPrisma.pausaNotificacao.create.mockResolvedValueOnce({
                ...mockPausa,
                dataInicio: dataInicio.toISOString(),
                dataFim: null,
                motivo
            });
            const resultado = await service.pausarNotificacoes('user1', dataInicio, undefined, motivo);
            (0, _vitest.expect)(mockPrisma.pausaNotificacao.create).toHaveBeenCalledWith({
                data: {
                    usuarioId: 'user1',
                    ativo: true,
                    dataInicio,
                    dataFim: null,
                    motivo
                }
            });
            (0, _vitest.expect)(resultado.dataFim).toBeNull();
        });
        (0, _vitest.it)('deve validar datas de pausa', async ()=>{
            const dataInicio = new Date();
            const dataFim = new Date(Date.now() - 24 * 60 * 60 * 1000); // Data no passado
            await (0, _vitest.expect)(service.pausarNotificacoes('user1', dataInicio, dataFim)).rejects.toThrow('Data fim deve ser posterior à data início');
        });
        (0, _vitest.it)('deve substituir pausa existente', async ()=>{
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(mockPausa);
            mockPrisma.pausaNotificacao.update.mockResolvedValueOnce({
                ...mockPausa,
                dataFim: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),
                motivo: 'Extensão de férias'
            });
            const dataInicio = new Date();
            const dataFim = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000);
            const motivo = 'Extensão de férias';
            const resultado = await service.pausarNotificacoes('user1', dataInicio, dataFim, motivo);
            (0, _vitest.expect)(mockPrisma.pausaNotificacao.update).toHaveBeenCalledWith({
                where: {
                    id: mockPausa.id
                },
                data: {
                    dataInicio,
                    dataFim,
                    motivo,
                    ativo: true
                }
            });
            (0, _vitest.expect)(resultado.motivo).toBe('Extensão de férias');
        });
    });
    (0, _vitest.describe)('retomarNotificacoes', ()=>{
        (0, _vitest.it)('deve retomar notificações pausadas', async ()=>{
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(mockPausa);
            mockPrisma.pausaNotificacao.update.mockResolvedValueOnce({
                ...mockPausa,
                ativo: false
            });
            const resultado = await service.retomarNotificacoes('user1');
            (0, _vitest.expect)(mockPrisma.pausaNotificacao.update).toHaveBeenCalledWith({
                where: {
                    id: mockPausa.id
                },
                data: {
                    ativo: false
                }
            });
            (0, _vitest.expect)(resultado.ativo).toBe(false);
        });
        (0, _vitest.it)('deve retornar null se não há pausa ativa', async ()=>{
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);
            const resultado = await service.retomarNotificacoes('user1');
            (0, _vitest.expect)(resultado).toBeNull();
            (0, _vitest.expect)(mockPrisma.pausaNotificacao.update).not.toHaveBeenCalled();
        });
    });
    (0, _vitest.describe)('verificarStatusPausa', ()=>{
        (0, _vitest.it)('deve retornar status de pausa ativa', async ()=>{
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(mockPausa);
            const resultado = await service.verificarStatusPausa('user1');
            (0, _vitest.expect)(mockPrisma.pausaNotificacao.findFirst).toHaveBeenCalledWith({
                where: {
                    usuarioId: 'user1',
                    ativo: true,
                    OR: [
                        {
                            dataFim: null
                        },
                        {
                            dataFim: {
                                gte: _vitest.expect.any(Date)
                            }
                        }
                    ]
                }
            });
            (0, _vitest.expect)(resultado).toEqual({
                pausado: true,
                pausa: mockPausa
            });
        });
        (0, _vitest.it)('deve retornar status sem pausa', async ()=>{
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);
            const resultado = await service.verificarStatusPausa('user1');
            (0, _vitest.expect)(resultado).toEqual({
                pausado: false,
                pausa: null
            });
        });
        (0, _vitest.it)('deve considerar pausa expirada como inativa', async ()=>{
            const pausaExpirada = {
                ...mockPausa,
                dataFim: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
            };
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);
            const resultado = await service.verificarStatusPausa('user1');
            (0, _vitest.expect)(resultado.pausado).toBe(false);
        });
    });
    (0, _vitest.describe)('validarPreferencias', ()=>{
        (0, _vitest.it)('deve validar preferências válidas', ()=>{
            (0, _vitest.expect)(()=>service.validarPreferencias(mockPreferencias)).not.toThrow();
        });
        (0, _vitest.it)('deve rejeitar urgência inválida', ()=>{
            const preferenciasInvalidas = {
                ...mockPreferencias,
                urgenciaMinima: 'invalida'
            };
            (0, _vitest.expect)(()=>service.validarPreferencias(preferenciasInvalidas)).toThrow('Urgência inválida');
        });
        (0, _vitest.it)('deve rejeitar formato de e-mail inválido', ()=>{
            const preferenciasInvalidas = {
                ...mockPreferencias,
                formatoEmail: 'invalido'
            };
            (0, _vitest.expect)(()=>service.validarPreferencias(preferenciasInvalidas)).toThrow('Formato de e-mail inválido');
        });
        (0, _vitest.it)('deve rejeitar idioma inválido', ()=>{
            const preferenciasInvalidas = {
                ...mockPreferencias,
                idioma: 'xx-XX'
            };
            (0, _vitest.expect)(()=>service.validarPreferencias(preferenciasInvalidas)).toThrow('Idioma não suportado');
        });
        (0, _vitest.it)('deve validar tipos de notificação', ()=>{
            const preferenciasInvalidas = {
                ...mockPreferencias,
                tiposNotificacao: {
                    ...mockPreferencias.tiposNotificacao,
                    pendente: {
                        ...mockPreferencias.tiposNotificacao.pendente,
                        frequencia: 'invalida'
                    }
                }
            };
            (0, _vitest.expect)(()=>service.validarPreferencias(preferenciasInvalidas)).toThrow('Frequência inválida');
        });
    });
    (0, _vitest.describe)('obterPreferenciasPadrao', ()=>{
        (0, _vitest.it)('deve retornar preferências padrão corretas', ()=>{
            const padrao = service.obterPreferenciasPadrao();
            (0, _vitest.expect)(padrao.ativo).toBe(true);
            (0, _vitest.expect)(padrao.notificacaoEmail).toBe(true);
            (0, _vitest.expect)(padrao.formatoEmail).toBe('html');
            (0, _vitest.expect)(padrao.idioma).toBe('pt-BR');
            (0, _vitest.expect)(padrao.urgenciaMinima).toBe('baixa');
            (0, _vitest.expect)(padrao.tiposNotificacao.pendente.ativo).toBe(true);
            (0, _vitest.expect)(padrao.tiposNotificacao.vencida.ativo).toBe(true);
            (0, _vitest.expect)(padrao.tiposNotificacao.nova.ativo).toBe(false);
        });
    });
    (0, _vitest.describe)('verificarPermissaoNotificacao', ()=>{
        (0, _vitest.it)('deve permitir notificação se preferências ativas', async ()=>{
            mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);
            const resultado = await service.verificarPermissaoNotificacao('user1', 'pendente', 'media');
            (0, _vitest.expect)(resultado.permitido).toBe(true);
            (0, _vitest.expect)(resultado.motivo).toBeUndefined();
        });
        (0, _vitest.it)('deve bloquear se notificações desativadas', async ()=>{
            const preferenciasInativas = {
                ...mockPreferencias,
                ativo: false
            };
            mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(preferenciasInativas);
            const resultado = await service.verificarPermissaoNotificacao('user1', 'pendente', 'media');
            (0, _vitest.expect)(resultado.permitido).toBe(false);
            (0, _vitest.expect)(resultado.motivo).toBe('Notificações desativadas pelo usuário');
        });
        (0, _vitest.it)('deve bloquear se tipo específico desativado', async ()=>{
            const preferenciasComTipoInativo = {
                ...mockPreferencias,
                tiposNotificacao: {
                    ...mockPreferencias.tiposNotificacao,
                    pendente: {
                        ...mockPreferencias.tiposNotificacao.pendente,
                        ativo: false
                    }
                }
            };
            mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(preferenciasComTipoInativo);
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);
            const resultado = await service.verificarPermissaoNotificacao('user1', 'pendente', 'media');
            (0, _vitest.expect)(resultado.permitido).toBe(false);
            (0, _vitest.expect)(resultado.motivo).toBe('Tipo de notificação pendente desativado');
        });
        (0, _vitest.it)('deve bloquear se urgência abaixo do mínimo', async ()=>{
            const preferenciasUrgenciaAlta = {
                ...mockPreferencias,
                urgenciaMinima: 'alta'
            };
            mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(preferenciasUrgenciaAlta);
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);
            const resultado = await service.verificarPermissaoNotificacao('user1', 'pendente', 'baixa');
            (0, _vitest.expect)(resultado.permitido).toBe(false);
            (0, _vitest.expect)(resultado.motivo).toBe('Urgência abaixo do mínimo configurado');
        });
        (0, _vitest.it)('deve bloquear se notificações pausadas', async ()=>{
            mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(mockPausa);
            const resultado = await service.verificarPermissaoNotificacao('user1', 'pendente', 'media');
            (0, _vitest.expect)(resultado.permitido).toBe(false);
            (0, _vitest.expect)(resultado.motivo).toBe('Notificações pausadas: Férias');
        });
    });
    (0, _vitest.describe)('Tratamento de Erros', ()=>{
        (0, _vitest.it)('deve tratar erro de conexão com banco', async ()=>{
            mockPrisma.preferenciasNotificacao.findUnique.mockRejectedValueOnce(new Error('Database connection failed'));
            await (0, _vitest.expect)(service.buscarPreferencias('user1')).rejects.toThrow('Database connection failed');
        });
        (0, _vitest.it)('deve tratar erro na atualização', async ()=>{
            mockPrisma.preferenciasNotificacao.upsert.mockRejectedValueOnce(new Error('Update failed'));
            await (0, _vitest.expect)(service.atualizarPreferencias('user1', {
                ativo: false
            })).rejects.toThrow('Update failed');
        });
        (0, _vitest.it)('deve tratar erro na pausa', async ()=>{
            mockPrisma.pausaNotificacao.create.mockRejectedValueOnce(new Error('Pause failed'));
            await (0, _vitest.expect)(service.pausarNotificacoes('user1', new Date(), new Date(Date.now() + 86400000))).rejects.toThrow('Pause failed');
        });
    });
    (0, _vitest.describe)('Performance', ()=>{
        (0, _vitest.it)('deve usar índices apropriados para consultas', async ()=>{
            await service.buscarPreferencias('user1');
            (0, _vitest.expect)(mockPrisma.preferenciasNotificacao.findUnique).toHaveBeenCalledWith({
                where: {
                    usuarioId: 'user1'
                }
            });
        });
        (0, _vitest.it)('deve otimizar consultas de status de pausa', async ()=>{
            await service.verificarStatusPausa('user1');
            (0, _vitest.expect)(mockPrisma.pausaNotificacao.findFirst).toHaveBeenCalledWith({
                where: {
                    usuarioId: 'user1',
                    ativo: true,
                    OR: _vitest.expect.any(Array)
                }
            });
        });
    });
    (0, _vitest.describe)('Integração', ()=>{
        (0, _vitest.it)('deve integrar com sistema de notificações', async ()=>{
            mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);
            mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);
            const permissao = await service.verificarPermissaoNotificacao('user1', 'pendente', 'media');
            (0, _vitest.expect)(permissao.permitido).toBe(true);
            (0, _vitest.expect)(permissao.preferencias).toEqual(mockPreferencias);
        });
        (0, _vitest.it)('deve fornecer configurações para agendador', async ()=>{
            mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);
            const preferencias = await service.buscarPreferencias('user1');
            (0, _vitest.expect)(preferencias.tiposNotificacao.pendente.frequencia).toBe('diaria');
            (0, _vitest.expect)(preferencias.tiposNotificacao.pendente.horarioEnvio).toBe('09:00');
            (0, _vitest.expect)(preferencias.tiposNotificacao.pendente.diasAntecedencia).toEqual([
                7,
                3,
                1
            ]);
        });
    });
    (0, _vitest.describe)('Validações Específicas', ()=>{
        (0, _vitest.it)('deve validar horário no formato HH:MM', ()=>{
            (0, _vitest.expect)(()=>service.validarHorario('09:30')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarHorario('23:59')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarHorario('00:00')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarHorario('24:00')).toThrow('Horário inválido');
            (0, _vitest.expect)(()=>service.validarHorario('09:60')).toThrow('Horário inválido');
            (0, _vitest.expect)(()=>service.validarHorario('9:30')).toThrow('Horário inválido');
            (0, _vitest.expect)(()=>service.validarHorario('09:3')).toThrow('Horário inválido');
        });
        (0, _vitest.it)('deve validar dias de antecedência', ()=>{
            (0, _vitest.expect)(()=>service.validarDiasAntecedencia([
                    1,
                    3,
                    7
                ])).not.toThrow();
            (0, _vitest.expect)(()=>service.validarDiasAntecedencia([
                    0
                ])).not.toThrow();
            (0, _vitest.expect)(()=>service.validarDiasAntecedencia([])).not.toThrow();
            (0, _vitest.expect)(()=>service.validarDiasAntecedencia([
                    -1
                ])).toThrow('Dias de antecedência devem ser positivos');
            (0, _vitest.expect)(()=>service.validarDiasAntecedencia([
                    1,
                    -3,
                    7
                ])).toThrow('Dias de antecedência devem ser positivos');
        });
        (0, _vitest.it)('deve validar urgência', ()=>{
            (0, _vitest.expect)(()=>service.validarUrgencia('baixa')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarUrgencia('media')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarUrgencia('alta')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarUrgencia('invalida')).toThrow('Urgência inválida');
        });
        (0, _vitest.it)('deve validar frequência', ()=>{
            (0, _vitest.expect)(()=>service.validarFrequencia('imediata')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarFrequencia('diaria')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarFrequencia('semanal')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarFrequencia('personalizada')).not.toThrow();
            (0, _vitest.expect)(()=>service.validarFrequencia('invalida')).toThrow('Frequência inválida');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,