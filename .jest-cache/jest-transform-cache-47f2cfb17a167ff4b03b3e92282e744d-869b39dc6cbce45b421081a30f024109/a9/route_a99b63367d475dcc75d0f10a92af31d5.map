{"version":3,"names":["DELETE","cov_guv3i2b3y","f","s","GET","POST","PUT","configuracaoSchema","_zod","z","object","usuarioId","string","notificacoesEmail","boolean","notificacoesInterface","diasAntecedencia","number","min","max","horarioEnvio","regex","frequenciaLembretes","enum","ativo","atualizacaoConfiguracaoSchema","partial","omit","request","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","error","status","searchParams","URL","url","get","id","isAdmin","tipo","isGestor","isProprioUsuario","configuracao","_notificacoesavaliacoes","buscarConfiguracaoNotificacao","podeReceberEmail","deveReceberNotificacao","podeReceberInterface","permissoes","email","interface","timestamp","Date","toISOString","console","body","dadosAtualizacao","usuarioAlvo","dadosValidados","parse","configuracaoAtual","configuracaoAtualizada","configuracaoCompleta","log","alteracoes","usuario","message","ZodError","details","errors","dadosConfiguracao","configuracaoValidada","configuracaoExistente","novaConfiguracao","now","criadoPor","configuracaoDesativada","desativadoPor"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\notificacoes\\configuracao\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { z } from 'zod';\nimport {\n  buscarConfiguracaoNotificacao,\n  deveReceberNotificacao\n} from '@/lib/utils/notificacoes-avaliacoes';\n\n// Schema para validação da configuração\nconst configuracaoSchema = z.object({\n  usuarioId: z.string(),\n  notificacoesEmail: z.boolean(),\n  notificacoesInterface: z.boolean(),\n  diasAntecedencia: z.number().min(1).max(30),\n  horarioEnvio: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Formato de horário inválido (HH:mm)'),\n  frequenciaLembretes: z.enum(['diario', 'semanal', 'personalizado']),\n  ativo: z.boolean()\n});\n\nconst atualizacaoConfiguracaoSchema = configuracaoSchema.partial().omit({ usuarioId: true });\n\n/**\n * GET /api/notificacoes/configuracao\n * Busca configurações de notificação do usuário\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Extrair parâmetros da URL\n    const { searchParams } = new URL(request.url);\n    const usuarioId = searchParams.get('usuarioId') || session.user.id;\n\n    // Verificar permissões\n    const isAdmin = session.user.tipo === 'ADMIN';\n    const isGestor = session.user.tipo === 'GESTOR';\n    const isProprioUsuario = usuarioId === session.user.id;\n\n    if (!isAdmin && !isGestor && !isProprioUsuario) {\n      return NextResponse.json(\n        { error: 'Sem permissão para acessar essa configuração' },\n        { status: 403 }\n      );\n    }\n\n    // Buscar configuração\n    const configuracao = await buscarConfiguracaoNotificacao(usuarioId);\n\n    if (!configuracao) {\n      return NextResponse.json(\n        { error: 'Configuração não encontrada' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar permissões específicas\n    const podeReceberEmail = await deveReceberNotificacao(usuarioId, 'email');\n    const podeReceberInterface = await deveReceberNotificacao(usuarioId, 'interface');\n\n    return NextResponse.json({\n      configuracao,\n      permissoes: {\n        email: podeReceberEmail,\n        interface: podeReceberInterface\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar configuração de notificações:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PUT /api/notificacoes/configuracao\n * Atualiza configurações de notificação do usuário\n */\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Extrair dados do corpo da requisição\n    const body = await request.json();\n    const { usuarioId, ...dadosAtualizacao } = body;\n\n    // Usar o usuário da sessão se não especificado\n    const usuarioAlvo = usuarioId || session.user.id;\n\n    // Verificar permissões\n    const isAdmin = session.user.tipo === 'ADMIN';\n    const isGestor = session.user.tipo === 'GESTOR';\n    const isProprioUsuario = usuarioAlvo === session.user.id;\n\n    if (!isAdmin && !isGestor && !isProprioUsuario) {\n      return NextResponse.json(\n        { error: 'Sem permissão para alterar essa configuração' },\n        { status: 403 }\n      );\n    }\n\n    // Validar dados\n    const dadosValidados = atualizacaoConfiguracaoSchema.parse(dadosAtualizacao);\n\n    // Buscar configuração atual\n    const configuracaoAtual = await buscarConfiguracaoNotificacao(usuarioAlvo);\n    \n    if (!configuracaoAtual) {\n      return NextResponse.json(\n        { error: 'Configuração não encontrada' },\n        { status: 404 }\n      );\n    }\n\n    // Simular atualização (em uma implementação real, isso seria persistido no banco)\n    const configuracaoAtualizada = {\n      ...configuracaoAtual,\n      ...dadosValidados,\n      // Sempre manter o usuarioId original\n      usuarioId: configuracaoAtual.usuarioId\n    };\n\n    // Validar configuração completa\n    const configuracaoCompleta = configuracaoSchema.parse(configuracaoAtualizada);\n\n    // Log da alteração (em produção, isso seria salvo no banco)\n    console.log(`Configuração de notificações atualizada para usuário ${usuarioAlvo}:`, {\n      alteracoes: dadosValidados,\n      usuario: session.user.id,\n      timestamp: new Date().toISOString()\n    });\n\n    return NextResponse.json({\n      configuracao: configuracaoCompleta,\n      alteracoes: dadosValidados,\n      timestamp: new Date().toISOString(),\n      message: 'Configuração atualizada com sucesso'\n    });\n\n  } catch (error) {\n    console.error('Erro ao atualizar configuração de notificações:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Dados inválidos',\n          details: error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/notificacoes/configuracao\n * Cria uma nova configuração de notificação\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Extrair dados do corpo da requisição\n    const body = await request.json();\n    \n    // Usar o usuário da sessão se não especificado\n    const dadosConfiguracao = {\n      usuarioId: session.user.id,\n      ...body\n    };\n\n    // Verificar permissões (apenas admins podem criar configurações para outros usuários)\n    if (dadosConfiguracao.usuarioId !== session.user.id && session.user.tipo !== 'ADMIN') {\n      return NextResponse.json(\n        { error: 'Sem permissão para criar configuração para outro usuário' },\n        { status: 403 }\n      );\n    }\n\n    // Validar dados\n    const configuracaoValidada = configuracaoSchema.parse(dadosConfiguracao);\n\n    // Verificar se já existe configuração\n    const configuracaoExistente = await buscarConfiguracaoNotificacao(configuracaoValidada.usuarioId);\n    \n    if (configuracaoExistente) {\n      return NextResponse.json(\n        { error: 'Configuração já existe para este usuário. Use PUT para atualizar.' },\n        { status: 409 }\n      );\n    }\n\n    // Simular criação (em uma implementação real, isso seria salvo no banco)\n    const novaConfiguracao = {\n      ...configuracaoValidada,\n      id: `config-${configuracaoValidada.usuarioId}-${Date.now()}`\n    };\n\n    // Log da criação\n    console.log(`Nova configuração de notificações criada:`, {\n      configuracao: novaConfiguracao,\n      criadoPor: session.user.id,\n      timestamp: new Date().toISOString()\n    });\n\n    return NextResponse.json({\n      configuracao: novaConfiguracao,\n      timestamp: new Date().toISOString(),\n      message: 'Configuração criada com sucesso'\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error('Erro ao criar configuração de notificações:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Dados inválidos',\n          details: error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/notificacoes/configuracao\n * Remove configuração de notificação (desativa)\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Extrair parâmetros da URL\n    const { searchParams } = new URL(request.url);\n    const usuarioId = searchParams.get('usuarioId') || session.user.id;\n\n    // Verificar permissões\n    const isAdmin = session.user.tipo === 'ADMIN';\n    const isProprioUsuario = usuarioId === session.user.id;\n\n    if (!isAdmin && !isProprioUsuario) {\n      return NextResponse.json(\n        { error: 'Sem permissão para remover essa configuração' },\n        { status: 403 }\n      );\n    }\n\n    // Buscar configuração atual\n    const configuracaoAtual = await buscarConfiguracaoNotificacao(usuarioId);\n    \n    if (!configuracaoAtual) {\n      return NextResponse.json(\n        { error: 'Configuração não encontrada' },\n        { status: 404 }\n      );\n    }\n\n    // Em vez de deletar, desativar a configuração\n    const configuracaoDesativada = {\n      ...configuracaoAtual,\n      ativo: false,\n      notificacoesEmail: false,\n      notificacoesInterface: false\n    };\n\n    // Log da desativação\n    console.log(`Configuração de notificações desativada:`, {\n      usuarioId,\n      desativadoPor: session.user.id,\n      timestamp: new Date().toISOString()\n    });\n\n    return NextResponse.json({\n      configuracao: configuracaoDesativada,\n      timestamp: new Date().toISOString(),\n      message: 'Configuração desativada com sucesso'\n    });\n\n  } catch (error) {\n    console.error('Erro ao desativar configuração de notificações:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}