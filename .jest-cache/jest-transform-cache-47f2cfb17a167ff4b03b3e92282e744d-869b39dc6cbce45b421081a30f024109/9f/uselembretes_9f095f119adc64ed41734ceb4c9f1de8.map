{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-lembretes.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Lembrete {\n  id: string;\n  avaliacaoId: string;\n  usuarioId: string;\n  tipo: 'lembrete' | 'vencimento';\n  dataEnvio: string;\n  enviado: boolean;\n  tentativas: number;\n  ultimaTentativa?: string;\n  dataEnvioReal?: string;\n  erro?: string;\n  observacoes?: string;\n  criadoEm: string;\n  atualizadoEm?: string;\n  usuario: {\n    id: string;\n    nome: string;\n    email: string;\n    cargo?: string;\n  };\n  avaliacao: {\n    id: string;\n    prazo: string;\n    status: string;\n    avaliado: {\n      id: string;\n      nome: string;\n      cargo?: string;\n      email: string;\n    };\n    avaliador: {\n      id: string;\n      nome: string;\n      email: string;\n    };\n    periodo: {\n      id: string;\n      nome: string;\n      dataInicio: string;\n      dataFim: string;\n    };\n  };\n  criadoPorUsuario?: {\n    id: string;\n    nome: string;\n  };\n}\n\ninterface ConfiguracaoAgendador {\n  diasAntecedencia: number[];\n  horarioEnvio: string;\n  ativo: boolean;\n  incluirFimDeSemana: boolean;\n  incluirFeriados: boolean;\n}\n\ninterface StatusAgendador {\n  ativo: boolean;\n  configuracao: ConfiguracaoAgendador;\n  estatisticas: {\n    totalAgendados: number;\n    totalEnviados: number;\n    totalPendentes: number;\n    totalFalhas: number;\n    proximosEnvios: Lembrete[];\n    ultimosEnviados: Lembrete[];\n  };\n}\n\ninterface FiltrosLembretes {\n  usuarioId?: string;\n  avaliacaoId?: string;\n  tipo?: 'lembrete' | 'vencimento';\n  enviado?: boolean;\n  dataInicio?: string;\n  dataFim?: string;\n  limite?: number;\n  pagina?: number;\n}\n\ninterface PaginacaoLembretes {\n  paginaAtual: number;\n  totalPaginas: number;\n  totalItens: number;\n  itensPorPagina: number;\n  temProximaPagina: boolean;\n  temPaginaAnterior: boolean;\n}\n\ninterface ResultadoLembretes {\n  lembretes: Lembrete[];\n  paginacao: PaginacaoLembretes;\n  carregando: boolean;\n  erro: string | null;\n}\n\nexport function useLembretes(filtros: FiltrosLembretes = {}) {\n  const [lembretes, setLembretes] = useState<Lembrete[]>([]);\n  const [paginacao, setPaginacao] = useState<PaginacaoLembretes>({\n    paginaAtual: 1,\n    totalPaginas: 1,\n    totalItens: 0,\n    itensPorPagina: 50,\n    temProximaPagina: false,\n    temPaginaAnterior: false,\n  });\n  const [carregando, setCarregando] = useState(false);\n  const [erro, setErro] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  /**\n   * Busca lembretes com filtros\n   */\n  const buscarLembretes = useCallback(async (novosFiltros: FiltrosLembretes = {}) => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const filtrosCompletos = { ...filtros, ...novosFiltros };\n      const params = new URLSearchParams();\n\n      Object.entries(filtrosCompletos).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, value.toString());\n        }\n      });\n\n      const response = await fetch(`/api/lembretes?${params.toString()}`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao buscar lembretes');\n      }\n\n      setLembretes(data.dados);\n      setPaginacao(data.paginacao);\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagemErro);\n      toast({\n        title: 'Erro ao buscar lembretes',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n    } finally {\n      setCarregando(false);\n    }\n  }, [filtros, toast]);\n\n  /**\n   * Busca um lembrete específico por ID\n   */\n  const buscarLembrete = useCallback(async (id: string): Promise<Lembrete | null> => {\n    try {\n      const response = await fetch(`/api/lembretes/${id}`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao buscar lembrete');\n      }\n\n      return data.dados;\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao buscar lembrete',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n      return null;\n    }\n  }, [toast]);\n\n  /**\n   * Cria um novo lembrete\n   */\n  const criarLembrete = useCallback(async (dados: {\n    avaliacaoId: string;\n    usuarioId: string;\n    tipo: 'lembrete' | 'vencimento';\n    dataEnvio: string;\n    observacoes?: string;\n  }): Promise<boolean> => {\n    try {\n      const response = await fetch('/api/lembretes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(dados),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao criar lembrete');\n      }\n\n      toast({\n        title: 'Lembrete criado',\n        description: 'Lembrete criado com sucesso',\n      });\n\n      // Atualizar lista de lembretes\n      await buscarLembretes();\n      return true;\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao criar lembrete',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n      return false;\n    }\n  }, [buscarLembretes, toast]);\n\n  /**\n   * Atualiza um lembrete\n   */\n  const atualizarLembrete = useCallback(async (id: string, dados: {\n    dataEnvio?: string;\n    observacoes?: string;\n    enviado?: boolean;\n    erro?: string;\n  }): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/lembretes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(dados),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao atualizar lembrete');\n      }\n\n      toast({\n        title: 'Lembrete atualizado',\n        description: 'Lembrete atualizado com sucesso',\n      });\n\n      // Atualizar lista de lembretes\n      await buscarLembretes();\n      return true;\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao atualizar lembrete',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n      return false;\n    }\n  }, [buscarLembretes, toast]);\n\n  /**\n   * Remove um lembrete\n   */\n  const removerLembrete = useCallback(async (id: string): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/lembretes/${id}`, {\n        method: 'DELETE',\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao remover lembrete');\n      }\n\n      toast({\n        title: 'Lembrete removido',\n        description: 'Lembrete removido com sucesso',\n      });\n\n      // Atualizar lista de lembretes\n      await buscarLembretes();\n      return true;\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao remover lembrete',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n      return false;\n    }\n  }, [buscarLembretes, toast]);\n\n  /**\n   * Executa ação em um lembrete\n   */\n  const executarAcaoLembrete = useCallback(async (id: string, acao: string, dados?: any): Promise<boolean> => {\n    try {\n      const response = await fetch(`/api/lembretes/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ acao, ...dados }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao executar ação');\n      }\n\n      toast({\n        title: 'Ação executada',\n        description: data.mensagem || 'Ação executada com sucesso',\n      });\n\n      // Atualizar lista de lembretes\n      await buscarLembretes();\n      return true;\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao executar ação',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n      return false;\n    }\n  }, [buscarLembretes, toast]);\n\n  /**\n   * Remove lembretes em lote\n   */\n  const removerLembretesLote = useCallback(async (acao: string, parametros: any = {}): Promise<boolean> => {\n    try {\n      const params = new URLSearchParams({ acao, ...parametros });\n      const response = await fetch(`/api/lembretes?${params.toString()}`, {\n        method: 'DELETE',\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao remover lembretes');\n      }\n\n      toast({\n        title: 'Lembretes removidos',\n        description: data.mensagem || 'Lembretes removidos com sucesso',\n      });\n\n      // Atualizar lista de lembretes\n      await buscarLembretes();\n      return true;\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao remover lembretes',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n      return false;\n    }\n  }, [buscarLembretes, toast]);\n\n  // Carregar lembretes na inicialização\n  useEffect(() => {\n    buscarLembretes();\n  }, [buscarLembretes]);\n\n  return {\n    lembretes,\n    paginacao,\n    carregando,\n    erro,\n    buscarLembretes,\n    buscarLembrete,\n    criarLembrete,\n    atualizarLembrete,\n    removerLembrete,\n    executarAcaoLembrete,\n    removerLembretesLote,\n  };\n}\n\n/**\n * Hook para gerenciar o agendador de lembretes\n */\nexport function useAgendadorLembretes() {\n  const [status, setStatus] = useState<StatusAgendador | null>(null);\n  const [carregando, setCarregando] = useState(false);\n  const [erro, setErro] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  /**\n   * Busca o status do agendador\n   */\n  const buscarStatus = useCallback(async () => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const response = await fetch('/api/lembretes/agendamento');\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao buscar status do agendador');\n      }\n\n      setStatus(data.dados);\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagemErro);\n      toast({\n        title: 'Erro ao buscar status',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Atualiza a configuração do agendador\n   */\n  const atualizarConfiguracao = useCallback(async (configuracao: ConfiguracaoAgendador): Promise<boolean> => {\n    try {\n      const response = await fetch('/api/lembretes/agendamento', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(configuracao),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao atualizar configuração');\n      }\n\n      toast({\n        title: 'Configuração atualizada',\n        description: 'Configuração do agendador atualizada com sucesso',\n      });\n\n      // Atualizar status\n      await buscarStatus();\n      return true;\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao atualizar configuração',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n      return false;\n    }\n  }, [buscarStatus, toast]);\n\n  /**\n   * Executa ação no agendador\n   */\n  const executarAcao = useCallback(async (acao: string, dados?: any): Promise<boolean> => {\n    try {\n      const response = await fetch('/api/lembretes/agendamento', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ acao, ...dados }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.erro || 'Erro ao executar ação');\n      }\n\n      toast({\n        title: 'Ação executada',\n        description: data.mensagem || 'Ação executada com sucesso',\n      });\n\n      // Atualizar status\n      await buscarStatus();\n      return true;\n\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      toast({\n        title: 'Erro ao executar ação',\n        description: mensagemErro,\n        variant: 'destructive',\n      });\n      return false;\n    }\n  }, [buscarStatus, toast]);\n\n  // Carregar status na inicialização\n  useEffect(() => {\n    buscarStatus();\n  }, [buscarStatus]);\n\n  return {\n    status,\n    carregando,\n    erro,\n    buscarStatus,\n    atualizarConfiguracao,\n    executarAcao,\n  };\n}\n\nexport type {\n  Lembrete,\n  ConfiguracaoAgendador,\n  StatusAgendador,\n  FiltrosLembretes,\n  PaginacaoLembretes,\n  ResultadoLembretes,\n};"],"names":["useAgendadorLembretes","useLembretes","filtros","lembretes","setLembretes","useState","paginacao","setPaginacao","paginaAtual","totalPaginas","totalItens","itensPorPagina","temProximaPagina","temPaginaAnterior","carregando","setCarregando","erro","setErro","toast","useToast","buscarLembretes","useCallback","novosFiltros","filtrosCompletos","params","URLSearchParams","Object","entries","forEach","key","value","undefined","append","toString","response","fetch","data","json","ok","Error","dados","error","mensagemErro","message","title","description","variant","buscarLembrete","id","criarLembrete","method","headers","body","JSON","stringify","atualizarLembrete","removerLembrete","executarAcaoLembrete","acao","mensagem","removerLembretesLote","parametros","useEffect","status","setStatus","buscarStatus","atualizarConfiguracao","configuracao","executarAcao"],"mappings":"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"}