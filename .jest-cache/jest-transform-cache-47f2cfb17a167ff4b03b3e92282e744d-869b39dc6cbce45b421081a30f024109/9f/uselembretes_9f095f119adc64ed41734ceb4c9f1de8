c005a9dd5867dc1426c270b145356816
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useAgendadorLembretes () {
        return useAgendadorLembretes;
    },
    get useLembretes () {
        return useLembretes;
    }
});
const _react = require("react");
const _usetoast = require("./use-toast");
function useLembretes(filtros = {}) {
    const [lembretes, setLembretes] = (0, _react.useState)([]);
    const [paginacao, setPaginacao] = (0, _react.useState)({
        paginaAtual: 1,
        totalPaginas: 1,
        totalItens: 0,
        itensPorPagina: 50,
        temProximaPagina: false,
        temPaginaAnterior: false
    });
    const [carregando, setCarregando] = (0, _react.useState)(false);
    const [erro, setErro] = (0, _react.useState)(null);
    const { toast } = (0, _usetoast.useToast)();
    /**
   * Busca lembretes com filtros
   */ const buscarLembretes = (0, _react.useCallback)(async (novosFiltros = {})=>{
        setCarregando(true);
        setErro(null);
        try {
            const filtrosCompletos = {
                ...filtros,
                ...novosFiltros
            };
            const params = new URLSearchParams();
            Object.entries(filtrosCompletos).forEach(([key, value])=>{
                if (value !== undefined && value !== null) {
                    params.append(key, value.toString());
                }
            });
            const response = await fetch(`/api/lembretes?${params.toString()}`);
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao buscar lembretes');
            }
            setLembretes(data.dados);
            setPaginacao(data.paginacao);
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            setErro(mensagemErro);
            toast({
                title: 'Erro ao buscar lembretes',
                description: mensagemErro,
                variant: 'destructive'
            });
        } finally{
            setCarregando(false);
        }
    }, [
        filtros,
        toast
    ]);
    /**
   * Busca um lembrete específico por ID
   */ const buscarLembrete = (0, _react.useCallback)(async (id)=>{
        try {
            const response = await fetch(`/api/lembretes/${id}`);
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao buscar lembrete');
            }
            return data.dados;
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            toast({
                title: 'Erro ao buscar lembrete',
                description: mensagemErro,
                variant: 'destructive'
            });
            return null;
        }
    }, [
        toast
    ]);
    /**
   * Cria um novo lembrete
   */ const criarLembrete = (0, _react.useCallback)(async (dados)=>{
        try {
            const response = await fetch('/api/lembretes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dados)
            });
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao criar lembrete');
            }
            toast({
                title: 'Lembrete criado',
                description: 'Lembrete criado com sucesso'
            });
            // Atualizar lista de lembretes
            await buscarLembretes();
            return true;
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            toast({
                title: 'Erro ao criar lembrete',
                description: mensagemErro,
                variant: 'destructive'
            });
            return false;
        }
    }, [
        buscarLembretes,
        toast
    ]);
    /**
   * Atualiza um lembrete
   */ const atualizarLembrete = (0, _react.useCallback)(async (id, dados)=>{
        try {
            const response = await fetch(`/api/lembretes/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dados)
            });
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao atualizar lembrete');
            }
            toast({
                title: 'Lembrete atualizado',
                description: 'Lembrete atualizado com sucesso'
            });
            // Atualizar lista de lembretes
            await buscarLembretes();
            return true;
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            toast({
                title: 'Erro ao atualizar lembrete',
                description: mensagemErro,
                variant: 'destructive'
            });
            return false;
        }
    }, [
        buscarLembretes,
        toast
    ]);
    /**
   * Remove um lembrete
   */ const removerLembrete = (0, _react.useCallback)(async (id)=>{
        try {
            const response = await fetch(`/api/lembretes/${id}`, {
                method: 'DELETE'
            });
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao remover lembrete');
            }
            toast({
                title: 'Lembrete removido',
                description: 'Lembrete removido com sucesso'
            });
            // Atualizar lista de lembretes
            await buscarLembretes();
            return true;
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            toast({
                title: 'Erro ao remover lembrete',
                description: mensagemErro,
                variant: 'destructive'
            });
            return false;
        }
    }, [
        buscarLembretes,
        toast
    ]);
    /**
   * Executa ação em um lembrete
   */ const executarAcaoLembrete = (0, _react.useCallback)(async (id, acao, dados)=>{
        try {
            const response = await fetch(`/api/lembretes/${id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    acao,
                    ...dados
                })
            });
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao executar ação');
            }
            toast({
                title: 'Ação executada',
                description: data.mensagem || 'Ação executada com sucesso'
            });
            // Atualizar lista de lembretes
            await buscarLembretes();
            return true;
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            toast({
                title: 'Erro ao executar ação',
                description: mensagemErro,
                variant: 'destructive'
            });
            return false;
        }
    }, [
        buscarLembretes,
        toast
    ]);
    /**
   * Remove lembretes em lote
   */ const removerLembretesLote = (0, _react.useCallback)(async (acao, parametros = {})=>{
        try {
            const params = new URLSearchParams({
                acao,
                ...parametros
            });
            const response = await fetch(`/api/lembretes?${params.toString()}`, {
                method: 'DELETE'
            });
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao remover lembretes');
            }
            toast({
                title: 'Lembretes removidos',
                description: data.mensagem || 'Lembretes removidos com sucesso'
            });
            // Atualizar lista de lembretes
            await buscarLembretes();
            return true;
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            toast({
                title: 'Erro ao remover lembretes',
                description: mensagemErro,
                variant: 'destructive'
            });
            return false;
        }
    }, [
        buscarLembretes,
        toast
    ]);
    // Carregar lembretes na inicialização
    (0, _react.useEffect)(()=>{
        buscarLembretes();
    }, [
        buscarLembretes
    ]);
    return {
        lembretes,
        paginacao,
        carregando,
        erro,
        buscarLembretes,
        buscarLembrete,
        criarLembrete,
        atualizarLembrete,
        removerLembrete,
        executarAcaoLembrete,
        removerLembretesLote
    };
}
function useAgendadorLembretes() {
    const [status, setStatus] = (0, _react.useState)(null);
    const [carregando, setCarregando] = (0, _react.useState)(false);
    const [erro, setErro] = (0, _react.useState)(null);
    const { toast } = (0, _usetoast.useToast)();
    /**
   * Busca o status do agendador
   */ const buscarStatus = (0, _react.useCallback)(async ()=>{
        setCarregando(true);
        setErro(null);
        try {
            const response = await fetch('/api/lembretes/agendamento');
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao buscar status do agendador');
            }
            setStatus(data.dados);
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            setErro(mensagemErro);
            toast({
                title: 'Erro ao buscar status',
                description: mensagemErro,
                variant: 'destructive'
            });
        } finally{
            setCarregando(false);
        }
    }, [
        toast
    ]);
    /**
   * Atualiza a configuração do agendador
   */ const atualizarConfiguracao = (0, _react.useCallback)(async (configuracao)=>{
        try {
            const response = await fetch('/api/lembretes/agendamento', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(configuracao)
            });
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao atualizar configuração');
            }
            toast({
                title: 'Configuração atualizada',
                description: 'Configuração do agendador atualizada com sucesso'
            });
            // Atualizar status
            await buscarStatus();
            return true;
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            toast({
                title: 'Erro ao atualizar configuração',
                description: mensagemErro,
                variant: 'destructive'
            });
            return false;
        }
    }, [
        buscarStatus,
        toast
    ]);
    /**
   * Executa ação no agendador
   */ const executarAcao = (0, _react.useCallback)(async (acao, dados)=>{
        try {
            const response = await fetch('/api/lembretes/agendamento', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    acao,
                    ...dados
                })
            });
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.erro || 'Erro ao executar ação');
            }
            toast({
                title: 'Ação executada',
                description: data.mensagem || 'Ação executada com sucesso'
            });
            // Atualizar status
            await buscarStatus();
            return true;
        } catch (error) {
            const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';
            toast({
                title: 'Erro ao executar ação',
                description: mensagemErro,
                variant: 'destructive'
            });
            return false;
        }
    }, [
        buscarStatus,
        toast
    ]);
    // Carregar status na inicialização
    (0, _react.useEffect)(()=>{
        buscarStatus();
    }, [
        buscarStatus
    ]);
    return {
        status,
        carregando,
        erro,
        buscarStatus,
        atualizarConfiguracao,
        executarAcao
    };
}

//# sourceMappingURL=data:application/json;base64,