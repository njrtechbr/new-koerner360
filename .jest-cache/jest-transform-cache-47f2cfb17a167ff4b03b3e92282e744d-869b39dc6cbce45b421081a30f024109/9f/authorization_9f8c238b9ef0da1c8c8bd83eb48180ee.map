{"version":3,"names":["comAutorizacao","cov_194l8g8nby","f","s","registrarTentativaAcesso","temAlgumaPermissao","temPermissao","temTodasPermissoes","verificarAutorizacao","verificarPermissaoAPI","PERMISSOES_POR_TIPO","ADMIN","GESTOR","ATENDENTE","PERMISSOES_API","GET","POST","PUT","PATCH","DELETE","usuario","permissao","permissoesUsuario","b","userType","includes","permissoes","some","every","obterPermissoesNecessarias","rota","metodo","rotaNormalizada","replace","permissoesRota","request","permissoesNecessarias","session","_server","getServerSession","user","autorizado","erro","nextUrl","pathname","method","length","temPermissoes","join","error","console","handler","context","Response","JSON","stringify","codigo","status","headers","sucesso","resposta","ip","userAgent","motivo","logEntry","timestamp","Date","toISOString","id","email","tipo","log"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\auth\\authorization.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { getServerSession } from '@/lib/auth/server';\nimport { TipoUsuario } from '@prisma/client';\n\n// Definição de permissões por tipo de usuário (mesmo do hook)\nconst PERMISSOES_POR_TIPO: Record<TipoUsuario, string[]> = {\n  ADMIN: [\n    // Usuários\n    'gerenciar_usuarios',\n    'criar_usuarios',\n    'editar_usuarios',\n    'excluir_usuarios',\n    'ativar_usuarios',\n    'desativar_usuarios',\n    'redefinir_senha_usuarios',\n    'visualizar_usuarios',\n    'importar_usuarios',\n    'exportar_usuarios',\n\n    // Atendentes\n    'gerenciar_atendentes',\n\n    // Sistema\n    'visualizar_relatorios',\n    'gerenciar_sistema',\n    'visualizar_dashboard_admin',\n    'gerenciar_feedbacks',\n    'gerenciar_avaliacoes',\n    'gerenciar_gamificacao',\n  ],\n  GESTOR: [\n    // Usuários (limitado)\n    'visualizar_usuarios',\n    'criar_usuarios',\n    'editar_usuarios',\n    'ativar_usuarios',\n    'desativar_usuarios',\n    'exportar_usuarios',\n\n    // Atendentes\n    'gerenciar_atendentes',\n\n    // Sistema\n    'visualizar_relatorios',\n    'visualizar_dashboard_gestor',\n    'gerenciar_feedbacks',\n    'gerenciar_avaliacoes',\n    'visualizar_gamificacao',\n  ],\n  ATENDENTE: [\n    // Usuários (apenas visualização)\n    'visualizar_usuarios',\n\n    // Sistema\n    'visualizar_dashboard_atendente',\n    'criar_feedbacks',\n    'visualizar_avaliacoes_proprias',\n    'visualizar_gamificacao_propria',\n  ],\n};\n\n// Mapeamento de rotas da API para permissões necessárias\nconst PERMISSOES_API: Record<string, { [method: string]: string[] }> = {\n  '/api/usuarios': {\n    GET: ['visualizar_usuarios'],\n    POST: ['criar_usuarios'],\n  },\n  '/api/usuarios/[id]': {\n    GET: ['visualizar_usuarios'],\n    PUT: ['editar_usuarios'],\n    PATCH: ['editar_usuarios'],\n    DELETE: ['excluir_usuarios'],\n  },\n  '/api/usuarios/[id]/ativar': {\n    PATCH: ['ativar_usuarios'],\n  },\n  '/api/usuarios/[id]/senha': {\n    PUT: ['redefinir_senha_usuarios'],\n    PATCH: ['redefinir_senha_usuarios'],\n  },\n  '/api/usuarios/importar': {\n    POST: ['importar_usuarios'],\n  },\n  '/api/usuarios/exportar': {\n    GET: ['exportar_usuarios'],\n    POST: ['exportar_usuarios'],\n  },\n};\n\ninterface UsuarioSessao {\n  id: string;\n  email: string;\n  nome: string;\n  userType: TipoUsuario;\n}\n\n/**\n * Verifica se o usuário tem uma permissão específica\n */\nexport function temPermissao(\n  usuario: UsuarioSessao,\n  permissao: string\n): boolean {\n  const permissoesUsuario = PERMISSOES_POR_TIPO[usuario.userType] || [];\n  return permissoesUsuario.includes(permissao);\n}\n\n/**\n * Verifica se o usuário tem pelo menos uma das permissões fornecidas\n */\nexport function temAlgumaPermissao(\n  usuario: UsuarioSessao,\n  permissoes: string[]\n): boolean {\n  return permissoes.some(permissao => temPermissao(usuario, permissao));\n}\n\n/**\n * Verifica se o usuário tem todas as permissões fornecidas\n */\nexport function temTodasPermissoes(\n  usuario: UsuarioSessao,\n  permissoes: string[]\n): boolean {\n  return permissoes.every(permissao => temPermissao(usuario, permissao));\n}\n\n/**\n * Obtém as permissões necessárias para uma rota e método específicos\n */\nfunction obterPermissoesNecessarias(rota: string, metodo: string): string[] {\n  // Normalizar a rota para corresponder ao padrão\n  const rotaNormalizada = rota.replace(\n    /\\/api\\/usuarios\\/[^/]+(?=\\/|$)/,\n    '/api/usuarios/[id]'\n  );\n\n  const permissoesRota = PERMISSOES_API[rotaNormalizada];\n  if (!permissoesRota) {\n    return []; // Rota não protegida\n  }\n\n  return permissoesRota[metodo] || [];\n}\n\n/**\n * Middleware de autorização para rotas da API\n */\nexport async function verificarAutorizacao(\n  request: NextRequest,\n  permissoesNecessarias?: string[]\n): Promise<{ autorizado: boolean; usuario?: UsuarioSessao; erro?: string }> {\n  try {\n    // Obter sessão do usuário\n    const session = await getServerSession();\n\n    if (!session?.user) {\n      return {\n        autorizado: false,\n        erro: 'Usuário não autenticado',\n      };\n    }\n\n    const usuario = session.user as UsuarioSessao;\n\n    // Se não há permissões específicas, verificar pela rota\n    if (!permissoesNecessarias) {\n      const rota = request.nextUrl.pathname;\n      const metodo = request.method;\n      permissoesNecessarias = obterPermissoesNecessarias(rota, metodo);\n    }\n\n    // Se não há permissões necessárias, permitir acesso\n    if (!permissoesNecessarias || permissoesNecessarias.length === 0) {\n      return {\n        autorizado: true,\n        usuario,\n      };\n    }\n\n    // Verificar se o usuário tem as permissões necessárias\n    const temPermissoes = temAlgumaPermissao(usuario, permissoesNecessarias);\n\n    if (!temPermissoes) {\n      return {\n        autorizado: false,\n        usuario,\n        erro: `Permissões insuficientes. Necessárias: ${permissoesNecessarias.join(', ')}`,\n      };\n    }\n\n    return {\n      autorizado: true,\n      usuario,\n    };\n  } catch (error) {\n    console.error('Erro na verificação de autorização:', error);\n    return {\n      autorizado: false,\n      erro: 'Erro interno na verificação de autorização',\n    };\n  }\n}\n\n/**\n * Decorator para proteger rotas da API\n */\nexport function comAutorizacao(permissoes?: string[]) {\n  return function (handler: Function) {\n    return async function (request: NextRequest, context: any) {\n      const { autorizado, usuario, erro } = await verificarAutorizacao(\n        request,\n        permissoes\n      );\n\n      if (!autorizado) {\n        return new Response(\n          JSON.stringify({\n            erro: erro || 'Acesso negado',\n            codigo: 'ACESSO_NEGADO',\n          }),\n          {\n            status: usuario ? 403 : 401,\n            headers: { 'Content-Type': 'application/json' },\n          }\n        );\n      }\n\n      // Adicionar usuário ao contexto\n      context.usuario = usuario;\n\n      return handler(request, context);\n    };\n  };\n}\n\n/**\n * Utilitário para verificar permissões em handlers de API\n */\nexport async function verificarPermissaoAPI(\n  request: NextRequest,\n  permissoes: string[]\n): Promise<{ sucesso: boolean; usuario?: UsuarioSessao; resposta?: Response }> {\n  const { autorizado, usuario, erro } = await verificarAutorizacao(\n    request,\n    permissoes\n  );\n\n  if (!autorizado) {\n    return {\n      sucesso: false,\n      resposta: new Response(\n        JSON.stringify({\n          erro: erro || 'Acesso negado',\n          codigo: 'ACESSO_NEGADO',\n        }),\n        {\n          status: usuario ? 403 : 401,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      ),\n    };\n  }\n\n  return {\n    sucesso: true,\n    usuario,\n  };\n}\n\n/**\n * Registrar tentativa de acesso não autorizado para auditoria\n */\nexport async function registrarTentativaAcesso({\n  usuario,\n  rota,\n  metodo,\n  ip,\n  userAgent,\n  autorizado,\n  motivo,\n}: {\n  usuario?: UsuarioSessao;\n  rota: string;\n  metodo: string;\n  ip?: string;\n  userAgent?: string;\n  autorizado: boolean;\n  motivo?: string;\n}) {\n  try {\n    // Aqui você pode implementar o log de auditoria\n    // Por exemplo, salvar em banco de dados, arquivo de log, etc.\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      usuario: usuario\n        ? {\n            id: usuario.id,\n            email: usuario.email,\n            tipo: usuario.userType,\n          }\n        : null,\n      rota,\n      metodo,\n      ip,\n      userAgent,\n      autorizado,\n      motivo,\n    };\n\n    console.log('Tentativa de acesso:', JSON.stringify(logEntry, null, 2));\n\n    // TODO: Implementar persistência do log de auditoria\n    // await salvarLogAuditoria(logEntry);\n  } catch (error) {\n    console.error('Erro ao registrar tentativa de acesso:', error);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}