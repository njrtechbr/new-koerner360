{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\__tests__\\lembretes.test.ts"],"sourcesContent":["import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { LembretesService } from '../lembretes';\nimport { TipoLembrete, StatusLembrete } from '../../types/lembrete';\n\n// Mock do Prisma\nconst mockPrisma = {\n  lembrete: {\n    findMany: vi.fn(),\n    findUnique: vi.fn(),\n    create: vi.fn(),\n    update: vi.fn(),\n    delete: vi.fn(),\n    deleteMany: vi.fn(),\n    count: vi.fn(),\n  },\n  usuario: {\n    findMany: vi.fn(),\n  },\n  avaliacao: {\n    findMany: vi.fn(),\n  },\n};\n\n// Mock do serviço de e-mail\nconst mockEmailService = {\n  enviarEmail: vi.fn(),\n  enviarLembrete: vi.fn(),\n};\n\n// Mock dos lembretes de teste\nconst mockLembrete = {\n  id: '1',\n  usuarioId: 'user1',\n  avaliacaoId: 'aval1',\n  tipo: 'prazo_vencimento' as TipoLembrete,\n  status: 'pendente' as StatusLembrete,\n  titulo: 'Lembrete de Prazo',\n  mensagem: 'Sua avaliação vence em 3 dias.',\n  dataEnvio: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),\n  dataEnviado: null,\n  tentativas: 0,\n  maxTentativas: 3,\n  intervaloTentativas: 60,\n  ultimaFalha: null,\n  metadados: {\n    nomeAvaliacao: 'Avaliação Anual 2024',\n    prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    avaliador: 'João Silva',\n    diasAntecedencia: 3,\n  },\n  criadoEm: new Date().toISOString(),\n  atualizadoEm: new Date().toISOString(),\n};\n\nconst mockLembretes = [\n  mockLembrete,\n  {\n    ...mockLembrete,\n    id: '2',\n    tipo: 'avaliacao_pendente' as TipoLembrete,\n    status: 'enviado' as StatusLembrete,\n    dataEnviado: new Date().toISOString(),\n    tentativas: 1,\n  },\n  {\n    ...mockLembrete,\n    id: '3',\n    tipo: 'followup' as TipoLembrete,\n    status: 'falhado' as StatusLembrete,\n    tentativas: 3,\n    ultimaFalha: 'Erro de conexão SMTP',\n  },\n];\n\nconst mockEstatisticas = {\n  total: 50,\n  pendentes: 15,\n  enviados: 30,\n  falhados: 5,\n  porTipo: {\n    prazo_vencimento: 20,\n    avaliacao_pendente: 15,\n    followup: 10,\n    personalizado: 5,\n  },\n  porStatus: {\n    pendente: 15,\n    enviado: 30,\n    falhado: 5,\n  },\n  taxaSucesso: 85.7,\n  mediaTempoEnvio: 2.5,\n};\n\ndescribe('LembretesService', () => {\n  let service: LembretesService;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    service = new LembretesService(mockPrisma as any, mockEmailService as any);\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  describe('buscarLembretes', () => {\n    it('deve buscar lembretes com filtros padrão', async () => {\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce(mockLembretes);\n      mockPrisma.lembrete.count.mockResolvedValueOnce(3);\n\n      const resultado = await service.buscarLembretes();\n\n      expect(mockPrisma.lembrete.findMany).toHaveBeenCalledWith({\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n            },\n          },\n          avaliacao: {\n            select: {\n              id: true,\n              titulo: true,\n              prazo: true,\n              status: true,\n            },\n          },\n        },\n        orderBy: {\n          dataEnvio: 'asc',\n        },\n        skip: 0,\n        take: 50,\n      });\n\n      expect(resultado.lembretes).toEqual(mockLembretes);\n      expect(resultado.total).toBe(3);\n    });\n\n    it('deve aplicar filtros específicos', async () => {\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce([mockLembrete]);\n      mockPrisma.lembrete.count.mockResolvedValueOnce(1);\n\n      const filtros = {\n        usuarioId: 'user1',\n        avaliacaoId: 'aval1',\n        tipo: 'prazo_vencimento' as TipoLembrete,\n        status: 'pendente' as StatusLembrete,\n        dataInicio: '2024-01-01',\n        dataFim: '2024-12-31',\n        pagina: 2,\n        limite: 10,\n      };\n\n      await service.buscarLembretes(filtros);\n\n      expect(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: {\n            usuarioId: 'user1',\n            avaliacaoId: 'aval1',\n            tipo: 'prazo_vencimento',\n            status: 'pendente',\n            dataEnvio: {\n              gte: new Date('2024-01-01'),\n              lte: new Date('2024-12-31'),\n            },\n          },\n          skip: 10,\n          take: 10,\n        })\n      );\n    });\n\n    it('deve aplicar busca por texto', async () => {\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce([mockLembrete]);\n      mockPrisma.lembrete.count.mockResolvedValueOnce(1);\n\n      await service.buscarLembretes({ busca: 'avaliação' });\n\n      expect(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: {\n            OR: [\n              { titulo: { contains: 'avaliação', mode: 'insensitive' } },\n              { mensagem: { contains: 'avaliação', mode: 'insensitive' } },\n            ],\n          },\n        })\n      );\n    });\n\n    it('deve aplicar ordenação personalizada', async () => {\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce(mockLembretes);\n      mockPrisma.lembrete.count.mockResolvedValueOnce(3);\n\n      await service.buscarLembretes({\n        ordenarPor: 'tentativas',\n        ordem: 'desc',\n      });\n\n      expect(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          orderBy: {\n            tentativas: 'desc',\n          },\n        })\n      );\n    });\n  });\n\n  describe('buscarLembrete', () => {\n    it('deve buscar lembrete por ID', async () => {\n      mockPrisma.lembrete.findUnique.mockResolvedValueOnce(mockLembrete);\n\n      const resultado = await service.buscarLembrete('1');\n\n      expect(mockPrisma.lembrete.findUnique).toHaveBeenCalledWith({\n        where: { id: '1' },\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n            },\n          },\n          avaliacao: {\n            select: {\n              id: true,\n              titulo: true,\n              prazo: true,\n              status: true,\n            },\n          },\n        },\n      });\n\n      expect(resultado).toEqual(mockLembrete);\n    });\n\n    it('deve retornar null se lembrete não encontrado', async () => {\n      mockPrisma.lembrete.findUnique.mockResolvedValueOnce(null);\n\n      const resultado = await service.buscarLembrete('999');\n\n      expect(resultado).toBeNull();\n    });\n  });\n\n  describe('criarLembrete', () => {\n    it('deve criar novo lembrete', async () => {\n      const dadosLembrete = {\n        usuarioId: 'user1',\n        avaliacaoId: 'aval1',\n        tipo: 'prazo_vencimento' as TipoLembrete,\n        titulo: 'Novo Lembrete',\n        mensagem: 'Mensagem do lembrete',\n        dataEnvio: new Date(Date.now() + 24 * 60 * 60 * 1000),\n        metadados: {\n          diasAntecedencia: 1,\n        },\n      };\n\n      mockPrisma.lembrete.create.mockResolvedValueOnce({\n        ...mockLembrete,\n        ...dadosLembrete,\n      });\n\n      const resultado = await service.criarLembrete(dadosLembrete);\n\n      expect(mockPrisma.lembrete.create).toHaveBeenCalledWith({\n        data: {\n          ...dadosLembrete,\n          status: 'pendente',\n          tentativas: 0,\n          maxTentativas: 3,\n          intervaloTentativas: 60,\n        },\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n            },\n          },\n          avaliacao: {\n            select: {\n              id: true,\n              titulo: true,\n              prazo: true,\n              status: true,\n            },\n          },\n        },\n      });\n\n      expect(resultado.tipo).toBe('prazo_vencimento');\n      expect(resultado.status).toBe('pendente');\n    });\n\n    it('deve aplicar configurações padrão', async () => {\n      const dadosMinimos = {\n        usuarioId: 'user1',\n        tipo: 'personalizado' as TipoLembrete,\n        titulo: 'Lembrete Simples',\n        mensagem: 'Mensagem simples',\n        dataEnvio: new Date(),\n      };\n\n      mockPrisma.lembrete.create.mockResolvedValueOnce({\n        ...mockLembrete,\n        ...dadosMinimos,\n      });\n\n      await service.criarLembrete(dadosMinimos);\n\n      expect(mockPrisma.lembrete.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          data: expect.objectContaining({\n            maxTentativas: 3,\n            intervaloTentativas: 60,\n            status: 'pendente',\n            tentativas: 0,\n          }),\n        })\n      );\n    });\n  });\n\n  describe('atualizarLembrete', () => {\n    it('deve atualizar lembrete existente', async () => {\n      const dadosAtualizacao = {\n        titulo: 'Título Atualizado',\n        mensagem: 'Mensagem atualizada',\n        dataEnvio: new Date(Date.now() + 48 * 60 * 60 * 1000),\n      };\n\n      const lembreteAtualizado = {\n        ...mockLembrete,\n        ...dadosAtualizacao,\n      };\n\n      mockPrisma.lembrete.update.mockResolvedValueOnce(lembreteAtualizado);\n\n      const resultado = await service.atualizarLembrete('1', dadosAtualizacao);\n\n      expect(mockPrisma.lembrete.update).toHaveBeenCalledWith({\n        where: { id: '1' },\n        data: dadosAtualizacao,\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n            },\n          },\n          avaliacao: {\n            select: {\n              id: true,\n              titulo: true,\n              prazo: true,\n              status: true,\n            },\n          },\n        },\n      });\n\n      expect(resultado.titulo).toBe('Título Atualizado');\n    });\n\n    it('deve lançar erro se lembrete não encontrado', async () => {\n      mockPrisma.lembrete.update.mockRejectedValueOnce(\n        new Error('Record not found')\n      );\n\n      await expect(\n        service.atualizarLembrete('999', { titulo: 'Novo título' })\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('removerLembrete', () => {\n    it('deve remover lembrete', async () => {\n      mockPrisma.lembrete.delete.mockResolvedValueOnce(mockLembrete);\n\n      const resultado = await service.removerLembrete('1');\n\n      expect(mockPrisma.lembrete.delete).toHaveBeenCalledWith({\n        where: { id: '1' },\n      });\n\n      expect(resultado).toEqual(mockLembrete);\n    });\n\n    it('deve lançar erro se lembrete não encontrado', async () => {\n      mockPrisma.lembrete.delete.mockRejectedValueOnce(\n        new Error('Record not found')\n      );\n\n      await expect(service.removerLembrete('999')).rejects.toThrow();\n    });\n  });\n\n  describe('removerLembretes', () => {\n    it('deve remover múltiplos lembretes', async () => {\n      mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({ count: 3 });\n\n      const resultado = await service.removerLembretes(['1', '2', '3']);\n\n      expect(mockPrisma.lembrete.deleteMany).toHaveBeenCalledWith({\n        where: {\n          id: {\n            in: ['1', '2', '3'],\n          },\n        },\n      });\n\n      expect(resultado.removidos).toBe(3);\n    });\n\n    it('deve remover lembretes com filtros', async () => {\n      mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({ count: 5 });\n\n      const filtros = {\n        status: 'falhado' as StatusLembrete,\n        dataInicio: '2024-01-01',\n        dataFim: '2024-06-30',\n      };\n\n      await service.removerLembretes(undefined, filtros);\n\n      expect(mockPrisma.lembrete.deleteMany).toHaveBeenCalledWith({\n        where: {\n          status: 'falhado',\n          dataEnvio: {\n            gte: new Date('2024-01-01'),\n            lte: new Date('2024-06-30'),\n          },\n        },\n      });\n    });\n  });\n\n  describe('reenviarLembrete', () => {\n    it('deve reenviar lembrete com sucesso', async () => {\n      const lembreteParaReenvio = {\n        ...mockLembrete,\n        status: 'falhado' as StatusLembrete,\n        tentativas: 1,\n      };\n\n      mockPrisma.lembrete.findUnique.mockResolvedValueOnce(lembreteParaReenvio);\n      mockEmailService.enviarLembrete.mockResolvedValueOnce(true);\n      mockPrisma.lembrete.update.mockResolvedValueOnce({\n        ...lembreteParaReenvio,\n        status: 'enviado',\n        dataEnviado: new Date(),\n        tentativas: 2,\n      });\n\n      const resultado = await service.reenviarLembrete('1');\n\n      expect(mockEmailService.enviarLembrete).toHaveBeenCalledWith(lembreteParaReenvio);\n      expect(mockPrisma.lembrete.update).toHaveBeenCalledWith({\n        where: { id: '1' },\n        data: {\n          status: 'enviado',\n          dataEnviado: expect.any(Date),\n          tentativas: 2,\n          ultimaFalha: null,\n        },\n      });\n\n      expect(resultado.status).toBe('enviado');\n      expect(resultado.tentativas).toBe(2);\n    });\n\n    it('deve falhar ao atingir máximo de tentativas', async () => {\n      const lembreteEsgotado = {\n        ...mockLembrete,\n        status: 'falhado' as StatusLembrete,\n        tentativas: 3,\n        maxTentativas: 3,\n      };\n\n      mockPrisma.lembrete.findUnique.mockResolvedValueOnce(lembreteEsgotado);\n\n      await expect(service.reenviarLembrete('1')).rejects.toThrow(\n        'Máximo de tentativas atingido'\n      );\n    });\n\n    it('deve registrar falha no envio', async () => {\n      const lembreteParaReenvio = {\n        ...mockLembrete,\n        status: 'pendente' as StatusLembrete,\n        tentativas: 1,\n      };\n\n      mockPrisma.lembrete.findUnique.mockResolvedValueOnce(lembreteParaReenvio);\n      mockEmailService.enviarLembrete.mockRejectedValueOnce(\n        new Error('Falha no envio de e-mail')\n      );\n      mockPrisma.lembrete.update.mockResolvedValueOnce({\n        ...lembreteParaReenvio,\n        status: 'falhado',\n        tentativas: 2,\n        ultimaFalha: 'Falha no envio de e-mail',\n      });\n\n      const resultado = await service.reenviarLembrete('1');\n\n      expect(mockPrisma.lembrete.update).toHaveBeenCalledWith({\n        where: { id: '1' },\n        data: {\n          status: 'falhado',\n          tentativas: 2,\n          ultimaFalha: 'Falha no envio de e-mail',\n        },\n      });\n\n      expect(resultado.status).toBe('falhado');\n      expect(resultado.ultimaFalha).toBe('Falha no envio de e-mail');\n    });\n  });\n\n  describe('reenviarLembretes', () => {\n    it('deve reenviar múltiplos lembretes', async () => {\n      const lembretesFalhados = [\n        { ...mockLembrete, id: '1', status: 'falhado' as StatusLembrete },\n        { ...mockLembrete, id: '2', status: 'falhado' as StatusLembrete },\n      ];\n\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesFalhados);\n      mockEmailService.enviarLembrete\n        .mockResolvedValueOnce(true)\n        .mockResolvedValueOnce(true);\n      mockPrisma.lembrete.update\n        .mockResolvedValueOnce({ ...lembretesFalhados[0], status: 'enviado' })\n        .mockResolvedValueOnce({ ...lembretesFalhados[1], status: 'enviado' });\n\n      const resultado = await service.reenviarLembretes(['1', '2']);\n\n      expect(resultado.reenviados).toBe(2);\n      expect(resultado.falhados).toBe(0);\n    });\n\n    it('deve contar falhas no reenvio em lote', async () => {\n      const lembretesFalhados = [\n        { ...mockLembrete, id: '1', status: 'falhado' as StatusLembrete },\n        { ...mockLembrete, id: '2', status: 'falhado' as StatusLembrete },\n      ];\n\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesFalhados);\n      mockEmailService.enviarLembrete\n        .mockResolvedValueOnce(true)\n        .mockRejectedValueOnce(new Error('Falha'));\n      mockPrisma.lembrete.update\n        .mockResolvedValueOnce({ ...lembretesFalhados[0], status: 'enviado' })\n        .mockResolvedValueOnce({ ...lembretesFalhados[1], status: 'falhado' });\n\n      const resultado = await service.reenviarLembretes(['1', '2']);\n\n      expect(resultado.reenviados).toBe(1);\n      expect(resultado.falhados).toBe(1);\n    });\n  });\n\n  describe('marcarComoEnviado', () => {\n    it('deve marcar lembrete como enviado', async () => {\n      const lembreteEnviado = {\n        ...mockLembrete,\n        status: 'enviado' as StatusLembrete,\n        dataEnviado: new Date(),\n        tentativas: 1,\n      };\n\n      mockPrisma.lembrete.update.mockResolvedValueOnce(lembreteEnviado);\n\n      const resultado = await service.marcarComoEnviado('1');\n\n      expect(mockPrisma.lembrete.update).toHaveBeenCalledWith({\n        where: { id: '1' },\n        data: {\n          status: 'enviado',\n          dataEnviado: expect.any(Date),\n          tentativas: expect.any(Number),\n        },\n      });\n\n      expect(resultado.status).toBe('enviado');\n      expect(resultado.dataEnviado).toBeTruthy();\n    });\n  });\n\n  describe('reagendarLembrete', () => {\n    it('deve reagendar lembrete para nova data', async () => {\n      const novaData = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);\n      const lembreteReagendado = {\n        ...mockLembrete,\n        dataEnvio: novaData,\n        status: 'pendente' as StatusLembrete,\n        tentativas: 0,\n      };\n\n      mockPrisma.lembrete.update.mockResolvedValueOnce(lembreteReagendado);\n\n      const resultado = await service.reagendarLembrete('1', novaData);\n\n      expect(mockPrisma.lembrete.update).toHaveBeenCalledWith({\n        where: { id: '1' },\n        data: {\n          dataEnvio: novaData,\n          status: 'pendente',\n          tentativas: 0,\n          dataEnviado: null,\n          ultimaFalha: null,\n        },\n      });\n\n      expect(resultado.dataEnvio).toEqual(novaData.toISOString());\n      expect(resultado.status).toBe('pendente');\n    });\n\n    it('deve validar data futura', async () => {\n      const dataPassada = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n      await expect(\n        service.reagendarLembrete('1', dataPassada)\n      ).rejects.toThrow('Data de envio deve ser futura');\n    });\n  });\n\n  describe('buscarLembretesPendentes', () => {\n    it('deve buscar lembretes prontos para envio', async () => {\n      const lembretesPendentes = [\n        {\n          ...mockLembrete,\n          dataEnvio: new Date(Date.now() - 60 * 1000), // 1 minuto atrás\n        },\n      ];\n\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesPendentes);\n\n      const resultado = await service.buscarLembretesPendentes();\n\n      expect(mockPrisma.lembrete.findMany).toHaveBeenCalledWith({\n        where: {\n          status: 'pendente',\n          dataEnvio: {\n            lte: expect.any(Date),\n          },\n        },\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n            },\n          },\n          avaliacao: {\n            select: {\n              id: true,\n              titulo: true,\n              prazo: true,\n              status: true,\n            },\n          },\n        },\n        orderBy: {\n          dataEnvio: 'asc',\n        },\n      });\n\n      expect(resultado).toEqual(lembretesPendentes);\n    });\n\n    it('deve limitar quantidade de lembretes', async () => {\n      await service.buscarLembretesPendentes(10);\n\n      expect(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          take: 10,\n        })\n      );\n    });\n  });\n\n  describe('buscarEstatisticas', () => {\n    it('deve buscar estatísticas básicas', async () => {\n      mockPrisma.lembrete.count.mockImplementation(({ where }) => {\n        if (where?.status === 'pendente') return Promise.resolve(15);\n        if (where?.status === 'enviado') return Promise.resolve(30);\n        if (where?.status === 'falhado') return Promise.resolve(5);\n        return Promise.resolve(50);\n      });\n\n      const resultado = await service.buscarEstatisticas();\n\n      expect(resultado.total).toBe(50);\n      expect(resultado.pendentes).toBe(15);\n      expect(resultado.enviados).toBe(30);\n      expect(resultado.falhados).toBe(5);\n      expect(resultado.taxaSucesso).toBeCloseTo(85.7, 1);\n    });\n\n    it('deve buscar estatísticas com filtros', async () => {\n      const filtros = {\n        usuarioId: 'user1',\n        tipo: 'prazo_vencimento' as TipoLembrete,\n        dataInicio: '2024-01-01',\n        dataFim: '2024-12-31',\n      };\n\n      mockPrisma.lembrete.count.mockResolvedValueOnce(25);\n\n      await service.buscarEstatisticas(filtros);\n\n      expect(mockPrisma.lembrete.count).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: {\n            usuarioId: 'user1',\n            tipo: 'prazo_vencimento',\n            dataEnvio: {\n              gte: new Date('2024-01-01'),\n              lte: new Date('2024-12-31'),\n            },\n          },\n        })\n      );\n    });\n  });\n\n  describe('limparLembretesAntigos', () => {\n    it('deve remover lembretes antigos enviados', async () => {\n      mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({ count: 20 });\n\n      const resultado = await service.limparLembretesAntigos(60);\n\n      const dataLimite = new Date();\n      dataLimite.setDate(dataLimite.getDate() - 60);\n\n      expect(mockPrisma.lembrete.deleteMany).toHaveBeenCalledWith({\n        where: {\n          status: 'enviado',\n          dataEnviado: {\n            lt: expect.any(Date),\n          },\n        },\n      });\n\n      expect(resultado.removidos).toBe(20);\n    });\n\n    it('deve usar período padrão de 30 dias', async () => {\n      mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({ count: 15 });\n\n      await service.limparLembretesAntigos();\n\n      expect(mockPrisma.lembrete.deleteMany).toHaveBeenCalled();\n    });\n  });\n\n  describe('processarFilaEnvio', () => {\n    it('deve processar fila de lembretes pendentes', async () => {\n      const lembretesPendentes = [\n        { ...mockLembrete, id: '1' },\n        { ...mockLembrete, id: '2' },\n      ];\n\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesPendentes);\n      mockEmailService.enviarLembrete\n        .mockResolvedValueOnce(true)\n        .mockResolvedValueOnce(true);\n      mockPrisma.lembrete.update\n        .mockResolvedValueOnce({ ...lembretesPendentes[0], status: 'enviado' })\n        .mockResolvedValueOnce({ ...lembretesPendentes[1], status: 'enviado' });\n\n      const resultado = await service.processarFilaEnvio();\n\n      expect(resultado.processados).toBe(2);\n      expect(resultado.enviados).toBe(2);\n      expect(resultado.falhados).toBe(0);\n    });\n\n    it('deve tratar falhas no processamento', async () => {\n      const lembretesPendentes = [\n        { ...mockLembrete, id: '1' },\n        { ...mockLembrete, id: '2' },\n      ];\n\n      mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesPendentes);\n      mockEmailService.enviarLembrete\n        .mockResolvedValueOnce(true)\n        .mockRejectedValueOnce(new Error('Falha SMTP'));\n      mockPrisma.lembrete.update\n        .mockResolvedValueOnce({ ...lembretesPendentes[0], status: 'enviado' })\n        .mockResolvedValueOnce({ ...lembretesPendentes[1], status: 'falhado' });\n\n      const resultado = await service.processarFilaEnvio();\n\n      expect(resultado.processados).toBe(2);\n      expect(resultado.enviados).toBe(1);\n      expect(resultado.falhados).toBe(1);\n    });\n\n    it('deve respeitar limite de processamento', async () => {\n      await service.processarFilaEnvio(5);\n\n      expect(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          take: 5,\n        })\n      );\n    });\n  });\n\n  describe('Tratamento de Erros', () => {\n    it('deve tratar erro de conexão com banco', async () => {\n      mockPrisma.lembrete.findMany.mockRejectedValueOnce(\n        new Error('Database connection failed')\n      );\n\n      await expect(service.buscarLembretes()).rejects.toThrow(\n        'Database connection failed'\n      );\n    });\n\n    it('deve tratar erro de validação', async () => {\n      mockPrisma.lembrete.create.mockRejectedValueOnce(\n        new Error('Validation failed')\n      );\n\n      await expect(\n        service.criarLembrete({\n          usuarioId: 'user1',\n          tipo: 'personalizado',\n          titulo: 'Teste',\n          mensagem: 'Teste',\n          dataEnvio: new Date(),\n        })\n      ).rejects.toThrow('Validation failed');\n    });\n  });\n\n  describe('Performance', () => {\n    it('deve usar índices apropriados para consultas', async () => {\n      await service.buscarLembretes({\n        usuarioId: 'user1',\n        status: 'pendente',\n        tipo: 'prazo_vencimento',\n      });\n\n      // Verificar se a consulta usa campos indexados\n      expect(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            usuarioId: 'user1', // Campo indexado\n            status: 'pendente', // Campo indexado\n            tipo: 'prazo_vencimento', // Campo indexado\n          }),\n        })\n      );\n    });\n\n    it('deve limitar resultados para evitar sobrecarga', async () => {\n      await service.buscarLembretes({ limite: 1000 });\n\n      // Verificar se o limite é respeitado (máximo 100)\n      expect(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          take: 100, // Limite máximo aplicado\n        })\n      );\n    });\n  });\n});"],"names":["mockPrisma","lembrete","findMany","vi","fn","findUnique","create","update","delete","deleteMany","count","usuario","avaliacao","mockEmailService","enviarEmail","enviarLembrete","mockLembrete","id","usuarioId","avaliacaoId","tipo","status","titulo","mensagem","dataEnvio","Date","now","toISOString","dataEnviado","tentativas","maxTentativas","intervaloTentativas","ultimaFalha","metadados","nomeAvaliacao","prazo","avaliador","diasAntecedencia","criadoEm","atualizadoEm","mockLembretes","mockEstatisticas","total","pendentes","enviados","falhados","porTipo","prazo_vencimento","avaliacao_pendente","followup","personalizado","porStatus","pendente","enviado","falhado","taxaSucesso","mediaTempoEnvio","describe","service","beforeEach","clearAllMocks","LembretesService","afterEach","resetAllMocks","it","mockResolvedValueOnce","resultado","buscarLembretes","expect","toHaveBeenCalledWith","include","select","nome","email","orderBy","skip","take","lembretes","toEqual","toBe","filtros","dataInicio","dataFim","pagina","limite","objectContaining","where","gte","lte","busca","OR","contains","mode","ordenarPor","ordem","buscarLembrete","toBeNull","dadosLembrete","criarLembrete","data","dadosMinimos","dadosAtualizacao","lembreteAtualizado","atualizarLembrete","mockRejectedValueOnce","Error","rejects","toThrow","removerLembrete","removerLembretes","in","removidos","undefined","lembreteParaReenvio","reenviarLembrete","any","lembreteEsgotado","lembretesFalhados","reenviarLembretes","reenviados","lembreteEnviado","marcarComoEnviado","Number","toBeTruthy","novaData","lembreteReagendado","reagendarLembrete","dataPassada","lembretesPendentes","buscarLembretesPendentes","mockImplementation","Promise","resolve","buscarEstatisticas","toBeCloseTo","limparLembretesAntigos","dataLimite","setDate","getDate","lt","toHaveBeenCalled","processarFilaEnvio","processados"],"mappings":"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"}