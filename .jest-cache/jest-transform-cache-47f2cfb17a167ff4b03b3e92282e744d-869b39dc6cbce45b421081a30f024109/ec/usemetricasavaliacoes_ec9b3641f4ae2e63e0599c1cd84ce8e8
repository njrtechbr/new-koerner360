8cf38ec8506f0d48e205f7c9a66e8b60
"use strict";

/* istanbul ignore next */
function cov_153a5rdrl7() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-metricas-avaliacoes.ts";
  var hash = "f377a1e86eb85713debdbd2352305bd663adc784";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-metricas-avaliacoes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 37
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "6": {
        start: {
          line: 19,
          column: 15
        },
        end: {
          line: 19,
          column: 31
        }
      },
      "7": {
        start: {
          line: 22,
          column: 36
        },
        end: {
          line: 22,
          column: 62
        }
      },
      "8": {
        start: {
          line: 23,
          column: 34
        },
        end: {
          line: 23,
          column: 58
        }
      },
      "9": {
        start: {
          line: 24,
          column: 42
        },
        end: {
          line: 24,
          column: 68
        }
      },
      "10": {
        start: {
          line: 25,
          column: 34
        },
        end: {
          line: 25,
          column: 61
        }
      },
      "11": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 26,
          column: 56
        }
      },
      "12": {
        start: {
          line: 27,
          column: 46
        },
        end: {
          line: 27,
          column: 83
        }
      },
      "13": {
        start: {
          line: 30,
          column: 30
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "14": {
        start: {
          line: 31,
          column: 25
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "16": {
        start: {
          line: 39,
          column: 30
        },
        end: {
          line: 39,
          column: 67
        }
      },
      "17": {
        start: {
          line: 39,
          column: 63
        },
        end: {
          line: 39,
          column: 65
        }
      },
      "18": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 80
        }
      },
      "19": {
        start: {
          line: 42,
          column: 21
        },
        end: {
          line: 42,
          column: 42
        }
      },
      "20": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "21": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 71
        }
      },
      "22": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 25
        }
      },
      "23": {
        start: {
          line: 50,
          column: 29
        },
        end: {
          line: 73,
          column: 6
        }
      },
      "24": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "25": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 29
        }
      },
      "26": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 27
        }
      },
      "27": {
        start: {
          line: 54,
          column: 36
        },
        end: {
          line: 54,
          column: 60
        }
      },
      "28": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 46
        }
      },
      "29": {
        start: {
          line: 56,
          column: 26
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "30": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 31
        }
      },
      "31": {
        start: {
          line: 64,
          column: 29
        },
        end: {
          line: 64,
          column: 85
        }
      },
      "32": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 61
        }
      },
      "33": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 59
        }
      },
      "34": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 30
        }
      },
      "35": {
        start: {
          line: 76,
          column: 28
        },
        end: {
          line: 99,
          column: 6
        }
      },
      "36": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "37": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 29
        }
      },
      "38": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 27
        }
      },
      "39": {
        start: {
          line: 80,
          column: 36
        },
        end: {
          line: 80,
          column: 60
        }
      },
      "40": {
        start: {
          line: 81,
          column: 26
        },
        end: {
          line: 87,
          column: 14
        }
      },
      "41": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 30
        }
      },
      "42": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 85
        }
      },
      "43": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 60
        }
      },
      "44": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 58
        }
      },
      "45": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 30
        }
      },
      "46": {
        start: {
          line: 102,
          column: 31
        },
        end: {
          line: 128,
          column: 6
        }
      },
      "47": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "48": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 29
        }
      },
      "49": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 27
        }
      },
      "50": {
        start: {
          line: 106,
          column: 36
        },
        end: {
          line: 106,
          column: 60
        }
      },
      "51": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "52": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 86
        }
      },
      "53": {
        start: {
          line: 110,
          column: 26
        },
        end: {
          line: 116,
          column: 14
        }
      },
      "54": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 34
        }
      },
      "55": {
        start: {
          line: 119,
          column: 29
        },
        end: {
          line: 119,
          column: 85
        }
      },
      "56": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 63
        }
      },
      "57": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 61
        }
      },
      "58": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 30
        }
      },
      "59": {
        start: {
          line: 131,
          column: 25
        },
        end: {
          line: 133,
          column: 10
        }
      },
      "60": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 23
        }
      },
      "61": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 143,
          column: 6
        }
      },
      "62": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "63": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 48
        }
      },
      "64": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 149,
          column: 11
        }
      },
      "65": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "66": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 44
        }
      },
      "67": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 163,
          column: 6
        }
      },
      "68": {
        start: {
          line: 166,
          column: 34
        },
        end: {
          line: 166,
          column: 58
        }
      },
      "69": {
        start: {
          line: 167,
          column: 34
        },
        end: {
          line: 167,
          column: 61
        }
      },
      "70": {
        start: {
          line: 168,
          column: 30
        },
        end: {
          line: 168,
          column: 56
        }
      },
      "71": {
        start: {
          line: 169,
          column: 26
        },
        end: {
          line: 201,
          column: 6
        }
      },
      "72": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "73": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 29
        }
      },
      "74": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 27
        }
      },
      "75": {
        start: {
          line: 173,
          column: 29
        },
        end: {
          line: 182,
          column: 14
        }
      },
      "76": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "77": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 65
        }
      },
      "78": {
        start: {
          line: 186,
          column: 25
        },
        end: {
          line: 186,
          column: 46
        }
      },
      "79": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "80": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 46
        }
      },
      "81": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 34
        }
      },
      "82": {
        start: {
          line: 192,
          column: 29
        },
        end: {
          line: 192,
          column: 85
        }
      },
      "83": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 31
        }
      },
      "84": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 58
        }
      },
      "85": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 30
        }
      },
      "86": {
        start: {
          line: 202,
          column: 4
        },
        end: {
          line: 206,
          column: 7
        }
      },
      "87": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 24
        }
      },
      "88": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 212,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 32
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "useMetricasAvaliacoes",
        decl: {
          start: {
            line: 20,
            column: 9
          },
          end: {
            line: 20,
            column: 30
          }
        },
        loc: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 164,
            column: 1
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 30,
            column: 54
          },
          end: {
            line: 30,
            column: 55
          }
        },
        loc: {
          start: {
            line: 30,
            column: 81
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 30
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 39,
            column: 58
          },
          end: {
            line: 39,
            column: 59
          }
        },
        loc: {
          start: {
            line: 39,
            column: 63
          },
          end: {
            line: 39,
            column: 65
          }
        },
        line: 39
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 50,
            column: 53
          },
          end: {
            line: 50,
            column: 54
          }
        },
        loc: {
          start: {
            line: 50,
            column: 70
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 50
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 76,
            column: 52
          },
          end: {
            line: 76,
            column: 53
          }
        },
        loc: {
          start: {
            line: 76,
            column: 82
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 76
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 102,
            column: 55
          },
          end: {
            line: 102,
            column: 56
          }
        },
        loc: {
          start: {
            line: 102,
            column: 82
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 102
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 131,
            column: 49
          },
          end: {
            line: 131,
            column: 50
          }
        },
        loc: {
          start: {
            line: 131,
            column: 53
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 131
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 136,
            column: 49
          },
          end: {
            line: 136,
            column: 50
          }
        },
        loc: {
          start: {
            line: 136,
            column: 59
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 136
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 145,
            column: 26
          },
          end: {
            line: 145,
            column: 27
          }
        },
        loc: {
          start: {
            line: 145,
            column: 30
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 145
      },
      "12": {
        name: "useRankingAtendentes",
        decl: {
          start: {
            line: 165,
            column: 9
          },
          end: {
            line: 165,
            column: 29
          }
        },
        loc: {
          start: {
            line: 165,
            column: 52
          },
          end: {
            line: 213,
            column: 1
          }
        },
        line: 165
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 169,
            column: 50
          },
          end: {
            line: 169,
            column: 51
          }
        },
        loc: {
          start: {
            line: 169,
            column: 60
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 169
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 202,
            column: 26
          },
          end: {
            line: 202,
            column: 27
          }
        },
        loc: {
          start: {
            line: 202,
            column: 30
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 202
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 66
          },
          end: {
            line: 30,
            column: 78
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 30,
            column: 76
          },
          end: {
            line: 30,
            column: 78
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 28
          },
          end: {
            line: 40,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 28
          },
          end: {
            line: 40,
            column: 43
          }
        }, {
          start: {
            line: 40,
            column: 47
          },
          end: {
            line: 40,
            column: 78
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 28
          },
          end: {
            line: 44,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 28
          },
          end: {
            line: 44,
            column: 40
          }
        }, {
          start: {
            line: 44,
            column: 44
          },
          end: {
            line: 44,
            column: 69
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 54,
            column: 36
          },
          end: {
            line: 54,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 36
          },
          end: {
            line: 54,
            column: 43
          }
        }, {
          start: {
            line: 54,
            column: 47
          },
          end: {
            line: 54,
            column: 60
          }
        }],
        line: 54
      },
      "6": {
        loc: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 64,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 52
          },
          end: {
            line: 64,
            column: 63
          }
        }, {
          start: {
            line: 64,
            column: 66
          },
          end: {
            line: 64,
            column: 85
          }
        }],
        line: 64
      },
      "7": {
        loc: {
          start: {
            line: 76,
            column: 68
          },
          end: {
            line: 76,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 76,
            column: 77
          },
          end: {
            line: 76,
            column: 79
          }
        }],
        line: 76
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 36
          },
          end: {
            line: 80,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 36
          },
          end: {
            line: 80,
            column: 43
          }
        }, {
          start: {
            line: 80,
            column: 47
          },
          end: {
            line: 80,
            column: 60
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 90,
            column: 29
          },
          end: {
            line: 90,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 52
          },
          end: {
            line: 90,
            column: 63
          }
        }, {
          start: {
            line: 90,
            column: 66
          },
          end: {
            line: 90,
            column: 85
          }
        }],
        line: 90
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 36
          },
          end: {
            line: 106,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 36
          },
          end: {
            line: 106,
            column: 43
          }
        }, {
          start: {
            line: 106,
            column: 47
          },
          end: {
            line: 106,
            column: 60
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 119,
            column: 29
          },
          end: {
            line: 119,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 52
          },
          end: {
            line: 119,
            column: 63
          }
        }, {
          start: {
            line: 119,
            column: 66
          },
          end: {
            line: 119,
            column: 85
          }
        }],
        line: 119
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "15": {
        loc: {
          start: {
            line: 165,
            column: 30
          },
          end: {
            line: 165,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 165,
            column: 39
          },
          end: {
            line: 165,
            column: 41
          }
        }],
        line: 165
      },
      "16": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "17": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "18": {
        loc: {
          start: {
            line: 192,
            column: 29
          },
          end: {
            line: 192,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 52
          },
          end: {
            line: 192,
            column: 63
          }
        }, {
          start: {
            line: 192,
            column: 66
          },
          end: {
            line: 192,
            column: 85
          }
        }],
        line: 192
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-metricas-avaliacoes.ts"],
      sourcesContent: ["import { useState, useEffect, useCallback } from 'react';\nimport { \n  MetricasAtendente, \n  MetricasPeriodo, \n  ComparativoTemporal, \n  FiltrosMetricas \n} from '@/lib/utils/metricas-avaliacoes';\n\n// Tipos para os dados da API\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message: string;\n  meta?: any;\n}\n\ninterface MetricasConsolidadas {\n  metricasGerais: MetricasPeriodo;\n  metricasPorAtendente: MetricasAtendente[];\n  ranking: MetricasAtendente[];\n}\n\ninterface UseMetricasAvaliacoesReturn {\n  // Estados\n  metricas: MetricasConsolidadas | null;\n  ranking: MetricasAtendente[];\n  comparativo: ComparativoTemporal | null;\n  loading: boolean;\n  error: string | null;\n  \n  // Fun\xE7\xF5es\n  buscarMetricas: (filtros?: FiltrosMetricas) => Promise<void>;\n  buscarRanking: (filtros?: FiltrosMetricas, limite?: number) => Promise<void>;\n  gerarComparativo: (periodos: any[], filtros?: FiltrosMetricas) => Promise<void>;\n  limparErro: () => void;\n  recarregar: () => Promise<void>;\n}\n\n/**\n * Hook personalizado para gerenciar m\xE9tricas de avalia\xE7\xF5es\n * Fornece funcionalidades para buscar m\xE9tricas consolidadas, ranking e comparativos\n */\nexport function useMetricasAvaliacoes(filtrosIniciais?: FiltrosMetricas): UseMetricasAvaliacoesReturn {\n  // Estados\n  const [metricas, setMetricas] = useState<MetricasConsolidadas | null>(null);\n  const [ranking, setRanking] = useState<MetricasAtendente[]>([]);\n  const [comparativo, setComparativo] = useState<ComparativoTemporal | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [filtrosAtuais, setFiltrosAtuais] = useState<FiltrosMetricas | undefined>(filtrosIniciais);\n\n  /**\n   * Fun\xE7\xE3o auxiliar para fazer requisi\xE7\xF5es \xE0 API\n   */\n  const fazerRequisicao = useCallback(async <T>(\n    url: string, \n    options: RequestInit = {}\n  ): Promise<T> => {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `Erro HTTP: ${response.status}`);\n    }\n\n    const data: ApiResponse<T> = await response.json();\n    \n    if (!data.success) {\n      throw new Error(data.message || 'Erro na resposta da API');\n    }\n\n    return data.data;\n  }, []);\n\n  /**\n   * Buscar m\xE9tricas consolidadas\n   */\n  const buscarMetricas = useCallback(async (filtros?: FiltrosMetricas) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const filtrosParaUsar = filtros || filtrosAtuais;\n      setFiltrosAtuais(filtrosParaUsar);\n\n      const dados = await fazerRequisicao<MetricasConsolidadas>(\n        '/api/avaliacoes/metricas/consolidadas',\n        {\n          method: 'POST',\n          body: JSON.stringify({ filtros: filtrosParaUsar }),\n        }\n      );\n\n      setMetricas(dados);\n    } catch (err) {\n      const mensagem = err instanceof Error ? err.message : 'Erro desconhecido';\n      setError(`Erro ao buscar m\xE9tricas: ${mensagem}`);\n      console.error('Erro ao buscar m\xE9tricas:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filtrosAtuais, fazerRequisicao]);\n\n  /**\n   * Buscar ranking de atendentes\n   */\n  const buscarRanking = useCallback(async (filtros?: FiltrosMetricas, limite = 10) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const filtrosParaUsar = filtros || filtrosAtuais;\n\n      const dados = await fazerRequisicao<MetricasAtendente[]>(\n        '/api/avaliacoes/metricas/ranking',\n        {\n          method: 'POST',\n          body: JSON.stringify({ \n            filtros: filtrosParaUsar,\n            limite \n          }),\n        }\n      );\n\n      setRanking(dados);\n    } catch (err) {\n      const mensagem = err instanceof Error ? err.message : 'Erro desconhecido';\n      setError(`Erro ao buscar ranking: ${mensagem}`);\n      console.error('Erro ao buscar ranking:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filtrosAtuais, fazerRequisicao]);\n\n  /**\n   * Gerar comparativo temporal\n   */\n  const gerarComparativo = useCallback(async (\n    periodos: any[], \n    filtros?: FiltrosMetricas\n  ) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const filtrosParaUsar = filtros || filtrosAtuais;\n\n      if (periodos.length < 2) {\n        throw new Error('\xC9 necess\xE1rio pelo menos 2 per\xEDodos para compara\xE7\xE3o');\n      }\n\n      const dados = await fazerRequisicao<ComparativoTemporal>(\n        '/api/avaliacoes/metricas/comparativo',\n        {\n          method: 'POST',\n          body: JSON.stringify({ \n            filtros: filtrosParaUsar,\n            periodos \n          }),\n        }\n      );\n\n      setComparativo(dados);\n    } catch (err) {\n      const mensagem = err instanceof Error ? err.message : 'Erro desconhecido';\n      setError(`Erro ao gerar comparativo: ${mensagem}`);\n      console.error('Erro ao gerar comparativo:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filtrosAtuais, fazerRequisicao]);\n\n  /**\n   * Limpar erro\n   */\n  const limparErro = useCallback(() => {\n    setError(null);\n  }, []);\n\n  /**\n   * Recarregar dados atuais\n   */\n  const recarregar = useCallback(async () => {\n    if (filtrosAtuais) {\n      await buscarMetricas(filtrosAtuais);\n    }\n  }, [buscarMetricas, filtrosAtuais]);\n\n  // Carregar m\xE9tricas iniciais se filtros foram fornecidos\n  useEffect(() => {\n    if (filtrosIniciais) {\n      buscarMetricas(filtrosIniciais);\n    }\n  }, []); // Executar apenas uma vez na montagem\n\n  return {\n    // Estados\n    metricas,\n    ranking,\n    comparativo,\n    loading,\n    error,\n    \n    // Fun\xE7\xF5es\n    buscarMetricas,\n    buscarRanking,\n    gerarComparativo,\n    limparErro,\n    recarregar,\n  };\n}\n\n/**\n * Hook simplificado para buscar apenas o ranking\n */\nexport function useRankingAtendentes(limite = 10, filtros?: FiltrosMetricas) {\n  const [ranking, setRanking] = useState<MetricasAtendente[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const buscarRanking = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await fetch('/api/avaliacoes/metricas/ranking', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ filtros, limite }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Erro HTTP: ${response.status}`);\n      }\n\n      const data: ApiResponse<MetricasAtendente[]> = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message);\n      }\n\n      setRanking(data.data);\n    } catch (err) {\n      const mensagem = err instanceof Error ? err.message : 'Erro desconhecido';\n      setError(mensagem);\n      console.error('Erro ao buscar ranking:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filtros, limite]);\n\n  useEffect(() => {\n    buscarRanking();\n  }, [buscarRanking]);\n\n  return {\n    ranking,\n    loading,\n    error,\n    recarregar: buscarRanking,\n  };\n}"],
      names: ["useMetricasAvaliacoes", "useRankingAtendentes", "filtrosIniciais", "metricas", "setMetricas", "useState", "ranking", "setRanking", "comparativo", "setComparativo", "loading", "setLoading", "error", "setError", "filtrosAtuais", "setFiltrosAtuais", "fazerRequisicao", "useCallback", "url", "options", "response", "fetch", "headers", "ok", "errorData", "json", "catch", "Error", "status", "data", "success", "message", "buscarMetricas", "filtros", "filtrosParaUsar", "dados", "method", "body", "JSON", "stringify", "err", "mensagem", "console", "buscarRanking", "limite", "gerarComparativo", "periodos", "length", "limparErro", "recarregar", "useEffect"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f377a1e86eb85713debdbd2352305bd663adc784"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_153a5rdrl7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_153a5rdrl7();
cov_153a5rdrl7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_153a5rdrl7().f[0]++;
  cov_153a5rdrl7().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_153a5rdrl7().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_153a5rdrl7().s[3]++;
_export(exports, {
  get useMetricasAvaliacoes() {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[1]++;
    cov_153a5rdrl7().s[4]++;
    return useMetricasAvaliacoes;
  },
  get useRankingAtendentes() {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[2]++;
    cov_153a5rdrl7().s[5]++;
    return useRankingAtendentes;
  }
});
const _react =
/* istanbul ignore next */
(cov_153a5rdrl7().s[6]++, require("react"));
function useMetricasAvaliacoes(filtrosIniciais) {
  /* istanbul ignore next */
  cov_153a5rdrl7().f[3]++;
  // Estados
  const [metricas, setMetricas] =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[7]++, (0, _react.useState)(null));
  const [ranking, setRanking] =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[8]++, (0, _react.useState)([]));
  const [comparativo, setComparativo] =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[9]++, (0, _react.useState)(null));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[10]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[11]++, (0, _react.useState)(null));
  const [filtrosAtuais, setFiltrosAtuais] =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[12]++, (0, _react.useState)(filtrosIniciais));
  /**
  * Função auxiliar para fazer requisições à API
  */
  const fazerRequisicao =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[13]++, (0, _react.useCallback)(async (url, options =
  /* istanbul ignore next */
  (cov_153a5rdrl7().b[0][0]++, {})) => {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[4]++;
    const response =
    /* istanbul ignore next */
    (cov_153a5rdrl7().s[14]++, await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    }));
    /* istanbul ignore next */
    cov_153a5rdrl7().s[15]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_153a5rdrl7().b[1][0]++;
      const errorData =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[16]++, await response.json().catch(() => {
        /* istanbul ignore next */
        cov_153a5rdrl7().f[5]++;
        cov_153a5rdrl7().s[17]++;
        return {};
      }));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[18]++;
      throw new Error(
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[2][0]++, errorData.error) ||
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[2][1]++, `Erro HTTP: ${response.status}`));
    } else
    /* istanbul ignore next */
    {
      cov_153a5rdrl7().b[1][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_153a5rdrl7().s[19]++, await response.json());
    /* istanbul ignore next */
    cov_153a5rdrl7().s[20]++;
    if (!data.success) {
      /* istanbul ignore next */
      cov_153a5rdrl7().b[3][0]++;
      cov_153a5rdrl7().s[21]++;
      throw new Error(
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[4][0]++, data.message) ||
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[4][1]++, 'Erro na resposta da API'));
    } else
    /* istanbul ignore next */
    {
      cov_153a5rdrl7().b[3][1]++;
    }
    cov_153a5rdrl7().s[22]++;
    return data.data;
  }, []));
  /**
  * Buscar métricas consolidadas
  */
  const buscarMetricas =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[23]++, (0, _react.useCallback)(async filtros => {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[6]++;
    cov_153a5rdrl7().s[24]++;
    try {
      /* istanbul ignore next */
      cov_153a5rdrl7().s[25]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_153a5rdrl7().s[26]++;
      setError(null);
      const filtrosParaUsar =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[27]++,
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[5][0]++, filtros) ||
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[5][1]++, filtrosAtuais));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[28]++;
      setFiltrosAtuais(filtrosParaUsar);
      const dados =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[29]++, await fazerRequisicao('/api/avaliacoes/metricas/consolidadas', {
        method: 'POST',
        body: JSON.stringify({
          filtros: filtrosParaUsar
        })
      }));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[30]++;
      setMetricas(dados);
    } catch (err) {
      const mensagem =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[31]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[6][0]++, err.message) :
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[6][1]++, 'Erro desconhecido'));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[32]++;
      setError(`Erro ao buscar métricas: ${mensagem}`);
      /* istanbul ignore next */
      cov_153a5rdrl7().s[33]++;
      console.error('Erro ao buscar métricas:', err);
    } finally {
      /* istanbul ignore next */
      cov_153a5rdrl7().s[34]++;
      setLoading(false);
    }
  }, [filtrosAtuais, fazerRequisicao]));
  /**
  * Buscar ranking de atendentes
  */
  const buscarRanking =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[35]++, (0, _react.useCallback)(async (filtros, limite =
  /* istanbul ignore next */
  (cov_153a5rdrl7().b[7][0]++, 10)) => {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[7]++;
    cov_153a5rdrl7().s[36]++;
    try {
      /* istanbul ignore next */
      cov_153a5rdrl7().s[37]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_153a5rdrl7().s[38]++;
      setError(null);
      const filtrosParaUsar =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[39]++,
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[8][0]++, filtros) ||
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[8][1]++, filtrosAtuais));
      const dados =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[40]++, await fazerRequisicao('/api/avaliacoes/metricas/ranking', {
        method: 'POST',
        body: JSON.stringify({
          filtros: filtrosParaUsar,
          limite
        })
      }));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[41]++;
      setRanking(dados);
    } catch (err) {
      const mensagem =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[42]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[9][0]++, err.message) :
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[9][1]++, 'Erro desconhecido'));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[43]++;
      setError(`Erro ao buscar ranking: ${mensagem}`);
      /* istanbul ignore next */
      cov_153a5rdrl7().s[44]++;
      console.error('Erro ao buscar ranking:', err);
    } finally {
      /* istanbul ignore next */
      cov_153a5rdrl7().s[45]++;
      setLoading(false);
    }
  }, [filtrosAtuais, fazerRequisicao]));
  /**
  * Gerar comparativo temporal
  */
  const gerarComparativo =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[46]++, (0, _react.useCallback)(async (periodos, filtros) => {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[8]++;
    cov_153a5rdrl7().s[47]++;
    try {
      /* istanbul ignore next */
      cov_153a5rdrl7().s[48]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_153a5rdrl7().s[49]++;
      setError(null);
      const filtrosParaUsar =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[50]++,
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[10][0]++, filtros) ||
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[10][1]++, filtrosAtuais));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[51]++;
      if (periodos.length < 2) {
        /* istanbul ignore next */
        cov_153a5rdrl7().b[11][0]++;
        cov_153a5rdrl7().s[52]++;
        throw new Error('É necessário pelo menos 2 períodos para comparação');
      } else
      /* istanbul ignore next */
      {
        cov_153a5rdrl7().b[11][1]++;
      }
      const dados =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[53]++, await fazerRequisicao('/api/avaliacoes/metricas/comparativo', {
        method: 'POST',
        body: JSON.stringify({
          filtros: filtrosParaUsar,
          periodos
        })
      }));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[54]++;
      setComparativo(dados);
    } catch (err) {
      const mensagem =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[55]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[12][0]++, err.message) :
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[12][1]++, 'Erro desconhecido'));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[56]++;
      setError(`Erro ao gerar comparativo: ${mensagem}`);
      /* istanbul ignore next */
      cov_153a5rdrl7().s[57]++;
      console.error('Erro ao gerar comparativo:', err);
    } finally {
      /* istanbul ignore next */
      cov_153a5rdrl7().s[58]++;
      setLoading(false);
    }
  }, [filtrosAtuais, fazerRequisicao]));
  /**
  * Limpar erro
  */
  const limparErro =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[59]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[9]++;
    cov_153a5rdrl7().s[60]++;
    setError(null);
  }, []));
  /**
  * Recarregar dados atuais
  */
  const recarregar =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[61]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[10]++;
    cov_153a5rdrl7().s[62]++;
    if (filtrosAtuais) {
      /* istanbul ignore next */
      cov_153a5rdrl7().b[13][0]++;
      cov_153a5rdrl7().s[63]++;
      await buscarMetricas(filtrosAtuais);
    } else
    /* istanbul ignore next */
    {
      cov_153a5rdrl7().b[13][1]++;
    }
  }, [buscarMetricas, filtrosAtuais]));
  // Carregar métricas iniciais se filtros foram fornecidos
  /* istanbul ignore next */
  cov_153a5rdrl7().s[64]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[11]++;
    cov_153a5rdrl7().s[65]++;
    if (filtrosIniciais) {
      /* istanbul ignore next */
      cov_153a5rdrl7().b[14][0]++;
      cov_153a5rdrl7().s[66]++;
      buscarMetricas(filtrosIniciais);
    } else
    /* istanbul ignore next */
    {
      cov_153a5rdrl7().b[14][1]++;
    }
  }, []); // Executar apenas uma vez na montagem
  /* istanbul ignore next */
  cov_153a5rdrl7().s[67]++;
  return {
    // Estados
    metricas,
    ranking,
    comparativo,
    loading,
    error,
    // Funções
    buscarMetricas,
    buscarRanking,
    gerarComparativo,
    limparErro,
    recarregar
  };
}
function useRankingAtendentes(limite =
/* istanbul ignore next */
(cov_153a5rdrl7().b[15][0]++, 10), filtros) {
  /* istanbul ignore next */
  cov_153a5rdrl7().f[12]++;
  const [ranking, setRanking] =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[68]++, (0, _react.useState)([]));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[69]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[70]++, (0, _react.useState)(null));
  const buscarRanking =
  /* istanbul ignore next */
  (cov_153a5rdrl7().s[71]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[13]++;
    cov_153a5rdrl7().s[72]++;
    try {
      /* istanbul ignore next */
      cov_153a5rdrl7().s[73]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_153a5rdrl7().s[74]++;
      setError(null);
      const response =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[75]++, await fetch('/api/avaliacoes/metricas/ranking', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          filtros,
          limite
        })
      }));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[76]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_153a5rdrl7().b[16][0]++;
        cov_153a5rdrl7().s[77]++;
        throw new Error(`Erro HTTP: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_153a5rdrl7().b[16][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[78]++, await response.json());
      /* istanbul ignore next */
      cov_153a5rdrl7().s[79]++;
      if (!data.success) {
        /* istanbul ignore next */
        cov_153a5rdrl7().b[17][0]++;
        cov_153a5rdrl7().s[80]++;
        throw new Error(data.message);
      } else
      /* istanbul ignore next */
      {
        cov_153a5rdrl7().b[17][1]++;
      }
      cov_153a5rdrl7().s[81]++;
      setRanking(data.data);
    } catch (err) {
      const mensagem =
      /* istanbul ignore next */
      (cov_153a5rdrl7().s[82]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[18][0]++, err.message) :
      /* istanbul ignore next */
      (cov_153a5rdrl7().b[18][1]++, 'Erro desconhecido'));
      /* istanbul ignore next */
      cov_153a5rdrl7().s[83]++;
      setError(mensagem);
      /* istanbul ignore next */
      cov_153a5rdrl7().s[84]++;
      console.error('Erro ao buscar ranking:', err);
    } finally {
      /* istanbul ignore next */
      cov_153a5rdrl7().s[85]++;
      setLoading(false);
    }
  }, [filtros, limite]));
  /* istanbul ignore next */
  cov_153a5rdrl7().s[86]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_153a5rdrl7().f[14]++;
    cov_153a5rdrl7().s[87]++;
    buscarRanking();
  }, [buscarRanking]);
  /* istanbul ignore next */
  cov_153a5rdrl7().s[88]++;
  return {
    ranking,
    loading,
    error,
    recarregar: buscarRanking
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,