{"version":3,"names":["MENSAGENS_ERRO","cov_wcku87v9z","f","s","alterarSenhaSchema","alterarStatusUsuarioSchema","atualizarUsuarioSchema","buscaAvancadaUsuariosSchema","criarUsuarioSchema","emailSchema","exportarUsuariosSchema","idUsuarioSchema","importarUsuariosSchema","listarUsuariosSchema","nomeSchema","perfilUsuarioSchema","redefinirSenhaSchema","senhaSchema","validacaoCustomizada","validarDadosUsuario","validarEmail","validarIdUsuario","validarSenha","_zod","z","string","uuid","email","toLowerCase","trim","min","regex","max","enum","errorMap","message","object","nome","senha","perfil","ativo","boolean","default","optional","pagina","coerce","number","limite","busca","ordenarPor","ordem","senhaAtual","novaSenha","confirmarSenha","refine","data","path","forcarAlteracao","termo","perfis","array","dataInicio","datetime","dataFim","ordenacao","campo","direcao","formato","filtros","campos","usuarios","sobrescrever","enviarEmail","id","safeParse","dados","ID_INVALIDO","EMAIL_INVALIDO","EMAIL_JA_EXISTE","SENHA_FRACA","USUARIO_NAO_ENCONTRADO","PERMISSAO_NEGADA","DADOS_OBRIGATORIOS","OPERACAO_NAO_PERMITIDA","emailUnico","idExcluir","podeAlterarPerfil","perfilAtual","novoPerfi","perfilSolicitante","b","senhaAtualCorreta","hashSenha"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\usuarios.ts"],"sourcesContent":["import { z } from 'zod';\n\n/**\n * Schemas de validação para operações relacionadas a usuários\n * Centralizando todas as validações em um local para melhor manutenção\n */\n\n// Schema base para validação de ID UUID\nexport const idUsuarioSchema = z.string().uuid('ID deve ser um UUID válido');\n\n// Schema para validação de email\nexport const emailSchema = z\n  .string()\n  .email('Email inválido')\n  .toLowerCase()\n  .trim();\n\n// Schema para validação de senha\nexport const senhaSchema = z\n  .string()\n  .min(8, 'Senha deve ter pelo menos 8 caracteres')\n  .regex(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n    'Senha deve conter pelo menos: 1 letra minúscula, 1 maiúscula, 1 número e 1 caractere especial'\n  );\n\n// Schema para validação de nome\nexport const nomeSchema = z\n  .string()\n  .min(3, 'Nome deve ter pelo menos 3 caracteres')\n  .max(100, 'Nome deve ter no máximo 100 caracteres')\n  .trim();\n\n// Schema para validação de perfil de usuário\nexport const perfilUsuarioSchema = z.enum(['ADMIN', 'GESTOR', 'OPERADOR'], {\n  errorMap: () => ({ message: 'Perfil deve ser ADMIN, GESTOR ou OPERADOR' }),\n});\n\n// Schema para criação de usuário\nexport const criarUsuarioSchema = z.object({\n  nome: nomeSchema,\n  email: emailSchema,\n  senha: senhaSchema,\n  perfil: perfilUsuarioSchema,\n  ativo: z.boolean().default(true),\n});\n\n// Schema para atualização de usuário\nexport const atualizarUsuarioSchema = z.object({\n  nome: nomeSchema.optional(),\n  email: emailSchema.optional(),\n  senha: senhaSchema.optional(),\n  perfil: perfilUsuarioSchema.optional(),\n  ativo: z.boolean().optional(),\n});\n\n// Schema para listagem de usuários com filtros e paginação\nexport const listarUsuariosSchema = z.object({\n  pagina: z.coerce.number().min(1, 'Página deve ser maior que 0').default(1),\n  limite: z.coerce\n    .number()\n    .min(1, 'Limite deve ser maior que 0')\n    .max(100, 'Limite máximo é 100')\n    .default(10),\n  busca: z.string().trim().optional(),\n  perfil: perfilUsuarioSchema.optional(),\n  ativo: z.coerce.boolean().optional(),\n  ordenarPor: z\n    .enum(['nome', 'email', 'criadoEm', 'atualizadoEm'])\n    .default('nome'),\n  ordem: z.enum(['asc', 'desc']).default('asc'),\n});\n\n// Schema para alteração de senha\nexport const alterarSenhaSchema = z\n  .object({\n    senhaAtual: z.string().min(1, 'Senha atual é obrigatória'),\n    novaSenha: senhaSchema,\n    confirmarSenha: z.string().min(1, 'Confirmação de senha é obrigatória'),\n  })\n  .refine(data => data.novaSenha === data.confirmarSenha, {\n    message: 'Nova senha e confirmação devem ser iguais',\n    path: ['confirmarSenha'],\n  });\n\n// Schema para redefinição de senha (admin)\nexport const redefinirSenhaSchema = z\n  .object({\n    novaSenha: senhaSchema,\n    confirmarSenha: z.string().min(1, 'Confirmação de senha é obrigatória'),\n    forcarAlteracao: z.boolean().default(false),\n  })\n  .refine(data => data.novaSenha === data.confirmarSenha, {\n    message: 'Nova senha e confirmação devem ser iguais',\n    path: ['confirmarSenha'],\n  });\n\n// Schema para ativação/desativação de usuário\nexport const alterarStatusUsuarioSchema = z.object({\n  ativo: z.boolean(),\n});\n\n// Schema para busca avançada de usuários\nexport const buscaAvancadaUsuariosSchema = z.object({\n  termo: z.string().trim().optional(),\n  perfis: z.array(perfilUsuarioSchema).optional(),\n  ativo: z.boolean().optional(),\n  dataInicio: z.string().datetime().optional(),\n  dataFim: z.string().datetime().optional(),\n  ordenacao: z\n    .object({\n      campo: z.enum(['nome', 'email', 'perfil', 'criadoEm', 'atualizadoEm']),\n      direcao: z.enum(['asc', 'desc']),\n    })\n    .optional(),\n});\n\n// Schema para exportação de dados de usuários\nexport const exportarUsuariosSchema = z.object({\n  formato: z.enum(['csv', 'xlsx', 'pdf']).default('csv'),\n  filtros: buscaAvancadaUsuariosSchema.optional(),\n  campos: z\n    .array(\n      z.enum(['nome', 'email', 'perfil', 'ativo', 'criadoEm', 'atualizadoEm'])\n    )\n    .optional(),\n});\n\n// Schema para importação de usuários\nexport const importarUsuariosSchema = z.object({\n  usuarios: z.array(criarUsuarioSchema),\n  sobrescrever: z.boolean().default(false),\n  enviarEmail: z.boolean().default(true),\n});\n\n// Tipos TypeScript derivados dos schemas\nexport type CriarUsuarioInput = z.infer<typeof criarUsuarioSchema>;\nexport type AtualizarUsuarioInput = z.infer<typeof atualizarUsuarioSchema>;\nexport type ListarUsuariosInput = z.infer<typeof listarUsuariosSchema>;\nexport type AlterarSenhaInput = z.infer<typeof alterarSenhaSchema>;\nexport type RedefinirSenhaInput = z.infer<typeof redefinirSenhaSchema>;\nexport type BuscaAvancadaUsuariosInput = z.infer<\n  typeof buscaAvancadaUsuariosSchema\n>;\nexport type ExportarUsuariosInput = z.infer<typeof exportarUsuariosSchema>;\nexport type ImportarUsuariosInput = z.infer<typeof importarUsuariosSchema>;\n\n// Utilitários de validação\nexport const validarIdUsuario = (id: string) => {\n  return idUsuarioSchema.safeParse(id);\n};\n\nexport const validarEmail = (email: string) => {\n  return emailSchema.safeParse(email);\n};\n\nexport const validarSenha = (senha: string) => {\n  return senhaSchema.safeParse(senha);\n};\n\nexport const validarDadosUsuario = (dados: unknown) => {\n  return criarUsuarioSchema.safeParse(dados);\n};\n\n// Mensagens de erro personalizadas\nexport const MENSAGENS_ERRO = {\n  ID_INVALIDO: 'ID do usuário inválido',\n  EMAIL_INVALIDO: 'Email inválido',\n  EMAIL_JA_EXISTE: 'Este email já está em uso',\n  SENHA_FRACA: 'Senha não atende aos critérios de segurança',\n  USUARIO_NAO_ENCONTRADO: 'Usuário não encontrado',\n  PERMISSAO_NEGADA: 'Você não tem permissão para esta operação',\n  DADOS_OBRIGATORIOS: 'Todos os campos obrigatórios devem ser preenchidos',\n  OPERACAO_NAO_PERMITIDA: 'Operação não permitida para este usuário',\n} as const;\n\n// Validações customizadas\nexport const validacaoCustomizada = {\n  /**\n   * Valida se o email é único no sistema\n   */\n  emailUnico: async (email: string, idExcluir?: string) => {\n    // Esta função deve ser implementada com acesso ao banco de dados\n    // Retorna true se o email é único, false caso contrário\n    return true; // Placeholder\n  },\n\n  /**\n   * Valida se o usuário pode alterar o perfil\n   */\n  podeAlterarPerfil: (\n    perfilAtual: string,\n    novoPerfi: string,\n    perfilSolicitante: string\n  ) => {\n    // Lógica de validação de permissões para alteração de perfil\n    if (perfilSolicitante === 'ADMIN') return true;\n    if (perfilSolicitante === 'GESTOR' && novoPerfi !== 'ADMIN') return true;\n    return false;\n  },\n\n  /**\n   * Valida se a senha atual está correta\n   */\n  senhaAtualCorreta: async (senhaAtual: string, hashSenha: string) => {\n    // Esta função deve ser implementada com bcrypt\n    // Retorna true se a senha está correta, false caso contrário\n    return true; // Placeholder\n  },\n};\n"],"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","ignoreList":[]}