65a6791f3e8e7f2be3e7f903f91c013e
"use strict";

/* istanbul ignore next */
function cov_rpijtlqhy() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\usuarios\\[id]\\senha\\route.ts";
  var hash = "811af6a5a14a0ba3162179df25c7b092e63abbdd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\usuarios\\[id]\\senha\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 20
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 48
        }
      },
      "9": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 52
        }
      },
      "10": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "11": {
        start: {
          line: 24,
          column: 32
        },
        end: {
          line: 24,
          column: 77
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 28,
          column: 6
        }
      },
      "13": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "14": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 32,
          column: 80
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 38,
          column: 15
        }
      },
      "17": {
        start: {
          line: 40,
          column: 19
        },
        end: {
          line: 40,
          column: 64
        }
      },
      "18": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 41,
          column: 41
        }
      },
      "19": {
        start: {
          line: 43,
          column: 33
        },
        end: {
          line: 54,
          column: 10
        }
      },
      "20": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "21": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 60,
          column: 15
        }
      },
      "22": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "23": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "24": {
        start: {
          line: 69,
          column: 33
        },
        end: {
          line: 69,
          column: 55
        }
      },
      "25": {
        start: {
          line: 70,
          column: 24
        },
        end: {
          line: 70,
          column: 55
        }
      },
      "26": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "27": {
        start: {
          line: 73,
          column: 35
        },
        end: {
          line: 73,
          column: 78
        }
      },
      "28": {
        start: {
          line: 75,
          column: 32
        },
        end: {
          line: 75,
          column: 114
        }
      },
      "29": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "30": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 81,
          column: 19
        }
      },
      "31": {
        start: {
          line: 84,
          column: 40
        },
        end: {
          line: 84,
          column: 121
        }
      },
      "32": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "33": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 90,
          column: 19
        }
      },
      "34": {
        start: {
          line: 93,
          column: 34
        },
        end: {
          line: 93,
          column: 92
        }
      },
      "35": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "36": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "37": {
        start: {
          line: 109,
          column: 15
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "38": {
        start: {
          line: 111,
          column: 35
        },
        end: {
          line: 111,
          column: 80
        }
      },
      "39": {
        start: {
          line: 113,
          column: 34
        },
        end: {
          line: 113,
          column: 92
        }
      },
      "40": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "41": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "42": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "43": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 55
        }
      },
      "44": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "45": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "46": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "47": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 220,
          column: 5
        }
      },
      "48": {
        start: {
          line: 156,
          column: 24
        },
        end: {
          line: 156,
          column: 80
        }
      },
      "49": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "50": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "51": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "52": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 170,
          column: 15
        }
      },
      "53": {
        start: {
          line: 172,
          column: 19
        },
        end: {
          line: 172,
          column: 64
        }
      },
      "54": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 178,
          column: 10
        }
      },
      "55": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "56": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "57": {
        start: {
          line: 187,
          column: 32
        },
        end: {
          line: 187,
          column: 77
        }
      },
      "58": {
        start: {
          line: 188,
          column: 36
        },
        end: {
          line: 188,
          column: 85
        }
      },
      "59": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "60": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "61": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 64
        }
      },
      "62": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "63": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 213,
          column: 15
        }
      },
      "64": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 219,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 16
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 25,
            column: 33
          }
        },
        loc: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 25
      },
      "4": {
        name: "PUT",
        decl: {
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 18
          }
        },
        loc: {
          start: {
            line: 30,
            column: 40
          },
          end: {
            line: 153,
            column: 1
          }
        },
        line: 30
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 154,
            column: 15
          },
          end: {
            line: 154,
            column: 19
          }
        },
        loc: {
          start: {
            line: 154,
            column: 41
          },
          end: {
            line: 221,
            column: 1
          }
        },
        line: 154
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 11
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 35
          },
          end: {
            line: 26,
            column: 38
          }
        }, {
          start: {
            line: 26,
            column: 41
          },
          end: {
            line: 28,
            column: 5
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 11
          },
          end: {
            line: 26,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 11
          },
          end: {
            line: 26,
            column: 14
          }
        }, {
          start: {
            line: 26,
            column: 18
          },
          end: {
            line: 26,
            column: 32
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: 109,
            column: 15
          },
          end: {
            line: 136,
            column: 9
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "8": {
        loc: {
          start: {
            line: 109,
            column: 15
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 15
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: 130,
            column: 15
          },
          end: {
            line: 136,
            column: 9
          }
        }],
        line: 109
      },
      "9": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "10": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "11": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "12": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "13": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\usuarios\\[id]\\senha\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport {\n  idUsuarioSchema,\n  alterarSenhaSchema,\n  redefinirSenhaSchema,\n} from '@/lib/validations';\nimport bcrypt from 'bcryptjs';\n\n/**\n * PUT /api/usuarios/[id]/senha - Alterar senha do usu\xE1rio\n */\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'N\xE3o autorizado' }, { status: 401 });\n    }\n\n    const id = idUsuarioSchema.parse(params.id);\n    const body = await request.json();\n\n    // Verificar se o usu\xE1rio existe\n    const usuarioExistente = await prisma.usuario.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        senha: true,\n        ativo: true,\n      },\n    });\n\n    if (!usuarioExistente) {\n      return NextResponse.json(\n        { erro: 'Usu\xE1rio n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    if (!usuarioExistente.ativo) {\n      return NextResponse.json(\n        { erro: 'Usu\xE1rio est\xE1 inativo' },\n        { status: 400 }\n      );\n    }\n\n    const isProprioUsuario = session.user.id === id;\n    const isAdmin = session.user.perfil === 'ADMIN';\n\n    // Se for o pr\xF3prio usu\xE1rio, usar schema com senha atual\n    if (isProprioUsuario) {\n      const dadosValidados = alterarSenhaSchema.parse(body);\n\n      // Verificar senha atual\n      const senhaValida = await bcrypt.compare(\n        dadosValidados.senhaAtual,\n        usuarioExistente.senha\n      );\n\n      if (!senhaValida) {\n        return NextResponse.json(\n          { erro: 'Senha atual incorreta' },\n          { status: 400 }\n        );\n      }\n\n      // Verificar se a nova senha \xE9 diferente da atual\n      const novaSenhaIgualAtual = await bcrypt.compare(\n        dadosValidados.novaSenha,\n        usuarioExistente.senha\n      );\n\n      if (novaSenhaIgualAtual) {\n        return NextResponse.json(\n          { erro: 'A nova senha deve ser diferente da senha atual' },\n          { status: 400 }\n        );\n      }\n\n      // Criptografar nova senha\n      const novaSenhaHash = await bcrypt.hash(dadosValidados.novaSenha, 12);\n\n      // Atualizar senha\n      await prisma.usuario.update({\n        where: { id },\n        data: {\n          senha: novaSenhaHash,\n          atualizadoEm: new Date(),\n          // Remover flag de primeira altera\xE7\xE3o se existir\n          primeiroAcesso: false,\n        },\n      });\n\n      return NextResponse.json({\n        mensagem: 'Senha alterada com sucesso',\n      });\n    } else if (isAdmin) {\n      // Admin pode redefinir senha sem conhecer a atual\n      const dadosValidados = redefinirSenhaSchema.parse(body);\n\n      // Criptografar nova senha\n      const novaSenhaHash = await bcrypt.hash(dadosValidados.novaSenha, 12);\n\n      // Atualizar senha\n      await prisma.usuario.update({\n        where: { id },\n        data: {\n          senha: novaSenhaHash,\n          atualizadoEm: new Date(),\n          // Se for\xE7ar altera\xE7\xE3o, marcar para o usu\xE1rio alterar no pr\xF3ximo login\n          primeiroAcesso: dadosValidados.forcarAlteracao,\n        },\n      });\n\n      return NextResponse.json({\n        mensagem: 'Senha redefinida com sucesso',\n        forcarAlteracao: dadosValidados.forcarAlteracao,\n      });\n    } else {\n      return NextResponse.json(\n        { erro: 'Sem permiss\xE3o para alterar senha deste usu\xE1rio' },\n        { status: 403 }\n      );\n    }\n  } catch (error) {\n    console.error('Erro ao alterar senha:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { erro: 'Dados inv\xE1lidos', detalhes: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/usuarios/[id]/senha - Gerar senha tempor\xE1ria (admin)\n */\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'N\xE3o autorizado' }, { status: 401 });\n    }\n\n    // Apenas admins podem gerar senhas tempor\xE1rias\n    if (session.user.perfil !== 'ADMIN') {\n      return NextResponse.json(\n        { erro: 'Sem permiss\xE3o para gerar senhas tempor\xE1rias' },\n        { status: 403 }\n      );\n    }\n\n    const id = idUsuarioSchema.parse(params.id);\n\n    // Verificar se o usu\xE1rio existe\n    const usuarioExistente = await prisma.usuario.findUnique({\n      where: { id },\n    });\n\n    if (!usuarioExistente) {\n      return NextResponse.json(\n        { erro: 'Usu\xE1rio n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Gerar senha tempor\xE1ria\n    const senhaTemporaria = Math.random().toString(36).slice(-12) + 'A1!';\n    const senhaTemporariaHash = await bcrypt.hash(senhaTemporaria, 12);\n\n    // Atualizar usu\xE1rio com senha tempor\xE1ria\n    await prisma.usuario.update({\n      where: { id },\n      data: {\n        senha: senhaTemporariaHash,\n        primeiroAcesso: true, // For\xE7ar altera\xE7\xE3o no pr\xF3ximo login\n        atualizadoEm: new Date(),\n      },\n    });\n\n    return NextResponse.json({\n      mensagem: 'Senha tempor\xE1ria gerada com sucesso',\n      senhaTemporaria,\n      observacao: 'O usu\xE1rio dever\xE1 alterar esta senha no pr\xF3ximo login',\n    });\n  } catch (error) {\n    console.error('Erro ao gerar senha tempor\xE1ria:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { erro: 'ID inv\xE1lido', detalhes: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["POST", "PUT", "request", "params", "session", "getServerSession", "authOptions", "user", "NextResponse", "json", "erro", "status", "id", "idUsuarioSchema", "parse", "body", "usuarioExistente", "prisma", "usuario", "findUnique", "where", "select", "nome", "email", "senha", "ativo", "isProprioUsuario", "isAdmin", "perfil", "dadosValidados", "alterarSenhaSchema", "senhaValida", "bcrypt", "compare", "senhaAtual", "novaSenhaIgualAtual", "novaSenha", "novaSenhaHash", "hash", "update", "data", "atualizadoEm", "Date", "primeiroAcesso", "mensagem", "redefinirSenhaSchema", "forcarAlteracao", "error", "console", "z", "ZodError", "detalhes", "errors", "senhaTemporaria", "Math", "random", "toString", "slice", "senhaTemporariaHash", "observacao"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "811af6a5a14a0ba3162179df25c7b092e63abbdd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rpijtlqhy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_rpijtlqhy();
cov_rpijtlqhy().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_rpijtlqhy().f[0]++;
  cov_rpijtlqhy().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_rpijtlqhy().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_rpijtlqhy().s[3]++;
_export(exports, {
  get POST() {
    /* istanbul ignore next */
    cov_rpijtlqhy().f[1]++;
    cov_rpijtlqhy().s[4]++;
    return POST;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_rpijtlqhy().f[2]++;
    cov_rpijtlqhy().s[5]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_rpijtlqhy().s[6]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_rpijtlqhy().s[7]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_rpijtlqhy().s[8]++, require("../../../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(cov_rpijtlqhy().s[9]++, require("../../../../../lib/prisma"));
const _validations =
/* istanbul ignore next */
(cov_rpijtlqhy().s[10]++, require("../../../../../lib/validations"));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_rpijtlqhy().s[11]++, _interop_require_default(require("bcryptjs")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_rpijtlqhy().f[3]++;
  cov_rpijtlqhy().s[12]++;
  return /* istanbul ignore next */(cov_rpijtlqhy().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_rpijtlqhy().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_rpijtlqhy().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_rpijtlqhy().b[0][1]++, {
    default: obj
  });
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_rpijtlqhy().f[4]++;
  cov_rpijtlqhy().s[13]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[14]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_rpijtlqhy().s[15]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[2][0]++;
      cov_rpijtlqhy().s[16]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_rpijtlqhy().b[2][1]++;
    }
    const id =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[17]++, _validations.idUsuarioSchema.parse(params.id));
    const body =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[18]++, await request.json());
    // Verificar se o usuário existe
    const usuarioExistente =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[19]++, await _prisma.prisma.usuario.findUnique({
      where: {
        id
      },
      select: {
        id: true,
        nome: true,
        email: true,
        senha: true,
        ativo: true
      }
    }));
    /* istanbul ignore next */
    cov_rpijtlqhy().s[20]++;
    if (!usuarioExistente) {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[3][0]++;
      cov_rpijtlqhy().s[21]++;
      return _server.NextResponse.json({
        erro: 'Usuário não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_rpijtlqhy().b[3][1]++;
    }
    cov_rpijtlqhy().s[22]++;
    if (!usuarioExistente.ativo) {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[4][0]++;
      cov_rpijtlqhy().s[23]++;
      return _server.NextResponse.json({
        erro: 'Usuário está inativo'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_rpijtlqhy().b[4][1]++;
    }
    const isProprioUsuario =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[24]++, session.user.id === id);
    const isAdmin =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[25]++, session.user.perfil === 'ADMIN');
    // Se for o próprio usuário, usar schema com senha atual
    /* istanbul ignore next */
    cov_rpijtlqhy().s[26]++;
    if (isProprioUsuario) {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[5][0]++;
      const dadosValidados =
      /* istanbul ignore next */
      (cov_rpijtlqhy().s[27]++, _validations.alterarSenhaSchema.parse(body));
      // Verificar senha atual
      const senhaValida =
      /* istanbul ignore next */
      (cov_rpijtlqhy().s[28]++, await _bcryptjs.default.compare(dadosValidados.senhaAtual, usuarioExistente.senha));
      /* istanbul ignore next */
      cov_rpijtlqhy().s[29]++;
      if (!senhaValida) {
        /* istanbul ignore next */
        cov_rpijtlqhy().b[6][0]++;
        cov_rpijtlqhy().s[30]++;
        return _server.NextResponse.json({
          erro: 'Senha atual incorreta'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_rpijtlqhy().b[6][1]++;
      }
      // Verificar se a nova senha é diferente da atual
      const novaSenhaIgualAtual =
      /* istanbul ignore next */
      (cov_rpijtlqhy().s[31]++, await _bcryptjs.default.compare(dadosValidados.novaSenha, usuarioExistente.senha));
      /* istanbul ignore next */
      cov_rpijtlqhy().s[32]++;
      if (novaSenhaIgualAtual) {
        /* istanbul ignore next */
        cov_rpijtlqhy().b[7][0]++;
        cov_rpijtlqhy().s[33]++;
        return _server.NextResponse.json({
          erro: 'A nova senha deve ser diferente da senha atual'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_rpijtlqhy().b[7][1]++;
      }
      // Criptografar nova senha
      const novaSenhaHash =
      /* istanbul ignore next */
      (cov_rpijtlqhy().s[34]++, await _bcryptjs.default.hash(dadosValidados.novaSenha, 12));
      // Atualizar senha
      /* istanbul ignore next */
      cov_rpijtlqhy().s[35]++;
      await _prisma.prisma.usuario.update({
        where: {
          id
        },
        data: {
          senha: novaSenhaHash,
          atualizadoEm: new Date(),
          // Remover flag de primeira alteração se existir
          primeiroAcesso: false
        }
      });
      /* istanbul ignore next */
      cov_rpijtlqhy().s[36]++;
      return _server.NextResponse.json({
        mensagem: 'Senha alterada com sucesso'
      });
    } else {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[5][1]++;
      cov_rpijtlqhy().s[37]++;
      if (isAdmin) {
        /* istanbul ignore next */
        cov_rpijtlqhy().b[8][0]++;
        // Admin pode redefinir senha sem conhecer a atual
        const dadosValidados =
        /* istanbul ignore next */
        (cov_rpijtlqhy().s[38]++, _validations.redefinirSenhaSchema.parse(body));
        // Criptografar nova senha
        const novaSenhaHash =
        /* istanbul ignore next */
        (cov_rpijtlqhy().s[39]++, await _bcryptjs.default.hash(dadosValidados.novaSenha, 12));
        // Atualizar senha
        /* istanbul ignore next */
        cov_rpijtlqhy().s[40]++;
        await _prisma.prisma.usuario.update({
          where: {
            id
          },
          data: {
            senha: novaSenhaHash,
            atualizadoEm: new Date(),
            // Se forçar alteração, marcar para o usuário alterar no próximo login
            primeiroAcesso: dadosValidados.forcarAlteracao
          }
        });
        /* istanbul ignore next */
        cov_rpijtlqhy().s[41]++;
        return _server.NextResponse.json({
          mensagem: 'Senha redefinida com sucesso',
          forcarAlteracao: dadosValidados.forcarAlteracao
        });
      } else {
        /* istanbul ignore next */
        cov_rpijtlqhy().b[8][1]++;
        cov_rpijtlqhy().s[42]++;
        return _server.NextResponse.json({
          erro: 'Sem permissão para alterar senha deste usuário'
        }, {
          status: 403
        });
      }
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_rpijtlqhy().s[43]++;
    console.error('Erro ao alterar senha:', error);
    /* istanbul ignore next */
    cov_rpijtlqhy().s[44]++;
    if (error instanceof z.ZodError) {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[9][0]++;
      cov_rpijtlqhy().s[45]++;
      return _server.NextResponse.json({
        erro: 'Dados inválidos',
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_rpijtlqhy().b[9][1]++;
    }
    cov_rpijtlqhy().s[46]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
async function POST(request, {
  params
}) {
  /* istanbul ignore next */
  cov_rpijtlqhy().f[5]++;
  cov_rpijtlqhy().s[47]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[48]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_rpijtlqhy().s[49]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[10][0]++;
      cov_rpijtlqhy().s[50]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_rpijtlqhy().b[10][1]++;
    }
    // Apenas admins podem gerar senhas temporárias
    cov_rpijtlqhy().s[51]++;
    if (session.user.perfil !== 'ADMIN') {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[11][0]++;
      cov_rpijtlqhy().s[52]++;
      return _server.NextResponse.json({
        erro: 'Sem permissão para gerar senhas temporárias'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_rpijtlqhy().b[11][1]++;
    }
    const id =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[53]++, _validations.idUsuarioSchema.parse(params.id));
    // Verificar se o usuário existe
    const usuarioExistente =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[54]++, await _prisma.prisma.usuario.findUnique({
      where: {
        id
      }
    }));
    /* istanbul ignore next */
    cov_rpijtlqhy().s[55]++;
    if (!usuarioExistente) {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[12][0]++;
      cov_rpijtlqhy().s[56]++;
      return _server.NextResponse.json({
        erro: 'Usuário não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_rpijtlqhy().b[12][1]++;
    }
    // Gerar senha temporária
    const senhaTemporaria =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[57]++, Math.random().toString(36).slice(-12) + 'A1!');
    const senhaTemporariaHash =
    /* istanbul ignore next */
    (cov_rpijtlqhy().s[58]++, await _bcryptjs.default.hash(senhaTemporaria, 12));
    // Atualizar usuário com senha temporária
    /* istanbul ignore next */
    cov_rpijtlqhy().s[59]++;
    await _prisma.prisma.usuario.update({
      where: {
        id
      },
      data: {
        senha: senhaTemporariaHash,
        primeiroAcesso: true,
        atualizadoEm: new Date()
      }
    });
    /* istanbul ignore next */
    cov_rpijtlqhy().s[60]++;
    return _server.NextResponse.json({
      mensagem: 'Senha temporária gerada com sucesso',
      senhaTemporaria,
      observacao: 'O usuário deverá alterar esta senha no próximo login'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_rpijtlqhy().s[61]++;
    console.error('Erro ao gerar senha temporária:', error);
    /* istanbul ignore next */
    cov_rpijtlqhy().s[62]++;
    if (error instanceof z.ZodError) {
      /* istanbul ignore next */
      cov_rpijtlqhy().b[13][0]++;
      cov_rpijtlqhy().s[63]++;
      return _server.NextResponse.json({
        erro: 'ID inválido',
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_rpijtlqhy().b[13][1]++;
    }
    cov_rpijtlqhy().s[64]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,