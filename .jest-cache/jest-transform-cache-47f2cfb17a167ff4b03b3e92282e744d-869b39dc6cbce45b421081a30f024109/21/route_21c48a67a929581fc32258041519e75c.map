{"version":3,"names":["POST","cov_rpijtlqhy","f","s","PUT","request","params","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","id","_validations","idUsuarioSchema","parse","body","usuarioExistente","_prisma","prisma","usuario","findUnique","where","select","nome","email","senha","ativo","isProprioUsuario","isAdmin","perfil","dadosValidados","alterarSenhaSchema","senhaValida","_bcryptjs","default","compare","senhaAtual","novaSenhaIgualAtual","novaSenha","novaSenhaHash","hash","update","data","atualizadoEm","Date","primeiroAcesso","mensagem","redefinirSenhaSchema","forcarAlteracao","error","console","z","ZodError","detalhes","errors","senhaTemporaria","Math","random","toString","slice","senhaTemporariaHash","observacao"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\usuarios\\[id]\\senha\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport {\n  idUsuarioSchema,\n  alterarSenhaSchema,\n  redefinirSenhaSchema,\n} from '@/lib/validations';\nimport bcrypt from 'bcryptjs';\n\n/**\n * PUT /api/usuarios/[id]/senha - Alterar senha do usuário\n */\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    const id = idUsuarioSchema.parse(params.id);\n    const body = await request.json();\n\n    // Verificar se o usuário existe\n    const usuarioExistente = await prisma.usuario.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        senha: true,\n        ativo: true,\n      },\n    });\n\n    if (!usuarioExistente) {\n      return NextResponse.json(\n        { erro: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    if (!usuarioExistente.ativo) {\n      return NextResponse.json(\n        { erro: 'Usuário está inativo' },\n        { status: 400 }\n      );\n    }\n\n    const isProprioUsuario = session.user.id === id;\n    const isAdmin = session.user.perfil === 'ADMIN';\n\n    // Se for o próprio usuário, usar schema com senha atual\n    if (isProprioUsuario) {\n      const dadosValidados = alterarSenhaSchema.parse(body);\n\n      // Verificar senha atual\n      const senhaValida = await bcrypt.compare(\n        dadosValidados.senhaAtual,\n        usuarioExistente.senha\n      );\n\n      if (!senhaValida) {\n        return NextResponse.json(\n          { erro: 'Senha atual incorreta' },\n          { status: 400 }\n        );\n      }\n\n      // Verificar se a nova senha é diferente da atual\n      const novaSenhaIgualAtual = await bcrypt.compare(\n        dadosValidados.novaSenha,\n        usuarioExistente.senha\n      );\n\n      if (novaSenhaIgualAtual) {\n        return NextResponse.json(\n          { erro: 'A nova senha deve ser diferente da senha atual' },\n          { status: 400 }\n        );\n      }\n\n      // Criptografar nova senha\n      const novaSenhaHash = await bcrypt.hash(dadosValidados.novaSenha, 12);\n\n      // Atualizar senha\n      await prisma.usuario.update({\n        where: { id },\n        data: {\n          senha: novaSenhaHash,\n          atualizadoEm: new Date(),\n          // Remover flag de primeira alteração se existir\n          primeiroAcesso: false,\n        },\n      });\n\n      return NextResponse.json({\n        mensagem: 'Senha alterada com sucesso',\n      });\n    } else if (isAdmin) {\n      // Admin pode redefinir senha sem conhecer a atual\n      const dadosValidados = redefinirSenhaSchema.parse(body);\n\n      // Criptografar nova senha\n      const novaSenhaHash = await bcrypt.hash(dadosValidados.novaSenha, 12);\n\n      // Atualizar senha\n      await prisma.usuario.update({\n        where: { id },\n        data: {\n          senha: novaSenhaHash,\n          atualizadoEm: new Date(),\n          // Se forçar alteração, marcar para o usuário alterar no próximo login\n          primeiroAcesso: dadosValidados.forcarAlteracao,\n        },\n      });\n\n      return NextResponse.json({\n        mensagem: 'Senha redefinida com sucesso',\n        forcarAlteracao: dadosValidados.forcarAlteracao,\n      });\n    } else {\n      return NextResponse.json(\n        { erro: 'Sem permissão para alterar senha deste usuário' },\n        { status: 403 }\n      );\n    }\n  } catch (error) {\n    console.error('Erro ao alterar senha:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { erro: 'Dados inválidos', detalhes: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/usuarios/[id]/senha - Gerar senha temporária (admin)\n */\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Apenas admins podem gerar senhas temporárias\n    if (session.user.perfil !== 'ADMIN') {\n      return NextResponse.json(\n        { erro: 'Sem permissão para gerar senhas temporárias' },\n        { status: 403 }\n      );\n    }\n\n    const id = idUsuarioSchema.parse(params.id);\n\n    // Verificar se o usuário existe\n    const usuarioExistente = await prisma.usuario.findUnique({\n      where: { id },\n    });\n\n    if (!usuarioExistente) {\n      return NextResponse.json(\n        { erro: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Gerar senha temporária\n    const senhaTemporaria = Math.random().toString(36).slice(-12) + 'A1!';\n    const senhaTemporariaHash = await bcrypt.hash(senhaTemporaria, 12);\n\n    // Atualizar usuário com senha temporária\n    await prisma.usuario.update({\n      where: { id },\n      data: {\n        senha: senhaTemporariaHash,\n        primeiroAcesso: true, // Forçar alteração no próximo login\n        atualizadoEm: new Date(),\n      },\n    });\n\n    return NextResponse.json({\n      mensagem: 'Senha temporária gerada com sucesso',\n      senhaTemporaria,\n      observacao: 'O usuário deverá alterar esta senha no próximo login',\n    });\n  } catch (error) {\n    console.error('Erro ao gerar senha temporária:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { erro: 'ID inválido', detalhes: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}