{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-preferencias-notificacao.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  PreferenciasNotificacao, \n  PreferenciasNotificacaoInput \n} from '@/lib/types/preferencias-notificacao';\n\ninterface UsePreferenciasNotificacaoReturn {\n  // Estado\n  preferencias: PreferenciasNotificacao | null;\n  carregando: boolean;\n  erro: string | null;\n  \n  // Ações\n  buscarPreferencias: () => Promise<void>;\n  atualizarPreferencias: (dados: PreferenciasNotificacaoInput) => Promise<boolean>;\n  resetarPreferencias: () => Promise<boolean>;\n  pausarNotificacoes: (dataFim: Date, dataInicio?: Date, motivo?: string) => Promise<boolean>;\n  retomarNotificacoes: () => Promise<boolean>;\n  verificarNotificacoesPausadas: () => Promise<boolean>;\n}\n\nexport function usePreferenciasNotificacao(): UsePreferenciasNotificacaoReturn {\n  const [preferencias, setPreferencias] = useState<PreferenciasNotificacao | null>(null);\n  const [carregando, setCarregando] = useState(false);\n  const [erro, setErro] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  /**\n   * Busca as preferências do usuário\n   */\n  const buscarPreferencias = useCallback(async () => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const response = await fetch('/api/preferencias-notificacao');\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao buscar preferências');\n      }\n\n      setPreferencias(data.data);\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao carregar preferências: ${mensagem}`,\n        variant: 'destructive',\n      });\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Atualiza as preferências do usuário\n   */\n  const atualizarPreferencias = useCallback(async (\n    dados: PreferenciasNotificacaoInput\n  ): Promise<boolean> => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const response = await fetch('/api/preferencias-notificacao', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(dados),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao atualizar preferências');\n      }\n\n      setPreferencias(data.data);\n      toast({\n        title: 'Sucesso',\n        description: data.message || 'Preferências atualizadas com sucesso',\n      });\n\n      return true;\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao atualizar preferências: ${mensagem}`,\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Reseta as preferências para os valores padrão\n   */\n  const resetarPreferencias = useCallback(async (): Promise<boolean> => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const response = await fetch('/api/preferencias-notificacao', {\n        method: 'DELETE',\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao resetar preferências');\n      }\n\n      setPreferencias(data.data);\n      toast({\n        title: 'Sucesso',\n        description: data.message || 'Preferências resetadas com sucesso',\n      });\n\n      return true;\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao resetar preferências: ${mensagem}`,\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Pausa as notificações por um período\n   */\n  const pausarNotificacoes = useCallback(async (\n    dataFim: Date,\n    dataInicio?: Date,\n    motivo?: string\n  ): Promise<boolean> => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const body: any = {\n        dataFim: dataFim.toISOString(),\n      };\n\n      if (dataInicio) {\n        body.dataInicio = dataInicio.toISOString();\n      }\n\n      if (motivo) {\n        body.motivo = motivo;\n      }\n\n      const response = await fetch('/api/preferencias-notificacao/pausar', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao pausar notificações');\n      }\n\n      setPreferencias(data.data);\n      toast({\n        title: 'Sucesso',\n        description: data.message || 'Notificações pausadas com sucesso',\n      });\n\n      return true;\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao pausar notificações: ${mensagem}`,\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Retoma as notificações (remove pausa)\n   */\n  const retomarNotificacoes = useCallback(async (): Promise<boolean> => {\n    setCarregando(true);\n    setErro(null);\n\n    try {\n      const response = await fetch('/api/preferencias-notificacao/pausar', {\n        method: 'DELETE',\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao retomar notificações');\n      }\n\n      setPreferencias(data.data);\n      toast({\n        title: 'Sucesso',\n        description: data.message || 'Notificações retomadas com sucesso',\n      });\n\n      return true;\n    } catch (error) {\n      const mensagem = error instanceof Error ? error.message : 'Erro desconhecido';\n      setErro(mensagem);\n      toast({\n        title: 'Erro',\n        description: `Falha ao retomar notificações: ${mensagem}`,\n        variant: 'destructive',\n      });\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  }, [toast]);\n\n  /**\n   * Verifica se as notificações estão pausadas\n   */\n  const verificarNotificacoesPausadas = useCallback(async (): Promise<boolean> => {\n    try {\n      const response = await fetch('/api/preferencias-notificacao/pausar');\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro ao verificar status');\n      }\n\n      return data.data.pausadas;\n    } catch (error) {\n      console.error('Erro ao verificar notificações pausadas:', error);\n      return false;\n    }\n  }, []);\n\n  // Carrega preferências ao montar o componente\n  useEffect(() => {\n    buscarPreferencias();\n  }, [buscarPreferencias]);\n\n  return {\n    // Estado\n    preferencias,\n    carregando,\n    erro,\n    \n    // Ações\n    buscarPreferencias,\n    atualizarPreferencias,\n    resetarPreferencias,\n    pausarNotificacoes,\n    retomarNotificacoes,\n    verificarNotificacoesPausadas,\n  };\n}"],"names":["usePreferenciasNotificacao","preferencias","setPreferencias","useState","carregando","setCarregando","erro","setErro","toast","useToast","buscarPreferencias","useCallback","response","fetch","data","json","ok","Error","error","mensagem","message","title","description","variant","atualizarPreferencias","dados","method","headers","body","JSON","stringify","resetarPreferencias","pausarNotificacoes","dataFim","dataInicio","motivo","toISOString","retomarNotificacoes","verificarNotificacoesPausadas","pausadas","console","useEffect"],"mappings":"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"}