a581c899236ecbefdfc72e7795a04b43
"use strict";

/* istanbul ignore next */
function cov_2443vh0tk6() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\utils\\periodo-status-updater.ts";
  var hash = "6a4336936aeaaf4f7f92fa63cb7117e7fd3ab2a0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\utils\\periodo-status-updater.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 38
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 39
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "8": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 53
        }
      },
      "9": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 41
        }
      },
      "10": {
        start: {
          line: 28,
          column: 18
        },
        end: {
          line: 28,
          column: 28
        }
      },
      "11": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 111,
          column: 5
        }
      },
      "12": {
        start: {
          line: 31,
          column: 38
        },
        end: {
          line: 60,
          column: 10
        }
      },
      "13": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "14": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "15": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "16": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 57
        }
      },
      "17": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 46
        }
      },
      "18": {
        start: {
          line: 73,
          column: 19
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "19": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 62
        }
      },
      "20": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 49
        }
      },
      "21": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 25
        }
      },
      "22": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "23": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 45
        }
      },
      "24": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 95,
          column: 15
        }
      },
      "25": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 100,
          column: 10
        }
      },
      "26": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 71
        }
      },
      "27": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 110,
          column: 10
        }
      },
      "28": {
        start: {
          line: 114,
          column: 18
        },
        end: {
          line: 114,
          column: 28
        }
      },
      "29": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "30": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "31": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "32": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 132,
          column: 14
        }
      },
      "33": {
        start: {
          line: 135,
          column: 25
        },
        end: {
          line: 135,
          column: 29
        }
      },
      "34": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "35": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 53
        }
      },
      "36": {
        start: {
          line: 138,
          column: 15
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "37": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 58
        }
      },
      "38": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "39": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 146,
          column: 14
        }
      },
      "40": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "41": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 163,
          column: 10
        }
      },
      "42": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 69
        }
      },
      "43": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 169,
          column: 10
        }
      },
      "44": {
        start: {
          line: 173,
          column: 18
        },
        end: {
          line: 173,
          column: 28
        }
      },
      "45": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 177,
          column: 5
        }
      },
      "46": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 47
        }
      },
      "47": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "48": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 48
        }
      },
      "49": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 185,
          column: 5
        }
      },
      "50": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 43
        }
      },
      "51": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 187,
          column: 43
        }
      },
      "52": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "53": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "54": {
        start: {
          line: 193,
          column: 31
        },
        end: {
          line: 193,
          column: 33
        }
      },
      "55": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "56": {
        start: {
          line: 195,
          column: 34
        },
        end: {
          line: 195,
          column: 66
        }
      },
      "57": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 43
        }
      },
      "58": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 30
        }
      },
      "59": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 51
        }
      },
      "60": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 77
        }
      },
      "61": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 209,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "atualizarStatusPeriodos",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 38
          }
        },
        loc: {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 112,
            column: 1
          }
        },
        line: 27
      },
      "6": {
        name: "atualizarStatusPeriodo",
        decl: {
          start: {
            line: 113,
            column: 15
          },
          end: {
            line: 113,
            column: 37
          }
        },
        loc: {
          start: {
            line: 113,
            column: 49
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 113
      },
      "7": {
        name: "calcularStatusPeriodo",
        decl: {
          start: {
            line: 172,
            column: 9
          },
          end: {
            line: 172,
            column: 30
          }
        },
        loc: {
          start: {
            line: 172,
            column: 65
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 172
      },
      "8": {
        name: "middlewareAtualizacaoStatus",
        decl: {
          start: {
            line: 189,
            column: 15
          },
          end: {
            line: 189,
            column: 42
          }
        },
        loc: {
          start: {
            line: 189,
            column: 55
          },
          end: {
            line: 211,
            column: 1
          }
        },
        line: 189
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: 73,
            column: 19
          },
          end: {
            line: 78,
            column: 13
          }
        }],
        line: 70
      },
      "1": {
        loc: {
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 70,
            column: 125
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 70,
            column: 66
          }
        }, {
          start: {
            line: 70,
            column: 70
          },
          end: {
            line: 70,
            column: 97
          }
        }, {
          start: {
            line: 70,
            column: 101
          },
          end: {
            line: 70,
            column: 125
          }
        }],
        line: 70
      },
      "2": {
        loc: {
          start: {
            line: 73,
            column: 19
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 19
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: 76,
            column: 19
          },
          end: {
            line: 78,
            column: 13
          }
        }],
        line: 73
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 69
          }
        }, {
          start: {
            line: 73,
            column: 73
          },
          end: {
            line: 73,
            column: 96
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 105,
            column: 18
          },
          end: {
            line: 105,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 43
          },
          end: {
            line: 105,
            column: 56
          }
        }, {
          start: {
            line: 105,
            column: 59
          },
          end: {
            line: 105,
            column: 78
          }
        }],
        line: 105
      },
      "5": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "6": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: 138,
            column: 15
          },
          end: {
            line: 140,
            column: 9
          }
        }],
        line: 136
      },
      "7": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 136,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 136,
            column: 62
          }
        }, {
          start: {
            line: 136,
            column: 66
          },
          end: {
            line: 136,
            column: 93
          }
        }, {
          start: {
            line: 136,
            column: 97
          },
          end: {
            line: 136,
            column: 121
          }
        }],
        line: 136
      },
      "8": {
        loc: {
          start: {
            line: 138,
            column: 15
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 15
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "9": {
        loc: {
          start: {
            line: 138,
            column: 19
          },
          end: {
            line: 138,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 19
          },
          end: {
            line: 138,
            column: 65
          }
        }, {
          start: {
            line: 138,
            column: 69
          },
          end: {
            line: 138,
            column: 92
          }
        }],
        line: 138
      },
      "10": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "11": {
        loc: {
          start: {
            line: 168,
            column: 18
          },
          end: {
            line: 168,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 43
          },
          end: {
            line: 168,
            column: 56
          }
        }, {
          start: {
            line: 168,
            column: 59
          },
          end: {
            line: 168,
            column: 78
          }
        }],
        line: 168
      },
      "12": {
        loc: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "13": {
        loc: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "14": {
        loc: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "15": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 183,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 183,
            column: 27
          }
        }, {
          start: {
            line: 183,
            column: 31
          },
          end: {
            line: 183,
            column: 47
          }
        }],
        line: 183
      },
      "16": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: 199,
            column: 15
          },
          end: {
            line: 202,
            column: 9
          }
        }],
        line: 191
      },
      "17": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 22
          }
        }, {
          start: {
            line: 191,
            column: 26
          },
          end: {
            line: 191,
            column: 47
          }
        }],
        line: 191
      },
      "18": {
        loc: {
          start: {
            line: 208,
            column: 18
          },
          end: {
            line: 208,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 208,
            column: 43
          },
          end: {
            line: 208,
            column: 56
          }
        }, {
          start: {
            line: 208,
            column: 59
          },
          end: {
            line: 208,
            column: 79
          }
        }],
        line: 208
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\utils\\periodo-status-updater.ts"],
      sourcesContent: ["import { prisma } from '@/lib/database-config';\nimport { StatusPeriodo } from '@prisma/client';\n\n/**\n * Atualiza automaticamente o status dos per\xEDodos de avalia\xE7\xE3o baseado nas datas atuais\n * \n * Regras de neg\xF3cio:\n * - PLANEJADO -> ATIVO: quando a data atual >= dataInicio e <= dataFim\n * - ATIVO -> FINALIZADO: quando a data atual > dataFim\n * - Per\xEDodos CANCELADOS n\xE3o s\xE3o alterados\n * \n * @returns Objeto com informa\xE7\xF5es sobre as atualiza\xE7\xF5es realizadas\n */\nexport async function atualizarStatusPeriodos() {\n  const agora = new Date();\n  \n  try {\n    // Buscar per\xEDodos que precisam de atualiza\xE7\xE3o de status\n    const periodosParaAtualizar = await prisma.periodoAvaliacao.findMany({\n      where: {\n        OR: [\n          {\n            // PLANEJADO -> ATIVO: data atual est\xE1 dentro do per\xEDodo\n            status: StatusPeriodo.PLANEJADO,\n            dataInicio: {\n              lte: agora\n            },\n            dataFim: {\n              gte: agora\n            }\n          },\n          {\n            // ATIVO -> FINALIZADO: data atual passou do fim do per\xEDodo\n            status: StatusPeriodo.ATIVO,\n            dataFim: {\n              lt: agora\n            }\n          }\n        ]\n      },\n      select: {\n        id: true,\n        nome: true,\n        status: true,\n        dataInicio: true,\n        dataFim: true\n      }\n    });\n\n    const resultados = {\n      periodosAtualizados: 0,\n      periodosAtivados: 0,\n      periodosFinalizados: 0,\n      detalhes: [] as Array<{\n        id: string;\n        nome: string;\n        statusAnterior: StatusPeriodo;\n        statusNovo: StatusPeriodo;\n      }>\n    };\n\n    // Processar cada per\xEDodo que precisa de atualiza\xE7\xE3o\n    for (const periodo of periodosParaAtualizar) {\n      let novoStatus: StatusPeriodo;\n      \n      if (periodo.status === StatusPeriodo.PLANEJADO && \n          agora >= periodo.dataInicio && \n          agora <= periodo.dataFim) {\n        novoStatus = StatusPeriodo.ATIVO;\n        resultados.periodosAtivados++;\n      } else if (periodo.status === StatusPeriodo.ATIVO && \n                 agora > periodo.dataFim) {\n        novoStatus = StatusPeriodo.FINALIZADO;\n        resultados.periodosFinalizados++;\n      } else {\n        continue; // N\xE3o precisa atualizar\n      }\n\n      // Atualizar o status no banco de dados\n      await prisma.periodoAvaliacao.update({\n        where: { id: periodo.id },\n        data: { \n          status: novoStatus,\n          atualizadoEm: agora\n        }\n      });\n\n      resultados.periodosAtualizados++;\n      resultados.detalhes.push({\n        id: periodo.id,\n        nome: periodo.nome,\n        statusAnterior: periodo.status,\n        statusNovo: novoStatus\n      });\n    }\n\n    return {\n      sucesso: true,\n      ...resultados\n    };\n\n  } catch (error) {\n    console.error('Erro ao atualizar status dos per\xEDodos:', error);\n    return {\n      sucesso: false,\n      erro: error instanceof Error ? error.message : 'Erro desconhecido',\n      periodosAtualizados: 0,\n      periodosAtivados: 0,\n      periodosFinalizados: 0,\n      detalhes: []\n    };\n  }\n}\n\n/**\n * Verifica se um per\xEDodo espec\xEDfico precisa de atualiza\xE7\xE3o de status\n * e o atualiza se necess\xE1rio\n * \n * @param periodoId ID do per\xEDodo a ser verificado\n * @returns Informa\xE7\xF5es sobre a atualiza\xE7\xE3o realizada\n */\nexport async function atualizarStatusPeriodo(periodoId: string) {\n  const agora = new Date();\n  \n  try {\n    const periodo = await prisma.periodoAvaliacao.findUnique({\n      where: { id: periodoId },\n      select: {\n        id: true,\n        nome: true,\n        status: true,\n        dataInicio: true,\n        dataFim: true\n      }\n    });\n\n    if (!periodo) {\n      return {\n        sucesso: false,\n        erro: 'Per\xEDodo n\xE3o encontrado'\n      };\n    }\n\n    // Verificar se precisa atualizar\n    let novoStatus: StatusPeriodo | null = null;\n    \n    if (periodo.status === StatusPeriodo.PLANEJADO && \n        agora >= periodo.dataInicio && \n        agora <= periodo.dataFim) {\n      novoStatus = StatusPeriodo.ATIVO;\n    } else if (periodo.status === StatusPeriodo.ATIVO && \n               agora > periodo.dataFim) {\n      novoStatus = StatusPeriodo.FINALIZADO;\n    }\n\n    if (!novoStatus) {\n      return {\n        sucesso: true,\n        atualizado: false,\n        statusAtual: periodo.status\n      };\n    }\n\n    // Atualizar o status\n    await prisma.periodoAvaliacao.update({\n      where: { id: periodoId },\n      data: { \n        status: novoStatus,\n        atualizadoEm: agora\n      }\n    });\n\n    return {\n      sucesso: true,\n      atualizado: true,\n      statusAnterior: periodo.status,\n      statusNovo: novoStatus\n    };\n\n  } catch (error) {\n    console.error('Erro ao atualizar status do per\xEDodo:', error);\n    return {\n      sucesso: false,\n      erro: error instanceof Error ? error.message : 'Erro desconhecido'\n    };\n  }\n}\n\n/**\n * Obt\xE9m o status atual que um per\xEDodo deveria ter baseado nas datas\n * (sem fazer altera\xE7\xF5es no banco de dados)\n * \n * @param dataInicio Data de in\xEDcio do per\xEDodo\n * @param dataFim Data de fim do per\xEDodo\n * @param statusAtual Status atual do per\xEDodo\n * @returns Status que o per\xEDodo deveria ter\n */\nexport function calcularStatusPeriodo(\n  dataInicio: Date,\n  dataFim: Date,\n  statusAtual: StatusPeriodo\n): StatusPeriodo {\n  const agora = new Date();\n  \n  // Per\xEDodos cancelados n\xE3o mudam de status automaticamente\n  if (statusAtual === StatusPeriodo.CANCELADO) {\n    return StatusPeriodo.CANCELADO;\n  }\n  \n  // Verificar se o per\xEDodo j\xE1 deveria ter terminado\n  if (agora > dataFim) {\n    return StatusPeriodo.FINALIZADO;\n  }\n  \n  // Verificar se o per\xEDodo j\xE1 deveria estar ativo\n  if (agora >= dataInicio && agora <= dataFim) {\n    return StatusPeriodo.ATIVO;\n  }\n  \n  // Per\xEDodo ainda n\xE3o come\xE7ou\n  return StatusPeriodo.PLANEJADO;\n}\n\n/**\n * Middleware para atualiza\xE7\xE3o autom\xE1tica de status antes de opera\xE7\xF5es cr\xEDticas\n * Deve ser chamado antes de:\n * - Listar per\xEDodos\n * - Buscar per\xEDodo espec\xEDfico\n * - Criar/editar avalia\xE7\xF5es\n * \n * @param periodoIds IDs espec\xEDficos para atualizar (opcional)\n */\nexport async function middlewareAtualizacaoStatus(periodoIds?: string[]) {\n  try {\n    if (periodoIds && periodoIds.length > 0) {\n      // Atualizar apenas per\xEDodos espec\xEDficos\n      const resultados = [];\n      for (const id of periodoIds) {\n        const resultado = await atualizarStatusPeriodo(id);\n        resultados.push(resultado);\n      }\n      return resultados;\n    } else {\n      // Atualizar todos os per\xEDodos que precisam\n      return await atualizarStatusPeriodos();\n    }\n  } catch (error) {\n    console.error('Erro no middleware de atualiza\xE7\xE3o de status:', error);\n    // N\xE3o falhar a opera\xE7\xE3o principal por causa do middleware\n    return {\n      sucesso: false,\n      erro: error instanceof Error ? error.message : 'Erro no middleware'\n    };\n  }\n}"],
      names: ["atualizarStatusPeriodo", "atualizarStatusPeriodos", "calcularStatusPeriodo", "middlewareAtualizacaoStatus", "agora", "Date", "periodosParaAtualizar", "prisma", "periodoAvaliacao", "findMany", "where", "OR", "status", "StatusPeriodo", "PLANEJADO", "dataInicio", "lte", "dataFim", "gte", "ATIVO", "lt", "select", "id", "nome", "resultados", "periodosAtualizados", "periodosAtivados", "periodosFinalizados", "detalhes", "periodo", "novoStatus", "FINALIZADO", "update", "data", "atualizadoEm", "push", "statusAnterior", "statusNovo", "sucesso", "error", "console", "erro", "Error", "message", "periodoId", "findUnique", "atualizado", "statusAtual", "CANCELADO", "periodoIds", "length", "resultado"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6a4336936aeaaf4f7f92fa63cb7117e7fd3ab2a0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2443vh0tk6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2443vh0tk6();
cov_2443vh0tk6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2443vh0tk6().f[0]++;
  cov_2443vh0tk6().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2443vh0tk6().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2443vh0tk6().s[3]++;
_export(exports, {
  get atualizarStatusPeriodo() {
    /* istanbul ignore next */
    cov_2443vh0tk6().f[1]++;
    cov_2443vh0tk6().s[4]++;
    return atualizarStatusPeriodo;
  },
  get atualizarStatusPeriodos() {
    /* istanbul ignore next */
    cov_2443vh0tk6().f[2]++;
    cov_2443vh0tk6().s[5]++;
    return atualizarStatusPeriodos;
  },
  get calcularStatusPeriodo() {
    /* istanbul ignore next */
    cov_2443vh0tk6().f[3]++;
    cov_2443vh0tk6().s[6]++;
    return calcularStatusPeriodo;
  },
  get middlewareAtualizacaoStatus() {
    /* istanbul ignore next */
    cov_2443vh0tk6().f[4]++;
    cov_2443vh0tk6().s[7]++;
    return middlewareAtualizacaoStatus;
  }
});
const _databaseconfig =
/* istanbul ignore next */
(cov_2443vh0tk6().s[8]++, require("../database-config"));
const _client =
/* istanbul ignore next */
(cov_2443vh0tk6().s[9]++, require("@prisma/client"));
async function atualizarStatusPeriodos() {
  /* istanbul ignore next */
  cov_2443vh0tk6().f[5]++;
  const agora =
  /* istanbul ignore next */
  (cov_2443vh0tk6().s[10]++, new Date());
  /* istanbul ignore next */
  cov_2443vh0tk6().s[11]++;
  try {
    // Buscar períodos que precisam de atualização de status
    const periodosParaAtualizar =
    /* istanbul ignore next */
    (cov_2443vh0tk6().s[12]++, await _databaseconfig.prisma.periodoAvaliacao.findMany({
      where: {
        OR: [{
          // PLANEJADO -> ATIVO: data atual está dentro do período
          status: _client.StatusPeriodo.PLANEJADO,
          dataInicio: {
            lte: agora
          },
          dataFim: {
            gte: agora
          }
        }, {
          // ATIVO -> FINALIZADO: data atual passou do fim do período
          status: _client.StatusPeriodo.ATIVO,
          dataFim: {
            lt: agora
          }
        }]
      },
      select: {
        id: true,
        nome: true,
        status: true,
        dataInicio: true,
        dataFim: true
      }
    }));
    const resultados =
    /* istanbul ignore next */
    (cov_2443vh0tk6().s[13]++, {
      periodosAtualizados: 0,
      periodosAtivados: 0,
      periodosFinalizados: 0,
      detalhes: []
    });
    // Processar cada período que precisa de atualização
    /* istanbul ignore next */
    cov_2443vh0tk6().s[14]++;
    for (const periodo of periodosParaAtualizar) {
      let novoStatus;
      /* istanbul ignore next */
      cov_2443vh0tk6().s[15]++;
      if (
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[1][0]++, periodo.status === _client.StatusPeriodo.PLANEJADO) &&
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[1][1]++, agora >= periodo.dataInicio) &&
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[1][2]++, agora <= periodo.dataFim)) {
        /* istanbul ignore next */
        cov_2443vh0tk6().b[0][0]++;
        cov_2443vh0tk6().s[16]++;
        novoStatus = _client.StatusPeriodo.ATIVO;
        /* istanbul ignore next */
        cov_2443vh0tk6().s[17]++;
        resultados.periodosAtivados++;
      } else {
        /* istanbul ignore next */
        cov_2443vh0tk6().b[0][1]++;
        cov_2443vh0tk6().s[18]++;
        if (
        /* istanbul ignore next */
        (cov_2443vh0tk6().b[3][0]++, periodo.status === _client.StatusPeriodo.ATIVO) &&
        /* istanbul ignore next */
        (cov_2443vh0tk6().b[3][1]++, agora > periodo.dataFim)) {
          /* istanbul ignore next */
          cov_2443vh0tk6().b[2][0]++;
          cov_2443vh0tk6().s[19]++;
          novoStatus = _client.StatusPeriodo.FINALIZADO;
          /* istanbul ignore next */
          cov_2443vh0tk6().s[20]++;
          resultados.periodosFinalizados++;
        } else {
          /* istanbul ignore next */
          cov_2443vh0tk6().b[2][1]++;
          cov_2443vh0tk6().s[21]++;
          continue; // Não precisa atualizar
        }
      }
      // Atualizar o status no banco de dados
      /* istanbul ignore next */
      cov_2443vh0tk6().s[22]++;
      await _databaseconfig.prisma.periodoAvaliacao.update({
        where: {
          id: periodo.id
        },
        data: {
          status: novoStatus,
          atualizadoEm: agora
        }
      });
      /* istanbul ignore next */
      cov_2443vh0tk6().s[23]++;
      resultados.periodosAtualizados++;
      /* istanbul ignore next */
      cov_2443vh0tk6().s[24]++;
      resultados.detalhes.push({
        id: periodo.id,
        nome: periodo.nome,
        statusAnterior: periodo.status,
        statusNovo: novoStatus
      });
    }
    /* istanbul ignore next */
    cov_2443vh0tk6().s[25]++;
    return {
      sucesso: true,
      ...resultados
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_2443vh0tk6().s[26]++;
    console.error('Erro ao atualizar status dos períodos:', error);
    /* istanbul ignore next */
    cov_2443vh0tk6().s[27]++;
    return {
      sucesso: false,
      erro: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[4][1]++, 'Erro desconhecido'),
      periodosAtualizados: 0,
      periodosAtivados: 0,
      periodosFinalizados: 0,
      detalhes: []
    };
  }
}
async function atualizarStatusPeriodo(periodoId) {
  /* istanbul ignore next */
  cov_2443vh0tk6().f[6]++;
  const agora =
  /* istanbul ignore next */
  (cov_2443vh0tk6().s[28]++, new Date());
  /* istanbul ignore next */
  cov_2443vh0tk6().s[29]++;
  try {
    const periodo =
    /* istanbul ignore next */
    (cov_2443vh0tk6().s[30]++, await _databaseconfig.prisma.periodoAvaliacao.findUnique({
      where: {
        id: periodoId
      },
      select: {
        id: true,
        nome: true,
        status: true,
        dataInicio: true,
        dataFim: true
      }
    }));
    /* istanbul ignore next */
    cov_2443vh0tk6().s[31]++;
    if (!periodo) {
      /* istanbul ignore next */
      cov_2443vh0tk6().b[5][0]++;
      cov_2443vh0tk6().s[32]++;
      return {
        sucesso: false,
        erro: 'Período não encontrado'
      };
    } else
    /* istanbul ignore next */
    {
      cov_2443vh0tk6().b[5][1]++;
    }
    // Verificar se precisa atualizar
    let novoStatus =
    /* istanbul ignore next */
    (cov_2443vh0tk6().s[33]++, null);
    /* istanbul ignore next */
    cov_2443vh0tk6().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_2443vh0tk6().b[7][0]++, periodo.status === _client.StatusPeriodo.PLANEJADO) &&
    /* istanbul ignore next */
    (cov_2443vh0tk6().b[7][1]++, agora >= periodo.dataInicio) &&
    /* istanbul ignore next */
    (cov_2443vh0tk6().b[7][2]++, agora <= periodo.dataFim)) {
      /* istanbul ignore next */
      cov_2443vh0tk6().b[6][0]++;
      cov_2443vh0tk6().s[35]++;
      novoStatus = _client.StatusPeriodo.ATIVO;
    } else {
      /* istanbul ignore next */
      cov_2443vh0tk6().b[6][1]++;
      cov_2443vh0tk6().s[36]++;
      if (
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[9][0]++, periodo.status === _client.StatusPeriodo.ATIVO) &&
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[9][1]++, agora > periodo.dataFim)) {
        /* istanbul ignore next */
        cov_2443vh0tk6().b[8][0]++;
        cov_2443vh0tk6().s[37]++;
        novoStatus = _client.StatusPeriodo.FINALIZADO;
      } else
      /* istanbul ignore next */
      {
        cov_2443vh0tk6().b[8][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2443vh0tk6().s[38]++;
    if (!novoStatus) {
      /* istanbul ignore next */
      cov_2443vh0tk6().b[10][0]++;
      cov_2443vh0tk6().s[39]++;
      return {
        sucesso: true,
        atualizado: false,
        statusAtual: periodo.status
      };
    } else
    /* istanbul ignore next */
    {
      cov_2443vh0tk6().b[10][1]++;
    }
    // Atualizar o status
    cov_2443vh0tk6().s[40]++;
    await _databaseconfig.prisma.periodoAvaliacao.update({
      where: {
        id: periodoId
      },
      data: {
        status: novoStatus,
        atualizadoEm: agora
      }
    });
    /* istanbul ignore next */
    cov_2443vh0tk6().s[41]++;
    return {
      sucesso: true,
      atualizado: true,
      statusAnterior: periodo.status,
      statusNovo: novoStatus
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_2443vh0tk6().s[42]++;
    console.error('Erro ao atualizar status do período:', error);
    /* istanbul ignore next */
    cov_2443vh0tk6().s[43]++;
    return {
      sucesso: false,
      erro: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[11][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[11][1]++, 'Erro desconhecido')
    };
  }
}
function calcularStatusPeriodo(dataInicio, dataFim, statusAtual) {
  /* istanbul ignore next */
  cov_2443vh0tk6().f[7]++;
  const agora =
  /* istanbul ignore next */
  (cov_2443vh0tk6().s[44]++, new Date());
  // Períodos cancelados não mudam de status automaticamente
  /* istanbul ignore next */
  cov_2443vh0tk6().s[45]++;
  if (statusAtual === _client.StatusPeriodo.CANCELADO) {
    /* istanbul ignore next */
    cov_2443vh0tk6().b[12][0]++;
    cov_2443vh0tk6().s[46]++;
    return _client.StatusPeriodo.CANCELADO;
  } else
  /* istanbul ignore next */
  {
    cov_2443vh0tk6().b[12][1]++;
  }
  // Verificar se o período já deveria ter terminado
  cov_2443vh0tk6().s[47]++;
  if (agora > dataFim) {
    /* istanbul ignore next */
    cov_2443vh0tk6().b[13][0]++;
    cov_2443vh0tk6().s[48]++;
    return _client.StatusPeriodo.FINALIZADO;
  } else
  /* istanbul ignore next */
  {
    cov_2443vh0tk6().b[13][1]++;
  }
  // Verificar se o período já deveria estar ativo
  cov_2443vh0tk6().s[49]++;
  if (
  /* istanbul ignore next */
  (cov_2443vh0tk6().b[15][0]++, agora >= dataInicio) &&
  /* istanbul ignore next */
  (cov_2443vh0tk6().b[15][1]++, agora <= dataFim)) {
    /* istanbul ignore next */
    cov_2443vh0tk6().b[14][0]++;
    cov_2443vh0tk6().s[50]++;
    return _client.StatusPeriodo.ATIVO;
  } else
  /* istanbul ignore next */
  {
    cov_2443vh0tk6().b[14][1]++;
  }
  // Período ainda não começou
  cov_2443vh0tk6().s[51]++;
  return _client.StatusPeriodo.PLANEJADO;
}
async function middlewareAtualizacaoStatus(periodoIds) {
  /* istanbul ignore next */
  cov_2443vh0tk6().f[8]++;
  cov_2443vh0tk6().s[52]++;
  try {
    /* istanbul ignore next */
    cov_2443vh0tk6().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_2443vh0tk6().b[17][0]++, periodoIds) &&
    /* istanbul ignore next */
    (cov_2443vh0tk6().b[17][1]++, periodoIds.length > 0)) {
      /* istanbul ignore next */
      cov_2443vh0tk6().b[16][0]++;
      // Atualizar apenas períodos específicos
      const resultados =
      /* istanbul ignore next */
      (cov_2443vh0tk6().s[54]++, []);
      /* istanbul ignore next */
      cov_2443vh0tk6().s[55]++;
      for (const id of periodoIds) {
        const resultado =
        /* istanbul ignore next */
        (cov_2443vh0tk6().s[56]++, await atualizarStatusPeriodo(id));
        /* istanbul ignore next */
        cov_2443vh0tk6().s[57]++;
        resultados.push(resultado);
      }
      /* istanbul ignore next */
      cov_2443vh0tk6().s[58]++;
      return resultados;
    } else {
      /* istanbul ignore next */
      cov_2443vh0tk6().b[16][1]++;
      cov_2443vh0tk6().s[59]++;
      // Atualizar todos os períodos que precisam
      return await atualizarStatusPeriodos();
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2443vh0tk6().s[60]++;
    console.error('Erro no middleware de atualização de status:', error);
    // Não falhar a operação principal por causa do middleware
    /* istanbul ignore next */
    cov_2443vh0tk6().s[61]++;
    return {
      sucesso: false,
      erro: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2443vh0tk6().b[18][1]++, 'Erro no middleware')
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,