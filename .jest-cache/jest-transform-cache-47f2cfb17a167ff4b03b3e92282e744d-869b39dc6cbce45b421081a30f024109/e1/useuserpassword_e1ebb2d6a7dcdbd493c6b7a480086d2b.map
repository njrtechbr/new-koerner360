{"version":3,"names":["cov_14518uwgi9","actualCoverage","s","default","f","_default","useUserPassword","alterarSenhaSchema","_zod","z","object","senhaAtual","string","min","novaSenha","regex","confirmarSenha","refine","data","message","path","redefinirSenhaSchema","session","_react1","useSession","carregando","setCarregando","_react","useState","erros","setErros","limparErros","validarAlteracaoSenha","dados","parse","error","ZodError","b","novosErros","errors","forEach","err","validarRedefinicaoSenha","alterarSenha","usuarioId","user","_sonner","toast","podeAlterar","id","tipo","response","fetch","method","headers","body","JSON","stringify","resultado","json","ok","status","erro","includes","success","console","redefinirSenha","redefinicaoAdmin","gerarSenhaTemporaria","senhaTemporaria","gerarSenhaSegura","minusculas","maiusculas","numeros","especiais","todosCaracteres","senha","Math","floor","random","length","i","split","sort","join","verificarForcaSenha","pontuacao","sugestoes","push","test","caracteresUnicos","Set","size","padroesComuns","temPadraoComum","some","padrao","toLowerCase","nivel"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-user-password.ts"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { toast } from 'sonner';\nimport { useSession } from 'next-auth/react';\nimport { z } from 'zod';\n\n// Schema de validação para alteração de senha\nconst alterarSenhaSchema = z\n  .object({\n    senhaAtual: z.string().min(1, 'Senha atual é obrigatória'),\n    novaSenha: z\n      .string()\n      .min(8, 'Nova senha deve ter pelo menos 8 caracteres')\n      .regex(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n        'Nova senha deve conter pelo menos: 1 letra minúscula, 1 maiúscula, 1 número e 1 caractere especial'\n      ),\n    confirmarSenha: z.string().min(1, 'Confirmação de senha é obrigatória'),\n  })\n  .refine(data => data.novaSenha === data.confirmarSenha, {\n    message: 'Senhas não coincidem',\n    path: ['confirmarSenha'],\n  });\n\n// Schema para redefinição de senha (admin)\nconst redefinirSenhaSchema = z\n  .object({\n    novaSenha: z\n      .string()\n      .min(8, 'Nova senha deve ter pelo menos 8 caracteres')\n      .regex(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n        'Nova senha deve conter pelo menos: 1 letra minúscula, 1 maiúscula, 1 número e 1 caractere especial'\n      ),\n    confirmarSenha: z.string().min(1, 'Confirmação de senha é obrigatória'),\n  })\n  .refine(data => data.novaSenha === data.confirmarSenha, {\n    message: 'Senhas não coincidem',\n    path: ['confirmarSenha'],\n  });\n\nexport type AlterarSenhaData = z.infer<typeof alterarSenhaSchema>;\nexport type RedefinirSenhaData = z.infer<typeof redefinirSenhaSchema>;\n\nexport interface UseUserPasswordReturn {\n  // Estados\n  carregando: boolean;\n  erros: Record<string, string>;\n\n  // Funções para alteração de senha (usuário logado)\n  alterarSenha: (\n    usuarioId: string,\n    dados: AlterarSenhaData\n  ) => Promise<boolean>;\n  validarAlteracaoSenha: (dados: AlterarSenhaData) => boolean;\n\n  // Funções para redefinição de senha (admin)\n  redefinirSenha: (\n    usuarioId: string,\n    dados: RedefinirSenhaData\n  ) => Promise<boolean>;\n  gerarSenhaTemporaria: (usuarioId: string) => Promise<string | null>;\n  validarRedefinicaoSenha: (dados: RedefinirSenhaData) => boolean;\n\n  // Utilitários\n  gerarSenhaSegura: () => string;\n  verificarForcaSenha: (senha: string) => {\n    pontuacao: number;\n    nivel: 'fraca' | 'media' | 'forte' | 'muito-forte';\n    sugestoes: string[];\n  };\n  limparErros: () => void;\n}\n\nexport function useUserPassword(): UseUserPasswordReturn {\n  const { data: session } = useSession();\n  const [carregando, setCarregando] = useState(false);\n  const [erros, setErros] = useState<Record<string, string>>({});\n\n  const limparErros = () => {\n    setErros({});\n  };\n\n  const validarAlteracaoSenha = (dados: AlterarSenhaData): boolean => {\n    try {\n      alterarSenhaSchema.parse(dados);\n      limparErros();\n      return true;\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const novosErros: Record<string, string> = {};\n        error.errors.forEach(err => {\n          if (err.path) {\n            novosErros[err.path[0]] = err.message;\n          }\n        });\n        setErros(novosErros);\n      }\n      return false;\n    }\n  };\n\n  const validarRedefinicaoSenha = (dados: RedefinirSenhaData): boolean => {\n    try {\n      redefinirSenhaSchema.parse(dados);\n      limparErros();\n      return true;\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const novosErros: Record<string, string> = {};\n        error.errors.forEach(err => {\n          if (err.path) {\n            novosErros[err.path[0]] = err.message;\n          }\n        });\n        setErros(novosErros);\n      }\n      return false;\n    }\n  };\n\n  const alterarSenha = async (\n    usuarioId: string,\n    dados: AlterarSenhaData\n  ): Promise<boolean> => {\n    if (!validarAlteracaoSenha(dados)) {\n      return false;\n    }\n\n    if (!session?.user) {\n      toast.error('Usuário não autenticado');\n      return false;\n    }\n\n    // Verificar se o usuário pode alterar a senha (próprio usuário ou admin)\n    const podeAlterar =\n      session.user.id === usuarioId || session.user.tipo === 'ADMIN';\n    if (!podeAlterar) {\n      toast.error('Você não tem permissão para alterar esta senha');\n      return false;\n    }\n\n    try {\n      setCarregando(true);\n      limparErros();\n\n      const response = await fetch(`/api/usuarios/${usuarioId}/senha`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          senhaAtual: dados.senhaAtual,\n          novaSenha: dados.novaSenha,\n        }),\n      });\n\n      const resultado = await response.json();\n\n      if (!response.ok) {\n        if (response.status === 400 && resultado.erro) {\n          toast.error(resultado.erro);\n          if (resultado.erro.includes('senha atual')) {\n            setErros({ senhaAtual: 'Senha atual incorreta' });\n          }\n        } else {\n          toast.error('Erro ao alterar senha');\n        }\n        return false;\n      }\n\n      toast.success('Senha alterada com sucesso');\n      return true;\n    } catch (error) {\n      console.error('Erro ao alterar senha:', error);\n      toast.error('Erro interno do servidor');\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  };\n\n  const redefinirSenha = async (\n    usuarioId: string,\n    dados: RedefinirSenhaData\n  ): Promise<boolean> => {\n    if (!validarRedefinicaoSenha(dados)) {\n      return false;\n    }\n\n    if (!session?.user || session.user.tipo !== 'ADMIN') {\n      toast.error('Apenas administradores podem redefinir senhas');\n      return false;\n    }\n\n    try {\n      setCarregando(true);\n      limparErros();\n\n      const response = await fetch(`/api/usuarios/${usuarioId}/senha`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          novaSenha: dados.novaSenha,\n          redefinicaoAdmin: true,\n        }),\n      });\n\n      const resultado = await response.json();\n\n      if (!response.ok) {\n        toast.error(resultado.erro || 'Erro ao redefinir senha');\n        return false;\n      }\n\n      toast.success('Senha redefinida com sucesso');\n      return true;\n    } catch (error) {\n      console.error('Erro ao redefinir senha:', error);\n      toast.error('Erro interno do servidor');\n      return false;\n    } finally {\n      setCarregando(false);\n    }\n  };\n\n  const gerarSenhaTemporaria = async (\n    usuarioId: string\n  ): Promise<string | null> => {\n    if (!session?.user || session.user.tipo !== 'ADMIN') {\n      toast.error('Apenas administradores podem gerar senhas temporárias');\n      return null;\n    }\n\n    try {\n      setCarregando(true);\n\n      const response = await fetch(`/api/usuarios/${usuarioId}/senha`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resultado = await response.json();\n\n      if (!response.ok) {\n        toast.error(resultado.erro || 'Erro ao gerar senha temporária');\n        return null;\n      }\n\n      toast.success('Senha temporária gerada com sucesso');\n      return resultado.senhaTemporaria;\n    } catch (error) {\n      console.error('Erro ao gerar senha temporária:', error);\n      toast.error('Erro interno do servidor');\n      return null;\n    } finally {\n      setCarregando(false);\n    }\n  };\n\n  const gerarSenhaSegura = (): string => {\n    const minusculas = 'abcdefghijklmnopqrstuvwxyz';\n    const maiusculas = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const numeros = '0123456789';\n    const especiais = '@$!%*?&';\n\n    const todosCaracteres = minusculas + maiusculas + numeros + especiais;\n\n    let senha = '';\n\n    // Garantir pelo menos um caractere de cada tipo\n    senha += minusculas[Math.floor(Math.random() * minusculas.length)];\n    senha += maiusculas[Math.floor(Math.random() * maiusculas.length)];\n    senha += numeros[Math.floor(Math.random() * numeros.length)];\n    senha += especiais[Math.floor(Math.random() * especiais.length)];\n\n    // Completar com caracteres aleatórios até 12 caracteres\n    for (let i = 4; i < 12; i++) {\n      senha +=\n        todosCaracteres[Math.floor(Math.random() * todosCaracteres.length)];\n    }\n\n    // Embaralhar a senha\n    return senha\n      .split('')\n      .sort(() => Math.random() - 0.5)\n      .join('');\n  };\n\n  const verificarForcaSenha = (senha: string) => {\n    let pontuacao = 0;\n    const sugestoes: string[] = [];\n\n    // Comprimento\n    if (senha.length >= 8) {\n      pontuacao += 1;\n    } else {\n      sugestoes.push('Use pelo menos 8 caracteres');\n    }\n\n    if (senha.length >= 12) {\n      pontuacao += 1;\n    } else if (senha.length >= 8) {\n      sugestoes.push('Use 12 ou mais caracteres para maior segurança');\n    }\n\n    // Letras minúsculas\n    if (/[a-z]/.test(senha)) {\n      pontuacao += 1;\n    } else {\n      sugestoes.push('Inclua letras minúsculas');\n    }\n\n    // Letras maiúsculas\n    if (/[A-Z]/.test(senha)) {\n      pontuacao += 1;\n    } else {\n      sugestoes.push('Inclua letras maiúsculas');\n    }\n\n    // Números\n    if (/\\d/.test(senha)) {\n      pontuacao += 1;\n    } else {\n      sugestoes.push('Inclua números');\n    }\n\n    // Caracteres especiais\n    if (/[@$!%*?&]/.test(senha)) {\n      pontuacao += 1;\n    } else {\n      sugestoes.push('Inclua caracteres especiais (@$!%*?&)');\n    }\n\n    // Variedade de caracteres\n    const caracteresUnicos = new Set(senha).size;\n    if (caracteresUnicos >= senha.length * 0.7) {\n      pontuacao += 1;\n    } else {\n      sugestoes.push('Evite repetir muitos caracteres');\n    }\n\n    // Padrões comuns\n    const padroesComuns = [\n      /123456/,\n      /abcdef/,\n      /qwerty/,\n      /(.)\\1{2,}/, // 3 ou mais caracteres repetidos\n    ];\n\n    const temPadraoComum = padroesComuns.some(padrao =>\n      padrao.test(senha.toLowerCase())\n    );\n    if (!temPadraoComum) {\n      pontuacao += 1;\n    } else {\n      sugestoes.push('Evite sequências e padrões comuns');\n    }\n\n    // Determinar nível\n    let nivel: 'fraca' | 'media' | 'forte' | 'muito-forte';\n    if (pontuacao <= 2) {\n      nivel = 'fraca';\n    } else if (pontuacao <= 4) {\n      nivel = 'media';\n    } else if (pontuacao <= 6) {\n      nivel = 'forte';\n    } else {\n      nivel = 'muito-forte';\n    }\n\n    return {\n      pontuacao,\n      nivel,\n      sugestoes,\n    };\n  };\n\n  return {\n    carregando,\n    erros,\n    alterarSenha,\n    validarAlteracaoSenha,\n    redefinirSenha,\n    gerarSenhaTemporaria,\n    validarRedefinicaoSenha,\n    gerarSenhaSegura,\n    verificarForcaSenha,\n    limparErros,\n  };\n}\n\nexport default useUserPassword;\n"],"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","ignoreList":[]}