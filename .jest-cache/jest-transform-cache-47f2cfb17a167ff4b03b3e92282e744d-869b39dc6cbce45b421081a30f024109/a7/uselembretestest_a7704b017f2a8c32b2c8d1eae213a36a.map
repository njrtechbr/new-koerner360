{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\__tests__\\use-lembretes.test.ts"],"sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { useLembretes } from '../use-lembretes';\nimport { useToast } from '../use-toast';\n\n// Mock do hook useToast\nvi.mock('../use-toast', () => ({\n  useToast: vi.fn(() => ({\n    toast: vi.fn(),\n  })),\n}));\n\n// Mock do fetch global\nconst mockFetch = vi.fn();\nglobal.fetch = mockFetch;\n\n// Mock dos dados de teste\nconst mockLembretes = [\n  {\n    id: '1',\n    tipo: 'AVALIACAO_PENDENTE' as const,\n    titulo: 'Lembrete de Avaliação',\n    mensagem: 'Você tem uma avaliação pendente',\n    dataEnvio: new Date().toISOString(),\n    enviado: false,\n    tentativas: 0,\n    ultimaTentativa: null,\n    proximaTentativa: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n    erro: null,\n    criadoEm: new Date().toISOString(),\n    atualizadoEm: new Date().toISOString(),\n    usuario: {\n      id: '1',\n      nome: 'João Silva',\n      email: 'joao@teste.com',\n    },\n    avaliacao: {\n      id: '1',\n      titulo: 'Avaliação Q1 2024',\n      prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    },\n  },\n];\n\nconst mockResultadoLembretes = {\n  lembretes: mockLembretes,\n  total: 1,\n  pagina: 1,\n  totalPaginas: 1,\n  porPagina: 10,\n};\n\ndescribe('useLembretes', () => {\n  const mockToast = vi.fn();\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    (useToast as any).mockReturnValue({ toast: mockToast });\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  describe('buscarLembretes', () => {\n    it('deve buscar lembretes com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResultadoLembretes,\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      await act(async () => {\n        await result.current.buscarLembretes();\n      });\n\n      expect(result.current.lembretes).toEqual(mockLembretes);\n      expect(result.current.total).toBe(1);\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBeNull();\n    });\n\n    it('deve lidar com erro na busca', async () => {\n      const errorMessage = 'Erro ao buscar lembretes';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => useLembretes());\n\n      await act(async () => {\n        await result.current.buscarLembretes();\n      });\n\n      expect(result.current.lembretes).toEqual([]);\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBe(errorMessage);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n\n    it('deve aplicar filtros corretamente', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResultadoLembretes,\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      const filtros = {\n        tipo: 'AVALIACAO_PENDENTE' as const,\n        status: 'pendente' as const,\n        usuarioId: '1',\n        avaliacaoId: '1',\n        dataInicio: new Date('2024-01-01'),\n        dataFim: new Date('2024-12-31'),\n      };\n\n      await act(async () => {\n        await result.current.buscarLembretes(filtros);\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/api/lembretes'),\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n\n      // Verificar se os parâmetros de query foram construídos corretamente\n      const url = mockFetch.mock.calls[0][0];\n      expect(url).toContain('tipo=AVALIACAO_PENDENTE');\n      expect(url).toContain('status=pendente');\n      expect(url).toContain('usuarioId=1');\n      expect(url).toContain('avaliacaoId=1');\n    });\n  });\n\n  describe('buscarLembrete', () => {\n    it('deve buscar lembrete específico com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockLembretes[0],\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      let lembrete;\n      await act(async () => {\n        lembrete = await result.current.buscarLembrete('1');\n      });\n\n      expect(lembrete).toEqual(mockLembretes[0]);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/lembretes/1',\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n    });\n\n    it('deve lidar com erro ao buscar lembrete específico', async () => {\n      const errorMessage = 'Lembrete não encontrado';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => useLembretes());\n\n      let lembrete;\n      await act(async () => {\n        lembrete = await result.current.buscarLembrete('999');\n      });\n\n      expect(lembrete).toBeNull();\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('criarLembrete', () => {\n    it('deve criar lembrete com sucesso', async () => {\n      const novoLembrete = {\n        tipo: 'LEMBRETE_PERSONALIZADO' as const,\n        titulo: 'Novo Lembrete',\n        mensagem: 'Mensagem do lembrete',\n        dataEnvio: new Date().toISOString(),\n        usuarioId: '1',\n        avaliacaoId: '1',\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ ...novoLembrete, id: '2' }),\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      let lembreteCreated;\n      await act(async () => {\n        lembreteCreated = await result.current.criarLembrete(novoLembrete);\n      });\n\n      expect(lembreteCreated).toEqual({ ...novoLembrete, id: '2' });\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/lembretes',\n        expect.objectContaining({\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(novoLembrete),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Lembrete criado com sucesso',\n      });\n    });\n\n    it('deve lidar com erro ao criar lembrete', async () => {\n      const errorMessage = 'Erro ao criar lembrete';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => useLembretes());\n\n      const novoLembrete = {\n        tipo: 'LEMBRETE_PERSONALIZADO' as const,\n        titulo: 'Novo Lembrete',\n        mensagem: 'Mensagem do lembrete',\n        dataEnvio: new Date().toISOString(),\n        usuarioId: '1',\n      };\n\n      let lembreteCreated;\n      await act(async () => {\n        lembreteCreated = await result.current.criarLembrete(novoLembrete);\n      });\n\n      expect(lembreteCreated).toBeNull();\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('atualizarLembrete', () => {\n    it('deve atualizar lembrete com sucesso', async () => {\n      const dadosAtualizacao = {\n        titulo: 'Título Atualizado',\n        mensagem: 'Mensagem atualizada',\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ ...mockLembretes[0], ...dadosAtualizacao }),\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      let lembreteAtualizado;\n      await act(async () => {\n        lembreteAtualizado = await result.current.atualizarLembrete('1', dadosAtualizacao);\n      });\n\n      expect(lembreteAtualizado).toEqual({ ...mockLembretes[0], ...dadosAtualizacao });\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/lembretes/1',\n        expect.objectContaining({\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(dadosAtualizacao),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Lembrete atualizado com sucesso',\n      });\n    });\n  });\n\n  describe('removerLembrete', () => {\n    it('deve remover lembrete com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.removerLembrete('1');\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/lembretes/1',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Lembrete removido com sucesso',\n      });\n    });\n  });\n\n  describe('removerLembretesEmLote', () => {\n    it('deve remover lembretes em lote com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ removidos: 3 }),\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      const filtros = {\n        ids: ['1', '2', '3'],\n      };\n\n      let resultado;\n      await act(async () => {\n        resultado = await result.current.removerLembretesEmLote(filtros);\n      });\n\n      expect(resultado).toEqual({ removidos: 3 });\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/lembretes',\n        expect.objectContaining({\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(filtros),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: '3 lembretes removidos com sucesso',\n      });\n    });\n  });\n\n  describe('executarAcao', () => {\n    it('deve reenviar lembrete com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.executarAcao('1', 'reenviar');\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/lembretes/1',\n        expect.objectContaining({\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ acao: 'reenviar' }),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Lembrete reenviado com sucesso',\n      });\n    });\n\n    it('deve marcar como enviado com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.executarAcao('1', 'marcar_enviado');\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Lembrete marcado como enviado',\n      });\n    });\n\n    it('deve reagendar lembrete com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      const novaData = new Date(Date.now() + 24 * 60 * 60 * 1000);\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.executarAcao('1', 'reagendar', { novaData });\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/lembretes/1',\n        expect.objectContaining({\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ acao: 'reagendar', novaData: novaData.toISOString() }),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Lembrete reagendado com sucesso',\n      });\n    });\n  });\n\n  describe('estados de carregamento', () => {\n    it('deve gerenciar estado de carregamento corretamente', async () => {\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n\n      mockFetch.mockReturnValueOnce(promise);\n\n      const { result } = renderHook(() => useLembretes());\n\n      // Iniciar busca\n      act(() => {\n        result.current.buscarLembretes();\n      });\n\n      // Verificar que está carregando\n      expect(result.current.carregando).toBe(true);\n\n      // Resolver promise\n      await act(async () => {\n        resolvePromise!({\n          ok: true,\n          json: async () => mockResultadoLembretes,\n        });\n      });\n\n      // Verificar que não está mais carregando\n      expect(result.current.carregando).toBe(false);\n    });\n  });\n\n  describe('paginação', () => {\n    it('deve gerenciar paginação corretamente', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          ...mockResultadoLembretes,\n          pagina: 2,\n          totalPaginas: 3,\n        }),\n      });\n\n      const { result } = renderHook(() => useLembretes());\n\n      await act(async () => {\n        await result.current.buscarLembretes({}, { pagina: 2, porPagina: 10 });\n      });\n\n      expect(result.current.pagina).toBe(2);\n      expect(result.current.totalPaginas).toBe(3);\n      expect(result.current.porPagina).toBe(10);\n\n      // Verificar se os parâmetros de paginação foram enviados\n      const url = mockFetch.mock.calls[0][0];\n      expect(url).toContain('pagina=2');\n      expect(url).toContain('porPagina=10');\n    });\n  });\n});"],"names":["vi","mock","useToast","fn","toast","mockFetch","global","fetch","mockLembretes","id","tipo","titulo","mensagem","dataEnvio","Date","toISOString","enviado","tentativas","ultimaTentativa","proximaTentativa","now","erro","criadoEm","atualizadoEm","usuario","nome","email","avaliacao","prazo","mockResultadoLembretes","lembretes","total","pagina","totalPaginas","porPagina","describe","mockToast","beforeEach","clearAllMocks","mockReturnValue","afterEach","resetAllMocks","it","mockResolvedValueOnce","ok","json","result","renderHook","useLembretes","act","current","buscarLembretes","expect","toEqual","toBe","carregando","toBeNull","errorMessage","mockRejectedValueOnce","Error","toHaveBeenCalledWith","title","description","variant","filtros","status","usuarioId","avaliacaoId","dataInicio","dataFim","stringContaining","objectContaining","method","url","calls","toContain","lembrete","buscarLembrete","novoLembrete","lembreteCreated","criarLembrete","headers","body","JSON","stringify","dadosAtualizacao","lembreteAtualizado","atualizarLembrete","success","sucesso","removerLembrete","removidos","ids","resultado","removerLembretesEmLote","executarAcao","acao","novaData","resolvePromise","promise","Promise","resolve","mockReturnValueOnce"],"mappings":"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"}