e25aba381334db42c5f8a2413bc3519a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _vitest = require("vitest");
const _uselembretes = require("../use-lembretes");
const _usetoast = require("../use-toast");
// Mock do hook useToast
_vitest.vi.mock('../use-toast', ()=>({
        useToast: _vitest.vi.fn(()=>({
                toast: _vitest.vi.fn()
            }))
    }));
// Mock do fetch global
const mockFetch = _vitest.vi.fn();
global.fetch = mockFetch;
// Mock dos dados de teste
const mockLembretes = [
    {
        id: '1',
        tipo: 'AVALIACAO_PENDENTE',
        titulo: 'Lembrete de Avaliação',
        mensagem: 'Você tem uma avaliação pendente',
        dataEnvio: new Date().toISOString(),
        enviado: false,
        tentativas: 0,
        ultimaTentativa: null,
        proximaTentativa: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        erro: null,
        criadoEm: new Date().toISOString(),
        atualizadoEm: new Date().toISOString(),
        usuario: {
            id: '1',
            nome: 'João Silva',
            email: 'joao@teste.com'
        },
        avaliacao: {
            id: '1',
            titulo: 'Avaliação Q1 2024',
            prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
        }
    }
];
const mockResultadoLembretes = {
    lembretes: mockLembretes,
    total: 1,
    pagina: 1,
    totalPaginas: 1,
    porPagina: 10
};
(0, _vitest.describe)('useLembretes', ()=>{
    const mockToast = _vitest.vi.fn();
    (0, _vitest.beforeEach)(()=>{
        _vitest.vi.clearAllMocks();
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _vitest.afterEach)(()=>{
        _vitest.vi.resetAllMocks();
    });
    (0, _vitest.describe)('buscarLembretes', ()=>{
        (0, _vitest.it)('deve buscar lembretes com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarLembretes();
            });
            (0, _vitest.expect)(result.current.lembretes).toEqual(mockLembretes);
            (0, _vitest.expect)(result.current.total).toBe(1);
            (0, _vitest.expect)(result.current.carregando).toBe(false);
            (0, _vitest.expect)(result.current.erro).toBeNull();
        });
        (0, _vitest.it)('deve lidar com erro na busca', async ()=>{
            const errorMessage = 'Erro ao buscar lembretes';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarLembretes();
            });
            (0, _vitest.expect)(result.current.lembretes).toEqual([]);
            (0, _vitest.expect)(result.current.carregando).toBe(false);
            (0, _vitest.expect)(result.current.erro).toBe(errorMessage);
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
        (0, _vitest.it)('deve aplicar filtros corretamente', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockResultadoLembretes
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            const filtros = {
                tipo: 'AVALIACAO_PENDENTE',
                status: 'pendente',
                usuarioId: '1',
                avaliacaoId: '1',
                dataInicio: new Date('2024-01-01'),
                dataFim: new Date('2024-12-31')
            };
            await (0, _react.act)(async ()=>{
                await result.current.buscarLembretes(filtros);
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith(_vitest.expect.stringContaining('/api/lembretes'), _vitest.expect.objectContaining({
                method: 'GET'
            }));
            // Verificar se os parâmetros de query foram construídos corretamente
            const url = mockFetch.mock.calls[0][0];
            (0, _vitest.expect)(url).toContain('tipo=AVALIACAO_PENDENTE');
            (0, _vitest.expect)(url).toContain('status=pendente');
            (0, _vitest.expect)(url).toContain('usuarioId=1');
            (0, _vitest.expect)(url).toContain('avaliacaoId=1');
        });
    });
    (0, _vitest.describe)('buscarLembrete', ()=>{
        (0, _vitest.it)('deve buscar lembrete específico com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockLembretes[0]
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            let lembrete;
            await (0, _react.act)(async ()=>{
                lembrete = await result.current.buscarLembrete('1');
            });
            (0, _vitest.expect)(lembrete).toEqual(mockLembretes[0]);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/lembretes/1', _vitest.expect.objectContaining({
                method: 'GET'
            }));
        });
        (0, _vitest.it)('deve lidar com erro ao buscar lembrete específico', async ()=>{
            const errorMessage = 'Lembrete não encontrado';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            let lembrete;
            await (0, _react.act)(async ()=>{
                lembrete = await result.current.buscarLembrete('999');
            });
            (0, _vitest.expect)(lembrete).toBeNull();
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _vitest.describe)('criarLembrete', ()=>{
        (0, _vitest.it)('deve criar lembrete com sucesso', async ()=>{
            const novoLembrete = {
                tipo: 'LEMBRETE_PERSONALIZADO',
                titulo: 'Novo Lembrete',
                mensagem: 'Mensagem do lembrete',
                dataEnvio: new Date().toISOString(),
                usuarioId: '1',
                avaliacaoId: '1'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...novoLembrete,
                        id: '2'
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            let lembreteCreated;
            await (0, _react.act)(async ()=>{
                lembreteCreated = await result.current.criarLembrete(novoLembrete);
            });
            (0, _vitest.expect)(lembreteCreated).toEqual({
                ...novoLembrete,
                id: '2'
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/lembretes', _vitest.expect.objectContaining({
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(novoLembrete)
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Lembrete criado com sucesso'
            });
        });
        (0, _vitest.it)('deve lidar com erro ao criar lembrete', async ()=>{
            const errorMessage = 'Erro ao criar lembrete';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            const novoLembrete = {
                tipo: 'LEMBRETE_PERSONALIZADO',
                titulo: 'Novo Lembrete',
                mensagem: 'Mensagem do lembrete',
                dataEnvio: new Date().toISOString(),
                usuarioId: '1'
            };
            let lembreteCreated;
            await (0, _react.act)(async ()=>{
                lembreteCreated = await result.current.criarLembrete(novoLembrete);
            });
            (0, _vitest.expect)(lembreteCreated).toBeNull();
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _vitest.describe)('atualizarLembrete', ()=>{
        (0, _vitest.it)('deve atualizar lembrete com sucesso', async ()=>{
            const dadosAtualizacao = {
                titulo: 'Título Atualizado',
                mensagem: 'Mensagem atualizada'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...mockLembretes[0],
                        ...dadosAtualizacao
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            let lembreteAtualizado;
            await (0, _react.act)(async ()=>{
                lembreteAtualizado = await result.current.atualizarLembrete('1', dadosAtualizacao);
            });
            (0, _vitest.expect)(lembreteAtualizado).toEqual({
                ...mockLembretes[0],
                ...dadosAtualizacao
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/lembretes/1', _vitest.expect.objectContaining({
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dadosAtualizacao)
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Lembrete atualizado com sucesso'
            });
        });
    });
    (0, _vitest.describe)('removerLembrete', ()=>{
        (0, _vitest.it)('deve remover lembrete com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.removerLembrete('1');
            });
            (0, _vitest.expect)(sucesso).toBe(true);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/lembretes/1', _vitest.expect.objectContaining({
                method: 'DELETE'
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Lembrete removido com sucesso'
            });
        });
    });
    (0, _vitest.describe)('removerLembretesEmLote', ()=>{
        (0, _vitest.it)('deve remover lembretes em lote com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        removidos: 3
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            const filtros = {
                ids: [
                    '1',
                    '2',
                    '3'
                ]
            };
            let resultado;
            await (0, _react.act)(async ()=>{
                resultado = await result.current.removerLembretesEmLote(filtros);
            });
            (0, _vitest.expect)(resultado).toEqual({
                removidos: 3
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/lembretes', _vitest.expect.objectContaining({
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(filtros)
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: '3 lembretes removidos com sucesso'
            });
        });
    });
    (0, _vitest.describe)('executarAcao', ()=>{
        (0, _vitest.it)('deve reenviar lembrete com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.executarAcao('1', 'reenviar');
            });
            (0, _vitest.expect)(sucesso).toBe(true);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/lembretes/1', _vitest.expect.objectContaining({
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    acao: 'reenviar'
                })
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Lembrete reenviado com sucesso'
            });
        });
        (0, _vitest.it)('deve marcar como enviado com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.executarAcao('1', 'marcar_enviado');
            });
            (0, _vitest.expect)(sucesso).toBe(true);
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Lembrete marcado como enviado'
            });
        });
        (0, _vitest.it)('deve reagendar lembrete com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            const novaData = new Date(Date.now() + 24 * 60 * 60 * 1000);
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.executarAcao('1', 'reagendar', {
                    novaData
                });
            });
            (0, _vitest.expect)(sucesso).toBe(true);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/lembretes/1', _vitest.expect.objectContaining({
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    acao: 'reagendar',
                    novaData: novaData.toISOString()
                })
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Lembrete reagendado com sucesso'
            });
        });
    });
    (0, _vitest.describe)('estados de carregamento', ()=>{
        (0, _vitest.it)('deve gerenciar estado de carregamento corretamente', async ()=>{
            let resolvePromise;
            const promise = new Promise((resolve)=>{
                resolvePromise = resolve;
            });
            mockFetch.mockReturnValueOnce(promise);
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            // Iniciar busca
            (0, _react.act)(()=>{
                result.current.buscarLembretes();
            });
            // Verificar que está carregando
            (0, _vitest.expect)(result.current.carregando).toBe(true);
            // Resolver promise
            await (0, _react.act)(async ()=>{
                resolvePromise({
                    ok: true,
                    json: async ()=>mockResultadoLembretes
                });
            });
            // Verificar que não está mais carregando
            (0, _vitest.expect)(result.current.carregando).toBe(false);
        });
    });
    (0, _vitest.describe)('paginação', ()=>{
        (0, _vitest.it)('deve gerenciar paginação corretamente', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...mockResultadoLembretes,
                        pagina: 2,
                        totalPaginas: 3
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _uselembretes.useLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarLembretes({}, {
                    pagina: 2,
                    porPagina: 10
                });
            });
            (0, _vitest.expect)(result.current.pagina).toBe(2);
            (0, _vitest.expect)(result.current.totalPaginas).toBe(3);
            (0, _vitest.expect)(result.current.porPagina).toBe(10);
            // Verificar se os parâmetros de paginação foram enviados
            const url = mockFetch.mock.calls[0][0];
            (0, _vitest.expect)(url).toContain('pagina=2');
            (0, _vitest.expect)(url).toContain('porPagina=10');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,