{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\components\\__tests__\\lembretes\\lista-lembretes.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { ListaLembretes } from '../../lembretes/lista-lembretes';\nimport { useLembretes } from '../../../hooks/use-lembretes';\nimport { useToast } from '../../../hooks/use-toast';\nimport { TipoLembrete, StatusLembrete } from '../../../lib/types/lembrete';\n\n// Mock dos hooks\njest.mock('../../../hooks/use-lembretes');\njest.mock('../../../hooks/use-toast');\n\n// Mock dos lembretes de teste\nconst mockLembretes = [\n  {\n    id: '1',\n    usuarioId: 'user1',\n    avaliacaoId: 'aval1',\n    tipo: 'aviso' as TipoLembrete,\n    status: 'pendente' as StatusLembrete,\n    dataEnvio: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n    tentativas: 0,\n    ultimaTentativa: null,\n    proximaTentativa: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n    configuracao: {\n      diasAntecedencia: 3,\n      horarioEnvio: '09:00',\n      tipoNotificacao: 'email',\n      template: 'default',\n    },\n    metadados: {\n      nomeUsuario: 'João Silva',\n      emailUsuario: 'joao@empresa.com',\n      tituloAvaliacao: 'Avaliação Anual 2024',\n      prazoAvaliacao: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    },\n    criadoEm: new Date().toISOString(),\n    atualizadoEm: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    usuarioId: 'user2',\n    avaliacaoId: 'aval2',\n    tipo: 'urgente' as TipoLembrete,\n    status: 'enviado' as StatusLembrete,\n    dataEnvio: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    tentativas: 1,\n    ultimaTentativa: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    proximaTentativa: null,\n    configuracao: {\n      diasAntecedencia: 1,\n      horarioEnvio: '14:00',\n      tipoNotificacao: 'sistema',\n      template: 'urgente',\n    },\n    metadados: {\n      nomeUsuario: 'Maria Santos',\n      emailUsuario: 'maria@empresa.com',\n      tituloAvaliacao: 'Avaliação Trimestral',\n      prazoAvaliacao: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n    },\n    criadoEm: new Date().toISOString(),\n    atualizadoEm: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    usuarioId: 'user3',\n    avaliacaoId: 'aval3',\n    tipo: 'critico' as TipoLembrete,\n    status: 'falhou' as StatusLembrete,\n    dataEnvio: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    tentativas: 3,\n    ultimaTentativa: new Date(Date.now() - 60 * 60 * 1000).toISOString(),\n    proximaTentativa: new Date(Date.now() + 60 * 60 * 1000).toISOString(),\n    configuracao: {\n      diasAntecedencia: 0,\n      horarioEnvio: '18:00',\n      tipoNotificacao: 'email',\n      template: 'critico',\n    },\n    metadados: {\n      nomeUsuario: 'Pedro Costa',\n      emailUsuario: 'pedro@empresa.com',\n      tituloAvaliacao: 'Avaliação de Desempenho',\n      prazoAvaliacao: new Date().toISOString(),\n    },\n    erro: 'Falha no envio de e-mail',\n    criadoEm: new Date().toISOString(),\n    atualizadoEm: new Date().toISOString(),\n  },\n];\n\nconst mockPaginacao = {\n  pagina: 1,\n  limite: 10,\n  total: 3,\n  totalPaginas: 1,\n};\n\nconst mockHookReturn = {\n  lembretes: mockLembretes,\n  lembrete: null,\n  paginacao: mockPaginacao,\n  carregando: false,\n  erro: null,\n  buscarLembretes: jest.fn(),\n  buscarLembrete: jest.fn(),\n  criarLembrete: jest.fn(),\n  atualizarLembrete: jest.fn(),\n  removerLembrete: jest.fn(),\n  removerLembretes: jest.fn(),\n  reenviarLembrete: jest.fn(),\n  marcarComoEnviado: jest.fn(),\n  reagendarLembrete: jest.fn(),\n};\n\nconst mockToast = jest.fn();\n\ndescribe('ListaLembretes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (useLembretes as any).mockReturnValue(mockHookReturn);\n    (useToast as any).mockReturnValue({ toast: mockToast });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Renderização', () => {\n    it('deve renderizar lista de lembretes', () => {\n      render(<ListaLembretes />);\n\n      expect(screen.getByText('Lembretes de Avaliação')).toBeInTheDocument();\n      expect(screen.getByText('João Silva')).toBeInTheDocument();\n      expect(screen.getByText('Maria Santos')).toBeInTheDocument();\n      expect(screen.getByText('Pedro Costa')).toBeInTheDocument();\n    });\n\n    it('deve exibir estado de carregamento', () => {\n      (useLembretes as any).mockReturnValue({\n        ...mockHookReturn,\n        carregando: true,\n        lembretes: [],\n      });\n\n      render(<ListaLembretes />);\n\n      expect(screen.getByText('Carregando lembretes...')).toBeInTheDocument();\n    });\n\n    it('deve exibir mensagem quando não há lembretes', () => {\n      (useLembretes as any).mockReturnValue({\n        ...mockHookReturn,\n        lembretes: [],\n        paginacao: {\n          ...mockPaginacao,\n          total: 0,\n        },\n      });\n\n      render(<ListaLembretes />);\n\n      expect(screen.getByText('Nenhum lembrete encontrado')).toBeInTheDocument();\n    });\n\n    it('deve exibir erro quando houver falha', () => {\n      const errorMessage = 'Erro ao carregar lembretes';\n      (useLembretes as any).mockReturnValue({\n        ...mockHookReturn,\n        erro: errorMessage,\n        lembretes: [],\n      });\n\n      render(<ListaLembretes />);\n\n      expect(screen.getByText(errorMessage)).toBeInTheDocument();\n    });\n  });\n\n  describe('Filtros', () => {\n    it('deve filtrar por tipo de lembrete', async () => {\n      render(<ListaLembretes />);\n\n      const filtroTipo = screen.getByLabelText('Tipo de lembrete');\n      fireEvent.change(filtroTipo, { target: { value: 'urgente' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            tipo: 'urgente',\n          })\n        );\n      });\n    });\n\n    it('deve filtrar por status', async () => {\n      render(<ListaLembretes />);\n\n      const filtroStatus = screen.getByLabelText('Status');\n      fireEvent.change(filtroStatus, { target: { value: 'pendente' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            status: 'pendente',\n          })\n        );\n      });\n    });\n\n    it('deve filtrar por usuário', async () => {\n      render(<ListaLembretes />);\n\n      const filtroUsuario = screen.getByLabelText('Usuário');\n      fireEvent.change(filtroUsuario, { target: { value: 'user1' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            usuarioId: 'user1',\n          })\n        );\n      });\n    });\n\n    it('deve filtrar por avaliação', async () => {\n      render(<ListaLembretes />);\n\n      const filtroAvaliacao = screen.getByLabelText('Avaliação');\n      fireEvent.change(filtroAvaliacao, { target: { value: 'aval1' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            avaliacaoId: 'aval1',\n          })\n        );\n      });\n    });\n\n    it('deve filtrar por período de data', async () => {\n      render(<ListaLembretes />);\n\n      const dataInicio = screen.getByLabelText('Data início');\n      const dataFim = screen.getByLabelText('Data fim');\n\n      fireEvent.change(dataInicio, { target: { value: '2024-01-01' } });\n      fireEvent.change(dataFim, { target: { value: '2024-12-31' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            dataInicio: '2024-01-01',\n            dataFim: '2024-12-31',\n          })\n        );\n      });\n    });\n\n    it('deve limpar filtros', async () => {\n      render(<ListaLembretes />);\n\n      // Aplicar filtros primeiro\n      const filtroTipo = screen.getByLabelText('Tipo de lembrete');\n      fireEvent.change(filtroTipo, { target: { value: 'urgente' } });\n\n      // Limpar filtros\n      const botaoLimpar = screen.getByText('Limpar Filtros');\n      fireEvent.click(botaoLimpar);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith({});\n      });\n    });\n  });\n\n  describe('Busca', () => {\n    it('deve buscar lembretes por texto', async () => {\n      render(<ListaLembretes />);\n\n      const campoBusca = screen.getByPlaceholderText('Buscar lembretes...');\n      fireEvent.change(campoBusca, { target: { value: 'João' } });\n\n      // Simular debounce\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            busca: 'João',\n          })\n        );\n      }, { timeout: 1000 });\n    });\n\n    it('deve limpar busca', async () => {\n      render(<ListaLembretes />);\n\n      const campoBusca = screen.getByPlaceholderText('Buscar lembretes...');\n      fireEvent.change(campoBusca, { target: { value: 'João' } });\n      fireEvent.change(campoBusca, { target: { value: '' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            busca: '',\n          })\n        );\n      });\n    });\n  });\n\n  describe('Ações de Lembrete', () => {\n    it('deve reenviar lembrete', async () => {\n      mockHookReturn.reenviarLembrete.mockResolvedValueOnce(true);\n\n      render(<ListaLembretes />);\n\n      const botaoReenviar = screen.getAllByText('Reenviar')[0];\n      fireEvent.click(botaoReenviar);\n\n      await waitFor(() => {\n        expect(mockHookReturn.reenviarLembrete).toHaveBeenCalledWith('1');\n      });\n    });\n\n    it('deve marcar como enviado', async () => {\n      mockHookReturn.marcarComoEnviado.mockResolvedValueOnce(true);\n\n      render(<ListaLembretes />);\n\n      const botaoMarcar = screen.getAllByText('Marcar como Enviado')[0];\n      fireEvent.click(botaoMarcar);\n\n      await waitFor(() => {\n        expect(mockHookReturn.marcarComoEnviado).toHaveBeenCalledWith('1');\n      });\n    });\n\n    it('deve reagendar lembrete', async () => {\n      mockHookReturn.reagendarLembrete.mockResolvedValueOnce(true);\n\n      render(<ListaLembretes />);\n\n      const botaoReagendar = screen.getAllByText('Reagendar')[0];\n      fireEvent.click(botaoReagendar);\n\n      // Preencher nova data\n      const inputData = screen.getByLabelText('Nova data de envio');\n      fireEvent.change(inputData, { target: { value: '2024-12-31T10:00' } });\n\n      const botaoConfirmar = screen.getByText('Confirmar');\n      fireEvent.click(botaoConfirmar);\n\n      await waitFor(() => {\n        expect(mockHookReturn.reagendarLembrete).toHaveBeenCalledWith(\n          '1',\n          '2024-12-31T10:00'\n        );\n      });\n    });\n\n    it('deve remover lembrete', async () => {\n      mockHookReturn.removerLembrete.mockResolvedValueOnce(true);\n      window.confirm = vi.fn(() => true);\n\n      render(<ListaLembretes />);\n\n      const botaoRemover = screen.getAllByText('Remover')[0];\n      fireEvent.click(botaoRemover);\n\n      await waitFor(() => {\n        expect(mockHookReturn.removerLembrete).toHaveBeenCalledWith('1');\n      });\n    });\n\n    it('deve cancelar remoção se usuário não confirmar', async () => {\n      window.confirm = vi.fn(() => false);\n\n      render(<ListaLembretes />);\n\n      const botaoRemover = screen.getAllByText('Remover')[0];\n      fireEvent.click(botaoRemover);\n\n      expect(mockHookReturn.removerLembrete).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Ações em Lote', () => {\n    it('deve selecionar lembretes', () => {\n      render(<ListaLembretes />);\n\n      const checkbox1 = screen.getByLabelText('Selecionar lembrete 1');\n      const checkbox2 = screen.getByLabelText('Selecionar lembrete 2');\n\n      fireEvent.click(checkbox1);\n      fireEvent.click(checkbox2);\n\n      expect(checkbox1).toBeChecked();\n      expect(checkbox2).toBeChecked();\n    });\n\n    it('deve selecionar todos os lembretes', () => {\n      render(<ListaLembretes />);\n\n      const checkboxTodos = screen.getByLabelText('Selecionar todos');\n      fireEvent.click(checkboxTodos);\n\n      const checkboxes = screen.getAllByRole('checkbox');\n      checkboxes.forEach(checkbox => {\n        expect(checkbox).toBeChecked();\n      });\n    });\n\n    it('deve remover lembretes selecionados', async () => {\n      mockHookReturn.removerLembretes.mockResolvedValueOnce({ removidos: 2 });\n      window.confirm = vi.fn(() => true);\n\n      render(<ListaLembretes />);\n\n      // Selecionar lembretes\n      const checkbox1 = screen.getByLabelText('Selecionar lembrete 1');\n      const checkbox2 = screen.getByLabelText('Selecionar lembrete 2');\n      fireEvent.click(checkbox1);\n      fireEvent.click(checkbox2);\n\n      // Remover selecionados\n      const botaoRemoverSelecionados = screen.getByText('Remover Selecionados');\n      fireEvent.click(botaoRemoverSelecionados);\n\n      await waitFor(() => {\n        expect(mockHookReturn.removerLembretes).toHaveBeenCalledWith(['1', '2']);\n      });\n    });\n\n    it('deve reenviar lembretes selecionados', async () => {\n      render(<ListaLembretes />);\n\n      // Selecionar lembretes\n      const checkbox1 = screen.getByLabelText('Selecionar lembrete 1');\n      fireEvent.click(checkbox1);\n\n      // Reenviar selecionados\n      const botaoReenviarSelecionados = screen.getByText('Reenviar Selecionados');\n      fireEvent.click(botaoReenviarSelecionados);\n\n      await waitFor(() => {\n        expect(mockHookReturn.reenviarLembrete).toHaveBeenCalledWith('1');\n      });\n    });\n  });\n\n  describe('Paginação', () => {\n    it('deve navegar para próxima página', async () => {\n      (useLembretes as any).mockReturnValue({\n        ...mockHookReturn,\n        paginacao: {\n          ...mockPaginacao,\n          pagina: 1,\n          totalPaginas: 3,\n        },\n      });\n\n      render(<ListaLembretes />);\n\n      const botaoProxima = screen.getByText('Próxima');\n      fireEvent.click(botaoProxima);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            pagina: 2,\n          })\n        );\n      });\n    });\n\n    it('deve navegar para página anterior', async () => {\n      (useLembretes as any).mockReturnValue({\n        ...mockHookReturn,\n        paginacao: {\n          ...mockPaginacao,\n          pagina: 2,\n          totalPaginas: 3,\n        },\n      });\n\n      render(<ListaLembretes />);\n\n      const botaoAnterior = screen.getByText('Anterior');\n      fireEvent.click(botaoAnterior);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            pagina: 1,\n          })\n        );\n      });\n    });\n\n    it('deve alterar limite por página', async () => {\n      render(<ListaLembretes />);\n\n      const seletorLimite = screen.getByLabelText('Itens por página');\n      fireEvent.change(seletorLimite, { target: { value: '25' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            limite: 25,\n            pagina: 1, // Reset para primeira página\n          })\n        );\n      });\n    });\n  });\n\n  describe('Ordenação', () => {\n    it('deve ordenar por data de envio', async () => {\n      render(<ListaLembretes />);\n\n      const cabecalhoData = screen.getByText('Data de Envio');\n      fireEvent.click(cabecalhoData);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            ordenarPor: 'dataEnvio',\n            ordem: 'asc',\n          })\n        );\n      });\n    });\n\n    it('deve alternar ordem de classificação', async () => {\n      render(<ListaLembretes />);\n\n      const cabecalhoData = screen.getByText('Data de Envio');\n      \n      // Primeira clique - ASC\n      fireEvent.click(cabecalhoData);\n      \n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            ordem: 'asc',\n          })\n        );\n      });\n\n      // Segunda clique - DESC\n      fireEvent.click(cabecalhoData);\n      \n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            ordem: 'desc',\n          })\n        );\n      });\n    });\n\n    it('deve ordenar por diferentes campos', async () => {\n      render(<ListaLembretes />);\n\n      const cabecalhoUsuario = screen.getByText('Usuário');\n      fireEvent.click(cabecalhoUsuario);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            ordenarPor: 'nomeUsuario',\n          })\n        );\n      });\n    });\n  });\n\n  describe('Exibição de Dados', () => {\n    it('deve exibir informações do lembrete corretamente', () => {\n      render(<ListaLembretes />);\n\n      // Verificar dados do primeiro lembrete\n      expect(screen.getByText('João Silva')).toBeInTheDocument();\n      expect(screen.getByText('joao@empresa.com')).toBeInTheDocument();\n      expect(screen.getByText('Avaliação Anual 2024')).toBeInTheDocument();\n      expect(screen.getByText('Aviso')).toBeInTheDocument();\n      expect(screen.getByText('Pendente')).toBeInTheDocument();\n    });\n\n    it('deve exibir badges de status corretamente', () => {\n      render(<ListaLembretes />);\n\n      expect(screen.getByText('Pendente')).toHaveClass('badge-warning');\n      expect(screen.getByText('Enviado')).toHaveClass('badge-success');\n      expect(screen.getByText('Falhou')).toHaveClass('badge-destructive');\n    });\n\n    it('deve exibir badges de tipo corretamente', () => {\n      render(<ListaLembretes />);\n\n      expect(screen.getByText('Aviso')).toHaveClass('badge-secondary');\n      expect(screen.getByText('Urgente')).toHaveClass('badge-warning');\n      expect(screen.getByText('Crítico')).toHaveClass('badge-destructive');\n    });\n\n    it('deve exibir informações de tentativas', () => {\n      render(<ListaLembretes />);\n\n      expect(screen.getByText('0 tentativas')).toBeInTheDocument();\n      expect(screen.getByText('1 tentativa')).toBeInTheDocument();\n      expect(screen.getByText('3 tentativas')).toBeInTheDocument();\n    });\n\n    it('deve exibir mensagem de erro quando presente', () => {\n      render(<ListaLembretes />);\n\n      expect(screen.getByText('Falha no envio de e-mail')).toBeInTheDocument();\n    });\n  });\n\n  describe('Atualização Automática', () => {\n    it('deve atualizar lista após ações', async () => {\n      mockHookReturn.reenviarLembrete.mockResolvedValueOnce(true);\n\n      render(<ListaLembretes />);\n\n      const botaoReenviar = screen.getAllByText('Reenviar')[0];\n      fireEvent.click(botaoReenviar);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledTimes(2); // Initial + after action\n      });\n    });\n\n    it('deve atualizar automaticamente a cada 30 segundos', async () => {\n      vi.useFakeTimers();\n\n      render(<ListaLembretes />);\n\n      // Avançar 30 segundos\n      vi.advanceTimersByTime(30000);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarLembretes).toHaveBeenCalledTimes(2);\n      });\n\n      vi.useRealTimers();\n    });\n  });\n\n  describe('Estados de Erro', () => {\n    it('deve exibir erro ao falhar ao reenviar', async () => {\n      mockHookReturn.reenviarLembrete.mockRejectedValueOnce(new Error('Erro de rede'));\n\n      render(<ListaLembretes />);\n\n      const botaoReenviar = screen.getAllByText('Reenviar')[0];\n      fireEvent.click(botaoReenviar);\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith(\n          expect.objectContaining({\n            title: 'Erro',\n            variant: 'destructive',\n          })\n        );\n      });\n    });\n\n    it('deve exibir erro ao falhar ao remover', async () => {\n      mockHookReturn.removerLembrete.mockRejectedValueOnce(new Error('Erro de rede'));\n      window.confirm = vi.fn(() => true);\n\n      render(<ListaLembretes />);\n\n      const botaoRemover = screen.getAllByText('Remover')[0];\n      fireEvent.click(botaoRemover);\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith(\n          expect.objectContaining({\n            title: 'Erro',\n            variant: 'destructive',\n          })\n        );\n      });\n    });\n  });\n\n  describe('Acessibilidade', () => {\n    it('deve ter labels apropriados para screen readers', () => {\n      render(<ListaLembretes />);\n\n      expect(screen.getByLabelText('Tipo de lembrete')).toBeInTheDocument();\n      expect(screen.getByLabelText('Status')).toBeInTheDocument();\n      expect(screen.getByLabelText('Selecionar todos')).toBeInTheDocument();\n    });\n\n    it('deve ter navegação por teclado funcional', () => {\n      render(<ListaLembretes />);\n\n      const filtroTipo = screen.getByLabelText('Tipo de lembrete');\n      filtroTipo.focus();\n      expect(document.activeElement).toBe(filtroTipo);\n    });\n\n    it('deve ter descrições adequadas para ações', () => {\n      render(<ListaLembretes />);\n\n      expect(screen.getByLabelText('Reenviar lembrete para João Silva')).toBeInTheDocument();\n    });\n  });\n\n  describe('Responsividade', () => {\n    it('deve adaptar layout para telas pequenas', () => {\n      // Mock window.innerWidth\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 768,\n      });\n\n      render(<ListaLembretes />);\n\n      // Verificar se colunas menos importantes estão ocultas\n      expect(screen.queryByText('Tentativas')).not.toBeInTheDocument();\n    });\n\n    it('deve mostrar todas as colunas em telas grandes', () => {\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 1200,\n      });\n\n      render(<ListaLembretes />);\n\n      expect(screen.getByText('Tentativas')).toBeInTheDocument();\n      expect(screen.getByText('Última Tentativa')).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","mockLembretes","id","usuarioId","avaliacaoId","tipo","status","dataEnvio","Date","now","toISOString","tentativas","ultimaTentativa","proximaTentativa","configuracao","diasAntecedencia","horarioEnvio","tipoNotificacao","template","metadados","nomeUsuario","emailUsuario","tituloAvaliacao","prazoAvaliacao","criadoEm","atualizadoEm","erro","mockPaginacao","pagina","limite","total","totalPaginas","mockHookReturn","lembretes","lembrete","paginacao","carregando","buscarLembretes","fn","buscarLembrete","criarLembrete","atualizarLembrete","removerLembrete","removerLembretes","reenviarLembrete","marcarComoEnviado","reagendarLembrete","mockToast","describe","beforeEach","clearAllMocks","useLembretes","mockReturnValue","useToast","toast","afterEach","resetAllMocks","it","render","ListaLembretes","expect","screen","getByText","toBeInTheDocument","errorMessage","filtroTipo","getByLabelText","fireEvent","change","target","value","waitFor","toHaveBeenCalledWith","objectContaining","filtroStatus","filtroUsuario","filtroAvaliacao","dataInicio","dataFim","botaoLimpar","click","campoBusca","getByPlaceholderText","busca","timeout","mockResolvedValueOnce","botaoReenviar","getAllByText","botaoMarcar","botaoReagendar","inputData","botaoConfirmar","window","confirm","vi","botaoRemover","not","toHaveBeenCalled","checkbox1","checkbox2","toBeChecked","checkboxTodos","checkboxes","getAllByRole","forEach","checkbox","removidos","botaoRemoverSelecionados","botaoReenviarSelecionados","botaoProxima","botaoAnterior","seletorLimite","cabecalhoData","ordenarPor","ordem","cabecalhoUsuario","toHaveClass","toHaveBeenCalledTimes","useFakeTimers","advanceTimersByTime","useRealTimers","mockRejectedValueOnce","Error","title","variant","focus","document","activeElement","toBe","Object","defineProperty","writable","configurable","queryByText"],"mappings":"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"}