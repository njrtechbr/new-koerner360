0b9e947f2eb32b9b8ceff5e0d4235b42
"use strict";

/* istanbul ignore next */
function cov_erisr1hnu() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\route.ts";
  var hash = "16cd11acd70766d7068566003fc9b2f9440ecb92";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "9": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 46
        }
      },
      "10": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "11": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "12": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 82
        }
      },
      "13": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "14": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 80
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "16": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "17": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 44,
          column: 10
        }
      },
      "18": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "19": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "20": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "21": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 58,
          column: 15
        }
      },
      "22": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 71
        }
      },
      "23": {
        start: {
          line: 62,
          column: 33
        },
        end: {
          line: 62,
          column: 53
        }
      },
      "24": {
        start: {
          line: 63,
          column: 35
        },
        end: {
          line: 63,
          column: 118
        }
      },
      "25": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "26": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "27": {
        start: {
          line: 72,
          column: 24
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "28": {
        start: {
          line: 74,
          column: 22
        },
        end: {
          line: 74,
          column: 24
        }
      },
      "29": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "30": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 42
        }
      },
      "31": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "32": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 14
        }
      },
      "33": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "34": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "35": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "36": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 50
        }
      },
      "37": {
        start: {
          line: 92,
          column: 21
        },
        end: {
          line: 92,
          column: 55
        }
      },
      "38": {
        start: {
          line: 94,
          column: 34
        },
        end: {
          line: 120,
          column: 10
        }
      },
      "39": {
        start: {
          line: 121,
          column: 27
        },
        end: {
          line: 121,
          column: 59
        }
      },
      "40": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "41": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 70
        }
      },
      "42": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "43": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 302,
          column: 5
        }
      },
      "44": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 144,
          column: 80
        }
      },
      "45": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "46": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "47": {
        start: {
          line: 153,
          column: 24
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "48": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "49": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "50": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "51": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 174,
          column: 15
        }
      },
      "52": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 71
        }
      },
      "53": {
        start: {
          line: 178,
          column: 21
        },
        end: {
          line: 178,
          column: 41
        }
      },
      "54": {
        start: {
          line: 179,
          column: 35
        },
        end: {
          line: 179,
          column: 101
        }
      },
      "55": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "56": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 186,
          column: 15
        }
      },
      "57": {
        start: {
          line: 188,
          column: 31
        },
        end: {
          line: 188,
          column: 55
        }
      },
      "58": {
        start: {
          line: 190,
          column: 33
        },
        end: {
          line: 194,
          column: 10
        }
      },
      "59": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "60": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 200,
          column: 15
        }
      },
      "61": {
        start: {
          line: 203,
          column: 27
        },
        end: {
          line: 203,
          column: 62
        }
      },
      "62": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 56
        }
      },
      "63": {
        start: {
          line: 205,
          column: 37
        },
        end: {
          line: 258,
          column: 10
        }
      },
      "64": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "65": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 270,
          column: 15
        }
      },
      "66": {
        start: {
          line: 262,
          column: 58
        },
        end: {
          line: 267,
          column: 21
        }
      },
      "67": {
        start: {
          line: 273,
          column: 28
        },
        end: {
          line: 291,
          column: 10
        }
      },
      "68": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 294,
          column: 11
        }
      },
      "69": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 68
        }
      },
      "70": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 301,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 28
          },
          end: {
            line: 141,
            column: 1
          }
        },
        line: 26
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 142,
            column: 15
          },
          end: {
            line: 142,
            column: 19
          }
        },
        loc: {
          start: {
            line: 142,
            column: 29
          },
          end: {
            line: 303,
            column: 1
          }
        },
        line: 142
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 262,
            column: 52
          },
          end: {
            line: 262,
            column: 53
          }
        },
        loc: {
          start: {
            line: 262,
            column: 58
          },
          end: {
            line: 267,
            column: 21
          }
        },
        line: 262
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 58
          }
        }, {
          start: {
            line: 53,
            column: 62
          },
          end: {
            line: 53,
            column: 109
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "5": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "8": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "9": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "10": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "11": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "12": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 169,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 169,
            column: 58
          }
        }, {
          start: {
            line: 169,
            column: 62
          },
          end: {
            line: 169,
            column: 109
          }
        }],
        line: 169
      },
      "13": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "14": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "15": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 271,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { TipoUsuario, StatusPeriodo } from '@prisma/client';\nimport {\n  criarPeriodoSchema,\n  filtrosPeriodoSchema,\n  validarQueryParams,\n  validarBody\n} from '@/lib/validations/avaliacoes';\nimport { middlewareAtualizacaoStatus } from '@/lib/utils/periodo-status-updater';\n\n// GET /api/periodos-avaliacao - Listar per\xEDodos de avalia\xE7\xE3o\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es do usu\xE1rio\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usu\xE1rio n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN e GESTOR podem listar per\xEDodos\n    if (usuario.userType !== TipoUsuario.ADMIN && usuario.userType !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { error: 'Sem permiss\xE3o para visualizar per\xEDodos de avalia\xE7\xE3o' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos per\xEDodos antes de listar\n    await middlewareAtualizacaoStatus();\n\n    const { searchParams } = new URL(request.url);\n    const resultadoValidacao = validarQueryParams(filtrosPeriodoSchema, searchParams);\n    \n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          erro: 'Par\xE2metros inv\xE1lidos', \n          detalhes: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const filtros = resultadoValidacao.dados;\n\n    // Construir filtros para a consulta\n    const where: any = {};\n\n    if (filtros.status) {\n      where.status = filtros.status;\n    }\n\n    if (filtros.dataInicio) {\n      where.dataInicio = {\n        gte: new Date(filtros.dataInicio)\n      };\n    }\n\n    if (filtros.dataFim) {\n      where.dataFim = {\n        lte: new Date(filtros.dataFim)\n      };\n    }\n\n    if (filtros.criadoPor) {\n      where.criadoPorId = filtros.criadoPor;\n    }\n\n    // Calcular pagina\xE7\xE3o\n    const skip = (filtros.page - 1) * filtros.limit;\n\n    // Buscar per\xEDodos com pagina\xE7\xE3o\n    const [periodos, total] = await Promise.all([\n      prisma.periodoAvaliacao.findMany({\n        where,\n        skip,\n        take: filtros.limit,\n        orderBy: {\n          [filtros.orderBy]: filtros.orderDirection\n        },\n        include: {\n          criadoPor: {\n            select: {\n              id: true,\n              nome: true,\n              email: true\n            }\n          },\n          _count: {\n            select: {\n              avaliacoes: true\n            }\n          }\n        }\n      }),\n      prisma.periodoAvaliacao.count({ where })\n    ]);\n\n    const totalPages = Math.ceil(total / filtros.limit);\n\n    return NextResponse.json({\n      periodos,\n      pagination: {\n        page: filtros.page,\n        limit: filtros.limit,\n        total,\n        totalPages,\n        hasNext: filtros.page < totalPages,\n        hasPrev: filtros.page > 1\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao listar per\xEDodos de avalia\xE7\xE3o:', error);\n    \n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/periodos-avaliacao - Criar novo per\xEDodo de avalia\xE7\xE3o\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'N\xE3o autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es do usu\xE1rio\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usu\xE1rio n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN e GESTOR podem criar per\xEDodos\n    if (usuario.userType !== TipoUsuario.ADMIN && usuario.userType !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { error: 'Sem permiss\xE3o para criar per\xEDodos de avalia\xE7\xE3o' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos per\xEDodos antes de criar novo\n    await middlewareAtualizacaoStatus();\n\n    const body = await request.json();\n    const resultadoValidacao = validarBody(criarPeriodoSchema, body);\n    \n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          erro: 'Dados inv\xE1lidos', \n          detalhes: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const dadosValidados = resultadoValidacao.dados;\n\n    // Verificar se j\xE1 existe um per\xEDodo com o mesmo nome\n    const periodoExistente = await prisma.periodoAvaliacao.findFirst({\n      where: {\n        nome: dadosValidados.nome\n      }\n    });\n\n    if (periodoExistente) {\n      return NextResponse.json(\n        { error: 'J\xE1 existe um per\xEDodo com este nome' },\n        { status: 409 }\n      );\n    }\n\n    // Verificar se h\xE1 conflito de datas com per\xEDodos ativos\n    const dataInicio = new Date(dadosValidados.dataInicio);\n    const dataFim = new Date(dadosValidados.dataFim);\n\n    const periodosConflitantes = await prisma.periodoAvaliacao.findMany({\n      where: {\n        status: {\n          in: [StatusPeriodo.ATIVO, StatusPeriodo.PLANEJADO]\n        },\n        OR: [\n          {\n            AND: [\n              { dataInicio: { lte: dataInicio } },\n              { dataFim: { gte: dataInicio } }\n            ]\n          },\n          {\n            AND: [\n              { dataInicio: { lte: dataFim } },\n              { dataFim: { gte: dataFim } }\n            ]\n          },\n          {\n            AND: [\n              { dataInicio: { gte: dataInicio } },\n              { dataFim: { lte: dataFim } }\n            ]\n          }\n        ]\n      }\n    });\n\n    if (periodosConflitantes.length > 0) {\n      return NextResponse.json(\n        { \n          error: 'H\xE1 conflito de datas com outros per\xEDodos ativos ou planejados',\n          conflitos: periodosConflitantes.map(p => ({\n            id: p.id,\n            nome: p.nome,\n            dataInicio: p.dataInicio,\n            dataFim: p.dataFim\n          }))\n        },\n        { status: 409 }\n      );\n    }\n\n    // Criar o per\xEDodo\n    const novoPeriodo = await prisma.periodoAvaliacao.create({\n      data: {\n        nome: dadosValidados.nome,\n        descricao: dadosValidados.descricao,\n        dataInicio,\n        dataFim,\n        status: dadosValidados.status,\n        criadoPorId: session.user.id\n      },\n      include: {\n        criadoPor: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json(novoPeriodo, { status: 201 });\n\n  } catch (error) {\n    console.error('Erro ao criar per\xEDodo de avalia\xE7\xE3o:', error);\n    \n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "request", "session", "getServerSession", "authOptions", "user", "id", "NextResponse", "json", "error", "status", "usuario", "prisma", "findUnique", "where", "select", "userType", "TipoUsuario", "ADMIN", "GESTOR", "middlewareAtualizacaoStatus", "searchParams", "URL", "url", "resultadoValidacao", "validarQueryParams", "filtrosPeriodoSchema", "sucesso", "erro", "detalhes", "details", "filtros", "dados", "dataInicio", "gte", "Date", "dataFim", "lte", "criadoPor", "criadoPorId", "skip", "page", "limit", "periodos", "total", "Promise", "all", "periodoAvaliacao", "findMany", "take", "orderBy", "orderDirection", "include", "nome", "email", "_count", "avaliacoes", "count", "totalPages", "Math", "ceil", "pagination", "hasNext", "hasPrev", "console", "body", "validarBody", "criarPeriodoSchema", "dadosValidados", "periodoExistente", "findFirst", "periodosConflitantes", "in", "StatusPeriodo", "ATIVO", "PLANEJADO", "OR", "AND", "length", "conflitos", "map", "p", "novoPeriodo", "create", "data", "descricao"],
      mappings: ";;;;;;;;;;;QAcsBA;eAAAA;;QAgIAC;eAAAA;;;wBA9IoB;0BACT;sBACL;wBACL;wBACoB;4BAMpC;sCACqC;AAGrC,eAAeD,IAAIE,OAAoB;IAC5C,IAAI;QACF,MAAMC,UAAU,MAAMC,IAAAA,0BAAgB,EAACC,iBAAW;QAElD,IAAI,CAACF,SAASG,MAAMC,IAAI;YACtB,OAAOC,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAiB,GAC1B;gBAAEC,QAAQ;YAAI;QAElB;QAEA,kCAAkC;QAClC,MAAMC,UAAU,MAAMC,cAAM,CAACD,OAAO,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBAAER,IAAIJ,QAAQG,IAAI,CAACC,EAAE;YAAC;YAC7BS,QAAQ;gBAAEC,UAAU;YAAK;QAC3B;QAEA,IAAI,CAACL,SAAS;YACZ,OAAOJ,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAyB,GAClC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,8CAA8C;QAC9C,IAAIC,QAAQK,QAAQ,KAAKC,mBAAW,CAACC,KAAK,IAAIP,QAAQK,QAAQ,KAAKC,mBAAW,CAACE,MAAM,EAAE;YACrF,OAAOZ,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAsD,GAC/D;gBAAEC,QAAQ;YAAI;QAElB;QAEA,mEAAmE;QACnE,MAAMU,IAAAA,iDAA2B;QAEjC,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIrB,QAAQsB,GAAG;QAC5C,MAAMC,qBAAqBC,IAAAA,8BAAkB,EAACC,gCAAoB,EAAEL;QAEpE,IAAI,CAACG,mBAAmBG,OAAO,EAAE;YAC/B,OAAOpB,oBAAY,CAACC,IAAI,CACtB;gBACEoB,MAAM;gBACNC,UAAUL,mBAAmBI,IAAI,EAAEE;YACrC,GACA;gBAAEpB,QAAQ;YAAI;QAElB;QAEA,MAAMqB,UAAUP,mBAAmBQ,KAAK;QAExC,oCAAoC;QACpC,MAAMlB,QAAa,CAAC;QAEpB,IAAIiB,QAAQrB,MAAM,EAAE;YAClBI,MAAMJ,MAAM,GAAGqB,QAAQrB,MAAM;QAC/B;QAEA,IAAIqB,QAAQE,UAAU,EAAE;YACtBnB,MAAMmB,UAAU,GAAG;gBACjBC,KAAK,IAAIC,KAAKJ,QAAQE,UAAU;YAClC;QACF;QAEA,IAAIF,QAAQK,OAAO,EAAE;YACnBtB,MAAMsB,OAAO,GAAG;gBACdC,KAAK,IAAIF,KAAKJ,QAAQK,OAAO;YAC/B;QACF;QAEA,IAAIL,QAAQO,SAAS,EAAE;YACrBxB,MAAMyB,WAAW,GAAGR,QAAQO,SAAS;QACvC;QAEA,qBAAqB;QACrB,MAAME,OAAO,AAACT,CAAAA,QAAQU,IAAI,GAAG,CAAA,IAAKV,QAAQW,KAAK;QAE/C,gCAAgC;QAChC,MAAM,CAACC,UAAUC,MAAM,GAAG,MAAMC,QAAQC,GAAG,CAAC;YAC1ClC,cAAM,CAACmC,gBAAgB,CAACC,QAAQ,CAAC;gBAC/BlC;gBACA0B;gBACAS,MAAMlB,QAAQW,KAAK;gBACnBQ,SAAS;oBACP,CAACnB,QAAQmB,OAAO,CAAC,EAAEnB,QAAQoB,cAAc;gBAC3C;gBACAC,SAAS;oBACPd,WAAW;wBACTvB,QAAQ;4BACNT,IAAI;4BACJ+C,MAAM;4BACNC,OAAO;wBACT;oBACF;oBACAC,QAAQ;wBACNxC,QAAQ;4BACNyC,YAAY;wBACd;oBACF;gBACF;YACF;YACA5C,cAAM,CAACmC,gBAAgB,CAACU,KAAK,CAAC;gBAAE3C;YAAM;SACvC;QAED,MAAM4C,aAAaC,KAAKC,IAAI,CAAChB,QAAQb,QAAQW,KAAK;QAElD,OAAOnC,oBAAY,CAACC,IAAI,CAAC;YACvBmC;YACAkB,YAAY;gBACVpB,MAAMV,QAAQU,IAAI;gBAClBC,OAAOX,QAAQW,KAAK;gBACpBE;gBACAc;gBACAI,SAAS/B,QAAQU,IAAI,GAAGiB;gBACxBK,SAAShC,QAAQU,IAAI,GAAG;YAC1B;QACF;IAEF,EAAE,OAAOhC,OAAO;QACduD,QAAQvD,KAAK,CAAC,yCAAyCA;QAEvD,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEoB,MAAM;QAA2B,GACnC;YAAElB,QAAQ;QAAI;IAElB;AACF;AAGO,eAAeV,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,UAAU,MAAMC,IAAAA,0BAAgB,EAACC,iBAAW;QAElD,IAAI,CAACF,SAASG,MAAMC,IAAI;YACtB,OAAOC,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAiB,GAC1B;gBAAEC,QAAQ;YAAI;QAElB;QAEA,kCAAkC;QAClC,MAAMC,UAAU,MAAMC,cAAM,CAACD,OAAO,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBAAER,IAAIJ,QAAQG,IAAI,CAACC,EAAE;YAAC;YAC7BS,QAAQ;gBAAEC,UAAU;YAAK;QAC3B;QAEA,IAAI,CAACL,SAAS;YACZ,OAAOJ,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAyB,GAClC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,6CAA6C;QAC7C,IAAIC,QAAQK,QAAQ,KAAKC,mBAAW,CAACC,KAAK,IAAIP,QAAQK,QAAQ,KAAKC,mBAAW,CAACE,MAAM,EAAE;YACrF,OAAOZ,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAiD,GAC1D;gBAAEC,QAAQ;YAAI;QAElB;QAEA,uEAAuE;QACvE,MAAMU,IAAAA,iDAA2B;QAEjC,MAAM6C,OAAO,MAAMhE,QAAQO,IAAI;QAC/B,MAAMgB,qBAAqB0C,IAAAA,uBAAW,EAACC,8BAAkB,EAAEF;QAE3D,IAAI,CAACzC,mBAAmBG,OAAO,EAAE;YAC/B,OAAOpB,oBAAY,CAACC,IAAI,CACtB;gBACEoB,MAAM;gBACNC,UAAUL,mBAAmBI,IAAI,EAAEE;YACrC,GACA;gBAAEpB,QAAQ;YAAI;QAElB;QAEA,MAAM0D,iBAAiB5C,mBAAmBQ,KAAK;QAE/C,qDAAqD;QACrD,MAAMqC,mBAAmB,MAAMzD,cAAM,CAACmC,gBAAgB,CAACuB,SAAS,CAAC;YAC/DxD,OAAO;gBACLuC,MAAMe,eAAef,IAAI;YAC3B;QACF;QAEA,IAAIgB,kBAAkB;YACpB,OAAO9D,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAqC,GAC9C;gBAAEC,QAAQ;YAAI;QAElB;QAEA,wDAAwD;QACxD,MAAMuB,aAAa,IAAIE,KAAKiC,eAAenC,UAAU;QACrD,MAAMG,UAAU,IAAID,KAAKiC,eAAehC,OAAO;QAE/C,MAAMmC,uBAAuB,MAAM3D,cAAM,CAACmC,gBAAgB,CAACC,QAAQ,CAAC;YAClElC,OAAO;gBACLJ,QAAQ;oBACN8D,IAAI;wBAACC,qBAAa,CAACC,KAAK;wBAAED,qBAAa,CAACE,SAAS;qBAAC;gBACpD;gBACAC,IAAI;oBACF;wBACEC,KAAK;4BACH;gCAAE5C,YAAY;oCAAEI,KAAKJ;gCAAW;4BAAE;4BAClC;gCAAEG,SAAS;oCAAEF,KAAKD;gCAAW;4BAAE;yBAChC;oBACH;oBACA;wBACE4C,KAAK;4BACH;gCAAE5C,YAAY;oCAAEI,KAAKD;gCAAQ;4BAAE;4BAC/B;gCAAEA,SAAS;oCAAEF,KAAKE;gCAAQ;4BAAE;yBAC7B;oBACH;oBACA;wBACEyC,KAAK;4BACH;gCAAE5C,YAAY;oCAAEC,KAAKD;gCAAW;4BAAE;4BAClC;gCAAEG,SAAS;oCAAEC,KAAKD;gCAAQ;4BAAE;yBAC7B;oBACH;iBACD;YACH;QACF;QAEA,IAAImC,qBAAqBO,MAAM,GAAG,GAAG;YACnC,OAAOvE,oBAAY,CAACC,IAAI,CACtB;gBACEC,OAAO;gBACPsE,WAAWR,qBAAqBS,GAAG,CAACC,CAAAA,IAAM,CAAA;wBACxC3E,IAAI2E,EAAE3E,EAAE;wBACR+C,MAAM4B,EAAE5B,IAAI;wBACZpB,YAAYgD,EAAEhD,UAAU;wBACxBG,SAAS6C,EAAE7C,OAAO;oBACpB,CAAA;YACF,GACA;gBAAE1B,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,MAAMwE,cAAc,MAAMtE,cAAM,CAACmC,gBAAgB,CAACoC,MAAM,CAAC;YACvDC,MAAM;gBACJ/B,MAAMe,eAAef,IAAI;gBACzBgC,WAAWjB,eAAeiB,SAAS;gBACnCpD;gBACAG;gBACA1B,QAAQ0D,eAAe1D,MAAM;gBAC7B6B,aAAarC,QAAQG,IAAI,CAACC,EAAE;YAC9B;YACA8C,SAAS;gBACPd,WAAW;oBACTvB,QAAQ;wBACNT,IAAI;wBACJ+C,MAAM;wBACNC,OAAO;oBACT;gBACF;YACF;QACF;QAEA,OAAO/C,oBAAY,CAACC,IAAI,CAAC0E,aAAa;YAAExE,QAAQ;QAAI;IAEtD,EAAE,OAAOD,OAAO;QACduD,QAAQvD,KAAK,CAAC,uCAAuCA;QAErD,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEoB,MAAM;QAA2B,GACnC;YAAElB,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "16cd11acd70766d7068566003fc9b2f9440ecb92"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_erisr1hnu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_erisr1hnu();
cov_erisr1hnu().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_erisr1hnu().f[0]++;
  cov_erisr1hnu().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_erisr1hnu().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_erisr1hnu().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_erisr1hnu().f[1]++;
    cov_erisr1hnu().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_erisr1hnu().f[2]++;
    cov_erisr1hnu().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_erisr1hnu().s[6]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_erisr1hnu().s[7]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_erisr1hnu().s[8]++, require("../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(cov_erisr1hnu().s[9]++, require("../../../lib/prisma"));
const _client =
/* istanbul ignore next */
(cov_erisr1hnu().s[10]++, require("@prisma/client"));
const _avaliacoes =
/* istanbul ignore next */
(cov_erisr1hnu().s[11]++, require("../../../lib/validations/avaliacoes"));
const _periodostatusupdater =
/* istanbul ignore next */
(cov_erisr1hnu().s[12]++, require("../../../lib/utils/periodo-status-updater"));
async function GET(request) {
  /* istanbul ignore next */
  cov_erisr1hnu().f[3]++;
  cov_erisr1hnu().s[13]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[14]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_erisr1hnu().s[15]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[0][0]++;
      cov_erisr1hnu().s[16]++;
      return _server.NextResponse.json({
        error: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[0][1]++;
    }
    // Verificar permissões do usuário
    const usuario =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[17]++, await _prisma.prisma.usuario.findUnique({
      where: {
        id: session.user.id
      },
      select: {
        userType: true
      }
    }));
    /* istanbul ignore next */
    cov_erisr1hnu().s[18]++;
    if (!usuario) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[1][0]++;
      cov_erisr1hnu().s[19]++;
      return _server.NextResponse.json({
        error: 'Usuário não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[1][1]++;
    }
    // Apenas ADMIN e GESTOR podem listar períodos
    cov_erisr1hnu().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_erisr1hnu().b[3][0]++, usuario.userType !== _client.TipoUsuario.ADMIN) &&
    /* istanbul ignore next */
    (cov_erisr1hnu().b[3][1]++, usuario.userType !== _client.TipoUsuario.GESTOR)) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[2][0]++;
      cov_erisr1hnu().s[21]++;
      return _server.NextResponse.json({
        error: 'Sem permissão para visualizar períodos de avaliação'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[2][1]++;
    }
    // Atualizar automaticamente os status dos períodos antes de listar
    cov_erisr1hnu().s[22]++;
    await (0, _periodostatusupdater.middlewareAtualizacaoStatus)();
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[23]++, new URL(request.url));
    const resultadoValidacao =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[24]++, (0, _avaliacoes.validarQueryParams)(_avaliacoes.filtrosPeriodoSchema, searchParams));
    /* istanbul ignore next */
    cov_erisr1hnu().s[25]++;
    if (!resultadoValidacao.sucesso) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[4][0]++;
      cov_erisr1hnu().s[26]++;
      return _server.NextResponse.json({
        erro: 'Parâmetros inválidos',
        detalhes: resultadoValidacao.erro?.details
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[4][1]++;
    }
    const filtros =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[27]++, resultadoValidacao.dados);
    // Construir filtros para a consulta
    const where =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[28]++, {});
    /* istanbul ignore next */
    cov_erisr1hnu().s[29]++;
    if (filtros.status) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[5][0]++;
      cov_erisr1hnu().s[30]++;
      where.status = filtros.status;
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[5][1]++;
    }
    cov_erisr1hnu().s[31]++;
    if (filtros.dataInicio) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[6][0]++;
      cov_erisr1hnu().s[32]++;
      where.dataInicio = {
        gte: new Date(filtros.dataInicio)
      };
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[6][1]++;
    }
    cov_erisr1hnu().s[33]++;
    if (filtros.dataFim) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[7][0]++;
      cov_erisr1hnu().s[34]++;
      where.dataFim = {
        lte: new Date(filtros.dataFim)
      };
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[7][1]++;
    }
    cov_erisr1hnu().s[35]++;
    if (filtros.criadoPor) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[8][0]++;
      cov_erisr1hnu().s[36]++;
      where.criadoPorId = filtros.criadoPor;
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[8][1]++;
    }
    // Calcular paginação
    const skip =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[37]++, (filtros.page - 1) * filtros.limit);
    // Buscar períodos com paginação
    const [periodos, total] =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[38]++, await Promise.all([_prisma.prisma.periodoAvaliacao.findMany({
      where,
      skip,
      take: filtros.limit,
      orderBy: {
        [filtros.orderBy]: filtros.orderDirection
      },
      include: {
        criadoPor: {
          select: {
            id: true,
            nome: true,
            email: true
          }
        },
        _count: {
          select: {
            avaliacoes: true
          }
        }
      }
    }), _prisma.prisma.periodoAvaliacao.count({
      where
    })]));
    const totalPages =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[39]++, Math.ceil(total / filtros.limit));
    /* istanbul ignore next */
    cov_erisr1hnu().s[40]++;
    return _server.NextResponse.json({
      periodos,
      pagination: {
        page: filtros.page,
        limit: filtros.limit,
        total,
        totalPages,
        hasNext: filtros.page < totalPages,
        hasPrev: filtros.page > 1
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_erisr1hnu().s[41]++;
    console.error('Erro ao listar períodos de avaliação:', error);
    /* istanbul ignore next */
    cov_erisr1hnu().s[42]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_erisr1hnu().f[4]++;
  cov_erisr1hnu().s[43]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[44]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_erisr1hnu().s[45]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[9][0]++;
      cov_erisr1hnu().s[46]++;
      return _server.NextResponse.json({
        error: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[9][1]++;
    }
    // Verificar permissões do usuário
    const usuario =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[47]++, await _prisma.prisma.usuario.findUnique({
      where: {
        id: session.user.id
      },
      select: {
        userType: true
      }
    }));
    /* istanbul ignore next */
    cov_erisr1hnu().s[48]++;
    if (!usuario) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[10][0]++;
      cov_erisr1hnu().s[49]++;
      return _server.NextResponse.json({
        error: 'Usuário não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[10][1]++;
    }
    // Apenas ADMIN e GESTOR podem criar períodos
    cov_erisr1hnu().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_erisr1hnu().b[12][0]++, usuario.userType !== _client.TipoUsuario.ADMIN) &&
    /* istanbul ignore next */
    (cov_erisr1hnu().b[12][1]++, usuario.userType !== _client.TipoUsuario.GESTOR)) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[11][0]++;
      cov_erisr1hnu().s[51]++;
      return _server.NextResponse.json({
        error: 'Sem permissão para criar períodos de avaliação'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[11][1]++;
    }
    // Atualizar automaticamente os status dos períodos antes de criar novo
    cov_erisr1hnu().s[52]++;
    await (0, _periodostatusupdater.middlewareAtualizacaoStatus)();
    const body =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[53]++, await request.json());
    const resultadoValidacao =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[54]++, (0, _avaliacoes.validarBody)(_avaliacoes.criarPeriodoSchema, body));
    /* istanbul ignore next */
    cov_erisr1hnu().s[55]++;
    if (!resultadoValidacao.sucesso) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[13][0]++;
      cov_erisr1hnu().s[56]++;
      return _server.NextResponse.json({
        erro: 'Dados inválidos',
        detalhes: resultadoValidacao.erro?.details
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[13][1]++;
    }
    const dadosValidados =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[57]++, resultadoValidacao.dados);
    // Verificar se já existe um período com o mesmo nome
    const periodoExistente =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[58]++, await _prisma.prisma.periodoAvaliacao.findFirst({
      where: {
        nome: dadosValidados.nome
      }
    }));
    /* istanbul ignore next */
    cov_erisr1hnu().s[59]++;
    if (periodoExistente) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[14][0]++;
      cov_erisr1hnu().s[60]++;
      return _server.NextResponse.json({
        error: 'Já existe um período com este nome'
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[14][1]++;
    }
    // Verificar se há conflito de datas com períodos ativos
    const dataInicio =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[61]++, new Date(dadosValidados.dataInicio));
    const dataFim =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[62]++, new Date(dadosValidados.dataFim));
    const periodosConflitantes =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[63]++, await _prisma.prisma.periodoAvaliacao.findMany({
      where: {
        status: {
          in: [_client.StatusPeriodo.ATIVO, _client.StatusPeriodo.PLANEJADO]
        },
        OR: [{
          AND: [{
            dataInicio: {
              lte: dataInicio
            }
          }, {
            dataFim: {
              gte: dataInicio
            }
          }]
        }, {
          AND: [{
            dataInicio: {
              lte: dataFim
            }
          }, {
            dataFim: {
              gte: dataFim
            }
          }]
        }, {
          AND: [{
            dataInicio: {
              gte: dataInicio
            }
          }, {
            dataFim: {
              lte: dataFim
            }
          }]
        }]
      }
    }));
    /* istanbul ignore next */
    cov_erisr1hnu().s[64]++;
    if (periodosConflitantes.length > 0) {
      /* istanbul ignore next */
      cov_erisr1hnu().b[15][0]++;
      cov_erisr1hnu().s[65]++;
      return _server.NextResponse.json({
        error: 'Há conflito de datas com outros períodos ativos ou planejados',
        conflitos: periodosConflitantes.map(p => {
          /* istanbul ignore next */
          cov_erisr1hnu().f[5]++;
          cov_erisr1hnu().s[66]++;
          return {
            id: p.id,
            nome: p.nome,
            dataInicio: p.dataInicio,
            dataFim: p.dataFim
          };
        })
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_erisr1hnu().b[15][1]++;
    }
    // Criar o período
    const novoPeriodo =
    /* istanbul ignore next */
    (cov_erisr1hnu().s[67]++, await _prisma.prisma.periodoAvaliacao.create({
      data: {
        nome: dadosValidados.nome,
        descricao: dadosValidados.descricao,
        dataInicio,
        dataFim,
        status: dadosValidados.status,
        criadoPorId: session.user.id
      },
      include: {
        criadoPor: {
          select: {
            id: true,
            nome: true,
            email: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_erisr1hnu().s[68]++;
    return _server.NextResponse.json(novoPeriodo, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_erisr1hnu().s[69]++;
    console.error('Erro ao criar período de avaliação:', error);
    /* istanbul ignore next */
    cov_erisr1hnu().s[70]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,