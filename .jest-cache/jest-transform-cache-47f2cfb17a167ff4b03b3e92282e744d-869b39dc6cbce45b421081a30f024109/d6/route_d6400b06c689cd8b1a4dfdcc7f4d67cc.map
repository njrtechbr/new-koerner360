{"version":3,"names":["GET","cov_erisr1hnu","f","s","POST","request","session","_nextauth","getServerSession","_auth","authOptions","user","id","b","_server","NextResponse","json","error","status","usuario","_prisma","prisma","findUnique","where","select","userType","_client","TipoUsuario","ADMIN","GESTOR","_periodostatusupdater","middlewareAtualizacaoStatus","searchParams","URL","url","resultadoValidacao","_avaliacoes","validarQueryParams","filtrosPeriodoSchema","sucesso","erro","detalhes","details","filtros","dados","dataInicio","gte","Date","dataFim","lte","criadoPor","criadoPorId","skip","page","limit","periodos","total","Promise","all","periodoAvaliacao","findMany","take","orderBy","orderDirection","include","nome","email","_count","avaliacoes","count","totalPages","Math","ceil","pagination","hasNext","hasPrev","console","body","validarBody","criarPeriodoSchema","dadosValidados","periodoExistente","findFirst","periodosConflitantes","in","StatusPeriodo","ATIVO","PLANEJADO","OR","AND","length","conflitos","map","p","novoPeriodo","create","data","descricao"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { TipoUsuario, StatusPeriodo } from '@prisma/client';\nimport {\n  criarPeriodoSchema,\n  filtrosPeriodoSchema,\n  validarQueryParams,\n  validarBody\n} from '@/lib/validations/avaliacoes';\nimport { middlewareAtualizacaoStatus } from '@/lib/utils/periodo-status-updater';\n\n// GET /api/periodos-avaliacao - Listar períodos de avaliação\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões do usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN e GESTOR podem listar períodos\n    if (usuario.userType !== TipoUsuario.ADMIN && usuario.userType !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { error: 'Sem permissão para visualizar períodos de avaliação' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos períodos antes de listar\n    await middlewareAtualizacaoStatus();\n\n    const { searchParams } = new URL(request.url);\n    const resultadoValidacao = validarQueryParams(filtrosPeriodoSchema, searchParams);\n    \n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          erro: 'Parâmetros inválidos', \n          detalhes: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const filtros = resultadoValidacao.dados;\n\n    // Construir filtros para a consulta\n    const where: any = {};\n\n    if (filtros.status) {\n      where.status = filtros.status;\n    }\n\n    if (filtros.dataInicio) {\n      where.dataInicio = {\n        gte: new Date(filtros.dataInicio)\n      };\n    }\n\n    if (filtros.dataFim) {\n      where.dataFim = {\n        lte: new Date(filtros.dataFim)\n      };\n    }\n\n    if (filtros.criadoPor) {\n      where.criadoPorId = filtros.criadoPor;\n    }\n\n    // Calcular paginação\n    const skip = (filtros.page - 1) * filtros.limit;\n\n    // Buscar períodos com paginação\n    const [periodos, total] = await Promise.all([\n      prisma.periodoAvaliacao.findMany({\n        where,\n        skip,\n        take: filtros.limit,\n        orderBy: {\n          [filtros.orderBy]: filtros.orderDirection\n        },\n        include: {\n          criadoPor: {\n            select: {\n              id: true,\n              nome: true,\n              email: true\n            }\n          },\n          _count: {\n            select: {\n              avaliacoes: true\n            }\n          }\n        }\n      }),\n      prisma.periodoAvaliacao.count({ where })\n    ]);\n\n    const totalPages = Math.ceil(total / filtros.limit);\n\n    return NextResponse.json({\n      periodos,\n      pagination: {\n        page: filtros.page,\n        limit: filtros.limit,\n        total,\n        totalPages,\n        hasNext: filtros.page < totalPages,\n        hasPrev: filtros.page > 1\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao listar períodos de avaliação:', error);\n    \n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/periodos-avaliacao - Criar novo período de avaliação\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões do usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN e GESTOR podem criar períodos\n    if (usuario.userType !== TipoUsuario.ADMIN && usuario.userType !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { error: 'Sem permissão para criar períodos de avaliação' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos períodos antes de criar novo\n    await middlewareAtualizacaoStatus();\n\n    const body = await request.json();\n    const resultadoValidacao = validarBody(criarPeriodoSchema, body);\n    \n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          erro: 'Dados inválidos', \n          detalhes: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const dadosValidados = resultadoValidacao.dados;\n\n    // Verificar se já existe um período com o mesmo nome\n    const periodoExistente = await prisma.periodoAvaliacao.findFirst({\n      where: {\n        nome: dadosValidados.nome\n      }\n    });\n\n    if (periodoExistente) {\n      return NextResponse.json(\n        { error: 'Já existe um período com este nome' },\n        { status: 409 }\n      );\n    }\n\n    // Verificar se há conflito de datas com períodos ativos\n    const dataInicio = new Date(dadosValidados.dataInicio);\n    const dataFim = new Date(dadosValidados.dataFim);\n\n    const periodosConflitantes = await prisma.periodoAvaliacao.findMany({\n      where: {\n        status: {\n          in: [StatusPeriodo.ATIVO, StatusPeriodo.PLANEJADO]\n        },\n        OR: [\n          {\n            AND: [\n              { dataInicio: { lte: dataInicio } },\n              { dataFim: { gte: dataInicio } }\n            ]\n          },\n          {\n            AND: [\n              { dataInicio: { lte: dataFim } },\n              { dataFim: { gte: dataFim } }\n            ]\n          },\n          {\n            AND: [\n              { dataInicio: { gte: dataInicio } },\n              { dataFim: { lte: dataFim } }\n            ]\n          }\n        ]\n      }\n    });\n\n    if (periodosConflitantes.length > 0) {\n      return NextResponse.json(\n        { \n          error: 'Há conflito de datas com outros períodos ativos ou planejados',\n          conflitos: periodosConflitantes.map(p => ({\n            id: p.id,\n            nome: p.nome,\n            dataInicio: p.dataInicio,\n            dataFim: p.dataFim\n          }))\n        },\n        { status: 409 }\n      );\n    }\n\n    // Criar o período\n    const novoPeriodo = await prisma.periodoAvaliacao.create({\n      data: {\n        nome: dadosValidados.nome,\n        descricao: dadosValidados.descricao,\n        dataInicio,\n        dataFim,\n        status: dadosValidados.status,\n        criadoPorId: session.user.id\n      },\n      include: {\n        criadoPor: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json(novoPeriodo, { status: 201 });\n\n  } catch (error) {\n    console.error('Erro ao criar período de avaliação:', error);\n    \n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}