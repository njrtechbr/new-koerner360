{"version":3,"names":["GET","cov_47o5jvrkd","f","s","POST","request","session","_nextauth","getServerSession","_auth","authOptions","user","id","b","_server","NextResponse","json","error","status","usuario","_prisma","prisma","findUnique","where","select","userType","atendente","_periodostatusupdater","middlewareAtualizacaoStatus","searchParams","URL","url","resultadoValidacao","_avaliacoes","validarQueryParams","filtrosAvaliacaoSchema","sucesso","erro","detalhes","details","filtros","dados","_client","TipoUsuario","ATENDENTE","OR","avaliadorId","avaliadoId","periodoId","offset","page","limit","avaliacoes","total","Promise","all","avaliacao","findMany","include","avaliador","nome","email","avaliado","cargo","setor","periodo","dataInicio","dataFim","orderBy","orderDirection","skip","take","count","totalPages","Math","ceil","hasNextPage","hasPreviousPage","paginacao","console","z","ZodError","errors","body","validarBody","criarAvaliacaoSchema","dadosValidados","periodoAvaliacao","agora","Date","atendenteAvaliado","avaliacaoExistente","avaliadorId_avaliadoId_periodoId","novaAvaliacao","create","data","nota","comentario","StatusAvaliacao","CONCLUIDA"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\avaliacoes\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { TipoUsuario, StatusAvaliacao } from '@prisma/client';\nimport {\n  criarAvaliacaoSchema,\n  filtrosAvaliacaoSchema,\n  validarQueryParams,\n  validarBody\n} from '@/lib/validations/avaliacoes';\nimport { middlewareAtualizacaoStatus } from '@/lib/utils/periodo-status-updater';\n\n// GET /api/avaliacoes - Listar avaliações com filtros\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões - apenas ADMIN e GESTOR podem listar todas as avaliações\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true, atendente: { select: { id: true } } }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos períodos antes de listar avaliações\n    await middlewareAtualizacaoStatus();\n\n    const { searchParams } = new URL(request.url);\n    const resultadoValidacao = validarQueryParams(filtrosAvaliacaoSchema, searchParams);\n    \n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          erro: 'Parâmetros inválidos', \n          detalhes: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const filtros = resultadoValidacao.dados;\n\n    // Construir filtros de consulta\n    const where: any = {};\n\n    // Se for ATENDENTE, só pode ver suas próprias avaliações (como avaliado ou avaliador)\n    if (usuario.userType === TipoUsuario.ATENDENTE && usuario.atendente) {\n      where.OR = [\n        { avaliadorId: session.user.id },\n        { avaliadoId: usuario.atendente.id }\n      ];\n    }\n\n    // Aplicar filtros específicos\n    if (filtros.periodoId) {\n      where.periodoId = filtros.periodoId;\n    }\n    if (filtros.avaliadorId) {\n      where.avaliadorId = filtros.avaliadorId;\n    }\n    if (filtros.avaliadoId) {\n      where.avaliadoId = filtros.avaliadoId;\n    }\n    if (filtros.status) {\n      where.status = filtros.status;\n    }\n\n    // Calcular offset para paginação\n    const offset = (filtros.page - 1) * filtros.limit;\n\n    // Buscar avaliações\n    const [avaliacoes, total] = await Promise.all([\n      prisma.avaliacao.findMany({\n        where,\n        include: {\n          avaliador: {\n            select: {\n              id: true,\n              nome: true,\n              email: true\n            }\n          },\n          avaliado: {\n            select: {\n              id: true,\n              usuario: {\n                select: {\n                  nome: true,\n                  email: true\n                }\n              },\n              cargo: true,\n              setor: true\n            }\n          },\n          periodo: {\n            select: {\n              id: true,\n              nome: true,\n              dataInicio: true,\n              dataFim: true,\n              status: true\n            }\n          }\n        },\n        orderBy: {\n          [filtros.orderBy]: filtros.orderDirection\n        },\n        skip: offset,\n        take: filtros.limit\n      }),\n      prisma.avaliacao.count({ where })\n    ]);\n\n    // Calcular informações de paginação\n    const totalPages = Math.ceil(total / filtros.limit);\n    const hasNextPage = filtros.page < totalPages;\n    const hasPreviousPage = filtros.page > 1;\n\n    return NextResponse.json({\n      avaliacoes,\n      paginacao: {\n        page: filtros.page,\n        limit: filtros.limit,\n        total,\n        totalPages,\n        hasNextPage,\n        hasPreviousPage\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar avaliações:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Dados inválidos', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/avaliacoes - Criar nova avaliação\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const resultadoValidacao = validarBody(criarAvaliacaoSchema, body);\n    \n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          erro: 'Dados inválidos', \n          detalhes: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const dadosValidados = resultadoValidacao.dados;\n\n    // Verificar se o usuário existe e tem permissão\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true, atendente: { select: { id: true } } }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos períodos antes de verificar período ativo\n    await middlewareAtualizacaoStatus();\n\n    // Verificar se o período de avaliação existe e está ativo\n    const periodo = await prisma.periodoAvaliacao.findUnique({\n      where: { id: dadosValidados.periodoId },\n      select: { id: true, status: true, dataInicio: true, dataFim: true }\n    });\n\n    if (!periodo) {\n      return NextResponse.json(\n        { error: 'Período de avaliação não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    if (periodo.status !== 'ATIVO') {\n      return NextResponse.json(\n        { error: 'Período de avaliação não está ativo' },\n        { status: 400 }\n      );\n    }\n\n    // Verificar se está dentro do período\n    const agora = new Date();\n    if (agora < periodo.dataInicio || agora > periodo.dataFim) {\n      return NextResponse.json(\n        { error: 'Fora do período de avaliação' },\n        { status: 400 }\n      );\n    }\n\n    // Verificar se o atendente a ser avaliado existe\n    const atendenteAvaliado = await prisma.atendente.findUnique({\n      where: { id: dadosValidados.avaliadoId },\n      select: { id: true, status: true }\n    });\n\n    if (!atendenteAvaliado) {\n      return NextResponse.json(\n        { error: 'Atendente a ser avaliado não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    if (atendenteAvaliado.status !== 'ATIVO') {\n      return NextResponse.json(\n        { error: 'Atendente a ser avaliado não está ativo' },\n        { status: 400 }\n      );\n    }\n\n    // Verificar se já existe uma avaliação do mesmo avaliador para o mesmo avaliado no mesmo período\n    const avaliacaoExistente = await prisma.avaliacao.findUnique({\n      where: {\n        avaliadorId_avaliadoId_periodoId: {\n          avaliadorId: session.user.id,\n          avaliadoId: dadosValidados.avaliadoId,\n          periodoId: dadosValidados.periodoId\n        }\n      }\n    });\n\n    if (avaliacaoExistente) {\n      return NextResponse.json(\n        { error: 'Você já avaliou este atendente neste período' },\n        { status: 409 }\n      );\n    }\n\n    // Criar a avaliação\n    const novaAvaliacao = await prisma.avaliacao.create({\n      data: {\n        avaliadorId: session.user.id,\n        avaliadoId: dadosValidados.avaliadoId,\n        periodoId: dadosValidados.periodoId,\n        nota: dadosValidados.nota,\n        comentario: dadosValidados.comentario,\n        status: StatusAvaliacao.CONCLUIDA\n      },\n      include: {\n        avaliador: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliado: {\n          select: {\n            id: true,\n            usuario: {\n              select: {\n                nome: true,\n                email: true\n              }\n            },\n            cargo: true,\n            setor: true\n          }\n        },\n        periodo: {\n          select: {\n            id: true,\n            nome: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json(novaAvaliacao, { status: 201 });\n\n  } catch (error) {\n    console.error('Erro ao criar avaliação:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Dados inválidos', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}