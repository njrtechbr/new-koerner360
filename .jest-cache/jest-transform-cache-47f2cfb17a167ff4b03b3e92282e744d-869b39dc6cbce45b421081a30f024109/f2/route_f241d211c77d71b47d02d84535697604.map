{"version":3,"names":["cov_2464aq0x01","actualCoverage","s","GET","filtrosDashboardSchema","_zod","z","object","dataInicio","string","datetime","optional","dataFim","periodo","enum","default","setor","cargo","status","request","f","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","includes","userType","searchParams","URL","url","filtros","parse","get","Date","agora","getTime","filtroAtendentes","totalAtendentes","atendentesPorStatus","atendentesPorSetor","atendentesPorCargo","Promise","all","_prisma","prisma","atendente","count","where","groupBy","by","_count","id","documentosNoPeriodo","avaliacoesNoPeriodo","alteracoesNoPeriodo","documentoAtendente","ativo","criadoEm","gte","lte","avaliacao","findMany","dataAvaliacao","select","nota","atendenteId","historicoAlteracaoAtendente","mediaGeralAvaliacoes","length","reduce","acc","av","avaliacoesPorAtendente","push","distribuicaoPerformance","alta","media","baixa","Object","values","forEach","notas","topPerformers","avaliacoes","some","usuario","nome","take","topPerformersComMedia","map","mediaAvaliacoes","totalAvaliacoes","filter","sort","a","slice","periodoAnteriorInicio","periodoAnteriorFim","documentosPeriodoAnterior","avaliacoesPeriodoAnterior","mediaAvaliacoesPeriodoAnterior","tendencias","documentos","atual","anterior","variacao","Number","toFixed","dashboard","resumoGeral","item","metricas","totalNoPeriodo","mediaPorAtendente","mediaGeral","atividade","totalAlteracoes","alteracoesPorTipo","tipo","insights","atendentesMaisAtivos","performanceGeral","crescimentoDocumentos","melhoriaAvaliacoes","geradoEm","toISOString","error","console","ZodError","detalhes","errors"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\dashboard\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { ZodError } from 'zod';\nimport { z } from 'zod';\n\n/**\n * Schema para filtros do dashboard\n */\nconst filtrosDashboardSchema = z.object({\n  dataInicio: z.string().datetime().optional(),\n  dataFim: z.string().datetime().optional(),\n  periodo: z.enum(['7d', '30d', '90d', '1y', 'custom']).default('30d'),\n  setor: z.string().optional(),\n  cargo: z.string().optional(),\n  status: z.enum(['ATIVO', 'INATIVO', 'SUSPENSO']).optional(),\n});\n\n/**\n * GET /api/atendentes/dashboard\n * Busca métricas gerais do dashboard de atendentes\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões - apenas ADMIN e GERENTE podem ver dashboard geral\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para acessar dashboard geral' },\n        { status: 403 }\n      );\n    }\n\n    // Processar filtros da query string\n    const { searchParams } = new URL(request.url);\n    const filtros = filtrosDashboardSchema.parse({\n      dataInicio: searchParams.get('dataInicio'),\n      dataFim: searchParams.get('dataFim'),\n      periodo: searchParams.get('periodo') || '30d',\n      setor: searchParams.get('setor'),\n      cargo: searchParams.get('cargo'),\n      status: searchParams.get('status'),\n    });\n\n    // Calcular datas baseadas no período\n    let dataInicio: Date;\n    let dataFim: Date = new Date();\n\n    if (filtros.periodo === 'custom' && filtros.dataInicio && filtros.dataFim) {\n      dataInicio = new Date(filtros.dataInicio);\n      dataFim = new Date(filtros.dataFim);\n    } else {\n      const agora = new Date();\n      switch (filtros.periodo) {\n        case '7d':\n          dataInicio = new Date(agora.getTime() - 7 * 24 * 60 * 60 * 1000);\n          break;\n        case '30d':\n          dataInicio = new Date(agora.getTime() - 30 * 24 * 60 * 60 * 1000);\n          break;\n        case '90d':\n          dataInicio = new Date(agora.getTime() - 90 * 24 * 60 * 60 * 1000);\n          break;\n        case '1y':\n          dataInicio = new Date(agora.getTime() - 365 * 24 * 60 * 60 * 1000);\n          break;\n        default:\n          dataInicio = new Date(agora.getTime() - 30 * 24 * 60 * 60 * 1000);\n      }\n    }\n\n    // Construir filtros para consultas\n    const filtroAtendentes: any = {};\n    if (filtros.setor) filtroAtendentes.setor = filtros.setor;\n    if (filtros.cargo) filtroAtendentes.cargo = filtros.cargo;\n    if (filtros.status) filtroAtendentes.status = filtros.status;\n\n    // Buscar dados gerais\n    const [\n      totalAtendentes,\n      atendentesPorStatus,\n      atendentesPorSetor,\n      atendentesPorCargo,\n    ] = await Promise.all([\n      // Total de atendentes\n      prisma.atendente.count({\n        where: filtroAtendentes,\n      }),\n\n      // Atendentes por status\n      prisma.atendente.groupBy({\n        by: ['status'],\n        where: filtroAtendentes,\n        _count: {\n          id: true,\n        },\n      }),\n\n      // Atendentes por setor\n      prisma.atendente.groupBy({\n        by: ['setor'],\n        where: filtroAtendentes,\n        _count: {\n          id: true,\n        },\n      }),\n\n      // Atendentes por cargo\n      prisma.atendente.groupBy({\n        by: ['cargo'],\n        where: filtroAtendentes,\n        _count: {\n          id: true,\n        },\n      }),\n    ]);\n\n    // Buscar métricas de atividade no período\n    const [documentosNoPeriodo, avaliacoesNoPeriodo, alteracoesNoPeriodo] =\n      await Promise.all([\n        // Documentos criados no período\n        prisma.documentoAtendente.count({\n          where: {\n            ativo: true,\n            criadoEm: {\n              gte: dataInicio,\n              lte: dataFim,\n            },\n            atendente: filtroAtendentes,\n          },\n        }),\n\n        // Avaliações no período\n        prisma.avaliacao.findMany({\n          where: {\n            dataAvaliacao: {\n              gte: dataInicio,\n              lte: dataFim,\n            },\n            atendente: filtroAtendentes,\n          },\n          select: {\n            nota: true,\n            atendenteId: true,\n            dataAvaliacao: true,\n          },\n        }),\n\n        // Alterações no período\n        prisma.historicoAlteracaoAtendente.groupBy({\n          by: ['tipo'],\n          where: {\n            criadoEm: {\n              gte: dataInicio,\n              lte: dataFim,\n            },\n            atendente: filtroAtendentes,\n          },\n          _count: {\n            id: true,\n          },\n        }),\n      ]);\n\n    // Calcular métricas de avaliação\n    const mediaGeralAvaliacoes =\n      avaliacoesNoPeriodo.length > 0\n        ? avaliacoesNoPeriodo.reduce((acc, av) => acc + av.nota, 0) /\n          avaliacoesNoPeriodo.length\n        : 0;\n\n    // Agrupar avaliações por atendente\n    const avaliacoesPorAtendente = avaliacoesNoPeriodo.reduce(\n      (acc, av) => {\n        if (!acc[av.atendenteId]) {\n          acc[av.atendenteId] = [];\n        }\n        acc[av.atendenteId].push(av.nota);\n        return acc;\n      },\n      {} as Record<string, number[]>\n    );\n\n    // Calcular distribuição de performance\n    const distribuicaoPerformance = {\n      alta: 0, // >= 8\n      media: 0, // 6-7.9\n      baixa: 0, // < 6\n    };\n\n    Object.values(avaliacoesPorAtendente).forEach(notas => {\n      const media = notas.reduce((acc, nota) => acc + nota, 0) / notas.length;\n      if (media >= 8) distribuicaoPerformance.alta++;\n      else if (media >= 6) distribuicaoPerformance.media++;\n      else distribuicaoPerformance.baixa++;\n    });\n\n    // Buscar top performers\n    const topPerformers = await prisma.atendente.findMany({\n      where: {\n        ...filtroAtendentes,\n        avaliacoes: {\n          some: {\n            dataAvaliacao: {\n              gte: dataInicio,\n              lte: dataFim,\n            },\n          },\n        },\n      },\n      select: {\n        id: true,\n        cargo: true,\n        setor: true,\n        usuario: {\n          select: {\n            nome: true,\n          },\n        },\n        avaliacoes: {\n          where: {\n            dataAvaliacao: {\n              gte: dataInicio,\n              lte: dataFim,\n            },\n          },\n          select: {\n            nota: true,\n          },\n        },\n      },\n      take: 10,\n    });\n\n    // Calcular média para cada top performer e ordenar\n    const topPerformersComMedia = topPerformers\n      .map(atendente => ({\n        id: atendente.id,\n        nome: atendente.usuario.nome,\n        cargo: atendente.cargo,\n        setor: atendente.setor,\n        mediaAvaliacoes:\n          atendente.avaliacoes.length > 0\n            ? atendente.avaliacoes.reduce((acc, av) => acc + av.nota, 0) /\n              atendente.avaliacoes.length\n            : 0,\n        totalAvaliacoes: atendente.avaliacoes.length,\n      }))\n      .filter(atendente => atendente.totalAvaliacoes > 0)\n      .sort((a, b) => b.mediaAvaliacoes - a.mediaAvaliacoes)\n      .slice(0, 5);\n\n    // Calcular tendências (comparar com período anterior)\n    const periodoAnteriorInicio = new Date(\n      dataInicio.getTime() - (dataFim.getTime() - dataInicio.getTime())\n    );\n    const periodoAnteriorFim = dataInicio;\n\n    const [documentosPeriodoAnterior, avaliacoesPeriodoAnterior] =\n      await Promise.all([\n        prisma.documentoAtendente.count({\n          where: {\n            ativo: true,\n            criadoEm: {\n              gte: periodoAnteriorInicio,\n              lte: periodoAnteriorFim,\n            },\n            atendente: filtroAtendentes,\n          },\n        }),\n\n        prisma.avaliacao.findMany({\n          where: {\n            dataAvaliacao: {\n              gte: periodoAnteriorInicio,\n              lte: periodoAnteriorFim,\n            },\n            atendente: filtroAtendentes,\n          },\n          select: {\n            nota: true,\n          },\n        }),\n      ]);\n\n    const mediaAvaliacoesPeriodoAnterior =\n      avaliacoesPeriodoAnterior.length > 0\n        ? avaliacoesPeriodoAnterior.reduce((acc, av) => acc + av.nota, 0) /\n          avaliacoesPeriodoAnterior.length\n        : 0;\n\n    // Calcular tendências\n    const tendencias = {\n      documentos: {\n        atual: documentosNoPeriodo,\n        anterior: documentosPeriodoAnterior,\n        variacao:\n          documentosPeriodoAnterior > 0\n            ? ((documentosNoPeriodo - documentosPeriodoAnterior) /\n                documentosPeriodoAnterior) *\n              100\n            : documentosNoPeriodo > 0\n              ? 100\n              : 0,\n      },\n      avaliacoes: {\n        atual: Number(mediaGeralAvaliacoes.toFixed(2)),\n        anterior: Number(mediaAvaliacoesPeriodoAnterior.toFixed(2)),\n        variacao:\n          mediaAvaliacoesPeriodoAnterior > 0\n            ? ((mediaGeralAvaliacoes - mediaAvaliacoesPeriodoAnterior) /\n                mediaAvaliacoesPeriodoAnterior) *\n              100\n            : mediaGeralAvaliacoes > 0\n              ? 100\n              : 0,\n      },\n    };\n\n    // Montar resposta do dashboard\n    const dashboard = {\n      periodo: {\n        dataInicio,\n        dataFim,\n        periodo: filtros.periodo,\n      },\n      filtros: {\n        setor: filtros.setor,\n        cargo: filtros.cargo,\n        status: filtros.status,\n      },\n      resumoGeral: {\n        totalAtendentes,\n        atendentesPorStatus: atendentesPorStatus.reduce(\n          (acc, item) => {\n            acc[item.status] = item._count.id;\n            return acc;\n          },\n          {} as Record<string, number>\n        ),\n        atendentesPorSetor: atendentesPorSetor.reduce(\n          (acc, item) => {\n            acc[item.setor] = item._count.id;\n            return acc;\n          },\n          {} as Record<string, number>\n        ),\n        atendentesPorCargo: atendentesPorCargo.reduce(\n          (acc, item) => {\n            acc[item.cargo] = item._count.id;\n            return acc;\n          },\n          {} as Record<string, number>\n        ),\n      },\n      metricas: {\n        documentos: {\n          totalNoPeriodo: documentosNoPeriodo,\n          mediaPorAtendente:\n            totalAtendentes > 0\n              ? Number((documentosNoPeriodo / totalAtendentes).toFixed(2))\n              : 0,\n        },\n        avaliacoes: {\n          totalNoPeriodo: avaliacoesNoPeriodo.length,\n          mediaGeral: Number(mediaGeralAvaliacoes.toFixed(2)),\n          distribuicaoPerformance,\n        },\n        atividade: {\n          totalAlteracoes: alteracoesNoPeriodo.reduce(\n            (acc, item) => acc + item._count.id,\n            0\n          ),\n          alteracoesPorTipo: alteracoesNoPeriodo.reduce(\n            (acc, item) => {\n              acc[item.tipo] = item._count.id;\n              return acc;\n            },\n            {} as Record<string, number>\n          ),\n        },\n      },\n      topPerformers,\n      tendencias,\n      insights: {\n        atendentesMaisAtivos: totalAtendentes > 0,\n        performanceGeral:\n          mediaGeralAvaliacoes >= 8\n            ? 'Excelente'\n            : mediaGeralAvaliacoes >= 6\n              ? 'Boa'\n              : 'Precisa melhorar',\n        crescimentoDocumentos: tendencias.documentos.variacao > 0,\n        melhoriaAvaliacoes: tendencias.avaliacoes.variacao > 0,\n      },\n    };\n\n    return NextResponse.json({\n      dashboard,\n      geradoEm: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('Erro ao buscar dashboard de atendentes:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: 'Dados inválidos',\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAgBsB;;;;;;WAAAC,GAAA;;;;;kCAvBoB;;;kCACT;;;kCACL;;;kCACL;;;kCACE;AAGzB;;;AAGA,MAAMC,sBAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,OAAyBG,IAAA,CAAAC,CAAC,CAACC,MAAM,CAAC;EACtCC,UAAA,EAAYH,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGC,QAAQ,GAAGC,QAAQ;EAC1CC,OAAA,EAASP,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGC,QAAQ,GAAGC,QAAQ;EACvCE,OAAA,EAASR,IAAA,CAAAC,CAAC,CAACQ,IAAI,CAAC,CAAC,MAAM,OAAO,OAAO,MAAM,SAAS,EAAEC,OAAO,CAAC;EAC9DC,KAAA,EAAOX,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGE,QAAQ;EAC1BM,KAAA,EAAOZ,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGE,QAAQ;EAC1BO,MAAA,EAAQb,IAAA,CAAAC,CAAC,CAACQ,IAAI,CAAC,CAAC,SAAS,WAAW,WAAW,EAAEH,QAAQ;AAC3D;AAMO,eAAeR,IAAIgB,OAAoB;EAAA;EAAAnB,cAAA,GAAAoB,CAAA;EAAApB,cAAA,GAAAE,CAAA;EAC5C,IAAI;IACF;IACA,MAAMmB,OAAA;IAAA;IAAA,CAAArB,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAoB,SAAA,CAAAC,gBAAgB,EAACC,KAAA,CAAAC,WAAW;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IAClD,IAAI,CAACmB,OAAA,EAASK,IAAA,EAAM;MAAA;MAAA1B,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MAClB,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,IAAA,EAAM;MAAiB,GAAG;QAAEb,MAAA,EAAQ;MAAI;IACrE;IAAA;IAAA;MAAAlB,cAAA,GAAA2B,CAAA;IAAA;IAEA;IAAA3B,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC,CAAC,SAAS,UAAU,CAAC8B,QAAQ,CAACX,OAAA,CAAQK,IAAI,CAACO,QAAQ,GAAG;MAAA;MAAAjC,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MACzD,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAM;MAA6C,GACrD;QAAEb,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAA2B,CAAA;IAAA;IAEA;IACA,MAAM;MAAEO;IAAY,CAAE;IAAA;IAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAG,IAAIiC,GAAA,CAAIhB,OAAA,CAAQiB,GAAG;IAC5C,MAAMC,OAAA;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,QAAUE,sBAAA,CAAuBkC,KAAK,CAAC;MAC3C9B,UAAA,EAAY0B,YAAA,CAAaK,GAAG,CAAC;MAC7B3B,OAAA,EAASsB,YAAA,CAAaK,GAAG,CAAC;MAC1B1B,OAAA;MAAS;MAAA,CAAAb,cAAA,GAAA2B,CAAA,UAAAO,YAAA,CAAaK,GAAG,CAAC;MAAA;MAAA,CAAAvC,cAAA,GAAA2B,CAAA,UAAc;MACxCX,KAAA,EAAOkB,YAAA,CAAaK,GAAG,CAAC;MACxBtB,KAAA,EAAOiB,YAAA,CAAaK,GAAG,CAAC;MACxBrB,MAAA,EAAQgB,YAAA,CAAaK,GAAG,CAAC;IAC3B;IAEA;IACA,IAAI/B,UAAA;IACJ,IAAII,OAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAgB,IAAIsC,IAAA;IAAA;IAAAxC,cAAA,GAAAE,CAAA;IAExB;IAAI;IAAA,CAAAF,cAAA,GAAA2B,CAAA,UAAAU,OAAA,CAAQxB,OAAO,KAAK;IAAA;IAAA,CAAAb,cAAA,GAAA2B,CAAA,UAAYU,OAAA,CAAQ7B,UAAU;IAAA;IAAA,CAAAR,cAAA,GAAA2B,CAAA,UAAIU,OAAA,CAAQzB,OAAO,GAAE;MAAA;MAAAZ,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MACzEM,UAAA,GAAa,IAAIgC,IAAA,CAAKH,OAAA,CAAQ7B,UAAU;MAAA;MAAAR,cAAA,GAAAE,CAAA;MACxCU,OAAA,GAAU,IAAI4B,IAAA,CAAKH,OAAA,CAAQzB,OAAO;IACpC,OAAO;MAAA;MAAAZ,cAAA,GAAA2B,CAAA;MACL,MAAMc,KAAA;MAAA;MAAA,CAAAzC,cAAA,GAAAE,CAAA,QAAQ,IAAIsC,IAAA;MAAA;MAAAxC,cAAA,GAAAE,CAAA;MAClB,QAAQmC,OAAA,CAAQxB,OAAO;QACrB,KAAK;UAAA;UAAAb,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACHM,UAAA,GAAa,IAAIgC,IAAA,CAAKC,KAAA,CAAMC,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK;UAAA;UAAA1C,cAAA,GAAAE,CAAA;UAC3D;QACF,KAAK;UAAA;UAAAF,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACHM,UAAA,GAAa,IAAIgC,IAAA,CAAKC,KAAA,CAAMC,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK;UAAA;UAAA1C,cAAA,GAAAE,CAAA;UAC5D;QACF,KAAK;UAAA;UAAAF,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACHM,UAAA,GAAa,IAAIgC,IAAA,CAAKC,KAAA,CAAMC,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK;UAAA;UAAA1C,cAAA,GAAAE,CAAA;UAC5D;QACF,KAAK;UAAA;UAAAF,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACHM,UAAA,GAAa,IAAIgC,IAAA,CAAKC,KAAA,CAAMC,OAAO,KAAK,MAAM,KAAK,KAAK,KAAK;UAAA;UAAA1C,cAAA,GAAAE,CAAA;UAC7D;QACF;UAAA;UAAAF,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACEM,UAAA,GAAa,IAAIgC,IAAA,CAAKC,KAAA,CAAMC,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK;MAChE;IACF;IAEA;IACA,MAAMC,gBAAA;IAAA;IAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAwB,CAAC;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAC/B,IAAImC,OAAA,CAAQrB,KAAK,EAAE;MAAA;MAAAhB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MAAAyC,gBAAA,CAAiB3B,KAAK,GAAGqB,OAAA,CAAQrB,KAAK;IAAA;IAAA;IAAA;MAAAhB,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IACzD,IAAImC,OAAA,CAAQpB,KAAK,EAAE;MAAA;MAAAjB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MAAAyC,gBAAA,CAAiB1B,KAAK,GAAGoB,OAAA,CAAQpB,KAAK;IAAA;IAAA;IAAA;MAAAjB,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IACzD,IAAImC,OAAA,CAAQnB,MAAM,EAAE;MAAA;MAAAlB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MAAAyC,gBAAA,CAAiBzB,MAAM,GAAGmB,OAAA,CAAQnB,MAAM;IAAA;IAAA;IAAA;MAAAlB,cAAA,GAAA2B,CAAA;IAAA;IAE5D;IACA,MAAM,CACJiB,eAAA,EACAC,mBAAA,EACAC,kBAAA,EACAC,kBAAA,CACD;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAG,MAAM8C,OAAA,CAAQC,GAAG,CAAC;IACpB;IACAC,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACC,KAAK,CAAC;MACrBC,KAAA,EAAOX;IACT;IAEA;IACAO,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACG,OAAO,CAAC;MACvBC,EAAA,EAAI,CAAC,SAAS;MACdF,KAAA,EAAOX,gBAAA;MACPc,MAAA,EAAQ;QACNC,EAAA,EAAI;MACN;IACF;IAEA;IACAR,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACG,OAAO,CAAC;MACvBC,EAAA,EAAI,CAAC,QAAQ;MACbF,KAAA,EAAOX,gBAAA;MACPc,MAAA,EAAQ;QACNC,EAAA,EAAI;MACN;IACF;IAEA;IACAR,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACG,OAAO,CAAC;MACvBC,EAAA,EAAI,CAAC,QAAQ;MACbF,KAAA,EAAOX,gBAAA;MACPc,MAAA,EAAQ;QACNC,EAAA,EAAI;MACN;IACF,GACD;IAED;IACA,MAAM,CAACC,mBAAA,EAAqBC,mBAAA,EAAqBC,mBAAA,CAAoB;IAAA;IAAA,CAAA7D,cAAA,GAAAE,CAAA,QACnE,MAAM8C,OAAA,CAAQC,GAAG,CAAC;IAChB;IACAC,OAAA,CAAAC,MAAM,CAACW,kBAAkB,CAACT,KAAK,CAAC;MAC9BC,KAAA,EAAO;QACLS,KAAA,EAAO;QACPC,QAAA,EAAU;UACRC,GAAA,EAAKzD,UAAA;UACL0D,GAAA,EAAKtD;QACP;QACAwC,SAAA,EAAWT;MACb;IACF;IAEA;IACAO,OAAA,CAAAC,MAAM,CAACgB,SAAS,CAACC,QAAQ,CAAC;MACxBd,KAAA,EAAO;QACLe,aAAA,EAAe;UACbJ,GAAA,EAAKzD,UAAA;UACL0D,GAAA,EAAKtD;QACP;QACAwC,SAAA,EAAWT;MACb;MACA2B,MAAA,EAAQ;QACNC,IAAA,EAAM;QACNC,WAAA,EAAa;QACbH,aAAA,EAAe;MACjB;IACF;IAEA;IACAnB,OAAA,CAAAC,MAAM,CAACsB,2BAA2B,CAAClB,OAAO,CAAC;MACzCC,EAAA,EAAI,CAAC,OAAO;MACZF,KAAA,EAAO;QACLU,QAAA,EAAU;UACRC,GAAA,EAAKzD,UAAA;UACL0D,GAAA,EAAKtD;QACP;QACAwC,SAAA,EAAWT;MACb;MACAc,MAAA,EAAQ;QACNC,EAAA,EAAI;MACN;IACF,GACD;IAEH;IACA,MAAMgB,oBAAA;IAAA;IAAA,CAAA1E,cAAA,GAAAE,CAAA,QACJ0D,mBAAA,CAAoBe,MAAM,GAAG;IAAA;IAAA,CAAA3E,cAAA,GAAA2B,CAAA,UACzBiC,mBAAA,CAAoBgB,MAAM,CAAC,CAACC,GAAA,EAAKC,EAAA,KAAO;MAAA;MAAA9E,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MAAA,OAAA2E,GAAA,GAAMC,EAAA,CAAGP,IAAI;IAAJ,CAAI,EAAE,KACvDX,mBAAA,CAAoBe,MAAM;IAAA;IAAA,CAAA3E,cAAA,GAAA2B,CAAA,UAC1B;IAEN;IACA,MAAMoD,sBAAA;IAAA;IAAA,CAAA/E,cAAA,GAAAE,CAAA,QAAyB0D,mBAAA,CAAoBgB,MAAM,CACvD,CAACC,GAAA,EAAKC,EAAA;MAAA;MAAA9E,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MACJ,IAAI,CAAC2E,GAAG,CAACC,EAAA,CAAGN,WAAW,CAAC,EAAE;QAAA;QAAAxE,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAE,CAAA;QACxB2E,GAAG,CAACC,EAAA,CAAGN,WAAW,CAAC,GAAG,EAAE;MAC1B;MAAA;MAAA;QAAAxE,cAAA,GAAA2B,CAAA;MAAA;MAAA3B,cAAA,GAAAE,CAAA;MACA2E,GAAG,CAACC,EAAA,CAAGN,WAAW,CAAC,CAACQ,IAAI,CAACF,EAAA,CAAGP,IAAI;MAAA;MAAAvE,cAAA,GAAAE,CAAA;MAChC,OAAO2E,GAAA;IACT,GACA,CAAC;IAGH;IACA,MAAMI,uBAAA;IAAA;IAAA,CAAAjF,cAAA,GAAAE,CAAA,QAA0B;MAC9BgF,IAAA,EAAM;MACNC,KAAA,EAAO;MACPC,KAAA,EAAO;IACT;IAAA;IAAApF,cAAA,GAAAE,CAAA;IAEAmF,MAAA,CAAOC,MAAM,CAACP,sBAAA,EAAwBQ,OAAO,CAACC,KAAA;MAAA;MAAAxF,cAAA,GAAAoB,CAAA;MAC5C,MAAM+D,KAAA;MAAA;MAAA,CAAAnF,cAAA,GAAAE,CAAA,QAAQsF,KAAA,CAAMZ,MAAM,CAAC,CAACC,GAAA,EAAKN,IAAA,KAAS;QAAA;QAAAvE,cAAA,GAAAoB,CAAA;QAAApB,cAAA,GAAAE,CAAA;QAAA,OAAA2E,GAAA,GAAMN,IAAA;MAAA,GAAM,KAAKiB,KAAA,CAAMb,MAAM;MAAA;MAAA3E,cAAA,GAAAE,CAAA;MACvE,IAAIiF,KAAA,IAAS,GAAG;QAAA;QAAAnF,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAE,CAAA;QAAA+E,uBAAA,CAAwBC,IAAI;MAAA,OACvC;QAAA;QAAAlF,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAE,CAAA;QAAA,IAAIiF,KAAA,IAAS,GAAG;UAAA;UAAAnF,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UAAA+E,uBAAA,CAAwBE,KAAK;QAAA,OAC7C;UAAA;UAAAnF,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UAAA+E,uBAAA,CAAwBG,KAAK;QAAA;MAAA;IACpC;IAEA;IACA,MAAMK,aAAA;IAAA;IAAA,CAAAzF,cAAA,GAAAE,CAAA,QAAgB,MAAMgD,OAAA,CAAAC,MAAM,CAACC,SAAS,CAACgB,QAAQ,CAAC;MACpDd,KAAA,EAAO;QACL,GAAGX,gBAAgB;QACnB+C,UAAA,EAAY;UACVC,IAAA,EAAM;YACJtB,aAAA,EAAe;cACbJ,GAAA,EAAKzD,UAAA;cACL0D,GAAA,EAAKtD;YACP;UACF;QACF;MACF;MACA0D,MAAA,EAAQ;QACNZ,EAAA,EAAI;QACJzC,KAAA,EAAO;QACPD,KAAA,EAAO;QACP4E,OAAA,EAAS;UACPtB,MAAA,EAAQ;YACNuB,IAAA,EAAM;UACR;QACF;QACAH,UAAA,EAAY;UACVpC,KAAA,EAAO;YACLe,aAAA,EAAe;cACbJ,GAAA,EAAKzD,UAAA;cACL0D,GAAA,EAAKtD;YACP;UACF;UACA0D,MAAA,EAAQ;YACNC,IAAA,EAAM;UACR;QACF;MACF;MACAuB,IAAA,EAAM;IACR;IAEA;IACA,MAAMC,qBAAA;IAAA;IAAA,CAAA/F,cAAA,GAAAE,CAAA,QAAwBuF,aAAA,CAC3BO,GAAG,CAAC5C,SAAA,IAAc;MAAA;MAAApD,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MAAA;QACjBwD,EAAA,EAAIN,SAAA,CAAUM,EAAE;QAChBmC,IAAA,EAAMzC,SAAA,CAAUwC,OAAO,CAACC,IAAI;QAC5B5E,KAAA,EAAOmC,SAAA,CAAUnC,KAAK;QACtBD,KAAA,EAAOoC,SAAA,CAAUpC,KAAK;QACtBiF,eAAA,EACE7C,SAAA,CAAUsC,UAAU,CAACf,MAAM,GAAG;QAAA;QAAA,CAAA3E,cAAA,GAAA2B,CAAA,WAC1ByB,SAAA,CAAUsC,UAAU,CAACd,MAAM,CAAC,CAACC,GAAA,EAAKC,EAAA,KAAO;UAAA;UAAA9E,cAAA,GAAAoB,CAAA;UAAApB,cAAA,GAAAE,CAAA;UAAA,OAAA2E,GAAA,GAAMC,EAAA,CAAGP,IAAI;QAAJ,CAAI,EAAE,KACxDnB,SAAA,CAAUsC,UAAU,CAACf,MAAM;QAAA;QAAA,CAAA3E,cAAA,GAAA2B,CAAA,WAC3B;QACNuE,eAAA,EAAiB9C,SAAA,CAAUsC,UAAU,CAACf;MACxC;IAAA,GACCwB,MAAM,CAAC/C,SAAA,IAAa;MAAA;MAAApD,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MAAA,OAAAkD,SAAA,CAAU8C,eAAe,GAAG;IAAA,GAChDE,IAAI,CAAC,CAACC,CAAA,EAAG1E,CAAA,KAAM;MAAA;MAAA3B,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MAAA,OAAAyB,CAAA,CAAEsE,eAAe,GAAGI,CAAA,CAAEJ,eAAe;IAAf,CAAe,EACpDK,KAAK,CAAC,GAAG;IAEZ;IACA,MAAMC,qBAAA;IAAA;IAAA,CAAAvG,cAAA,GAAAE,CAAA,QAAwB,IAAIsC,IAAA,CAChChC,UAAA,CAAWkC,OAAO,MAAM9B,OAAA,CAAQ8B,OAAO,KAAKlC,UAAA,CAAWkC,OAAO,EAAC;IAEjE,MAAM8D,kBAAA;IAAA;IAAA,CAAAxG,cAAA,GAAAE,CAAA,QAAqBM,UAAA;IAE3B,MAAM,CAACiG,yBAAA,EAA2BC,yBAAA,CAA0B;IAAA;IAAA,CAAA1G,cAAA,GAAAE,CAAA,QAC1D,MAAM8C,OAAA,CAAQC,GAAG,CAAC,CAChBC,OAAA,CAAAC,MAAM,CAACW,kBAAkB,CAACT,KAAK,CAAC;MAC9BC,KAAA,EAAO;QACLS,KAAA,EAAO;QACPC,QAAA,EAAU;UACRC,GAAA,EAAKsC,qBAAA;UACLrC,GAAA,EAAKsC;QACP;QACApD,SAAA,EAAWT;MACb;IACF,IAEAO,OAAA,CAAAC,MAAM,CAACgB,SAAS,CAACC,QAAQ,CAAC;MACxBd,KAAA,EAAO;QACLe,aAAA,EAAe;UACbJ,GAAA,EAAKsC,qBAAA;UACLrC,GAAA,EAAKsC;QACP;QACApD,SAAA,EAAWT;MACb;MACA2B,MAAA,EAAQ;QACNC,IAAA,EAAM;MACR;IACF,GACD;IAEH,MAAMoC,8BAAA;IAAA;IAAA,CAAA3G,cAAA,GAAAE,CAAA,QACJwG,yBAAA,CAA0B/B,MAAM,GAAG;IAAA;IAAA,CAAA3E,cAAA,GAAA2B,CAAA,WAC/B+E,yBAAA,CAA0B9B,MAAM,CAAC,CAACC,GAAA,EAAKC,EAAA,KAAO;MAAA;MAAA9E,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MAAA,OAAA2E,GAAA,GAAMC,EAAA,CAAGP,IAAI;IAAJ,CAAI,EAAE,KAC7DmC,yBAAA,CAA0B/B,MAAM;IAAA;IAAA,CAAA3E,cAAA,GAAA2B,CAAA,WAChC;IAEN;IACA,MAAMiF,UAAA;IAAA;IAAA,CAAA5G,cAAA,GAAAE,CAAA,QAAa;MACjB2G,UAAA,EAAY;QACVC,KAAA,EAAOnD,mBAAA;QACPoD,QAAA,EAAUN,yBAAA;QACVO,QAAA,EACEP,yBAAA,GAA4B;QAAA;QAAA,CAAAzG,cAAA,GAAA2B,CAAA,WACxB,CAAEgC,mBAAA,GAAsB8C,yBAAwB,IAC9CA,yBAAA,GACF;QAAA;QAAA,CAAAzG,cAAA,GAAA2B,CAAA,WACAgC,mBAAA,GAAsB;QAAA;QAAA,CAAA3D,cAAA,GAAA2B,CAAA,WACpB;QAAA;QAAA,CAAA3B,cAAA,GAAA2B,CAAA,WACA;MACV;MACA+D,UAAA,EAAY;QACVoB,KAAA,EAAOG,MAAA,CAAOvC,oBAAA,CAAqBwC,OAAO,CAAC;QAC3CH,QAAA,EAAUE,MAAA,CAAON,8BAAA,CAA+BO,OAAO,CAAC;QACxDF,QAAA,EACEL,8BAAA,GAAiC;QAAA;QAAA,CAAA3G,cAAA,GAAA2B,CAAA,WAC7B,CAAE+C,oBAAA,GAAuBiC,8BAA6B,IACpDA,8BAAA,GACF;QAAA;QAAA,CAAA3G,cAAA,GAAA2B,CAAA,WACA+C,oBAAA,GAAuB;QAAA;QAAA,CAAA1E,cAAA,GAAA2B,CAAA,WACrB;QAAA;QAAA,CAAA3B,cAAA,GAAA2B,CAAA,WACA;MACV;IACF;IAEA;IACA,MAAMwF,SAAA;IAAA;IAAA,CAAAnH,cAAA,GAAAE,CAAA,QAAY;MAChBW,OAAA,EAAS;QACPL,UAAA;QACAI,OAAA;QACAC,OAAA,EAASwB,OAAA,CAAQxB;MACnB;MACAwB,OAAA,EAAS;QACPrB,KAAA,EAAOqB,OAAA,CAAQrB,KAAK;QACpBC,KAAA,EAAOoB,OAAA,CAAQpB,KAAK;QACpBC,MAAA,EAAQmB,OAAA,CAAQnB;MAClB;MACAkG,WAAA,EAAa;QACXxE,eAAA;QACAC,mBAAA,EAAqBA,mBAAA,CAAoB+B,MAAM,CAC7C,CAACC,GAAA,EAAKwC,IAAA;UAAA;UAAArH,cAAA,GAAAoB,CAAA;UAAApB,cAAA,GAAAE,CAAA;UACJ2E,GAAG,CAACwC,IAAA,CAAKnG,MAAM,CAAC,GAAGmG,IAAA,CAAK5D,MAAM,CAACC,EAAE;UAAA;UAAA1D,cAAA,GAAAE,CAAA;UACjC,OAAO2E,GAAA;QACT,GACA,CAAC;QAEH/B,kBAAA,EAAoBA,kBAAA,CAAmB8B,MAAM,CAC3C,CAACC,GAAA,EAAKwC,IAAA;UAAA;UAAArH,cAAA,GAAAoB,CAAA;UAAApB,cAAA,GAAAE,CAAA;UACJ2E,GAAG,CAACwC,IAAA,CAAKrG,KAAK,CAAC,GAAGqG,IAAA,CAAK5D,MAAM,CAACC,EAAE;UAAA;UAAA1D,cAAA,GAAAE,CAAA;UAChC,OAAO2E,GAAA;QACT,GACA,CAAC;QAEH9B,kBAAA,EAAoBA,kBAAA,CAAmB6B,MAAM,CAC3C,CAACC,GAAA,EAAKwC,IAAA;UAAA;UAAArH,cAAA,GAAAoB,CAAA;UAAApB,cAAA,GAAAE,CAAA;UACJ2E,GAAG,CAACwC,IAAA,CAAKpG,KAAK,CAAC,GAAGoG,IAAA,CAAK5D,MAAM,CAACC,EAAE;UAAA;UAAA1D,cAAA,GAAAE,CAAA;UAChC,OAAO2E,GAAA;QACT,GACA,CAAC;MAEL;MACAyC,QAAA,EAAU;QACRT,UAAA,EAAY;UACVU,cAAA,EAAgB5D,mBAAA;UAChB6D,iBAAA,EACE5E,eAAA,GAAkB;UAAA;UAAA,CAAA5C,cAAA,GAAA2B,CAAA,WACdsF,MAAA,CAAO,CAACtD,mBAAA,GAAsBf,eAAc,EAAGsE,OAAO,CAAC;UAAA;UAAA,CAAAlH,cAAA,GAAA2B,CAAA,WACvD;QACR;QACA+D,UAAA,EAAY;UACV6B,cAAA,EAAgB3D,mBAAA,CAAoBe,MAAM;UAC1C8C,UAAA,EAAYR,MAAA,CAAOvC,oBAAA,CAAqBwC,OAAO,CAAC;UAChDjC;QACF;QACAyC,SAAA,EAAW;UACTC,eAAA,EAAiB9D,mBAAA,CAAoBe,MAAM,CACzC,CAACC,GAAA,EAAKwC,IAAA,KAAS;YAAA;YAAArH,cAAA,GAAAoB,CAAA;YAAApB,cAAA,GAAAE,CAAA;YAAA,OAAA2E,GAAA,GAAMwC,IAAA,CAAK5D,MAAM,CAACC,EAAE;UAAF,CAAE,EACnC;UAEFkE,iBAAA,EAAmB/D,mBAAA,CAAoBe,MAAM,CAC3C,CAACC,GAAA,EAAKwC,IAAA;YAAA;YAAArH,cAAA,GAAAoB,CAAA;YAAApB,cAAA,GAAAE,CAAA;YACJ2E,GAAG,CAACwC,IAAA,CAAKQ,IAAI,CAAC,GAAGR,IAAA,CAAK5D,MAAM,CAACC,EAAE;YAAA;YAAA1D,cAAA,GAAAE,CAAA;YAC/B,OAAO2E,GAAA;UACT,GACA,CAAC;QAEL;MACF;MACAY,aAAA;MACAmB,UAAA;MACAkB,QAAA,EAAU;QACRC,oBAAA,EAAsBnF,eAAA,GAAkB;QACxCoF,gBAAA,EACEtD,oBAAA,IAAwB;QAAA;QAAA,CAAA1E,cAAA,GAAA2B,CAAA,WACpB;QAAA;QAAA,CAAA3B,cAAA,GAAA2B,CAAA,WACA+C,oBAAA,IAAwB;QAAA;QAAA,CAAA1E,cAAA,GAAA2B,CAAA,WACtB;QAAA;QAAA,CAAA3B,cAAA,GAAA2B,CAAA,WACA;QACRsG,qBAAA,EAAuBrB,UAAA,CAAWC,UAAU,CAACG,QAAQ,GAAG;QACxDkB,kBAAA,EAAoBtB,UAAA,CAAWlB,UAAU,CAACsB,QAAQ,GAAG;MACvD;IACF;IAAA;IAAAhH,cAAA,GAAAE,CAAA;IAEA,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBqF,SAAA;MACAgB,QAAA,EAAU,IAAI3F,IAAA,GAAO4F,WAAW;IAClC;EACF,EAAE,OAAOC,KAAA,EAAO;IAAA;IAAArI,cAAA,GAAAE,CAAA;IACdoI,OAAA,CAAQD,KAAK,CAAC,2CAA2CA,KAAA;IAAA;IAAArI,cAAA,GAAAE,CAAA;IAEzD,IAAImI,KAAA,YAAiBhI,IAAA,CAAAkI,QAAQ,EAAE;MAAA;MAAAvI,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MAC7B,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QACEC,IAAA,EAAM;QACNyG,QAAA,EAAUH,KAAA,CAAMI;MAClB,GACA;QAAEvH,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAlB,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IAEA,OAAO0B,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,IAAA,EAAM;IAA2B,GACnC;MAAEb,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}