{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\__tests__\\use-agendador-lembretes.test.ts"],"sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { useAgendadorLembretes } from '../use-agendador-lembretes';\nimport { useToast } from '../use-toast';\n\n// Mock do hook useToast\nvi.mock('../use-toast', () => ({\n  useToast: vi.fn(() => ({\n    toast: vi.fn(),\n  })),\n}));\n\n// Mock do fetch global\nconst mockFetch = vi.fn();\nglobal.fetch = mockFetch;\n\n// Mock dos dados de teste\nconst mockConfiguracao = {\n  ativo: true,\n  horarioEnvio: '09:00',\n  diasAntecedencia: 3,\n  incluirFinsDeSemanaSemana: false,\n  incluirFeriados: false,\n  tiposNotificacao: ['AVALIACAO_PENDENTE', 'AVALIACAO_VENCIDA'],\n  criadoEm: new Date().toISOString(),\n  atualizadoEm: new Date().toISOString(),\n};\n\nconst mockStatus = {\n  ativo: true,\n  executando: false,\n  ultimaExecucao: new Date().toISOString(),\n  proximaExecucao: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n  totalLembretes: 15,\n  lembretesEnviados: 12,\n  lembretesPendentes: 3,\n  lembretesFalhas: 0,\n};\n\nconst mockEstatisticas = {\n  agendados: 15,\n  enviados: 12,\n  pendentes: 3,\n  falhas: 0,\n  proximosEnvios: [\n    {\n      data: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n      quantidade: 5,\n    },\n  ],\n  ultimosEnvios: [\n    {\n      data: new Date().toISOString(),\n      quantidade: 3,\n      sucesso: 3,\n      falhas: 0,\n    },\n  ],\n};\n\ndescribe('useAgendadorLembretes', () => {\n  const mockToast = vi.fn();\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    (useToast as any).mockReturnValue({ toast: mockToast });\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  describe('buscarConfiguracao', () => {\n    it('deve buscar configuração com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockConfiguracao,\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      await act(async () => {\n        await result.current.buscarConfiguracao();\n      });\n\n      expect(result.current.configuracao).toEqual(mockConfiguracao);\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBeNull();\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/agendador-lembretes/configuracao',\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n    });\n\n    it('deve lidar com erro na busca da configuração', async () => {\n      const errorMessage = 'Erro ao buscar configuração';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      await act(async () => {\n        await result.current.buscarConfiguracao();\n      });\n\n      expect(result.current.configuracao).toBeNull();\n      expect(result.current.carregando).toBe(false);\n      expect(result.current.erro).toBe(errorMessage);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('atualizarConfiguracao', () => {\n    it('deve atualizar configuração com sucesso', async () => {\n      const novaConfiguracao = {\n        ativo: false,\n        horarioEnvio: '10:00',\n        diasAntecedencia: 5,\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ ...mockConfiguracao, ...novaConfiguracao }),\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      let configuracaoAtualizada;\n      await act(async () => {\n        configuracaoAtualizada = await result.current.atualizarConfiguracao(novaConfiguracao);\n      });\n\n      expect(configuracaoAtualizada).toEqual({ ...mockConfiguracao, ...novaConfiguracao });\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/agendador-lembretes/configuracao',\n        expect.objectContaining({\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(novaConfiguracao),\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Configuração atualizada com sucesso',\n      });\n    });\n\n    it('deve lidar com erro ao atualizar configuração', async () => {\n      const errorMessage = 'Erro ao atualizar configuração';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      const novaConfiguracao = {\n        ativo: false,\n      };\n\n      let configuracaoAtualizada;\n      await act(async () => {\n        configuracaoAtualizada = await result.current.atualizarConfiguracao(novaConfiguracao);\n      });\n\n      expect(configuracaoAtualizada).toBeNull();\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('buscarStatus', () => {\n    it('deve buscar status com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockStatus,\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      await act(async () => {\n        await result.current.buscarStatus();\n      });\n\n      expect(result.current.status).toEqual(mockStatus);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/agendador-lembretes/status',\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n    });\n\n    it('deve lidar com erro na busca do status', async () => {\n      const errorMessage = 'Erro ao buscar status';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      await act(async () => {\n        await result.current.buscarStatus();\n      });\n\n      expect(result.current.status).toBeNull();\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('buscarEstatisticas', () => {\n    it('deve buscar estatísticas com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockEstatisticas,\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      await act(async () => {\n        await result.current.buscarEstatisticas();\n      });\n\n      expect(result.current.estatisticas).toEqual(mockEstatisticas);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/agendador-lembretes/estatisticas',\n        expect.objectContaining({\n          method: 'GET',\n        })\n      );\n    });\n\n    it('deve buscar estatísticas com filtros', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockEstatisticas,\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      const filtros = {\n        dataInicio: new Date('2024-01-01'),\n        dataFim: new Date('2024-12-31'),\n        tipo: 'AVALIACAO_PENDENTE' as const,\n      };\n\n      await act(async () => {\n        await result.current.buscarEstatisticas(filtros);\n      });\n\n      const url = mockFetch.mock.calls[0][0];\n      expect(url).toContain('dataInicio=2024-01-01');\n      expect(url).toContain('dataFim=2024-12-31');\n      expect(url).toContain('tipo=AVALIACAO_PENDENTE');\n    });\n  });\n\n  describe('iniciarAgendador', () => {\n    it('deve iniciar agendador com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.iniciarAgendador();\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/agendador-lembretes/iniciar',\n        expect.objectContaining({\n          method: 'POST',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Agendador iniciado com sucesso',\n      });\n    });\n\n    it('deve lidar com erro ao iniciar agendador', async () => {\n      const errorMessage = 'Erro ao iniciar agendador';\n      mockFetch.mockRejectedValueOnce(new Error(errorMessage));\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.iniciarAgendador();\n      });\n\n      expect(sucesso).toBe(false);\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Erro',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    });\n  });\n\n  describe('pararAgendador', () => {\n    it('deve parar agendador com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      let sucesso;\n      await act(async () => {\n        sucesso = await result.current.pararAgendador();\n      });\n\n      expect(sucesso).toBe(true);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/agendador-lembretes/parar',\n        expect.objectContaining({\n          method: 'POST',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Agendador parado com sucesso',\n      });\n    });\n  });\n\n  describe('forcarVerificacao', () => {\n    it('deve forçar verificação com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ processados: 5 }),\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      let resultado;\n      await act(async () => {\n        resultado = await result.current.forcarVerificacao();\n      });\n\n      expect(resultado).toEqual({ processados: 5 });\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/agendador-lembretes/verificar',\n        expect.objectContaining({\n          method: 'POST',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Verificação executada com sucesso. 5 lembretes processados.',\n      });\n    });\n  });\n\n  describe('limparLembretesPendentes', () => {\n    it('deve limpar lembretes pendentes com sucesso', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ removidos: 3 }),\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      let resultado;\n      await act(async () => {\n        resultado = await result.current.limparLembretesPendentes();\n      });\n\n      expect(resultado).toEqual({ removidos: 3 });\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/agendador-lembretes/limpar',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: '3 lembretes pendentes removidos com sucesso',\n      });\n    });\n  });\n\n  describe('resetarConfiguracao', () => {\n    it('deve resetar configuração com sucesso', async () => {\n      const configuracaoPadrao = {\n        ativo: false,\n        horarioEnvio: '09:00',\n        diasAntecedencia: 3,\n        incluirFinsDeSemanaSemana: false,\n        incluirFeriados: false,\n        tiposNotificacao: [],\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => configuracaoPadrao,\n      });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      let configuracao;\n      await act(async () => {\n        configuracao = await result.current.resetarConfiguracao();\n      });\n\n      expect(configuracao).toEqual(configuracaoPadrao);\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/agendador-lembretes/reset',\n        expect.objectContaining({\n          method: 'POST',\n        })\n      );\n\n      expect(mockToast).toHaveBeenCalledWith({\n        title: 'Sucesso',\n        description: 'Configuração resetada para os valores padrão',\n      });\n    });\n  });\n\n  describe('estados de carregamento', () => {\n    it('deve gerenciar estado de carregamento corretamente', async () => {\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n\n      mockFetch.mockReturnValueOnce(promise);\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      // Iniciar busca\n      act(() => {\n        result.current.buscarConfiguracao();\n      });\n\n      // Verificar que está carregando\n      expect(result.current.carregando).toBe(true);\n\n      // Resolver promise\n      await act(async () => {\n        resolvePromise!({\n          ok: true,\n          json: async () => mockConfiguracao,\n        });\n      });\n\n      // Verificar que não está mais carregando\n      expect(result.current.carregando).toBe(false);\n    });\n  });\n\n  describe('atualização automática', () => {\n    it('deve atualizar dados automaticamente após ações', async () => {\n      // Mock para buscarConfiguracao\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ success: true }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockConfiguracao,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockStatus,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockEstatisticas,\n        });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      await act(async () => {\n        await result.current.iniciarAgendador();\n      });\n\n      // Verificar que as funções de busca foram chamadas após a ação\n      expect(mockFetch).toHaveBeenCalledTimes(4); // iniciar + buscarConfiguracao + buscarStatus + buscarEstatisticas\n    });\n  });\n\n  describe('integração completa', () => {\n    it('deve executar fluxo completo de configuração e controle', async () => {\n      // Setup mocks para todas as chamadas\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockConfiguracao,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ ...mockConfiguracao, ativo: false }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockConfiguracao,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockStatus,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockEstatisticas,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ success: true }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockConfiguracao,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockStatus,\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => mockEstatisticas,\n        });\n\n      const { result } = renderHook(() => useAgendadorLembretes());\n\n      // 1. Buscar configuração inicial\n      await act(async () => {\n        await result.current.buscarConfiguracao();\n      });\n      expect(result.current.configuracao).toEqual(mockConfiguracao);\n\n      // 2. Atualizar configuração\n      await act(async () => {\n        await result.current.atualizarConfiguracao({ ativo: false });\n      });\n\n      // 3. Buscar status e estatísticas\n      await act(async () => {\n        await result.current.buscarStatus();\n        await result.current.buscarEstatisticas();\n      });\n\n      // 4. Iniciar agendador\n      await act(async () => {\n        await result.current.iniciarAgendador();\n      });\n\n      // Verificar que todas as chamadas foram feitas\n      expect(mockFetch).toHaveBeenCalledTimes(9);\n      expect(result.current.status).toEqual(mockStatus);\n      expect(result.current.estatisticas).toEqual(mockEstatisticas);\n    });\n  });\n});"],"names":["vi","mock","useToast","fn","toast","mockFetch","global","fetch","mockConfiguracao","ativo","horarioEnvio","diasAntecedencia","incluirFinsDeSemanaSemana","incluirFeriados","tiposNotificacao","criadoEm","Date","toISOString","atualizadoEm","mockStatus","executando","ultimaExecucao","proximaExecucao","now","totalLembretes","lembretesEnviados","lembretesPendentes","lembretesFalhas","mockEstatisticas","agendados","enviados","pendentes","falhas","proximosEnvios","data","quantidade","ultimosEnvios","sucesso","describe","mockToast","beforeEach","clearAllMocks","mockReturnValue","afterEach","resetAllMocks","it","mockResolvedValueOnce","ok","json","result","renderHook","useAgendadorLembretes","act","current","buscarConfiguracao","expect","configuracao","toEqual","carregando","toBe","erro","toBeNull","toHaveBeenCalledWith","objectContaining","method","errorMessage","mockRejectedValueOnce","Error","title","description","variant","novaConfiguracao","configuracaoAtualizada","atualizarConfiguracao","headers","body","JSON","stringify","buscarStatus","status","buscarEstatisticas","estatisticas","filtros","dataInicio","dataFim","tipo","url","calls","toContain","success","iniciarAgendador","pararAgendador","processados","resultado","forcarVerificacao","removidos","limparLembretesPendentes","configuracaoPadrao","resetarConfiguracao","resolvePromise","promise","Promise","resolve","mockReturnValueOnce","toHaveBeenCalledTimes"],"mappings":";;;;uBAAgC;wBACgC;uCAC1B;0BACb;AAEzB,wBAAwB;AACxBA,UAAE,CAACC,IAAI,CAAC,gBAAgB,IAAO,CAAA;QAC7BC,UAAUF,UAAE,CAACG,EAAE,CAAC,IAAO,CAAA;gBACrBC,OAAOJ,UAAE,CAACG,EAAE;YACd,CAAA;IACF,CAAA;AAEA,uBAAuB;AACvB,MAAME,YAAYL,UAAE,CAACG,EAAE;AACvBG,OAAOC,KAAK,GAAGF;AAEf,0BAA0B;AAC1B,MAAMG,mBAAmB;IACvBC,OAAO;IACPC,cAAc;IACdC,kBAAkB;IAClBC,2BAA2B;IAC3BC,iBAAiB;IACjBC,kBAAkB;QAAC;QAAsB;KAAoB;IAC7DC,UAAU,IAAIC,OAAOC,WAAW;IAChCC,cAAc,IAAIF,OAAOC,WAAW;AACtC;AAEA,MAAME,aAAa;IACjBV,OAAO;IACPW,YAAY;IACZC,gBAAgB,IAAIL,OAAOC,WAAW;IACtCK,iBAAiB,IAAIN,KAAKA,KAAKO,GAAG,KAAK,KAAK,KAAK,KAAK,MAAMN,WAAW;IACvEO,gBAAgB;IAChBC,mBAAmB;IACnBC,oBAAoB;IACpBC,iBAAiB;AACnB;AAEA,MAAMC,mBAAmB;IACvBC,WAAW;IACXC,UAAU;IACVC,WAAW;IACXC,QAAQ;IACRC,gBAAgB;QACd;YACEC,MAAM,IAAIlB,KAAKA,KAAKO,GAAG,KAAK,KAAK,KAAK,KAAK,MAAMN,WAAW;YAC5DkB,YAAY;QACd;KACD;IACDC,eAAe;QACb;YACEF,MAAM,IAAIlB,OAAOC,WAAW;YAC5BkB,YAAY;YACZE,SAAS;YACTL,QAAQ;QACV;KACD;AACH;AAEAM,IAAAA,gBAAQ,EAAC,yBAAyB;IAChC,MAAMC,YAAYvC,UAAE,CAACG,EAAE;IAEvBqC,IAAAA,kBAAU,EAAC;QACTxC,UAAE,CAACyC,aAAa;QACfvC,kBAAQ,CAASwC,eAAe,CAAC;YAAEtC,OAAOmC;QAAU;IACvD;IAEAI,IAAAA,iBAAS,EAAC;QACR3C,UAAE,CAAC4C,aAAa;IAClB;IAEAN,IAAAA,gBAAQ,EAAC,sBAAsB;QAC7BO,IAAAA,UAAE,EAAC,wCAAwC;YACzCxC,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAYxC;YACpB;YAEA,MAAM,EAAEyC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,MAAMC,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAACC,kBAAkB;YACzC;YAEAC,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAACG,YAAY,EAAEC,OAAO,CAACjD;YAC5C+C,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAACK,UAAU,EAAEC,IAAI,CAAC;YACvCJ,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAACO,IAAI,EAAEC,QAAQ;YACpCN,IAAAA,cAAM,EAAClD,WAAWyD,oBAAoB,CACpC,yCACAP,cAAM,CAACQ,gBAAgB,CAAC;gBACtBC,QAAQ;YACV;QAEJ;QAEAnB,IAAAA,UAAE,EAAC,gDAAgD;YACjD,MAAMoB,eAAe;YACrB5D,UAAU6D,qBAAqB,CAAC,IAAIC,MAAMF;YAE1C,MAAM,EAAEhB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,MAAMC,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAACC,kBAAkB;YACzC;YAEAC,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAACG,YAAY,EAAEK,QAAQ;YAC5CN,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAACK,UAAU,EAAEC,IAAI,CAAC;YACvCJ,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAACO,IAAI,EAAED,IAAI,CAACM;YACjCV,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAaJ;gBACbK,SAAS;YACX;QACF;IACF;IAEAhC,IAAAA,gBAAQ,EAAC,yBAAyB;QAChCO,IAAAA,UAAE,EAAC,2CAA2C;YAC5C,MAAM0B,mBAAmB;gBACvB9D,OAAO;gBACPC,cAAc;gBACdC,kBAAkB;YACpB;YAEAN,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAE,GAAGxC,gBAAgB;wBAAE,GAAG+D,gBAAgB;oBAAC,CAAA;YAChE;YAEA,MAAM,EAAEtB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,IAAIqB;YACJ,MAAMpB,IAAAA,UAAG,EAAC;gBACRoB,yBAAyB,MAAMvB,OAAOI,OAAO,CAACoB,qBAAqB,CAACF;YACtE;YAEAhB,IAAAA,cAAM,EAACiB,wBAAwBf,OAAO,CAAC;gBAAE,GAAGjD,gBAAgB;gBAAE,GAAG+D,gBAAgB;YAAC;YAClFhB,IAAAA,cAAM,EAAClD,WAAWyD,oBAAoB,CACpC,yCACAP,cAAM,CAACQ,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRU,SAAS;oBACP,gBAAgB;gBAClB;gBACAC,MAAMC,KAAKC,SAAS,CAACN;YACvB;YAGFhB,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAa;YACf;QACF;QAEAxB,IAAAA,UAAE,EAAC,iDAAiD;YAClD,MAAMoB,eAAe;YACrB5D,UAAU6D,qBAAqB,CAAC,IAAIC,MAAMF;YAE1C,MAAM,EAAEhB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,MAAMoB,mBAAmB;gBACvB9D,OAAO;YACT;YAEA,IAAI+D;YACJ,MAAMpB,IAAAA,UAAG,EAAC;gBACRoB,yBAAyB,MAAMvB,OAAOI,OAAO,CAACoB,qBAAqB,CAACF;YACtE;YAEAhB,IAAAA,cAAM,EAACiB,wBAAwBX,QAAQ;YACvCN,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAaJ;gBACbK,SAAS;YACX;QACF;IACF;IAEAhC,IAAAA,gBAAQ,EAAC,gBAAgB;QACvBO,IAAAA,UAAE,EAAC,kCAAkC;YACnCxC,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAY7B;YACpB;YAEA,MAAM,EAAE8B,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,MAAMC,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAACyB,YAAY;YACnC;YAEAvB,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAAC0B,MAAM,EAAEtB,OAAO,CAACtC;YACtCoC,IAAAA,cAAM,EAAClD,WAAWyD,oBAAoB,CACpC,mCACAP,cAAM,CAACQ,gBAAgB,CAAC;gBACtBC,QAAQ;YACV;QAEJ;QAEAnB,IAAAA,UAAE,EAAC,0CAA0C;YAC3C,MAAMoB,eAAe;YACrB5D,UAAU6D,qBAAqB,CAAC,IAAIC,MAAMF;YAE1C,MAAM,EAAEhB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,MAAMC,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAACyB,YAAY;YACnC;YAEAvB,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAAC0B,MAAM,EAAElB,QAAQ;YACtCN,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAaJ;gBACbK,SAAS;YACX;QACF;IACF;IAEAhC,IAAAA,gBAAQ,EAAC,sBAAsB;QAC7BO,IAAAA,UAAE,EAAC,wCAAwC;YACzCxC,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAYpB;YACpB;YAEA,MAAM,EAAEqB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,MAAMC,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAAC2B,kBAAkB;YACzC;YAEAzB,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAAC4B,YAAY,EAAExB,OAAO,CAAC7B;YAC5C2B,IAAAA,cAAM,EAAClD,WAAWyD,oBAAoB,CACpC,yCACAP,cAAM,CAACQ,gBAAgB,CAAC;gBACtBC,QAAQ;YACV;QAEJ;QAEAnB,IAAAA,UAAE,EAAC,wCAAwC;YACzCxC,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAYpB;YACpB;YAEA,MAAM,EAAEqB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,MAAM+B,UAAU;gBACdC,YAAY,IAAInE,KAAK;gBACrBoE,SAAS,IAAIpE,KAAK;gBAClBqE,MAAM;YACR;YAEA,MAAMjC,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAAC2B,kBAAkB,CAACE;YAC1C;YAEA,MAAMI,MAAMjF,UAAUJ,IAAI,CAACsF,KAAK,CAAC,EAAE,CAAC,EAAE;YACtChC,IAAAA,cAAM,EAAC+B,KAAKE,SAAS,CAAC;YACtBjC,IAAAA,cAAM,EAAC+B,KAAKE,SAAS,CAAC;YACtBjC,IAAAA,cAAM,EAAC+B,KAAKE,SAAS,CAAC;QACxB;IACF;IAEAlD,IAAAA,gBAAQ,EAAC,oBAAoB;QAC3BO,IAAAA,UAAE,EAAC,sCAAsC;YACvCxC,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAEyC,SAAS;oBAAK,CAAA;YACrC;YAEA,MAAM,EAAExC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,IAAId;YACJ,MAAMe,IAAAA,UAAG,EAAC;gBACRf,UAAU,MAAMY,OAAOI,OAAO,CAACqC,gBAAgB;YACjD;YAEAnC,IAAAA,cAAM,EAAClB,SAASsB,IAAI,CAAC;YACrBJ,IAAAA,cAAM,EAAClD,WAAWyD,oBAAoB,CACpC,oCACAP,cAAM,CAACQ,gBAAgB,CAAC;gBACtBC,QAAQ;YACV;YAGFT,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAa;YACf;QACF;QAEAxB,IAAAA,UAAE,EAAC,4CAA4C;YAC7C,MAAMoB,eAAe;YACrB5D,UAAU6D,qBAAqB,CAAC,IAAIC,MAAMF;YAE1C,MAAM,EAAEhB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,IAAId;YACJ,MAAMe,IAAAA,UAAG,EAAC;gBACRf,UAAU,MAAMY,OAAOI,OAAO,CAACqC,gBAAgB;YACjD;YAEAnC,IAAAA,cAAM,EAAClB,SAASsB,IAAI,CAAC;YACrBJ,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAaJ;gBACbK,SAAS;YACX;QACF;IACF;IAEAhC,IAAAA,gBAAQ,EAAC,kBAAkB;QACzBO,IAAAA,UAAE,EAAC,oCAAoC;YACrCxC,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAEyC,SAAS;oBAAK,CAAA;YACrC;YAEA,MAAM,EAAExC,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,IAAId;YACJ,MAAMe,IAAAA,UAAG,EAAC;gBACRf,UAAU,MAAMY,OAAOI,OAAO,CAACsC,cAAc;YAC/C;YAEApC,IAAAA,cAAM,EAAClB,SAASsB,IAAI,CAAC;YACrBJ,IAAAA,cAAM,EAAClD,WAAWyD,oBAAoB,CACpC,kCACAP,cAAM,CAACQ,gBAAgB,CAAC;gBACtBC,QAAQ;YACV;YAGFT,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAa;YACf;QACF;IACF;IAEA/B,IAAAA,gBAAQ,EAAC,qBAAqB;QAC5BO,IAAAA,UAAE,EAAC,uCAAuC;YACxCxC,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAE4C,aAAa;oBAAE,CAAA;YACtC;YAEA,MAAM,EAAE3C,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,IAAI0C;YACJ,MAAMzC,IAAAA,UAAG,EAAC;gBACRyC,YAAY,MAAM5C,OAAOI,OAAO,CAACyC,iBAAiB;YACpD;YAEAvC,IAAAA,cAAM,EAACsC,WAAWpC,OAAO,CAAC;gBAAEmC,aAAa;YAAE;YAC3CrC,IAAAA,cAAM,EAAClD,WAAWyD,oBAAoB,CACpC,sCACAP,cAAM,CAACQ,gBAAgB,CAAC;gBACtBC,QAAQ;YACV;YAGFT,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAa;YACf;QACF;IACF;IAEA/B,IAAAA,gBAAQ,EAAC,4BAA4B;QACnCO,IAAAA,UAAE,EAAC,+CAA+C;YAChDxC,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAE+C,WAAW;oBAAE,CAAA;YACpC;YAEA,MAAM,EAAE9C,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,IAAI0C;YACJ,MAAMzC,IAAAA,UAAG,EAAC;gBACRyC,YAAY,MAAM5C,OAAOI,OAAO,CAAC2C,wBAAwB;YAC3D;YAEAzC,IAAAA,cAAM,EAACsC,WAAWpC,OAAO,CAAC;gBAAEsC,WAAW;YAAE;YACzCxC,IAAAA,cAAM,EAAClD,WAAWyD,oBAAoB,CACpC,mCACAP,cAAM,CAACQ,gBAAgB,CAAC;gBACtBC,QAAQ;YACV;YAGFT,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAa;YACf;QACF;IACF;IAEA/B,IAAAA,gBAAQ,EAAC,uBAAuB;QAC9BO,IAAAA,UAAE,EAAC,yCAAyC;YAC1C,MAAMoD,qBAAqB;gBACzBxF,OAAO;gBACPC,cAAc;gBACdC,kBAAkB;gBAClBC,2BAA2B;gBAC3BC,iBAAiB;gBACjBC,kBAAkB,EAAE;YACtB;YAEAT,UAAUyC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,MAAM,UAAYiD;YACpB;YAEA,MAAM,EAAEhD,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,IAAIK;YACJ,MAAMJ,IAAAA,UAAG,EAAC;gBACRI,eAAe,MAAMP,OAAOI,OAAO,CAAC6C,mBAAmB;YACzD;YAEA3C,IAAAA,cAAM,EAACC,cAAcC,OAAO,CAACwC;YAC7B1C,IAAAA,cAAM,EAAClD,WAAWyD,oBAAoB,CACpC,kCACAP,cAAM,CAACQ,gBAAgB,CAAC;gBACtBC,QAAQ;YACV;YAGFT,IAAAA,cAAM,EAAChB,WAAWuB,oBAAoB,CAAC;gBACrCM,OAAO;gBACPC,aAAa;YACf;QACF;IACF;IAEA/B,IAAAA,gBAAQ,EAAC,2BAA2B;QAClCO,IAAAA,UAAE,EAAC,sDAAsD;YACvD,IAAIsD;YACJ,MAAMC,UAAU,IAAIC,QAAQ,CAACC;gBAC3BH,iBAAiBG;YACnB;YAEAjG,UAAUkG,mBAAmB,CAACH;YAE9B,MAAM,EAAEnD,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,gBAAgB;YAChBC,IAAAA,UAAG,EAAC;gBACFH,OAAOI,OAAO,CAACC,kBAAkB;YACnC;YAEA,gCAAgC;YAChCC,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAACK,UAAU,EAAEC,IAAI,CAAC;YAEvC,mBAAmB;YACnB,MAAMP,IAAAA,UAAG,EAAC;gBACR+C,eAAgB;oBACdpD,IAAI;oBACJC,MAAM,UAAYxC;gBACpB;YACF;YAEA,yCAAyC;YACzC+C,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAACK,UAAU,EAAEC,IAAI,CAAC;QACzC;IACF;IAEArB,IAAAA,gBAAQ,EAAC,0BAA0B;QACjCO,IAAAA,UAAE,EAAC,mDAAmD;YACpD,+BAA+B;YAC/BxC,UACGyC,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAEyC,SAAS;oBAAK,CAAA;YACrC,GACC3C,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAYxC;YACpB,GACCsC,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAY7B;YACpB,GACC2B,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAYpB;YACpB;YAEF,MAAM,EAAEqB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,MAAMC,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAACqC,gBAAgB;YACvC;YAEA,+DAA+D;YAC/DnC,IAAAA,cAAM,EAAClD,WAAWmG,qBAAqB,CAAC,IAAI,mEAAmE;QACjH;IACF;IAEAlE,IAAAA,gBAAQ,EAAC,uBAAuB;QAC9BO,IAAAA,UAAE,EAAC,2DAA2D;YAC5D,qCAAqC;YACrCxC,UACGyC,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAYxC;YACpB,GACCsC,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAE,GAAGxC,gBAAgB;wBAAEC,OAAO;oBAAM,CAAA;YACzD,GACCqC,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAYxC;YACpB,GACCsC,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAY7B;YACpB,GACC2B,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAYpB;YACpB,GACCkB,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAEyC,SAAS;oBAAK,CAAA;YACrC,GACC3C,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAYxC;YACpB,GACCsC,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAY7B;YACpB,GACC2B,qBAAqB,CAAC;gBACrBC,IAAI;gBACJC,MAAM,UAAYpB;YACpB;YAEF,MAAM,EAAEqB,MAAM,EAAE,GAAGC,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,4CAAqB;YAEzD,iCAAiC;YACjC,MAAMC,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAACC,kBAAkB;YACzC;YACAC,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAACG,YAAY,EAAEC,OAAO,CAACjD;YAE5C,4BAA4B;YAC5B,MAAM4C,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAACoB,qBAAqB,CAAC;oBAAEhE,OAAO;gBAAM;YAC5D;YAEA,kCAAkC;YAClC,MAAM2C,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAACyB,YAAY;gBACjC,MAAM7B,OAAOI,OAAO,CAAC2B,kBAAkB;YACzC;YAEA,uBAAuB;YACvB,MAAM5B,IAAAA,UAAG,EAAC;gBACR,MAAMH,OAAOI,OAAO,CAACqC,gBAAgB;YACvC;YAEA,+CAA+C;YAC/CnC,IAAAA,cAAM,EAAClD,WAAWmG,qBAAqB,CAAC;YACxCjD,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAAC0B,MAAM,EAAEtB,OAAO,CAACtC;YACtCoC,IAAAA,cAAM,EAACN,OAAOI,OAAO,CAAC4B,YAAY,EAAExB,OAAO,CAAC7B;QAC9C;IACF;AACF"}