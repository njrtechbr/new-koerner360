6aaac8bd90994a6bfd9c73edb8f27ce2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _vitest = require("vitest");
const _useagendadorlembretes = require("../use-agendador-lembretes");
const _usetoast = require("../use-toast");
// Mock do hook useToast
_vitest.vi.mock('../use-toast', ()=>({
        useToast: _vitest.vi.fn(()=>({
                toast: _vitest.vi.fn()
            }))
    }));
// Mock do fetch global
const mockFetch = _vitest.vi.fn();
global.fetch = mockFetch;
// Mock dos dados de teste
const mockConfiguracao = {
    ativo: true,
    horarioEnvio: '09:00',
    diasAntecedencia: 3,
    incluirFinsDeSemanaSemana: false,
    incluirFeriados: false,
    tiposNotificacao: [
        'AVALIACAO_PENDENTE',
        'AVALIACAO_VENCIDA'
    ],
    criadoEm: new Date().toISOString(),
    atualizadoEm: new Date().toISOString()
};
const mockStatus = {
    ativo: true,
    executando: false,
    ultimaExecucao: new Date().toISOString(),
    proximaExecucao: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
    totalLembretes: 15,
    lembretesEnviados: 12,
    lembretesPendentes: 3,
    lembretesFalhas: 0
};
const mockEstatisticas = {
    agendados: 15,
    enviados: 12,
    pendentes: 3,
    falhas: 0,
    proximosEnvios: [
        {
            data: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
            quantidade: 5
        }
    ],
    ultimosEnvios: [
        {
            data: new Date().toISOString(),
            quantidade: 3,
            sucesso: 3,
            falhas: 0
        }
    ]
};
(0, _vitest.describe)('useAgendadorLembretes', ()=>{
    const mockToast = _vitest.vi.fn();
    (0, _vitest.beforeEach)(()=>{
        _vitest.vi.clearAllMocks();
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _vitest.afterEach)(()=>{
        _vitest.vi.resetAllMocks();
    });
    (0, _vitest.describe)('buscarConfiguracao', ()=>{
        (0, _vitest.it)('deve buscar configuração com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarConfiguracao();
            });
            (0, _vitest.expect)(result.current.configuracao).toEqual(mockConfiguracao);
            (0, _vitest.expect)(result.current.carregando).toBe(false);
            (0, _vitest.expect)(result.current.erro).toBeNull();
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/configuracao', _vitest.expect.objectContaining({
                method: 'GET'
            }));
        });
        (0, _vitest.it)('deve lidar com erro na busca da configuração', async ()=>{
            const errorMessage = 'Erro ao buscar configuração';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarConfiguracao();
            });
            (0, _vitest.expect)(result.current.configuracao).toBeNull();
            (0, _vitest.expect)(result.current.carregando).toBe(false);
            (0, _vitest.expect)(result.current.erro).toBe(errorMessage);
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _vitest.describe)('atualizarConfiguracao', ()=>{
        (0, _vitest.it)('deve atualizar configuração com sucesso', async ()=>{
            const novaConfiguracao = {
                ativo: false,
                horarioEnvio: '10:00',
                diasAntecedencia: 5
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...mockConfiguracao,
                        ...novaConfiguracao
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let configuracaoAtualizada;
            await (0, _react.act)(async ()=>{
                configuracaoAtualizada = await result.current.atualizarConfiguracao(novaConfiguracao);
            });
            (0, _vitest.expect)(configuracaoAtualizada).toEqual({
                ...mockConfiguracao,
                ...novaConfiguracao
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/configuracao', _vitest.expect.objectContaining({
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(novaConfiguracao)
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Configuração atualizada com sucesso'
            });
        });
        (0, _vitest.it)('deve lidar com erro ao atualizar configuração', async ()=>{
            const errorMessage = 'Erro ao atualizar configuração';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            const novaConfiguracao = {
                ativo: false
            };
            let configuracaoAtualizada;
            await (0, _react.act)(async ()=>{
                configuracaoAtualizada = await result.current.atualizarConfiguracao(novaConfiguracao);
            });
            (0, _vitest.expect)(configuracaoAtualizada).toBeNull();
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _vitest.describe)('buscarStatus', ()=>{
        (0, _vitest.it)('deve buscar status com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatus
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarStatus();
            });
            (0, _vitest.expect)(result.current.status).toEqual(mockStatus);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/status', _vitest.expect.objectContaining({
                method: 'GET'
            }));
        });
        (0, _vitest.it)('deve lidar com erro na busca do status', async ()=>{
            const errorMessage = 'Erro ao buscar status';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarStatus();
            });
            (0, _vitest.expect)(result.current.status).toBeNull();
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _vitest.describe)('buscarEstatisticas', ()=>{
        (0, _vitest.it)('deve buscar estatísticas com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarEstatisticas();
            });
            (0, _vitest.expect)(result.current.estatisticas).toEqual(mockEstatisticas);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/estatisticas', _vitest.expect.objectContaining({
                method: 'GET'
            }));
        });
        (0, _vitest.it)('deve buscar estatísticas com filtros', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            const filtros = {
                dataInicio: new Date('2024-01-01'),
                dataFim: new Date('2024-12-31'),
                tipo: 'AVALIACAO_PENDENTE'
            };
            await (0, _react.act)(async ()=>{
                await result.current.buscarEstatisticas(filtros);
            });
            const url = mockFetch.mock.calls[0][0];
            (0, _vitest.expect)(url).toContain('dataInicio=2024-01-01');
            (0, _vitest.expect)(url).toContain('dataFim=2024-12-31');
            (0, _vitest.expect)(url).toContain('tipo=AVALIACAO_PENDENTE');
        });
    });
    (0, _vitest.describe)('iniciarAgendador', ()=>{
        (0, _vitest.it)('deve iniciar agendador com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.iniciarAgendador();
            });
            (0, _vitest.expect)(sucesso).toBe(true);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/iniciar', _vitest.expect.objectContaining({
                method: 'POST'
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Agendador iniciado com sucesso'
            });
        });
        (0, _vitest.it)('deve lidar com erro ao iniciar agendador', async ()=>{
            const errorMessage = 'Erro ao iniciar agendador';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.iniciarAgendador();
            });
            (0, _vitest.expect)(sucesso).toBe(false);
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _vitest.describe)('pararAgendador', ()=>{
        (0, _vitest.it)('deve parar agendador com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.pararAgendador();
            });
            (0, _vitest.expect)(sucesso).toBe(true);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/parar', _vitest.expect.objectContaining({
                method: 'POST'
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Agendador parado com sucesso'
            });
        });
    });
    (0, _vitest.describe)('forcarVerificacao', ()=>{
        (0, _vitest.it)('deve forçar verificação com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        processados: 5
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let resultado;
            await (0, _react.act)(async ()=>{
                resultado = await result.current.forcarVerificacao();
            });
            (0, _vitest.expect)(resultado).toEqual({
                processados: 5
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/verificar', _vitest.expect.objectContaining({
                method: 'POST'
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Verificação executada com sucesso. 5 lembretes processados.'
            });
        });
    });
    (0, _vitest.describe)('limparLembretesPendentes', ()=>{
        (0, _vitest.it)('deve limpar lembretes pendentes com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        removidos: 3
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let resultado;
            await (0, _react.act)(async ()=>{
                resultado = await result.current.limparLembretesPendentes();
            });
            (0, _vitest.expect)(resultado).toEqual({
                removidos: 3
            });
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/limpar', _vitest.expect.objectContaining({
                method: 'DELETE'
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: '3 lembretes pendentes removidos com sucesso'
            });
        });
    });
    (0, _vitest.describe)('resetarConfiguracao', ()=>{
        (0, _vitest.it)('deve resetar configuração com sucesso', async ()=>{
            const configuracaoPadrao = {
                ativo: false,
                horarioEnvio: '09:00',
                diasAntecedencia: 3,
                incluirFinsDeSemanaSemana: false,
                incluirFeriados: false,
                tiposNotificacao: []
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>configuracaoPadrao
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let configuracao;
            await (0, _react.act)(async ()=>{
                configuracao = await result.current.resetarConfiguracao();
            });
            (0, _vitest.expect)(configuracao).toEqual(configuracaoPadrao);
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/reset', _vitest.expect.objectContaining({
                method: 'POST'
            }));
            (0, _vitest.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Configuração resetada para os valores padrão'
            });
        });
    });
    (0, _vitest.describe)('estados de carregamento', ()=>{
        (0, _vitest.it)('deve gerenciar estado de carregamento corretamente', async ()=>{
            let resolvePromise;
            const promise = new Promise((resolve)=>{
                resolvePromise = resolve;
            });
            mockFetch.mockReturnValueOnce(promise);
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            // Iniciar busca
            (0, _react.act)(()=>{
                result.current.buscarConfiguracao();
            });
            // Verificar que está carregando
            (0, _vitest.expect)(result.current.carregando).toBe(true);
            // Resolver promise
            await (0, _react.act)(async ()=>{
                resolvePromise({
                    ok: true,
                    json: async ()=>mockConfiguracao
                });
            });
            // Verificar que não está mais carregando
            (0, _vitest.expect)(result.current.carregando).toBe(false);
        });
    });
    (0, _vitest.describe)('atualização automática', ()=>{
        (0, _vitest.it)('deve atualizar dados automaticamente após ações', async ()=>{
            // Mock para buscarConfiguracao
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatus
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.iniciarAgendador();
            });
            // Verificar que as funções de busca foram chamadas após a ação
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledTimes(4); // iniciar + buscarConfiguracao + buscarStatus + buscarEstatisticas
        });
    });
    (0, _vitest.describe)('integração completa', ()=>{
        (0, _vitest.it)('deve executar fluxo completo de configuração e controle', async ()=>{
            // Setup mocks para todas as chamadas
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...mockConfiguracao,
                        ativo: false
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatus
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatus
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            // 1. Buscar configuração inicial
            await (0, _react.act)(async ()=>{
                await result.current.buscarConfiguracao();
            });
            (0, _vitest.expect)(result.current.configuracao).toEqual(mockConfiguracao);
            // 2. Atualizar configuração
            await (0, _react.act)(async ()=>{
                await result.current.atualizarConfiguracao({
                    ativo: false
                });
            });
            // 3. Buscar status e estatísticas
            await (0, _react.act)(async ()=>{
                await result.current.buscarStatus();
                await result.current.buscarEstatisticas();
            });
            // 4. Iniciar agendador
            await (0, _react.act)(async ()=>{
                await result.current.iniciarAgendador();
            });
            // Verificar que todas as chamadas foram feitas
            (0, _vitest.expect)(mockFetch).toHaveBeenCalledTimes(9);
            (0, _vitest.expect)(result.current.status).toEqual(mockStatus);
            (0, _vitest.expect)(result.current.estatisticas).toEqual(mockEstatisticas);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,