{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\components\\__tests__\\notificacoes\\lista-notificacoes.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { ListaNotificacoes } from '../../notificacoes/lista-notificacoes';\nimport { useNotificacoesAvaliacoes } from '../../../hooks/use-notificacoes-avaliacoes';\nimport { useToast } from '../../../hooks/use-toast';\n\n// Mock dos hooks\njest.mock('../../../hooks/use-notificacoes-avaliacoes');\njest.mock('../../../hooks/use-toast');\n\n// Mock dos dados de teste\nconst mockNotificacoes = [\n  {\n    id: '1',\n    tipo: 'AVALIACAO_PENDENTE' as const,\n    titulo: 'Avaliação Pendente',\n    mensagem: 'Você tem uma avaliação pendente para João Silva',\n    lida: false,\n    urgencia: 'media' as const,\n    criadaEm: new Date().toISOString(),\n    leituraEm: null,\n    usuario: {\n      id: '1',\n      nome: 'João Silva',\n      email: 'joao@teste.com',\n    },\n    avaliacao: {\n      id: '1',\n      titulo: 'Avaliação Q1 2024',\n      prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    },\n  },\n  {\n    id: '2',\n    tipo: 'AVALIACAO_VENCIDA' as const,\n    titulo: 'Avaliação Vencida',\n    mensagem: 'A avaliação de Maria Santos está vencida',\n    lida: true,\n    urgencia: 'alta' as const,\n    criadaEm: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    leituraEm: new Date().toISOString(),\n    usuario: {\n      id: '2',\n      nome: 'Maria Santos',\n      email: 'maria@teste.com',\n    },\n    avaliacao: {\n      id: '2',\n      titulo: 'Avaliação Q4 2023',\n      prazo: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    },\n  },\n];\n\nconst mockEstatisticas = {\n  total: 2,\n  naoLidas: 1,\n  lidas: 1,\n  porTipo: {\n    AVALIACAO_PENDENTE: 1,\n    AVALIACAO_VENCIDA: 1,\n    AVALIACAO_PROXIMA_VENCIMENTO: 0,\n    NOVA_AVALIACAO: 0,\n    AVALIACAO_COMPLETADA: 0,\n    LEMBRETE_PERSONALIZADO: 0,\n  },\n  porUrgencia: {\n    baixa: 0,\n    media: 1,\n    alta: 1,\n  },\n};\n\nconst mockHookReturn = {\n  notificacoes: mockNotificacoes,\n  estatisticas: mockEstatisticas,\n  carregando: false,\n  erro: null,\n  total: 2,\n  pagina: 1,\n  totalPaginas: 1,\n  porPagina: 10,\n  buscarNotificacoes: jest.fn(),\n  buscarNotificacao: jest.fn(),\n  marcarComoLida: jest.fn(),\n  marcarTodasComoLidas: jest.fn(),\n  removerNotificacao: jest.fn(),\n  buscarEstatisticas: jest.fn(),\n  gerarNotificacoes: jest.fn(),\n  limparNotificacoes: jest.fn(),\n};\n\nconst mockToast = jest.fn();\n\ndescribe('ListaNotificacoes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (useNotificacoesAvaliacoes as any).mockReturnValue(mockHookReturn);\n    (useToast as any).mockReturnValue({ toast: mockToast });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Renderização', () => {\n    it('deve renderizar lista de notificações', () => {\n      render(<ListaNotificacoes />);\n\n      expect(screen.getByText('Notificações')).toBeInTheDocument();\n      expect(screen.getByText('Avaliação Pendente')).toBeInTheDocument();\n      expect(screen.getByText('Avaliação Vencida')).toBeInTheDocument();\n    });\n\n    it('deve exibir estatísticas corretamente', () => {\n      render(<ListaNotificacoes />);\n\n      expect(screen.getByText('2')).toBeInTheDocument(); // Total\n      expect(screen.getByText('1')).toBeInTheDocument(); // Não lidas\n    });\n\n    it('deve exibir estado de carregamento', () => {\n      (useNotificacoesAvaliacoes as any).mockReturnValue({\n        ...mockHookReturn,\n        carregando: true,\n        notificacoes: [],\n      });\n\n      render(<ListaNotificacoes />);\n\n      expect(screen.getByText('Carregando notificações...')).toBeInTheDocument();\n    });\n\n    it('deve exibir mensagem quando não há notificações', () => {\n      (useNotificacoesAvaliacoes as any).mockReturnValue({\n        ...mockHookReturn,\n        notificacoes: [],\n        total: 0,\n      });\n\n      render(<ListaNotificacoes />);\n\n      expect(screen.getByText('Nenhuma notificação encontrada')).toBeInTheDocument();\n    });\n\n    it('deve exibir erro quando houver falha', () => {\n      const errorMessage = 'Erro ao carregar notificações';\n      (useNotificacoesAvaliacoes as any).mockReturnValue({\n        ...mockHookReturn,\n        erro: errorMessage,\n        notificacoes: [],\n      });\n\n      render(<ListaNotificacoes />);\n\n      expect(screen.getByText(errorMessage)).toBeInTheDocument();\n    });\n  });\n\n  describe('Filtros', () => {\n    it('deve aplicar filtro por tipo', async () => {\n      render(<ListaNotificacoes />);\n\n      const filtroTipo = screen.getByLabelText('Filtrar por tipo');\n      fireEvent.change(filtroTipo, { target: { value: 'AVALIACAO_PENDENTE' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            tipo: 'AVALIACAO_PENDENTE',\n          }),\n          expect.any(Object)\n        );\n      });\n    });\n\n    it('deve aplicar filtro por status de leitura', async () => {\n      render(<ListaNotificacoes />);\n\n      const filtroLida = screen.getByLabelText('Filtrar por status');\n      fireEvent.change(filtroLida, { target: { value: 'nao_lida' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            lida: false,\n          }),\n          expect.any(Object)\n        );\n      });\n    });\n\n    it('deve aplicar filtro por urgência', async () => {\n      render(<ListaNotificacoes />);\n\n      const filtroUrgencia = screen.getByLabelText('Filtrar por urgência');\n      fireEvent.change(filtroUrgencia, { target: { value: 'alta' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            urgencia: 'alta',\n          }),\n          expect.any(Object)\n        );\n      });\n    });\n\n    it('deve aplicar filtro por data', async () => {\n      render(<ListaNotificacoes />);\n\n      const dataInicio = screen.getByLabelText('Data início');\n      const dataFim = screen.getByLabelText('Data fim');\n\n      fireEvent.change(dataInicio, { target: { value: '2024-01-01' } });\n      fireEvent.change(dataFim, { target: { value: '2024-12-31' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            dataInicio: expect.any(Date),\n            dataFim: expect.any(Date),\n          }),\n          expect.any(Object)\n        );\n      });\n    });\n\n    it('deve limpar filtros', async () => {\n      render(<ListaNotificacoes />);\n\n      // Aplicar alguns filtros primeiro\n      const filtroTipo = screen.getByLabelText('Filtrar por tipo');\n      fireEvent.change(filtroTipo, { target: { value: 'AVALIACAO_PENDENTE' } });\n\n      // Limpar filtros\n      const botaoLimpar = screen.getByText('Limpar Filtros');\n      fireEvent.click(botaoLimpar);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          {},\n          expect.any(Object)\n        );\n      });\n    });\n  });\n\n  describe('Busca', () => {\n    it('deve realizar busca por texto', async () => {\n      render(<ListaNotificacoes />);\n\n      const campoBusca = screen.getByPlaceholderText('Buscar notificações...');\n      fireEvent.change(campoBusca, { target: { value: 'João Silva' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            busca: 'João Silva',\n          }),\n          expect.any(Object)\n        );\n      }, { timeout: 1000 }); // Aguardar debounce\n    });\n\n    it('deve limpar busca', async () => {\n      render(<ListaNotificacoes />);\n\n      const campoBusca = screen.getByPlaceholderText('Buscar notificações...');\n      fireEvent.change(campoBusca, { target: { value: 'teste' } });\n      fireEvent.change(campoBusca, { target: { value: '' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            busca: '',\n          }),\n          expect.any(Object)\n        );\n      }, { timeout: 1000 });\n    });\n  });\n\n  describe('Ações de Notificação', () => {\n    it('deve marcar notificação como lida', async () => {\n      mockHookReturn.marcarComoLida.mockResolvedValueOnce(true);\n\n      render(<ListaNotificacoes />);\n\n      const botaoMarcarLida = screen.getAllByText('Marcar como lida')[0];\n      fireEvent.click(botaoMarcarLida);\n\n      await waitFor(() => {\n        expect(mockHookReturn.marcarComoLida).toHaveBeenCalledWith('1');\n      });\n    });\n\n    it('deve remover notificação', async () => {\n      mockHookReturn.removerNotificacao.mockResolvedValueOnce(true);\n      window.confirm = vi.fn(() => true);\n\n      render(<ListaNotificacoes />);\n\n      const botaoRemover = screen.getAllByText('Remover')[0];\n      fireEvent.click(botaoRemover);\n\n      await waitFor(() => {\n        expect(mockHookReturn.removerNotificacao).toHaveBeenCalledWith('1');\n      });\n    });\n\n    it('deve cancelar remoção se usuário não confirmar', async () => {\n      window.confirm = vi.fn(() => false);\n\n      render(<ListaNotificacoes />);\n\n      const botaoRemover = screen.getAllByText('Remover')[0];\n      fireEvent.click(botaoRemover);\n\n      expect(mockHookReturn.removerNotificacao).not.toHaveBeenCalled();\n    });\n\n    it('deve marcar todas como lidas', async () => {\n      mockHookReturn.marcarTodasComoLidas.mockResolvedValueOnce({ marcadas: 1 });\n\n      render(<ListaNotificacoes />);\n\n      const botaoMarcarTodas = screen.getByText('Marcar Todas como Lidas');\n      fireEvent.click(botaoMarcarTodas);\n\n      await waitFor(() => {\n        expect(mockHookReturn.marcarTodasComoLidas).toHaveBeenCalledWith({});\n      });\n    });\n\n    it('deve limpar notificações lidas', async () => {\n      mockHookReturn.limparNotificacoes.mockResolvedValueOnce({ removidas: 1 });\n      window.confirm = vi.fn(() => true);\n\n      render(<ListaNotificacoes />);\n\n      const botaoLimpar = screen.getByText('Limpar Lidas');\n      fireEvent.click(botaoLimpar);\n\n      await waitFor(() => {\n        expect(mockHookReturn.limparNotificacoes).toHaveBeenCalledWith({ lidas: true });\n      });\n    });\n  });\n\n  describe('Paginação', () => {\n    it('deve navegar para próxima página', async () => {\n      (useNotificacoesAvaliacoes as any).mockReturnValue({\n        ...mockHookReturn,\n        pagina: 1,\n        totalPaginas: 3,\n      });\n\n      render(<ListaNotificacoes />);\n\n      const botaoProxima = screen.getByText('Próxima');\n      fireEvent.click(botaoProxima);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.any(Object),\n          expect.objectContaining({\n            pagina: 2,\n          })\n        );\n      });\n    });\n\n    it('deve navegar para página anterior', async () => {\n      (useNotificacoesAvaliacoes as any).mockReturnValue({\n        ...mockHookReturn,\n        pagina: 2,\n        totalPaginas: 3,\n      });\n\n      render(<ListaNotificacoes />);\n\n      const botaoAnterior = screen.getByText('Anterior');\n      fireEvent.click(botaoAnterior);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.any(Object),\n          expect.objectContaining({\n            pagina: 1,\n          })\n        );\n      });\n    });\n\n    it('deve alterar itens por página', async () => {\n      render(<ListaNotificacoes />);\n\n      const seletorPorPagina = screen.getByLabelText('Itens por página');\n      fireEvent.change(seletorPorPagina, { target: { value: '25' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.any(Object),\n          expect.objectContaining({\n            porPagina: 25,\n            pagina: 1, // Reset para primeira página\n          })\n        );\n      });\n    });\n  });\n\n  describe('Ordenação', () => {\n    it('deve ordenar por data de criação', async () => {\n      render(<ListaNotificacoes />);\n\n      const seletorOrdenacao = screen.getByLabelText('Ordenar por');\n      fireEvent.change(seletorOrdenacao, { target: { value: 'criadaEm' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            ordenarPor: 'criadaEm',\n          }),\n          expect.any(Object)\n        );\n      });\n    });\n\n    it('deve alterar direção da ordenação', async () => {\n      render(<ListaNotificacoes />);\n\n      const seletorDirecao = screen.getByLabelText('Direção');\n      fireEvent.change(seletorDirecao, { target: { value: 'asc' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledWith(\n          expect.objectContaining({\n            direcao: 'asc',\n          }),\n          expect.any(Object)\n        );\n      });\n    });\n  });\n\n  describe('Atualização Automática', () => {\n    it('deve atualizar lista após marcar como lida', async () => {\n      mockHookReturn.marcarComoLida.mockResolvedValueOnce(true);\n\n      render(<ListaNotificacoes />);\n\n      const botaoMarcarLida = screen.getAllByText('Marcar como lida')[0];\n      fireEvent.click(botaoMarcarLida);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledTimes(2); // Initial + after action\n        expect(mockHookReturn.buscarEstatisticas).toHaveBeenCalledTimes(2);\n      });\n    });\n\n    it('deve atualizar lista após remover notificação', async () => {\n      mockHookReturn.removerNotificacao.mockResolvedValueOnce(true);\n      window.confirm = vi.fn(() => true);\n\n      render(<ListaNotificacoes />);\n\n      const botaoRemover = screen.getAllByText('Remover')[0];\n      fireEvent.click(botaoRemover);\n\n      await waitFor(() => {\n        expect(mockHookReturn.buscarNotificacoes).toHaveBeenCalledTimes(2);\n        expect(mockHookReturn.buscarEstatisticas).toHaveBeenCalledTimes(2);\n      });\n    });\n  });\n\n  describe('Acessibilidade', () => {\n    it('deve ter labels apropriados para screen readers', () => {\n      render(<ListaNotificacoes />);\n\n      expect(screen.getByLabelText('Filtrar por tipo')).toBeInTheDocument();\n      expect(screen.getByLabelText('Filtrar por status')).toBeInTheDocument();\n      expect(screen.getByLabelText('Filtrar por urgência')).toBeInTheDocument();\n      expect(screen.getByLabelText('Ordenar por')).toBeInTheDocument();\n    });\n\n    it('deve ter navegação por teclado funcional', () => {\n      render(<ListaNotificacoes />);\n\n      const botaoMarcarLida = screen.getAllByText('Marcar como lida')[0];\n      botaoMarcarLida.focus();\n      expect(document.activeElement).toBe(botaoMarcarLida);\n    });\n  });\n\n  describe('Responsividade', () => {\n    it('deve adaptar layout para telas pequenas', () => {\n      // Mock window.innerWidth\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 768,\n      });\n\n      render(<ListaNotificacoes />);\n\n      // Verificar se elementos responsivos estão presentes\n      expect(screen.getByText('Notificações')).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","mockNotificacoes","id","tipo","titulo","mensagem","lida","urgencia","criadaEm","Date","toISOString","leituraEm","usuario","nome","email","avaliacao","prazo","now","mockEstatisticas","total","naoLidas","lidas","porTipo","AVALIACAO_PENDENTE","AVALIACAO_VENCIDA","AVALIACAO_PROXIMA_VENCIMENTO","NOVA_AVALIACAO","AVALIACAO_COMPLETADA","LEMBRETE_PERSONALIZADO","porUrgencia","baixa","media","alta","mockHookReturn","notificacoes","estatisticas","carregando","erro","pagina","totalPaginas","porPagina","buscarNotificacoes","fn","buscarNotificacao","marcarComoLida","marcarTodasComoLidas","removerNotificacao","buscarEstatisticas","gerarNotificacoes","limparNotificacoes","mockToast","describe","beforeEach","clearAllMocks","useNotificacoesAvaliacoes","mockReturnValue","useToast","toast","afterEach","resetAllMocks","it","render","ListaNotificacoes","expect","screen","getByText","toBeInTheDocument","errorMessage","filtroTipo","getByLabelText","fireEvent","change","target","value","waitFor","toHaveBeenCalledWith","objectContaining","any","Object","filtroLida","filtroUrgencia","dataInicio","dataFim","botaoLimpar","click","campoBusca","getByPlaceholderText","busca","timeout","mockResolvedValueOnce","botaoMarcarLida","getAllByText","window","confirm","vi","botaoRemover","not","toHaveBeenCalled","marcadas","botaoMarcarTodas","removidas","botaoProxima","botaoAnterior","seletorPorPagina","seletorOrdenacao","ordenarPor","seletorDirecao","direcao","toHaveBeenCalledTimes","focus","document","activeElement","toBe","defineProperty","writable","configurable"],"mappings":"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"}