{"version":3,"names":["UPLOAD_CONFIG","cov_bz01o83jd","f","s","cleanupOldFiles","deleteFile","ensureDirectoryExists","fileExists","formatFileSize","generateUniqueFileName","getFileExtension","getFileInfo","saveFile","validateFile","validateMultipleFiles","MAX_FILE_SIZE","DOCUMENT","IMAGE","ALLOWED_TYPES","ALLOWED_EXTENSIONS","UPLOAD_DIRS","DOCUMENTS","PHOTOS","file","type","maxSize","size","b","maxSizeMB","Math","round","valid","error","allowedTypes","includes","join","extension","name","allowedExtensions","fileName","lastDotIndex","lastIndexOf","substring","toLowerCase","originalName","preserveOriginal","timestamp","Date","now","nameWithoutExt","uuid","_crypto","randomUUID","dirPath","_promises","access","_fs","constants","F_OK","mkdir","recursive","options","validation","success","baseDir","uploadDir","subDirectory","_path","process","cwd","preserveOriginalName","filePath","bytes","arrayBuffer","buffer","Buffer","from","writeFile","relativePath","mimeType","console","absolutePath","unlink","stats","Promise","resolve","then","_interop_require_wildcard","require","fs","stat","mimeTypes","exists","directory","maxAgeInDays","readdir","absoluteDir","files","maxAge","deletedCount","mtime","getTime","k","sizes","i","floor","log","parseFloat","pow","toFixed","errors","validFiles","forEach","index","push","length"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\upload.ts"],"sourcesContent":["import { writeFile, mkdir, unlink, access } from 'fs/promises';\nimport { join } from 'path';\nimport { randomUUID } from 'crypto';\nimport { constants } from 'fs';\n\n// Configurações de upload\nexport const UPLOAD_CONFIG = {\n  // Tamanhos máximos em bytes\n  MAX_FILE_SIZE: {\n    DOCUMENT: 10 * 1024 * 1024, // 10MB para documentos\n    IMAGE: 5 * 1024 * 1024, // 5MB para imagens\n  },\n\n  // Tipos de arquivo permitidos\n  ALLOWED_TYPES: {\n    DOCUMENT: [\n      'application/pdf',\n      'image/jpeg',\n      'image/jpg',\n      'image/png',\n      'image/webp',\n    ],\n    IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],\n  },\n\n  // Extensões permitidas\n  ALLOWED_EXTENSIONS: {\n    DOCUMENT: ['.pdf', '.jpg', '.jpeg', '.png', '.webp'],\n    IMAGE: ['.jpg', '.jpeg', '.png', '.webp'],\n  },\n\n  // Diretórios de upload\n  UPLOAD_DIRS: {\n    DOCUMENTS: 'uploads/documentos',\n    PHOTOS: 'uploads/fotos',\n  },\n};\n\n// Tipos\nexport interface UploadResult {\n  success: boolean;\n  filePath?: string;\n  fileName?: string;\n  originalName?: string;\n  size?: number;\n  mimeType?: string;\n  error?: string;\n}\n\nexport interface UploadOptions {\n  type: 'DOCUMENT' | 'IMAGE';\n  subDirectory?: string;\n  preserveOriginalName?: boolean;\n}\n\n/**\n * Valida se o arquivo atende aos critérios de upload\n */\nexport function validateFile(\n  file: File,\n  type: 'DOCUMENT' | 'IMAGE'\n): { valid: boolean; error?: string } {\n  // Verificar tamanho\n  const maxSize = UPLOAD_CONFIG.MAX_FILE_SIZE[type];\n  if (file.size > maxSize) {\n    const maxSizeMB = Math.round(maxSize / (1024 * 1024));\n    return {\n      valid: false,\n      error: `Arquivo muito grande. Tamanho máximo: ${maxSizeMB}MB`,\n    };\n  }\n\n  // Verificar tipo MIME\n  const allowedTypes = UPLOAD_CONFIG.ALLOWED_TYPES[type];\n  if (!allowedTypes.includes(file.type)) {\n    return {\n      valid: false,\n      error: `Tipo de arquivo não permitido. Tipos aceitos: ${allowedTypes.join(', ')}`,\n    };\n  }\n\n  // Verificar extensão\n  const extension = getFileExtension(file.name);\n  const allowedExtensions = UPLOAD_CONFIG.ALLOWED_EXTENSIONS[type];\n  if (!allowedExtensions.includes(extension)) {\n    return {\n      valid: false,\n      error: `Extensão não permitida. Extensões aceitas: ${allowedExtensions.join(', ')}`,\n    };\n  }\n\n  return { valid: true };\n}\n\n/**\n * Obtém a extensão do arquivo\n */\nexport function getFileExtension(fileName: string): string {\n  const lastDotIndex = fileName.lastIndexOf('.');\n  return lastDotIndex !== -1\n    ? fileName.substring(lastDotIndex).toLowerCase()\n    : '';\n}\n\n/**\n * Gera um nome único para o arquivo\n */\nexport function generateUniqueFileName(\n  originalName: string,\n  preserveOriginal = false\n): string {\n  if (preserveOriginal) {\n    const timestamp = Date.now();\n    const extension = getFileExtension(originalName);\n    const nameWithoutExt = originalName.substring(\n      0,\n      originalName.lastIndexOf('.')\n    );\n    return `${nameWithoutExt}_${timestamp}${extension}`;\n  }\n\n  const extension = getFileExtension(originalName);\n  const uuid = randomUUID();\n  return `${uuid}${extension}`;\n}\n\n/**\n * Garante que o diretório existe\n */\nexport async function ensureDirectoryExists(dirPath: string): Promise<void> {\n  try {\n    await access(dirPath, constants.F_OK);\n  } catch {\n    await mkdir(dirPath, { recursive: true });\n  }\n}\n\n/**\n * Salva um arquivo no sistema de arquivos\n */\nexport async function saveFile(\n  file: File,\n  options: UploadOptions\n): Promise<UploadResult> {\n  try {\n    // Validar arquivo\n    const validation = validateFile(file, options.type);\n    if (!validation.valid) {\n      return {\n        success: false,\n        error: validation.error,\n      };\n    }\n\n    // Determinar diretório de upload\n    const baseDir =\n      options.type === 'DOCUMENT'\n        ? UPLOAD_CONFIG.UPLOAD_DIRS.DOCUMENTS\n        : UPLOAD_CONFIG.UPLOAD_DIRS.PHOTOS;\n\n    const uploadDir = options.subDirectory\n      ? join(process.cwd(), 'public', baseDir, options.subDirectory)\n      : join(process.cwd(), 'public', baseDir);\n\n    // Garantir que o diretório existe\n    await ensureDirectoryExists(uploadDir);\n\n    // Gerar nome único para o arquivo\n    const fileName = generateUniqueFileName(\n      file.name,\n      options.preserveOriginalName\n    );\n\n    const filePath = join(uploadDir, fileName);\n\n    // Converter File para Buffer\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n\n    // Salvar arquivo\n    await writeFile(filePath, buffer);\n\n    // Retornar caminho relativo para uso na aplicação\n    const relativePath = options.subDirectory\n      ? `/${baseDir}/${options.subDirectory}/${fileName}`\n      : `/${baseDir}/${fileName}`;\n\n    return {\n      success: true,\n      filePath: relativePath,\n      fileName,\n      originalName: file.name,\n      size: file.size,\n      mimeType: file.type,\n    };\n  } catch (error) {\n    console.error('Erro ao salvar arquivo:', error);\n    return {\n      success: false,\n      error: 'Erro interno ao salvar arquivo',\n    };\n  }\n}\n\n/**\n * Remove um arquivo do sistema de arquivos\n */\nexport async function deleteFile(filePath: string): Promise<boolean> {\n  try {\n    // Construir caminho absoluto\n    const absolutePath = join(process.cwd(), 'public', filePath);\n\n    // Verificar se o arquivo existe\n    await access(absolutePath, constants.F_OK);\n\n    // Remover arquivo\n    await unlink(absolutePath);\n\n    return true;\n  } catch (error) {\n    console.error('Erro ao remover arquivo:', error);\n    return false;\n  }\n}\n\n/**\n * Verifica se um arquivo existe\n */\nexport async function fileExists(filePath: string): Promise<boolean> {\n  try {\n    const absolutePath = join(process.cwd(), 'public', filePath);\n    await access(absolutePath, constants.F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Obtém informações sobre um arquivo\n */\nexport async function getFileInfo(filePath: string): Promise<{\n  exists: boolean;\n  size?: number;\n  extension?: string;\n  mimeType?: string;\n}> {\n  try {\n    const absolutePath = join(process.cwd(), 'public', filePath);\n    await access(absolutePath, constants.F_OK);\n\n    const stats = await import('fs/promises').then(fs => fs.stat(absolutePath));\n    const extension = getFileExtension(filePath);\n\n    // Determinar tipo MIME baseado na extensão\n    const mimeTypes: Record<string, string> = {\n      '.pdf': 'application/pdf',\n      '.jpg': 'image/jpeg',\n      '.jpeg': 'image/jpeg',\n      '.png': 'image/png',\n      '.webp': 'image/webp',\n    };\n\n    return {\n      exists: true,\n      size: stats.size,\n      extension,\n      mimeType: mimeTypes[extension] || 'application/octet-stream',\n    };\n  } catch {\n    return { exists: false };\n  }\n}\n\n/**\n * Limpa arquivos antigos (opcional - para manutenção)\n */\nexport async function cleanupOldFiles(\n  directory: string,\n  maxAgeInDays: number = 30\n): Promise<number> {\n  try {\n    const { readdir, stat } = await import('fs/promises');\n    const absoluteDir = join(process.cwd(), 'public', directory);\n\n    const files = await readdir(absoluteDir);\n    const now = Date.now();\n    const maxAge = maxAgeInDays * 24 * 60 * 60 * 1000; // em millisegundos\n\n    let deletedCount = 0;\n\n    for (const file of files) {\n      const filePath = join(absoluteDir, file);\n      const stats = await stat(filePath);\n\n      if (now - stats.mtime.getTime() > maxAge) {\n        const relativePath = `/${directory}/${file}`;\n        if (await deleteFile(relativePath)) {\n          deletedCount++;\n        }\n      }\n    }\n\n    return deletedCount;\n  } catch (error) {\n    console.error('Erro ao limpar arquivos antigos:', error);\n    return 0;\n  }\n}\n\n/**\n * Utilitário para converter tamanho em bytes para formato legível\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Utilitário para validar múltiplos arquivos\n */\nexport function validateMultipleFiles(\n  files: File[],\n  type: 'DOCUMENT' | 'IMAGE'\n): { valid: boolean; errors: string[]; validFiles: File[] } {\n  const errors: string[] = [];\n  const validFiles: File[] = [];\n\n  files.forEach((file, index) => {\n    const validation = validateFile(file, type);\n    if (validation.valid) {\n      validFiles.push(file);\n    } else {\n      errors.push(`Arquivo ${index + 1} (${file.name}): ${validation.error}`);\n    }\n  });\n\n  return {\n    valid: errors.length === 0,\n    errors,\n    validFiles,\n  };\n}\n"],"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","ignoreList":[]}