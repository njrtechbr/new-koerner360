{"version":3,"names":["cov_19s908fgvc","actualCoverage","s","AgendadorEmail","f","agendadorUtils","obterAgendadorEmail","constructor","configuracao","tarefas","Map","intervalos","executando","intervaloVerificacao","horarioInicioExpediente","horarioFimExpediente","diasUteis","tentativasMaximas","intervaloTentativas","ativo","gerenciadorEmail","_emailnotificacoes","obterGerenciadorEmail","iniciar","b","console","log","verificarEExecutarTarefas","intervalo","setInterval","set","parar","nome","clearInterval","delete","agendarTarefa","tipo","avaliacao","destinatario","dataAgendamento","id","Date","now","urgencia","_notificacoesavaliacoes","calcularUrgenciaAvaliacao","prioridade","tarefa","avaliacaoId","usuarioId","tentativas","status","toISOString","cancelarTarefa","get","agora","tarefasPendentes","Array","from","values","filter","sort","a","prioridadeOrder","critica","alta","media","baixa","diffPrioridade","getTime","length","deveExecutarAgora","executarTarefa","error","estaNoHorarioExpediente","includes","getDay","data","hora","getHours","minuto","getMinutes","horaAtual","horaInicio","minutoInicio","split","map","Number","horaFim","minutoFim","inicioExpediente","fimExpediente","dataExecucao","avaliacoesPendentes","buscarAvaliacoesPendentes","find","erro","resultado","enviarNotificacaoAvaliacaoPendente","diasRestantes","Math","ceil","prazo","enviarLembretePrazo","enviarNotificacaoVencida","todasAvaliacoes","enviarResumoSemanal","Error","sucesso","mensagemErro","message","proximaTentativa","agendarNotificacoesAutomaticas","avaliacoesParaNotificacao","buscarAvaliacoesParaNotificacao","nomeUsuario","email","emailUsuario","agendarResumosSemanas","proximaSegunda","diasAteSegunda","setDate","getDate","setHours","obterEstatisticas","t","tarefasExecutadas","tarefasFalhadas","proximaExecucao","ultimaExecucao","totalTarefas","taxaSucesso","limparTarefasAntigas","diasAntigos","dataLimite","atualizarConfiguracao","novaConfiguracao","obterConfiguracao","obterTarefas","obterTarefa","instanciaAgendador","iniciarAgendador","agendador","pararAgendador","agendarNotificacaoImediata","agendarLembreteComAntecedencia","horasAntecedencia"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\agendador-email.ts"],"sourcesContent":["'use client';\n\nimport {\n  GerenciadorEmailNotificacoes,\n  obterGerenciadorEmail,\n  TipoNotificacaoEmail,\n  DestinatarioEmail\n} from '@/lib/utils/email-notificacoes';\nimport {\n  buscarAvaliacoesPendentes,\n  buscarAvaliacoesParaNotificacao,\n  calcularUrgenciaAvaliacao,\n  AvaliacaoPendente\n} from '@/lib/utils/notificacoes-avaliacoes';\n\n/**\n * Interface para configuração do agendador\n */\nexport interface ConfiguracaoAgendador {\n  intervaloVerificacao: number; // em minutos\n  horarioInicioExpediente: string; // HH:mm\n  horarioFimExpediente: string; // HH:mm\n  diasUteis: number[]; // 0-6 (domingo-sábado)\n  tentativasMaximas: number;\n  intervaloTentativas: number; // em minutos\n  ativo: boolean;\n}\n\n/**\n * Interface para tarefa agendada\n */\nexport interface TarefaAgendada {\n  id: string;\n  tipo: TipoNotificacaoEmail;\n  avaliacaoId: string;\n  usuarioId: string;\n  destinatario: DestinatarioEmail;\n  dataAgendamento: Date;\n  dataExecucao?: Date;\n  tentativas: number;\n  status: 'pendente' | 'executada' | 'falhada' | 'cancelada';\n  erro?: string;\n  prioridade: 'baixa' | 'media' | 'alta' | 'critica';\n}\n\n/**\n * Interface para estatísticas do agendador\n */\nexport interface EstatisticasAgendador {\n  tarefasPendentes: number;\n  tarefasExecutadas: number;\n  tarefasFalhadas: number;\n  proximaExecucao?: Date;\n  ultimaExecucao?: Date;\n  taxaSucesso: number;\n}\n\n/**\n * Classe para gerenciar agendamento automático de e-mails\n */\nexport class AgendadorEmail {\n  private configuracao: ConfiguracaoAgendador;\n  private tarefas: Map<string, TarefaAgendada> = new Map();\n  private intervalos: Map<string, NodeJS.Timeout> = new Map();\n  private gerenciadorEmail: GerenciadorEmailNotificacoes;\n  private executando = false;\n\n  constructor(configuracao?: Partial<ConfiguracaoAgendador>) {\n    this.configuracao = {\n      intervaloVerificacao: 30, // 30 minutos\n      horarioInicioExpediente: '08:00',\n      horarioFimExpediente: '18:00',\n      diasUteis: [1, 2, 3, 4, 5], // Segunda a sexta\n      tentativasMaximas: 3,\n      intervaloTentativas: 5, // 5 minutos\n      ativo: true,\n      ...configuracao\n    };\n\n    this.gerenciadorEmail = obterGerenciadorEmail();\n  }\n\n  /**\n   * Inicia o agendador\n   */\n  iniciar(): void {\n    if (!this.configuracao.ativo) {\n      console.log('Agendador de e-mail está desativado');\n      return;\n    }\n\n    console.log('Iniciando agendador de e-mail...');\n    \n    // Verifica imediatamente\n    this.verificarEExecutarTarefas();\n    \n    // Agenda verificações periódicas\n    const intervalo = setInterval(() => {\n      this.verificarEExecutarTarefas();\n    }, this.configuracao.intervaloVerificacao * 60 * 1000);\n    \n    this.intervalos.set('principal', intervalo);\n  }\n\n  /**\n   * Para o agendador\n   */\n  parar(): void {\n    console.log('Parando agendador de e-mail...');\n    \n    for (const [nome, intervalo] of this.intervalos) {\n      clearInterval(intervalo);\n      this.intervalos.delete(nome);\n    }\n  }\n\n  /**\n   * Agenda uma nova tarefa de e-mail\n   */\n  agendarTarefa(\n    tipo: TipoNotificacaoEmail,\n    avaliacao: AvaliacaoPendente,\n    destinatario: DestinatarioEmail,\n    dataAgendamento?: Date\n  ): string {\n    const id = `${tipo}_${avaliacao.id}_${destinatario.id}_${Date.now()}`;\n    \n    const urgencia = calcularUrgenciaAvaliacao(avaliacao);\n    let prioridade: TarefaAgendada['prioridade'] = 'media';\n    \n    switch (urgencia) {\n      case 'critica':\n        prioridade = 'critica';\n        break;\n      case 'alta':\n        prioridade = 'alta';\n        break;\n      case 'media':\n        prioridade = 'media';\n        break;\n      case 'baixa':\n        prioridade = 'baixa';\n        break;\n    }\n\n    const tarefa: TarefaAgendada = {\n      id,\n      tipo,\n      avaliacaoId: avaliacao.id,\n      usuarioId: destinatario.id,\n      destinatario,\n      dataAgendamento: dataAgendamento || new Date(),\n      tentativas: 0,\n      status: 'pendente',\n      prioridade\n    };\n\n    this.tarefas.set(id, tarefa);\n    console.log(`Tarefa agendada: ${id} para ${dataAgendamento?.toISOString() || 'agora'}`);\n    \n    return id;\n  }\n\n  /**\n   * Cancela uma tarefa agendada\n   */\n  cancelarTarefa(id: string): boolean {\n    const tarefa = this.tarefas.get(id);\n    if (!tarefa || tarefa.status !== 'pendente') {\n      return false;\n    }\n\n    tarefa.status = 'cancelada';\n    this.tarefas.set(id, tarefa);\n    console.log(`Tarefa cancelada: ${id}`);\n    \n    return true;\n  }\n\n  /**\n   * Verifica e executa tarefas pendentes\n   */\n  private async verificarEExecutarTarefas(): Promise<void> {\n    if (this.executando) {\n      return;\n    }\n\n    this.executando = true;\n    \n    try {\n      const agora = new Date();\n      const tarefasPendentes = Array.from(this.tarefas.values())\n        .filter(tarefa => \n          tarefa.status === 'pendente' && \n          tarefa.dataAgendamento <= agora\n        )\n        .sort((a, b) => {\n          // Ordena por prioridade e depois por data\n          const prioridadeOrder = { critica: 4, alta: 3, media: 2, baixa: 1 };\n          const diffPrioridade = prioridadeOrder[b.prioridade] - prioridadeOrder[a.prioridade];\n          \n          if (diffPrioridade !== 0) {\n            return diffPrioridade;\n          }\n          \n          return a.dataAgendamento.getTime() - b.dataAgendamento.getTime();\n        });\n\n      console.log(`Verificando ${tarefasPendentes.length} tarefas pendentes`);\n\n      for (const tarefa of tarefasPendentes) {\n        if (this.deveExecutarAgora(tarefa)) {\n          await this.executarTarefa(tarefa);\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar tarefas:', error);\n    } finally {\n      this.executando = false;\n    }\n  }\n\n  /**\n   * Verifica se uma tarefa deve ser executada agora\n   */\n  private deveExecutarAgora(tarefa: TarefaAgendada): boolean {\n    const agora = new Date();\n    \n    // Verifica se está no horário de expediente\n    if (!this.estaNoHorarioExpediente(agora)) {\n      // Tarefas críticas podem ser executadas fora do expediente\n      if (tarefa.prioridade !== 'critica') {\n        return false;\n      }\n    }\n\n    // Verifica se é dia útil\n    if (!this.configuracao.diasUteis.includes(agora.getDay())) {\n      // Tarefas críticas podem ser executadas em fins de semana\n      if (tarefa.prioridade !== 'critica') {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifica se está no horário de expediente\n   */\n  private estaNoHorarioExpediente(data: Date): boolean {\n    const hora = data.getHours();\n    const minuto = data.getMinutes();\n    const horaAtual = hora * 60 + minuto;\n\n    const [horaInicio, minutoInicio] = this.configuracao.horarioInicioExpediente\n      .split(':')\n      .map(Number);\n    const [horaFim, minutoFim] = this.configuracao.horarioFimExpediente\n      .split(':')\n      .map(Number);\n\n    const inicioExpediente = horaInicio * 60 + minutoInicio;\n    const fimExpediente = horaFim * 60 + minutoFim;\n\n    return horaAtual >= inicioExpediente && horaAtual <= fimExpediente;\n  }\n\n  /**\n   * Executa uma tarefa específica\n   */\n  private async executarTarefa(tarefa: TarefaAgendada): Promise<void> {\n    console.log(`Executando tarefa: ${tarefa.id}`);\n    \n    try {\n      tarefa.tentativas++;\n      tarefa.dataExecucao = new Date();\n\n      // Busca dados atualizados da avaliação\n      const avaliacoesPendentes = await buscarAvaliacoesPendentes(tarefa.usuarioId);\n      const avaliacao = avaliacoesPendentes.find(a => a.id === tarefa.avaliacaoId);\n\n      if (!avaliacao) {\n        tarefa.status = 'cancelada';\n        tarefa.erro = 'Avaliação não encontrada ou já foi concluída';\n        this.tarefas.set(tarefa.id, tarefa);\n        return;\n      }\n\n      let resultado;\n      \n      switch (tarefa.tipo) {\n        case 'avaliacao_pendente':\n          resultado = await this.gerenciadorEmail.enviarNotificacaoAvaliacaoPendente(\n            avaliacao,\n            tarefa.destinatario\n          );\n          break;\n          \n        case 'lembrete_prazo':\n          const diasRestantes = Math.ceil(\n            (avaliacao.prazo.getTime() - Date.now()) / (1000 * 60 * 60 * 24)\n          );\n          resultado = await this.gerenciadorEmail.enviarLembretePrazo(\n            avaliacao,\n            tarefa.destinatario,\n            diasRestantes\n          );\n          break;\n          \n        case 'avaliacao_vencida':\n          resultado = await this.gerenciadorEmail.enviarNotificacaoVencida(\n            avaliacao,\n            tarefa.destinatario\n          );\n          break;\n          \n        case 'resumo_semanal':\n          const todasAvaliacoes = await buscarAvaliacoesPendentes(tarefa.usuarioId);\n          resultado = await this.gerenciadorEmail.enviarResumoSemanal(\n            todasAvaliacoes,\n            tarefa.destinatario\n          );\n          break;\n          \n        default:\n          throw new Error(`Tipo de tarefa não suportado: ${tarefa.tipo}`);\n      }\n\n      if (resultado.sucesso) {\n        tarefa.status = 'executada';\n        console.log(`Tarefa executada com sucesso: ${tarefa.id}`);\n      } else {\n        throw new Error(resultado.erro || 'Erro desconhecido');\n      }\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      console.error(`Erro ao executar tarefa ${tarefa.id}:`, mensagemErro);\n      \n      tarefa.erro = mensagemErro;\n      \n      if (tarefa.tentativas >= this.configuracao.tentativasMaximas) {\n        tarefa.status = 'falhada';\n        console.log(`Tarefa falhada após ${tarefa.tentativas} tentativas: ${tarefa.id}`);\n      } else {\n        // Reagenda para nova tentativa\n        const proximaTentativa = new Date(\n          Date.now() + this.configuracao.intervaloTentativas * 60 * 1000\n        );\n        tarefa.dataAgendamento = proximaTentativa;\n        console.log(`Reagendando tarefa ${tarefa.id} para ${proximaTentativa.toISOString()}`);\n      }\n    }\n\n    this.tarefas.set(tarefa.id, tarefa);\n  }\n\n  /**\n   * Agenda notificações automáticas para avaliações pendentes\n   */\n  async agendarNotificacoesAutomaticas(): Promise<void> {\n    try {\n      console.log('Agendando notificações automáticas...');\n      \n      // Busca todas as avaliações que precisam de notificação\n      const avaliacoesParaNotificacao = await buscarAvaliacoesParaNotificacao(3); // 3 dias de antecedência\n      \n      for (const avaliacao of avaliacoesParaNotificacao) {\n        const destinatario: DestinatarioEmail = {\n          id: avaliacao.usuarioId,\n          nome: avaliacao.nomeUsuario,\n          email: avaliacao.emailUsuario\n        };\n\n        const urgencia = calcularUrgenciaAvaliacao(avaliacao);\n        const agora = new Date();\n        \n        // Determina o tipo de notificação baseado na urgência\n        if (avaliacao.prazo < agora) {\n          // Avaliação vencida\n          this.agendarTarefa('avaliacao_vencida', avaliacao, destinatario);\n        } else {\n          const diasRestantes = Math.ceil(\n            (avaliacao.prazo.getTime() - agora.getTime()) / (1000 * 60 * 60 * 24)\n          );\n          \n          if (diasRestantes <= 1) {\n            // Lembrete urgente\n            this.agendarTarefa('lembrete_prazo', avaliacao, destinatario);\n          } else if (diasRestantes <= 3) {\n            // Lembrete normal\n            const dataAgendamento = new Date(agora.getTime() + 60 * 60 * 1000); // 1 hora\n            this.agendarTarefa('lembrete_prazo', avaliacao, destinatario, dataAgendamento);\n          } else {\n            // Notificação de avaliação pendente\n            const dataAgendamento = new Date(agora.getTime() + 2 * 60 * 60 * 1000); // 2 horas\n            this.agendarTarefa('avaliacao_pendente', avaliacao, destinatario, dataAgendamento);\n          }\n        }\n      }\n      \n      console.log(`${avaliacoesParaNotificacao.length} notificações agendadas`);\n    } catch (error) {\n      console.error('Erro ao agendar notificações automáticas:', error);\n    }\n  }\n\n  /**\n   * Agenda resumos semanais\n   */\n  agendarResumosSemanas(): void {\n    // Agenda para toda segunda-feira às 9h\n    const agora = new Date();\n    const proximaSegunda = new Date(agora);\n    \n    // Calcula próxima segunda-feira\n    const diasAteSegunda = (1 + 7 - agora.getDay()) % 7;\n    proximaSegunda.setDate(agora.getDate() + (diasAteSegunda || 7));\n    proximaSegunda.setHours(9, 0, 0, 0);\n\n    const intervalo = setInterval(async () => {\n      try {\n        console.log('Agendando resumos semanais...');\n        \n        // Aqui você implementaria a lógica para buscar todos os usuários\n        // e agendar resumos semanais para cada um\n        \n        // Exemplo simplificado:\n        // const usuarios = await buscarTodosUsuarios();\n        // for (const usuario of usuarios) {\n        //   const avaliacoes = await buscarAvaliacoesPendentes(usuario.id);\n        //   if (avaliacoes.length > 0) {\n        //     this.agendarTarefa('resumo_semanal', avaliacoes[0], usuario);\n        //   }\n        // }\n        \n      } catch (error) {\n        console.error('Erro ao agendar resumos semanais:', error);\n      }\n    }, 7 * 24 * 60 * 60 * 1000); // A cada 7 dias\n\n    this.intervalos.set('resumo_semanal', intervalo);\n  }\n\n  /**\n   * Obtém estatísticas do agendador\n   */\n  obterEstatisticas(): EstatisticasAgendador {\n    const tarefas = Array.from(this.tarefas.values());\n    \n    const tarefasPendentes = tarefas.filter(t => t.status === 'pendente').length;\n    const tarefasExecutadas = tarefas.filter(t => t.status === 'executada').length;\n    const tarefasFalhadas = tarefas.filter(t => t.status === 'falhada').length;\n    \n    const proximaExecucao = tarefas\n      .filter(t => t.status === 'pendente')\n      .sort((a, b) => a.dataAgendamento.getTime() - b.dataAgendamento.getTime())[0]?.dataAgendamento;\n    \n    const ultimaExecucao = tarefas\n      .filter(t => t.dataExecucao)\n      .sort((a, b) => (b.dataExecucao?.getTime() || 0) - (a.dataExecucao?.getTime() || 0))[0]?.dataExecucao;\n    \n    const totalTarefas = tarefasExecutadas + tarefasFalhadas;\n    const taxaSucesso = totalTarefas > 0 ? (tarefasExecutadas / totalTarefas) * 100 : 0;\n\n    return {\n      tarefasPendentes,\n      tarefasExecutadas,\n      tarefasFalhadas,\n      proximaExecucao,\n      ultimaExecucao,\n      taxaSucesso\n    };\n  }\n\n  /**\n   * Limpa tarefas antigas\n   */\n  limparTarefasAntigas(diasAntigos = 30): void {\n    const dataLimite = new Date(Date.now() - diasAntigos * 24 * 60 * 60 * 1000);\n    \n    for (const [id, tarefa] of this.tarefas) {\n      if (\n        (tarefa.status === 'executada' || tarefa.status === 'falhada' || tarefa.status === 'cancelada') &&\n        tarefa.dataAgendamento < dataLimite\n      ) {\n        this.tarefas.delete(id);\n      }\n    }\n    \n    console.log('Tarefas antigas removidas');\n  }\n\n  /**\n   * Atualiza configuração do agendador\n   */\n  atualizarConfiguracao(novaConfiguracao: Partial<ConfiguracaoAgendador>): void {\n    this.configuracao = {\n      ...this.configuracao,\n      ...novaConfiguracao\n    };\n    \n    console.log('Configuração do agendador atualizada');\n  }\n\n  /**\n   * Obtém configuração atual\n   */\n  obterConfiguracao(): ConfiguracaoAgendador {\n    return { ...this.configuracao };\n  }\n\n  /**\n   * Obtém todas as tarefas\n   */\n  obterTarefas(): TarefaAgendada[] {\n    return Array.from(this.tarefas.values());\n  }\n\n  /**\n   * Obtém tarefa por ID\n   */\n  obterTarefa(id: string): TarefaAgendada | undefined {\n    return this.tarefas.get(id);\n  }\n}\n\n// Instância singleton do agendador\nlet instanciaAgendador: AgendadorEmail | null = null;\n\n/**\n * Obtém instância singleton do agendador de e-mail\n */\nexport function obterAgendadorEmail(configuracao?: Partial<ConfiguracaoAgendador>): AgendadorEmail {\n  if (!instanciaAgendador) {\n    instanciaAgendador = new AgendadorEmail(configuracao);\n  }\n  return instanciaAgendador;\n}\n\n/**\n * Utilitários para agendamento rápido\n */\nexport const agendadorUtils = {\n  /**\n   * Inicia agendador com configuração padrão\n   */\n  iniciarAgendador: (configuracao?: Partial<ConfiguracaoAgendador>) => {\n    const agendador = obterAgendadorEmail(configuracao);\n    agendador.iniciar();\n    agendador.agendarResumosSemanas();\n    return agendador;\n  },\n\n  /**\n   * Para agendador\n   */\n  pararAgendador: () => {\n    if (instanciaAgendador) {\n      instanciaAgendador.parar();\n    }\n  },\n\n  /**\n   * Agenda notificação imediata\n   */\n  agendarNotificacaoImediata: (\n    tipo: TipoNotificacaoEmail,\n    avaliacao: AvaliacaoPendente,\n    destinatario: DestinatarioEmail\n  ) => {\n    const agendador = obterAgendadorEmail();\n    return agendador.agendarTarefa(tipo, avaliacao, destinatario, new Date());\n  },\n\n  /**\n   * Agenda lembrete com antecedência\n   */\n  agendarLembreteComAntecedencia: (\n    avaliacao: AvaliacaoPendente,\n    destinatario: DestinatarioEmail,\n    horasAntecedencia: number\n  ) => {\n    const agendador = obterAgendadorEmail();\n    const dataAgendamento = new Date(Date.now() + horasAntecedencia * 60 * 60 * 1000);\n    return agendador.agendarTarefa('lembrete_prazo', avaliacao, destinatario, dataAgendamento);\n  }\n};"],"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","ignoreList":[]}