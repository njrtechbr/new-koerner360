{"version":3,"names":["AgendadorLembretes","cov_2en0qbbi9j","f","s","lembretesUtils","obterAgendadorLembretes","constructor","gerenciadorEmail","_emailnotificacoes","obterGerenciadorEmail","intervalos","Map","ativo","configuracao","diasAntecedencia","horarioEnvio","incluirFimDeSemana","incluirFeriados","agendadorEmail","_agendadoremail","AgendadorEmail","iniciar","b","console","log","intervalo","setInterval","verificarLembretesPendentes","catch","error","set","parar","forEach","clearInterval","clear","atualizarConfiguracao","novaConfiguracao","reagendarTodosLembretes","avaliacoesPendentes","buscarAvaliacoesPendentes","avaliacao","processarLembretesAvaliacao","enviarLembretesAgendados","agora","Date","em30Dias","_datefns","addDays","_prisma","prisma","findMany","where","status","prazo","gte","lte","include","avaliado","avaliador","periodo","prazoAvaliacao","isBefore","agendarLembreteVencimento","dias","dataLembrete","isAfter","agendarLembrete","dataEnvio","tipo","lembreteExistente","buscarLembreteExistente","id","avaliadorId","dataEnvioComHorario","ajustarHorarioEnvio","isFimDeSemana","criarRegistroLembrete","avaliacaoId","usuarioId","enviado","tentativas","toISOString","inicioHora","startOfDay","fimHora","endOfDay","lembretesParaEnviar","buscarLembretesParaEnvio","lembrete","enviarLembrete","findUnique","Error","resultado","enviarEmailAvaliacaoPendente","email","nomeAvaliador","nome","nomeAvaliado","cargoAvaliado","cargo","linkAvaliacao","atualizarRegistroLembrete","sucesso","ultimaTentativa","erro","undefined","criarNotificacaoLembrete","message","titulo","descricao","notificacao","create","data","urgencia","lida","limparLembretesNaoEnviados","horas","minutos","split","map","Number","novaData","setHours","diaSemana","getDay","dados","inicio","fim","obterEstatisticas","totalAgendados","totalEnviados","totalPendentes","totalFalhas","proximosEnvios","ultimosEnviados","obterConfiguracao","estaAtivo","forcarVerificacao","reagendarAvaliacao","instanciaAgendador","iniciarAutomatico","agendador","pararAgendador"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\agendador-lembretes.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma';\nimport { AgendadorEmail } from './agendador-email';\nimport { obterGerenciadorEmail } from '@/lib/utils/email-notificacoes';\nimport { addDays, isAfter, isBefore, startOfDay, endOfDay } from 'date-fns';\n\ninterface ConfiguracaoLembrete {\n  diasAntecedencia: number[];\n  horarioEnvio: string; // HH:mm\n  ativo: boolean;\n  incluirFimDeSemana: boolean;\n  incluirFeriados: boolean;\n}\n\ninterface LembreteAgendado {\n  id: string;\n  avaliacaoId: string;\n  usuarioId: string;\n  tipo: 'lembrete' | 'vencimento';\n  dataEnvio: Date;\n  enviado: boolean;\n  tentativas: number;\n  ultimaTentativa?: Date;\n  erro?: string;\n}\n\ninterface EstatisticasLembretes {\n  totalAgendados: number;\n  totalEnviados: number;\n  totalPendentes: number;\n  totalFalhas: number;\n  proximosEnvios: LembreteAgendado[];\n  ultimosEnviados: LembreteAgendado[];\n}\n\nclass AgendadorLembretes {\n  private agendadorEmail: AgendadorEmail;\n  private gerenciadorEmail = obterGerenciadorEmail();\n  private intervalos: Map<string, NodeJS.Timeout> = new Map();\n  private ativo = false;\n  private configuracao: ConfiguracaoLembrete = {\n    diasAntecedencia: [7, 3, 1], // 7, 3 e 1 dia antes do vencimento\n    horarioEnvio: '09:00',\n    ativo: true,\n    incluirFimDeSemana: false,\n    incluirFeriados: false,\n  };\n\n  constructor() {\n    this.agendadorEmail = new AgendadorEmail();\n  }\n\n  /**\n   * Inicia o agendador de lembretes\n   */\n  async iniciar(): Promise<void> {\n    if (this.ativo) {\n      console.log('Agendador de lembretes já está ativo');\n      return;\n    }\n\n    this.ativo = true;\n    console.log('Iniciando agendador de lembretes...');\n\n    // Agendar verificação a cada hora\n    const intervalo = setInterval(() => {\n      this.verificarLembretesPendentes().catch(console.error);\n    }, 60 * 60 * 1000); // 1 hora\n\n    this.intervalos.set('verificacao-principal', intervalo);\n\n    // Executar verificação inicial\n    await this.verificarLembretesPendentes();\n\n    console.log('Agendador de lembretes iniciado com sucesso');\n  }\n\n  /**\n   * Para o agendador de lembretes\n   */\n  parar(): void {\n    if (!this.ativo) {\n      console.log('Agendador de lembretes já está parado');\n      return;\n    }\n\n    this.ativo = false;\n    \n    // Limpar todos os intervalos\n    this.intervalos.forEach((intervalo) => {\n      clearInterval(intervalo);\n    });\n    this.intervalos.clear();\n\n    console.log('Agendador de lembretes parado');\n  }\n\n  /**\n   * Atualiza a configuração do agendador\n   */\n  async atualizarConfiguracao(novaConfiguracao: Partial<ConfiguracaoLembrete>): Promise<void> {\n    this.configuracao = { ...this.configuracao, ...novaConfiguracao };\n    \n    // Reagendar lembretes se necessário\n    if (this.ativo) {\n      await this.reagendarTodosLembretes();\n    }\n\n    console.log('Configuração do agendador atualizada:', this.configuracao);\n  }\n\n  /**\n   * Verifica e processa lembretes pendentes\n   */\n  private async verificarLembretesPendentes(): Promise<void> {\n    if (!this.configuracao.ativo) {\n      return;\n    }\n\n    try {\n      console.log('Verificando lembretes pendentes...');\n\n      // Buscar avaliações que precisam de lembretes\n      const avaliacoesPendentes = await this.buscarAvaliacoesPendentes();\n      \n      for (const avaliacao of avaliacoesPendentes) {\n        await this.processarLembretesAvaliacao(avaliacao);\n      }\n\n      // Enviar lembretes agendados para agora\n      await this.enviarLembretesAgendados();\n\n    } catch (error) {\n      console.error('Erro ao verificar lembretes pendentes:', error);\n    }\n  }\n\n  /**\n   * Busca avaliações que precisam de lembretes\n   */\n  private async buscarAvaliacoesPendentes() {\n    const agora = new Date();\n    const em30Dias = addDays(agora, 30); // Buscar avaliações com prazo nos próximos 30 dias\n\n    return await prisma.avaliacao.findMany({\n      where: {\n        status: 'PENDENTE',\n        prazo: {\n          gte: agora,\n          lte: em30Dias,\n        },\n      },\n      include: {\n        avaliado: true,\n        avaliador: true,\n        periodo: true,\n      },\n    });\n  }\n\n  /**\n   * Processa lembretes para uma avaliação específica\n   */\n  private async processarLembretesAvaliacao(avaliacao: any): Promise<void> {\n    const agora = new Date();\n    const prazoAvaliacao = new Date(avaliacao.prazo);\n\n    // Verificar se já passou do prazo\n    if (isBefore(prazoAvaliacao, agora)) {\n      await this.agendarLembreteVencimento(avaliacao);\n      return;\n    }\n\n    // Agendar lembretes de antecedência\n    for (const dias of this.configuracao.diasAntecedencia) {\n      const dataLembrete = addDays(prazoAvaliacao, -dias);\n      \n      if (isAfter(dataLembrete, agora)) {\n        await this.agendarLembrete(avaliacao, dataLembrete, 'lembrete');\n      }\n    }\n  }\n\n  /**\n   * Agenda um lembrete específico\n   */\n  private async agendarLembrete(\n    avaliacao: any,\n    dataEnvio: Date,\n    tipo: 'lembrete' | 'vencimento'\n  ): Promise<void> {\n    // Verificar se já existe um lembrete agendado\n    const lembreteExistente = await this.buscarLembreteExistente(\n      avaliacao.id,\n      avaliacao.avaliadorId,\n      tipo,\n      dataEnvio\n    );\n\n    if (lembreteExistente) {\n      return; // Já existe\n    }\n\n    // Ajustar horário de envio\n    const dataEnvioComHorario = this.ajustarHorarioEnvio(dataEnvio);\n\n    // Verificar se é dia útil (se configurado)\n    if (!this.configuracao.incluirFimDeSemana && this.isFimDeSemana(dataEnvioComHorario)) {\n      return; // Pular fim de semana\n    }\n\n    // Criar registro do lembrete\n    await this.criarRegistroLembrete({\n      avaliacaoId: avaliacao.id,\n      usuarioId: avaliacao.avaliadorId,\n      tipo,\n      dataEnvio: dataEnvioComHorario,\n      enviado: false,\n      tentativas: 0,\n    });\n\n    console.log(`Lembrete ${tipo} agendado para ${dataEnvioComHorario.toISOString()}`);\n  }\n\n  /**\n   * Agenda lembrete de vencimento\n   */\n  private async agendarLembreteVencimento(avaliacao: any): Promise<void> {\n    const agora = new Date();\n    await this.agendarLembrete(avaliacao, agora, 'vencimento');\n  }\n\n  /**\n   * Envia lembretes que estão agendados para agora\n   */\n  private async enviarLembretesAgendados(): Promise<void> {\n    const agora = new Date();\n    const inicioHora = startOfDay(agora);\n    const fimHora = endOfDay(agora);\n\n    // Buscar lembretes agendados para hoje\n    const lembretesParaEnviar = await this.buscarLembretesParaEnvio(inicioHora, fimHora);\n\n    for (const lembrete of lembretesParaEnviar) {\n      await this.enviarLembrete(lembrete);\n    }\n  }\n\n  /**\n   * Envia um lembrete específico\n   */\n  private async enviarLembrete(lembrete: any): Promise<void> {\n    try {\n      console.log(`Enviando lembrete ${lembrete.tipo} para usuário ${lembrete.usuarioId}`);\n\n      // Buscar dados da avaliação\n      const avaliacao = await prisma.avaliacao.findUnique({\n        where: { id: lembrete.avaliacaoId },\n        include: {\n          avaliado: true,\n          avaliador: true,\n          periodo: true,\n        },\n      });\n\n      if (!avaliacao) {\n        throw new Error('Avaliação não encontrada');\n      }\n\n      // Enviar e-mail\n      const resultado = await this.gerenciadorEmail.enviarEmailAvaliacaoPendente(\n        avaliacao.avaliador.email,\n        {\n          nomeAvaliador: avaliacao.avaliador.nome,\n          nomeAvaliado: avaliacao.avaliado.nome,\n          cargoAvaliado: avaliacao.avaliado.cargo || 'Não informado',\n          prazo: avaliacao.prazo,\n          linkAvaliacao: `/avaliacoes/${avaliacao.id}`,\n          periodo: avaliacao.periodo.nome,\n        }\n      );\n\n      // Atualizar registro do lembrete\n      await this.atualizarRegistroLembrete(lembrete.id, {\n        enviado: resultado.sucesso,\n        tentativas: lembrete.tentativas + 1,\n        ultimaTentativa: new Date(),\n        erro: resultado.sucesso ? undefined : resultado.erro,\n      });\n\n      // Criar notificação no sistema\n      await this.criarNotificacaoLembrete(avaliacao, lembrete.tipo);\n\n      console.log(`Lembrete ${lembrete.tipo} enviado com sucesso`);\n\n    } catch (error) {\n      console.error(`Erro ao enviar lembrete ${lembrete.id}:`, error);\n      \n      // Atualizar registro com erro\n      await this.atualizarRegistroLembrete(lembrete.id, {\n        tentativas: lembrete.tentativas + 1,\n        ultimaTentativa: new Date(),\n        erro: error instanceof Error ? error.message : 'Erro desconhecido',\n      });\n    }\n  }\n\n  /**\n   * Cria notificação no sistema para o lembrete\n   */\n  private async criarNotificacaoLembrete(avaliacao: any, tipo: 'lembrete' | 'vencimento'): Promise<void> {\n    const titulo = tipo === 'lembrete' \n      ? 'Lembrete: Avaliação Pendente'\n      : 'Avaliação Vencida';\n    \n    const descricao = tipo === 'lembrete'\n      ? `Você tem uma avaliação pendente de ${avaliacao.avaliado.nome}`\n      : `A avaliação de ${avaliacao.avaliado.nome} está vencida`;\n\n    await prisma.notificacao.create({\n      data: {\n        titulo,\n        descricao,\n        tipo: tipo === 'lembrete' ? 'lembrete' : 'vencida',\n        urgencia: tipo === 'lembrete' ? 'media' : 'alta',\n        usuarioId: avaliacao.avaliadorId,\n        avaliacaoId: avaliacao.id,\n        lida: false,\n        prazo: avaliacao.prazo,\n      },\n    });\n  }\n\n  /**\n   * Reagenda todos os lembretes\n   */\n  private async reagendarTodosLembretes(): Promise<void> {\n    console.log('Reagendando todos os lembretes...');\n    \n    // Limpar lembretes não enviados\n    await this.limparLembretesNaoEnviados();\n    \n    // Reprocessar avaliações pendentes\n    await this.verificarLembretesPendentes();\n  }\n\n  /**\n   * Utilitários\n   */\n  private ajustarHorarioEnvio(data: Date): Date {\n    const [horas, minutos] = this.configuracao.horarioEnvio.split(':').map(Number);\n    const novaData = new Date(data);\n    novaData.setHours(horas, minutos, 0, 0);\n    return novaData;\n  }\n\n  private isFimDeSemana(data: Date): boolean {\n    const diaSemana = data.getDay();\n    return diaSemana === 0 || diaSemana === 6; // Domingo ou Sábado\n  }\n\n  /**\n   * Métodos de banco de dados\n   */\n  private async buscarLembreteExistente(\n    avaliacaoId: string,\n    usuarioId: string,\n    tipo: string,\n    dataEnvio: Date\n  ) {\n    // Implementar busca no banco de dados\n    // Por enquanto, retorna null (assumindo que não existe)\n    return null;\n  }\n\n  private async criarRegistroLembrete(dados: Omit<LembreteAgendado, 'id'>): Promise<void> {\n    // Implementar criação no banco de dados\n    console.log('Criando registro de lembrete:', dados);\n  }\n\n  private async atualizarRegistroLembrete(id: string, dados: Partial<LembreteAgendado>): Promise<void> {\n    // Implementar atualização no banco de dados\n    console.log('Atualizando registro de lembrete:', id, dados);\n  }\n\n  private async buscarLembretesParaEnvio(inicio: Date, fim: Date): Promise<any[]> {\n    // Implementar busca no banco de dados\n    // Por enquanto, retorna array vazio\n    return [];\n  }\n\n  private async limparLembretesNaoEnviados(): Promise<void> {\n    // Implementar limpeza no banco de dados\n    console.log('Limpando lembretes não enviados');\n  }\n\n  /**\n   * Métodos públicos para estatísticas e controle\n   */\n  async obterEstatisticas(): Promise<EstatisticasLembretes> {\n    // Implementar busca de estatísticas\n    return {\n      totalAgendados: 0,\n      totalEnviados: 0,\n      totalPendentes: 0,\n      totalFalhas: 0,\n      proximosEnvios: [],\n      ultimosEnviados: [],\n    };\n  }\n\n  obterConfiguracao(): ConfiguracaoLembrete {\n    return { ...this.configuracao };\n  }\n\n  estaAtivo(): boolean {\n    return this.ativo;\n  }\n\n  async forcarVerificacao(): Promise<void> {\n    await this.verificarLembretesPendentes();\n  }\n\n  async reagendarAvaliacao(avaliacaoId: string): Promise<void> {\n    const avaliacao = await prisma.avaliacao.findUnique({\n      where: { id: avaliacaoId },\n      include: {\n        avaliado: true,\n        avaliador: true,\n        periodo: true,\n      },\n    });\n\n    if (avaliacao) {\n      await this.processarLembretesAvaliacao(avaliacao);\n    }\n  }\n}\n\n// Instância singleton\nlet instanciaAgendador: AgendadorLembretes | null = null;\n\n/**\n * Obtém a instância singleton do agendador de lembretes\n */\nexport function obterAgendadorLembretes(): AgendadorLembretes {\n  if (!instanciaAgendador) {\n    instanciaAgendador = new AgendadorLembretes();\n  }\n  return instanciaAgendador;\n}\n\n/**\n * Utilitários para agendamento de lembretes\n */\nexport const lembretesUtils = {\n  /**\n   * Inicia o agendador automaticamente\n   */\n  async iniciarAutomatico(): Promise<void> {\n    const agendador = obterAgendadorLembretes();\n    await agendador.iniciar();\n  },\n\n  /**\n   * Para o agendador\n   */\n  pararAgendador(): void {\n    const agendador = obterAgendadorLembretes();\n    agendador.parar();\n  },\n\n  /**\n   * Força verificação de lembretes\n   */\n  async forcarVerificacao(): Promise<void> {\n    const agendador = obterAgendadorLembretes();\n    await agendador.forcarVerificacao();\n  },\n\n  /**\n   * Reagenda lembretes para uma avaliação específica\n   */\n  async reagendarAvaliacao(avaliacaoId: string): Promise<void> {\n    const agendador = obterAgendadorLembretes();\n    await agendador.reagendarAvaliacao(avaliacaoId);\n  },\n};\n\nexport type {\n  ConfiguracaoLembrete,\n  LembreteAgendado,\n  EstatisticasLembretes,\n};\n\nexport { AgendadorLembretes };"],"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","ignoreList":[]}