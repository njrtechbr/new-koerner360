{"version":3,"names":["DELETE","cov_z25nl6kx9","f","s","GET","PUT","idDocumentoSchema","_zod","z","string","uuid","atualizarDocumentoSchema","object","tipo","enum","optional","numero","min","max","dataEmissao","datetime","orgaoEmissor","arquivo","url","observacoes","request","params","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","_atendentes","MENSAGENS_ERRO_ATENDENTES","SEM_PERMISSAO","atendenteId","idAtendenteSchema","parse","id","documentoId","atendente","_prisma","prisma","findUnique","where","select","usuarioId","ATENDENTE_NAO_ENCONTRADO","documento","documentoAtendente","findFirst","criadoEm","atualizadoEm","error","console","ZodError","DADOS_INVALIDOS","detalhes","errors","ERRO_INTERNO","documentoAtual","dadosRequisicao","dadosValidados","Object","keys","length","tipoVerificar","numeroVerificar","documentoExistente","not","dadosAtualizacao","undefined","Date","documentoAtualizado","update","data","historicoAlteracaoAtendente","create","campo","descricao","valorAnterior","JSON","stringify","valorNovo","criadoPorId","mensagem","delete"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\documentos\\[documentoId]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { z } from 'zod';\nimport {\n  idAtendenteSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n} from '@/lib/validations/atendentes';\nimport { ZodError } from 'zod';\n\ninterface RouteParams {\n  params: {\n    id: string;\n    documentoId: string;\n  };\n}\n\n/**\n * Schema para validação de ID de documento\n */\nconst idDocumentoSchema = z\n  .string()\n  .uuid('ID do documento deve ser um UUID válido');\n\n/**\n * Schema para atualização de documento\n */\nconst atualizarDocumentoSchema = z.object({\n  tipo: z\n    .enum([\n      'RG',\n      'CPF',\n      'CNH',\n      'CTPS',\n      'TITULO_ELEITOR',\n      'CERTIFICADO',\n      'DIPLOMA',\n      'OUTRO',\n    ])\n    .optional(),\n  numero: z\n    .string()\n    .min(1, 'Número do documento é obrigatório')\n    .max(50, 'Número deve ter no máximo 50 caracteres')\n    .optional(),\n  dataEmissao: z\n    .string()\n    .datetime('Data de emissão deve ser uma data válida')\n    .optional(),\n  orgaoEmissor: z\n    .string()\n    .max(100, 'Órgão emissor deve ter no máximo 100 caracteres')\n    .optional(),\n  arquivo: z.string().url('URL do arquivo deve ser válida').optional(),\n  observacoes: z\n    .string()\n    .max(500, 'Observações devem ter no máximo 500 caracteres')\n    .optional(),\n});\n\n/**\n * GET /api/atendentes/[id]/documentos/[documentoId]\n * Busca um documento específico do atendente\n */\nexport async function GET(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões\n    if (!['ADMIN', 'GERENTE', 'ATENDENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar IDs\n    const atendenteId = idAtendenteSchema.parse(params.id);\n    const documentoId = idDocumentoSchema.parse(params.documentoId);\n\n    // Verificar se o atendente existe\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      select: { id: true, usuarioId: true },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o atendente pode ver apenas seus próprios documentos\n    if (\n      session.user.userType === 'ATENDENTE' &&\n      atendente.usuarioId !== session.user.id\n    ) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Buscar documento\n    const documento = await prisma.documentoAtendente.findFirst({\n      where: {\n        id: documentoId,\n        atendenteId,\n      },\n    });\n\n    if (!documento) {\n      return NextResponse.json(\n        { erro: 'Documento não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({\n      documento: {\n        id: documento.id,\n        tipo: documento.tipo,\n        numero: documento.numero,\n        dataEmissao: documento.dataEmissao,\n        orgaoEmissor: documento.orgaoEmissor,\n        arquivo: documento.arquivo,\n        observacoes: documento.observacoes,\n        criadoEm: documento.criadoEm,\n        atualizadoEm: documento.atualizadoEm,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao buscar documento do atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PUT /api/atendentes/[id]/documentos/[documentoId]\n * Atualiza um documento específico do atendente\n */\nexport async function PUT(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN e GERENTE podem atualizar documentos)\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar IDs\n    const atendenteId = idAtendenteSchema.parse(params.id);\n    const documentoId = idDocumentoSchema.parse(params.documentoId);\n\n    // Verificar se o atendente existe\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      select: { id: true },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Buscar documento atual\n    const documentoAtual = await prisma.documentoAtendente.findFirst({\n      where: {\n        id: documentoId,\n        atendenteId,\n      },\n    });\n\n    if (!documentoAtual) {\n      return NextResponse.json(\n        { erro: 'Documento não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Extrair dados do corpo da requisição\n    const dadosRequisicao = await request.json();\n\n    // Validar dados\n    const dadosValidados = atualizarDocumentoSchema.parse(dadosRequisicao);\n\n    // Verificar se há dados para atualizar\n    if (Object.keys(dadosValidados).length === 0) {\n      return NextResponse.json(\n        { erro: 'Nenhum dado fornecido para atualização' },\n        { status: 400 }\n      );\n    }\n\n    // Verificar se já existe outro documento com o mesmo tipo e número (se estiver sendo alterado)\n    if (dadosValidados.tipo || dadosValidados.numero) {\n      const tipoVerificar = dadosValidados.tipo || documentoAtual.tipo;\n      const numeroVerificar = dadosValidados.numero || documentoAtual.numero;\n\n      const documentoExistente = await prisma.documentoAtendente.findFirst({\n        where: {\n          atendenteId,\n          tipo: tipoVerificar,\n          numero: numeroVerificar,\n          id: { not: documentoId },\n        },\n      });\n\n      if (documentoExistente) {\n        return NextResponse.json(\n          {\n            erro: `Documento ${tipoVerificar} com número ${numeroVerificar} já existe para este atendente`,\n          },\n          { status: 409 }\n        );\n      }\n    }\n\n    // Preparar dados para atualização\n    const dadosAtualizacao: any = {};\n\n    if (dadosValidados.tipo) dadosAtualizacao.tipo = dadosValidados.tipo;\n    if (dadosValidados.numero) dadosAtualizacao.numero = dadosValidados.numero;\n    if (dadosValidados.dataEmissao !== undefined) {\n      dadosAtualizacao.dataEmissao = dadosValidados.dataEmissao\n        ? new Date(dadosValidados.dataEmissao)\n        : null;\n    }\n    if (dadosValidados.orgaoEmissor !== undefined)\n      dadosAtualizacao.orgaoEmissor = dadosValidados.orgaoEmissor;\n    if (dadosValidados.arquivo !== undefined)\n      dadosAtualizacao.arquivo = dadosValidados.arquivo;\n    if (dadosValidados.observacoes !== undefined)\n      dadosAtualizacao.observacoes = dadosValidados.observacoes;\n\n    // Atualizar documento\n    const documentoAtualizado = await prisma.documentoAtendente.update({\n      where: { id: documentoId },\n      data: dadosAtualizacao,\n    });\n\n    // Registrar no histórico de alterações\n    await prisma.historicoAlteracaoAtendente.create({\n      data: {\n        atendenteId,\n        tipo: 'ATUALIZACAO',\n        campo: 'documento',\n        descricao: `Documento ${documentoAtual.tipo} atualizado`,\n        valorAnterior: JSON.stringify({\n          documentoId: documentoAtual.id,\n          tipo: documentoAtual.tipo,\n          numero: documentoAtual.numero,\n          dataEmissao: documentoAtual.dataEmissao,\n          orgaoEmissor: documentoAtual.orgaoEmissor,\n          arquivo: documentoAtual.arquivo,\n          observacoes: documentoAtual.observacoes,\n        }),\n        valorNovo: JSON.stringify({\n          documentoId: documentoAtualizado.id,\n          tipo: documentoAtualizado.tipo,\n          numero: documentoAtualizado.numero,\n          dataEmissao: documentoAtualizado.dataEmissao,\n          orgaoEmissor: documentoAtualizado.orgaoEmissor,\n          arquivo: documentoAtualizado.arquivo,\n          observacoes: documentoAtualizado.observacoes,\n        }),\n        criadoPorId: session.user.id,\n      },\n    });\n\n    return NextResponse.json({\n      mensagem: 'Documento atualizado com sucesso',\n      documento: {\n        id: documentoAtualizado.id,\n        tipo: documentoAtualizado.tipo,\n        numero: documentoAtualizado.numero,\n        dataEmissao: documentoAtualizado.dataEmissao,\n        orgaoEmissor: documentoAtualizado.orgaoEmissor,\n        arquivo: documentoAtualizado.arquivo,\n        observacoes: documentoAtualizado.observacoes,\n        criadoEm: documentoAtualizado.criadoEm,\n        atualizadoEm: documentoAtualizado.atualizadoEm,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar documento do atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/atendentes/[id]/documentos/[documentoId]\n * Remove um documento específico do atendente\n */\nexport async function DELETE(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN pode remover documentos)\n    if (session.user.userType !== 'ADMIN') {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar IDs\n    const atendenteId = idAtendenteSchema.parse(params.id);\n    const documentoId = idDocumentoSchema.parse(params.documentoId);\n\n    // Verificar se o atendente existe\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      select: { id: true },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Buscar documento\n    const documento = await prisma.documentoAtendente.findFirst({\n      where: {\n        id: documentoId,\n        atendenteId,\n      },\n    });\n\n    if (!documento) {\n      return NextResponse.json(\n        { erro: 'Documento não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Remover documento\n    await prisma.documentoAtendente.delete({\n      where: { id: documentoId },\n    });\n\n    // Registrar no histórico de alterações\n    await prisma.historicoAlteracaoAtendente.create({\n      data: {\n        atendenteId,\n        tipo: 'REMOCAO_DOCUMENTO',\n        descricao: `Documento ${documento.tipo} removido`,\n        valorAnterior: JSON.stringify({\n          documentoId: documento.id,\n          tipo: documento.tipo,\n          numero: documento.numero,\n        }),\n        criadoPorId: session.user.id,\n      },\n    });\n\n    return NextResponse.json({\n      mensagem: 'Documento removido com sucesso',\n    });\n  } catch (error) {\n    console.error('Erro ao remover documento do atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}