bf2f10fdbd870dc2dcdec66338570602
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useConfiguracaoNotificacoes () {
        return useConfiguracaoNotificacoes;
    },
    get useNotificacoesAvaliacoes () {
        return useNotificacoesAvaliacoes;
    },
    get useTemNotificacoesPendentes () {
        return useTemNotificacoesPendentes;
    }
});
const _react = require("react");
const _notificacoesavaliacoes = require("../lib/utils/notificacoes-avaliacoes");
function useNotificacoesAvaliacoes({ usuarioId, autoRefresh = false, refreshInterval = 60000 // 1 minuto
 }) {
    const [avaliacoesPendentes, setAvaliacoesPendentes] = (0, _react.useState)([]);
    const [estatisticas, setEstatisticas] = (0, _react.useState)(null);
    const [configuracao, setConfiguracao] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const fetchData = (0, _react.useCallback)(async ()=>{
        try {
            setLoading(true);
            setError(null);
            // Buscar avaliações pendentes
            const avaliacoes = await (0, _notificacoesavaliacoes.buscarAvaliacoesPendentesUsuario)(usuarioId);
            setAvaliacoesPendentes(avaliacoes);
            // Gerar estatísticas
            const stats = await (0, _notificacoesavaliacoes.gerarEstatisticasNotificacoes)(usuarioId);
            setEstatisticas(stats);
            // Buscar configuração
            const config = await (0, _notificacoesavaliacoes.buscarConfiguracaoNotificacao)(usuarioId);
            setConfiguracao(config);
        } catch (err) {
            console.error('Erro ao buscar notificações:', err);
            setError(err instanceof Error ? err.message : 'Erro desconhecido');
        } finally{
            setLoading(false);
        }
    }, [
        usuarioId
    ]);
    // Carregar dados iniciais
    (0, _react.useEffect)(()=>{
        fetchData();
    }, [
        fetchData
    ]);
    // Auto-refresh
    (0, _react.useEffect)(()=>{
        if (!autoRefresh) return;
        const interval = setInterval(()=>{
            fetchData();
        }, refreshInterval);
        return ()=>clearInterval(interval);
    }, [
        autoRefresh,
        refreshInterval,
        fetchData
    ]);
    const marcarComoLida = (0, _react.useCallback)((avaliacaoId)=>{
        // Por enquanto, apenas remove da lista local
        // Em uma implementação real, isso seria persistido no backend
        setAvaliacoesPendentes((prev)=>prev.filter((avaliacao)=>avaliacao.id !== avaliacaoId));
        // Atualizar estatísticas
        if (estatisticas) {
            setEstatisticas((prev)=>{
                if (!prev) return null;
                return {
                    ...prev,
                    totalPendentes: prev.totalPendentes - 1
                };
            });
        }
    }, [
        estatisticas
    ]);
    const atualizarConfiguracao = (0, _react.useCallback)(async (novaConfig)=>{
        try {
            // Em uma implementação real, isso seria uma chamada para a API
            if (configuracao) {
                const configAtualizada = {
                    ...configuracao,
                    ...novaConfig
                };
                setConfiguracao(configAtualizada);
            }
        } catch (err) {
            console.error('Erro ao atualizar configuração:', err);
            setError(err instanceof Error ? err.message : 'Erro ao atualizar configuração');
        }
    }, [
        configuracao
    ]);
    return {
        avaliacoesPendentes,
        estatisticas,
        configuracao,
        loading,
        error,
        refetch: fetchData,
        marcarComoLida,
        atualizarConfiguracao
    };
}
function useTemNotificacoesPendentes(usuarioId) {
    const [temNotificacoes, setTemNotificacoes] = (0, _react.useState)(false);
    const [quantidadeTotal, setQuantidadeTotal] = (0, _react.useState)(0);
    const [quantidadeCriticas, setQuantidadeCriticas] = (0, _react.useState)(0);
    const [loading, setLoading] = (0, _react.useState)(true);
    (0, _react.useEffect)(()=>{
        const verificarNotificacoes = async ()=>{
            try {
                setLoading(true);
                const avaliacoes = await (0, _notificacoesavaliacoes.buscarAvaliacoesPendentesUsuario)(usuarioId);
                const stats = await (0, _notificacoesavaliacoes.gerarEstatisticasNotificacoes)(usuarioId);
                setTemNotificacoes(avaliacoes.length > 0);
                setQuantidadeTotal(stats.totalPendentes);
                setQuantidadeCriticas(stats.criticas);
            } catch (err) {
                console.error('Erro ao verificar notificações:', err);
            } finally{
                setLoading(false);
            }
        };
        verificarNotificacoes();
    }, [
        usuarioId
    ]);
    return {
        temNotificacoes,
        quantidadeTotal,
        quantidadeCriticas,
        loading
    };
}
function useConfiguracaoNotificacoes(usuarioId) {
    const [configuracao, setConfiguracao] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>{
        const carregarConfiguracao = async ()=>{
            try {
                setLoading(true);
                const config = await (0, _notificacoesavaliacoes.buscarConfiguracaoNotificacao)(usuarioId);
                setConfiguracao(config);
            } catch (err) {
                console.error('Erro ao carregar configuração:', err);
                setError(err instanceof Error ? err.message : 'Erro desconhecido');
            } finally{
                setLoading(false);
            }
        };
        carregarConfiguracao();
    }, [
        usuarioId
    ]);
    const salvarConfiguracao = (0, _react.useCallback)(async (novaConfig)=>{
        try {
            // Em uma implementação real, isso seria uma chamada para a API
            if (configuracao) {
                const configAtualizada = {
                    ...configuracao,
                    ...novaConfig
                };
                setConfiguracao(configAtualizada);
                return configAtualizada;
            }
            return null;
        } catch (err) {
            console.error('Erro ao salvar configuração:', err);
            setError(err instanceof Error ? err.message : 'Erro ao salvar configuração');
            return null;
        }
    }, [
        configuracao
    ]);
    const verificarPermissaoNotificacao = (0, _react.useCallback)(async (tipo)=>{
        return await (0, _notificacoesavaliacoes.deveReceberNotificacao)(usuarioId, tipo);
    }, [
        usuarioId
    ]);
    return {
        configuracao,
        loading,
        error,
        salvarConfiguracao,
        verificarPermissaoNotificacao
    };
}

//# sourceMappingURL=data:application/json;base64,