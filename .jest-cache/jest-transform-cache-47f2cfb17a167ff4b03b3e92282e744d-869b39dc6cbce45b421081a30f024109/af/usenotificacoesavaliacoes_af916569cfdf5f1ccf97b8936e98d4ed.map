{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-notificacoes-avaliacoes.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  AvaliacaoPendente,\n  EstatisticasNotificacoes,\n  NotificacaoConfig,\n  buscarAvaliacoesPendentesUsuario,\n  gerarEstatisticasNotificacoes,\n  buscarConfiguracaoNotificacao,\n  deveReceberNotificacao\n} from '@/lib/utils/notificacoes-avaliacoes';\n\ninterface UseNotificacoesAvaliacoesProps {\n  usuarioId: string;\n  autoRefresh?: boolean;\n  refreshInterval?: number; // em milissegundos\n}\n\ninterface UseNotificacoesAvaliacoesReturn {\n  avaliacoesPendentes: AvaliacaoPendente[];\n  estatisticas: EstatisticasNotificacoes | null;\n  configuracao: NotificacaoConfig | null;\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n  marcarComoLida: (avaliacaoId: string) => void;\n  atualizarConfiguracao: (novaConfig: Partial<NotificacaoConfig>) => Promise<void>;\n}\n\nexport function useNotificacoesAvaliacoes({\n  usuarioId,\n  autoRefresh = false,\n  refreshInterval = 60000 // 1 minuto\n}: UseNotificacoesAvaliacoesProps): UseNotificacoesAvaliacoesReturn {\n  const [avaliacoesPendentes, setAvaliacoesPendentes] = useState<AvaliacaoPendente[]>([]);\n  const [estatisticas, setEstatisticas] = useState<EstatisticasNotificacoes | null>(null);\n  const [configuracao, setConfiguracao] = useState<NotificacaoConfig | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Buscar avaliações pendentes\n      const avaliacoes = await buscarAvaliacoesPendentesUsuario(usuarioId);\n      setAvaliacoesPendentes(avaliacoes);\n\n      // Gerar estatísticas\n      const stats = await gerarEstatisticasNotificacoes(usuarioId);\n      setEstatisticas(stats);\n\n      // Buscar configuração\n      const config = await buscarConfiguracaoNotificacao(usuarioId);\n      setConfiguracao(config);\n\n    } catch (err) {\n      console.error('Erro ao buscar notificações:', err);\n      setError(err instanceof Error ? err.message : 'Erro desconhecido');\n    } finally {\n      setLoading(false);\n    }\n  }, [usuarioId]);\n\n  // Carregar dados iniciais\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Auto-refresh\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(() => {\n      fetchData();\n    }, refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval, fetchData]);\n\n  const marcarComoLida = useCallback((avaliacaoId: string) => {\n    // Por enquanto, apenas remove da lista local\n    // Em uma implementação real, isso seria persistido no backend\n    setAvaliacoesPendentes(prev => \n      prev.filter(avaliacao => avaliacao.id !== avaliacaoId)\n    );\n\n    // Atualizar estatísticas\n    if (estatisticas) {\n      setEstatisticas(prev => {\n        if (!prev) return null;\n        return {\n          ...prev,\n          totalPendentes: prev.totalPendentes - 1\n        };\n      });\n    }\n  }, [estatisticas]);\n\n  const atualizarConfiguracao = useCallback(async (novaConfig: Partial<NotificacaoConfig>) => {\n    try {\n      // Em uma implementação real, isso seria uma chamada para a API\n      if (configuracao) {\n        const configAtualizada = { ...configuracao, ...novaConfig };\n        setConfiguracao(configAtualizada);\n      }\n    } catch (err) {\n      console.error('Erro ao atualizar configuração:', err);\n      setError(err instanceof Error ? err.message : 'Erro ao atualizar configuração');\n    }\n  }, [configuracao]);\n\n  return {\n    avaliacoesPendentes,\n    estatisticas,\n    configuracao,\n    loading,\n    error,\n    refetch: fetchData,\n    marcarComoLida,\n    atualizarConfiguracao\n  };\n}\n\n// Hook simplificado para apenas verificar se há notificações\nexport function useTemNotificacoesPendentes(usuarioId: string): {\n  temNotificacoes: boolean;\n  quantidadeTotal: number;\n  quantidadeCriticas: number;\n  loading: boolean;\n} {\n  const [temNotificacoes, setTemNotificacoes] = useState(false);\n  const [quantidadeTotal, setQuantidadeTotal] = useState(0);\n  const [quantidadeCriticas, setQuantidadeCriticas] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const verificarNotificacoes = async () => {\n      try {\n        setLoading(true);\n        const avaliacoes = await buscarAvaliacoesPendentesUsuario(usuarioId);\n        const stats = await gerarEstatisticasNotificacoes(usuarioId);\n        \n        setTemNotificacoes(avaliacoes.length > 0);\n        setQuantidadeTotal(stats.totalPendentes);\n        setQuantidadeCriticas(stats.criticas);\n      } catch (err) {\n        console.error('Erro ao verificar notificações:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    verificarNotificacoes();\n  }, [usuarioId]);\n\n  return {\n    temNotificacoes,\n    quantidadeTotal,\n    quantidadeCriticas,\n    loading\n  };\n}\n\n// Hook para configurações de notificação\nexport function useConfiguracaoNotificacoes(usuarioId: string) {\n  const [configuracao, setConfiguracao] = useState<NotificacaoConfig | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const carregarConfiguracao = async () => {\n      try {\n        setLoading(true);\n        const config = await buscarConfiguracaoNotificacao(usuarioId);\n        setConfiguracao(config);\n      } catch (err) {\n        console.error('Erro ao carregar configuração:', err);\n        setError(err instanceof Error ? err.message : 'Erro desconhecido');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    carregarConfiguracao();\n  }, [usuarioId]);\n\n  const salvarConfiguracao = useCallback(async (novaConfig: Partial<NotificacaoConfig>) => {\n    try {\n      // Em uma implementação real, isso seria uma chamada para a API\n      if (configuracao) {\n        const configAtualizada = { ...configuracao, ...novaConfig };\n        setConfiguracao(configAtualizada);\n        return configAtualizada;\n      }\n      return null;\n    } catch (err) {\n      console.error('Erro ao salvar configuração:', err);\n      setError(err instanceof Error ? err.message : 'Erro ao salvar configuração');\n      return null;\n    }\n  }, [configuracao]);\n\n  const verificarPermissaoNotificacao = useCallback(async (tipo: 'email' | 'interface') => {\n    return await deveReceberNotificacao(usuarioId, tipo);\n  }, [usuarioId]);\n\n  return {\n    configuracao,\n    loading,\n    error,\n    salvarConfiguracao,\n    verificarPermissaoNotificacao\n  };\n}"],"names":["useConfiguracaoNotificacoes","useNotificacoesAvaliacoes","useTemNotificacoesPendentes","usuarioId","autoRefresh","refreshInterval","avaliacoesPendentes","setAvaliacoesPendentes","useState","estatisticas","setEstatisticas","configuracao","setConfiguracao","loading","setLoading","error","setError","fetchData","useCallback","avaliacoes","buscarAvaliacoesPendentesUsuario","stats","gerarEstatisticasNotificacoes","config","buscarConfiguracaoNotificacao","err","console","Error","message","useEffect","interval","setInterval","clearInterval","marcarComoLida","avaliacaoId","prev","filter","avaliacao","id","totalPendentes","atualizarConfiguracao","novaConfig","configAtualizada","refetch","temNotificacoes","setTemNotificacoes","quantidadeTotal","setQuantidadeTotal","quantidadeCriticas","setQuantidadeCriticas","verificarNotificacoes","length","criticas","carregarConfiguracao","salvarConfiguracao","verificarPermissaoNotificacao","tipo","deveReceberNotificacao"],"mappings":"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"}