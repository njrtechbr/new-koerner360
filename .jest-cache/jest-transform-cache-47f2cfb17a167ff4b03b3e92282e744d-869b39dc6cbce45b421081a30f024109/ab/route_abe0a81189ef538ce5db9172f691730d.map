{"version":3,"names":["cov_xiktbcegh","actualCoverage","s","GET","request","f","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","_atendentes","MENSAGENS_ERRO_ATENDENTES","SEM_PERMISSAO","atendentes","totalAtendentes","Promise","all","_prisma","prisma","atendente","findMany","include","usuario","select","ativo","_count","documentos","historicoAlteracoes","count","estatisticasBasicas","total","ativos","filter","a","length","inativos","suspensos","treinamento","ferias","afastados","licencaMedica","licencaMaternidade","estatisticasPorSetor","reduce","acc","setor","estatisticasPorCargo","cargo","estatisticasPorDepartamento","departamento","idades","dataNascimento","map","validacaoAtendentes","calcularIdade","estatisticasIdade","media","Math","round","sum","idade","minima","min","maxima","max","faixasEtarias","ate25","i","de26a35","de36a45","de46a55","acimaDe55","temposEmpresa","calcularTempoEmpresa","dataAdmissao","estatisticasTempoEmpresa","mediaMeses","tempo","minimoMeses","maximoMeses","faixasTempo","ate6Meses","t","de7a12Meses","de1a2Anos","de3a5Anos","acimaDe5Anos","salarios","salario","estatisticasSalario","minimo","maximo","mediana","sorted","sort","mid","floor","faixasSalariais","ate2000","de2001a4000","de4001a6000","de6001a10000","acimaDe10000","totalDocumentos","atendentesSemDocumentos","atendentesComFoto","foto","agora","Date","admissoesPorMes","Array","from","_","mes","getFullYear","getMonth","proximoMes","admissoes","toLocaleDateString","month","year","reverse","distribuicao","porSetor","porCargo","porDepartamento","demograficas","tempoEmpresa","financeiras","documentacao","percentualComFoto","tendencias","resumo","percentualAtivos","percentualInativos","idadeMediaAnos","tempoMedioEmpresaAnos","salarioMedio","geradoEm","toISOString","error","console","ERRO_INTERNO"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\estatisticas\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport {\n  MENSAGENS_ERRO_ATENDENTES,\n  validacaoAtendentes,\n} from '@/lib/validations/atendentes';\n\n/**\n * GET /api/atendentes/estatisticas\n * Retorna estatísticas gerais dos atendentes\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Buscar dados para estatísticas\n    const [atendentes, totalAtendentes] = await Promise.all([\n      prisma.atendente.findMany({\n        include: {\n          usuario: {\n            select: {\n              ativo: true,\n            },\n          },\n          _count: {\n            select: {\n              documentos: true,\n              historicoAlteracoes: true,\n            },\n          },\n        },\n      }),\n      prisma.atendente.count(),\n    ]);\n\n    // Calcular estatísticas básicas\n    const estatisticasBasicas = {\n      total: totalAtendentes,\n      ativos: atendentes.filter(a => a.status === 'ATIVO' && a.usuario.ativo)\n        .length,\n      inativos: atendentes.filter(\n        a => a.status === 'INATIVO' || !a.usuario.ativo\n      ).length,\n      suspensos: atendentes.filter(a => a.status === 'SUSPENSO').length,\n      treinamento: atendentes.filter(a => a.status === 'TREINAMENTO').length,\n      ferias: atendentes.filter(a => a.status === 'FERIAS').length,\n      afastados: atendentes.filter(a => a.status === 'AFASTADO').length,\n      licencaMedica: atendentes.filter(a => a.status === 'LICENCA_MEDICA')\n        .length,\n      licencaMaternidade: atendentes.filter(\n        a => a.status === 'LICENCA_MATERNIDADE'\n      ).length,\n    };\n\n    // Estatísticas por setor\n    const estatisticasPorSetor = atendentes.reduce(\n      (acc, atendente) => {\n        const setor = atendente.setor || 'Não informado';\n        if (!acc[setor]) {\n          acc[setor] = {\n            total: 0,\n            ativos: 0,\n            inativos: 0,\n          };\n        }\n        acc[setor].total++;\n        if (atendente.status === 'ATIVO' && atendente.usuario.ativo) {\n          acc[setor].ativos++;\n        } else {\n          acc[setor].inativos++;\n        }\n        return acc;\n      },\n      {} as Record<string, { total: number; ativos: number; inativos: number }>\n    );\n\n    // Estatísticas por cargo\n    const estatisticasPorCargo = atendentes.reduce(\n      (acc, atendente) => {\n        const cargo = atendente.cargo || 'Não informado';\n        if (!acc[cargo]) {\n          acc[cargo] = {\n            total: 0,\n            ativos: 0,\n            inativos: 0,\n          };\n        }\n        acc[cargo].total++;\n        if (atendente.status === 'ATIVO' && atendente.usuario.ativo) {\n          acc[cargo].ativos++;\n        } else {\n          acc[cargo].inativos++;\n        }\n        return acc;\n      },\n      {} as Record<string, { total: number; ativos: number; inativos: number }>\n    );\n\n    // Estatísticas por departamento\n    const estatisticasPorDepartamento = atendentes.reduce(\n      (acc, atendente) => {\n        const departamento = atendente.departamento || 'Não informado';\n        if (!acc[departamento]) {\n          acc[departamento] = {\n            total: 0,\n            ativos: 0,\n            inativos: 0,\n          };\n        }\n        acc[departamento].total++;\n        if (atendente.status === 'ATIVO' && atendente.usuario.ativo) {\n          acc[departamento].ativos++;\n        } else {\n          acc[departamento].inativos++;\n        }\n        return acc;\n      },\n      {} as Record<string, { total: number; ativos: number; inativos: number }>\n    );\n\n    // Estatísticas de idade\n    const idades = atendentes\n      .filter(a => a.dataNascimento)\n      .map(a => validacaoAtendentes.calcularIdade(a.dataNascimento!));\n\n    const estatisticasIdade = {\n      media:\n        idades.length > 0\n          ? Math.round(\n              idades.reduce((sum, idade) => sum + idade, 0) / idades.length\n            )\n          : 0,\n      minima: idades.length > 0 ? Math.min(...idades) : 0,\n      maxima: idades.length > 0 ? Math.max(...idades) : 0,\n      faixasEtarias: {\n        ate25: idades.filter(i => i <= 25).length,\n        de26a35: idades.filter(i => i >= 26 && i <= 35).length,\n        de36a45: idades.filter(i => i >= 36 && i <= 45).length,\n        de46a55: idades.filter(i => i >= 46 && i <= 55).length,\n        acimaDe55: idades.filter(i => i > 55).length,\n      },\n    };\n\n    // Estatísticas de tempo de empresa\n    const temposEmpresa = atendentes.map(a =>\n      validacaoAtendentes.calcularTempoEmpresa(a.dataAdmissao)\n    );\n\n    const estatisticasTempoEmpresa = {\n      mediaMeses:\n        temposEmpresa.length > 0\n          ? Math.round(\n              temposEmpresa.reduce((sum, tempo) => sum + tempo, 0) /\n                temposEmpresa.length\n            )\n          : 0,\n      minimoMeses: temposEmpresa.length > 0 ? Math.min(...temposEmpresa) : 0,\n      maximoMeses: temposEmpresa.length > 0 ? Math.max(...temposEmpresa) : 0,\n      faixasTempo: {\n        ate6Meses: temposEmpresa.filter(t => t <= 6).length,\n        de7a12Meses: temposEmpresa.filter(t => t >= 7 && t <= 12).length,\n        de1a2Anos: temposEmpresa.filter(t => t >= 13 && t <= 24).length,\n        de3a5Anos: temposEmpresa.filter(t => t >= 25 && t <= 60).length,\n        acimaDe5Anos: temposEmpresa.filter(t => t > 60).length,\n      },\n    };\n\n    // Estatísticas de salário (apenas para atendentes com salário informado)\n    const salarios = atendentes\n      .filter(a => a.salario && a.salario > 0)\n      .map(a => a.salario!);\n\n    const estatisticasSalario = {\n      media:\n        salarios.length > 0\n          ? Math.round(\n              salarios.reduce((sum, salario) => sum + salario, 0) /\n                salarios.length\n            )\n          : 0,\n      minimo: salarios.length > 0 ? Math.min(...salarios) : 0,\n      maximo: salarios.length > 0 ? Math.max(...salarios) : 0,\n      mediana:\n        salarios.length > 0\n          ? (() => {\n              const sorted = [...salarios].sort((a, b) => a - b);\n              const mid = Math.floor(sorted.length / 2);\n              return sorted.length % 2 !== 0\n                ? sorted[mid]\n                : Math.round((sorted[mid - 1] + sorted[mid]) / 2);\n            })()\n          : 0,\n      faixasSalariais: {\n        ate2000: salarios.filter(s => s <= 2000).length,\n        de2001a4000: salarios.filter(s => s >= 2001 && s <= 4000).length,\n        de4001a6000: salarios.filter(s => s >= 4001 && s <= 6000).length,\n        de6001a10000: salarios.filter(s => s >= 6001 && s <= 10000).length,\n        acimaDe10000: salarios.filter(s => s > 10000).length,\n      },\n    };\n\n    // Estatísticas de documentos\n    const totalDocumentos = atendentes.reduce(\n      (sum, a) => sum + a._count.documentos,\n      0\n    );\n    const atendentesSemDocumentos = atendentes.filter(\n      a => a._count.documentos === 0\n    ).length;\n    const atendentesComFoto = atendentes.filter(a => a.foto).length;\n\n    // Estatísticas de admissões por mês (últimos 12 meses)\n    const agora = new Date();\n    const admissoesPorMes = Array.from({ length: 12 }, (_, i) => {\n      const mes = new Date(agora.getFullYear(), agora.getMonth() - i, 1);\n      const proximoMes = new Date(\n        agora.getFullYear(),\n        agora.getMonth() - i + 1,\n        1\n      );\n\n      const admissoes = atendentes.filter(\n        a => a.dataAdmissao >= mes && a.dataAdmissao < proximoMes\n      ).length;\n\n      return {\n        mes: mes.toLocaleDateString('pt-BR', {\n          month: 'short',\n          year: 'numeric',\n        }),\n        admissoes,\n      };\n    }).reverse();\n\n    return NextResponse.json({\n      estatisticasBasicas,\n      distribuicao: {\n        porSetor: estatisticasPorSetor,\n        porCargo: estatisticasPorCargo,\n        porDepartamento: estatisticasPorDepartamento,\n      },\n      demograficas: {\n        idade: estatisticasIdade,\n        tempoEmpresa: estatisticasTempoEmpresa,\n      },\n      financeiras: {\n        salario: estatisticasSalario,\n      },\n      documentacao: {\n        totalDocumentos,\n        atendentesSemDocumentos,\n        atendentesComFoto,\n        percentualComFoto:\n          totalAtendentes > 0\n            ? Math.round((atendentesComFoto / totalAtendentes) * 100)\n            : 0,\n      },\n      tendencias: {\n        admissoesPorMes,\n      },\n      resumo: {\n        percentualAtivos:\n          totalAtendentes > 0\n            ? Math.round((estatisticasBasicas.ativos / totalAtendentes) * 100)\n            : 0,\n        percentualInativos:\n          totalAtendentes > 0\n            ? Math.round((estatisticasBasicas.inativos / totalAtendentes) * 100)\n            : 0,\n        idadeMediaAnos: Math.round(estatisticasIdade.media),\n        tempoMedioEmpresaAnos: Math.round(\n          estatisticasTempoEmpresa.mediaMeses / 12\n        ),\n        salarioMedio: estatisticasSalario.media,\n      },\n      geradoEm: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('Erro ao gerar estatísticas de atendentes:', error);\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}