488d64a9c66a75bc120552fc362a2e53
"use strict";

/* istanbul ignore next */
function cov_2mzqhq5o98() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\verify-reset-token\\route.ts";
  var hash = "460179b8ddda7be5356ac7ca61f61578fa037d6c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\verify-reset-token\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 13
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 49
        }
      },
      "6": {
        start: {
          line: 15,
          column: 32
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "7": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "8": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "9": {
        start: {
          line: 22,
          column: 26
        },
        end: {
          line: 22,
          column: 61
        }
      },
      "10": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "11": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "12": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "13": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "14": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 62
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "16": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "17": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 19
          }
        },
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\verify-reset-token\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { prisma } from '@/lib/prisma';\n\n// Schema de valida\xE7\xE3o para verifica\xE7\xE3o de token\nconst esquemaVerificacaoToken = z.object({\n  token: z.string().min(1, 'Token \xE9 obrigat\xF3rio'),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validar entrada\n    const { token } = esquemaVerificacaoToken.parse(body);\n\n    // Verificar se o token existe e n\xE3o expirou\n    const usuario = await prisma.usuario.findFirst({\n      where: {\n        tokenRecuperacao: token,\n        expiracaoTokenRecuperacao: {\n          gt: new Date(), // Token ainda n\xE3o expirou\n        },\n      },\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { message: 'Token inv\xE1lido ou expirado' },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ message: 'Token v\xE1lido' }, { status: 200 });\n  } catch (error) {\n    console.error('Erro na verifica\xE7\xE3o de token:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { message: 'Dados inv\xE1lidos', errors: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { message: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["POST", "esquemaVerificacaoToken", "z", "object", "token", "string", "min", "request", "body", "json", "parse", "usuario", "prisma", "findFirst", "where", "tokenRecuperacao", "expiracaoTokenRecuperacao", "gt", "Date", "NextResponse", "message", "status", "error", "console", "ZodError", "errors"],
      mappings: ";;;;+BASsBA;;;eAAAA;;;wBAToB;qBACxB;wBACK;AAEvB,gDAAgD;AAChD,MAAMC,0BAA0BC,MAAC,CAACC,MAAM,CAAC;IACvCC,OAAOF,MAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAG;AAC3B;AAEO,eAAeN,KAAKO,OAAoB;IAC7C,IAAI;QACF,MAAMC,OAAO,MAAMD,QAAQE,IAAI;QAE/B,kBAAkB;QAClB,MAAM,EAAEL,KAAK,EAAE,GAAGH,wBAAwBS,KAAK,CAACF;QAEhD,4CAA4C;QAC5C,MAAMG,UAAU,MAAMC,cAAM,CAACD,OAAO,CAACE,SAAS,CAAC;YAC7CC,OAAO;gBACLC,kBAAkBX;gBAClBY,2BAA2B;oBACzBC,IAAI,IAAIC;gBACV;YACF;QACF;QAEA,IAAI,CAACP,SAAS;YACZ,OAAOQ,oBAAY,CAACV,IAAI,CACtB;gBAAEW,SAAS;YAA6B,GACxC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,OAAOF,oBAAY,CAACV,IAAI,CAAC;YAAEW,SAAS;QAAe,GAAG;YAAEC,QAAQ;QAAI;IACtE,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,iCAAiCA;QAE/C,IAAIA,iBAAiBpB,MAAC,CAACsB,QAAQ,EAAE;YAC/B,OAAOL,oBAAY,CAACV,IAAI,CACtB;gBAAEW,SAAS;gBAAmBK,QAAQH,MAAMG,MAAM;YAAC,GACnD;gBAAEJ,QAAQ;YAAI;QAElB;QAEA,OAAOF,oBAAY,CAACV,IAAI,CACtB;YAAEW,SAAS;QAA2B,GACtC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "460179b8ddda7be5356ac7ca61f61578fa037d6c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mzqhq5o98 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mzqhq5o98();
cov_2mzqhq5o98().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2mzqhq5o98().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2mzqhq5o98().f[0]++;
    cov_2mzqhq5o98().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2mzqhq5o98().s[3]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_2mzqhq5o98().s[4]++, require("zod"));
const _prisma =
/* istanbul ignore next */
(cov_2mzqhq5o98().s[5]++, require("../../../../lib/prisma"));
// Schema de validação para verificação de token
const esquemaVerificacaoToken =
/* istanbul ignore next */
(cov_2mzqhq5o98().s[6]++, _zod.z.object({
  token: _zod.z.string().min(1, 'Token é obrigatório')
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_2mzqhq5o98().f[1]++;
  cov_2mzqhq5o98().s[7]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2mzqhq5o98().s[8]++, await request.json());
    // Validar entrada
    const {
      token
    } =
    /* istanbul ignore next */
    (cov_2mzqhq5o98().s[9]++, esquemaVerificacaoToken.parse(body));
    // Verificar se o token existe e não expirou
    const usuario =
    /* istanbul ignore next */
    (cov_2mzqhq5o98().s[10]++, await _prisma.prisma.usuario.findFirst({
      where: {
        tokenRecuperacao: token,
        expiracaoTokenRecuperacao: {
          gt: new Date()
        }
      }
    }));
    /* istanbul ignore next */
    cov_2mzqhq5o98().s[11]++;
    if (!usuario) {
      /* istanbul ignore next */
      cov_2mzqhq5o98().b[0][0]++;
      cov_2mzqhq5o98().s[12]++;
      return _server.NextResponse.json({
        message: 'Token inválido ou expirado'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mzqhq5o98().b[0][1]++;
    }
    cov_2mzqhq5o98().s[13]++;
    return _server.NextResponse.json({
      message: 'Token válido'
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2mzqhq5o98().s[14]++;
    console.error('Erro na verificação de token:', error);
    /* istanbul ignore next */
    cov_2mzqhq5o98().s[15]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_2mzqhq5o98().b[1][0]++;
      cov_2mzqhq5o98().s[16]++;
      return _server.NextResponse.json({
        message: 'Dados inválidos',
        errors: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mzqhq5o98().b[1][1]++;
    }
    cov_2mzqhq5o98().s[17]++;
    return _server.NextResponse.json({
      message: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMm16cWhxNW85OCIsImFjdHVhbENvdmVyYWdlIiwicyIsIlBPU1QiLCJlc3F1ZW1hVmVyaWZpY2FjYW9Ub2tlbiIsIl96b2QiLCJ6Iiwib2JqZWN0IiwidG9rZW4iLCJzdHJpbmciLCJtaW4iLCJyZXF1ZXN0IiwiZiIsImJvZHkiLCJqc29uIiwicGFyc2UiLCJ1c3VhcmlvIiwiX3ByaXNtYSIsInByaXNtYSIsImZpbmRGaXJzdCIsIndoZXJlIiwidG9rZW5SZWN1cGVyYWNhbyIsImV4cGlyYWNhb1Rva2VuUmVjdXBlcmFjYW8iLCJndCIsIkRhdGUiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJlcnJvciIsImNvbnNvbGUiLCJab2RFcnJvciIsImVycm9ycyJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmVyZXUgSnJcXERvY3VtZW50c1xcRGV2XFxuZXdcXHNyY1xcYXBwXFxhcGlcXGF1dGhcXHZlcmlmeS1yZXNldC10b2tlblxccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQC9saWIvcHJpc21hJztcblxuLy8gU2NoZW1hIGRlIHZhbGlkYcOnw6NvIHBhcmEgdmVyaWZpY2HDp8OjbyBkZSB0b2tlblxuY29uc3QgZXNxdWVtYVZlcmlmaWNhY2FvVG9rZW4gPSB6Lm9iamVjdCh7XG4gIHRva2VuOiB6LnN0cmluZygpLm1pbigxLCAnVG9rZW4gw6kgb2JyaWdhdMOzcmlvJyksXG59KTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG5cbiAgICAvLyBWYWxpZGFyIGVudHJhZGFcbiAgICBjb25zdCB7IHRva2VuIH0gPSBlc3F1ZW1hVmVyaWZpY2FjYW9Ub2tlbi5wYXJzZShib2R5KTtcblxuICAgIC8vIFZlcmlmaWNhciBzZSBvIHRva2VuIGV4aXN0ZSBlIG7Do28gZXhwaXJvdVxuICAgIGNvbnN0IHVzdWFyaW8gPSBhd2FpdCBwcmlzbWEudXN1YXJpby5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgdG9rZW5SZWN1cGVyYWNhbzogdG9rZW4sXG4gICAgICAgIGV4cGlyYWNhb1Rva2VuUmVjdXBlcmFjYW86IHtcbiAgICAgICAgICBndDogbmV3IERhdGUoKSwgLy8gVG9rZW4gYWluZGEgbsOjbyBleHBpcm91XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCF1c3VhcmlvKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgbWVzc2FnZTogJ1Rva2VuIGludsOhbGlkbyBvdSBleHBpcmFkbycgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6ICdUb2tlbiB2w6FsaWRvJyB9LCB7IHN0YXR1czogMjAwIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm8gbmEgdmVyaWZpY2HDp8OjbyBkZSB0b2tlbjonLCBlcnJvcik7XG5cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB6LlpvZEVycm9yKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgbWVzc2FnZTogJ0RhZG9zIGludsOhbGlkb3MnLCBlcnJvcnM6IGVycm9yLmVycm9ycyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBtZXNzYWdlOiAnRXJybyBpbnRlcm5vIGRvIHNlcnZpZG9yJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNUztJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBQUFBLGNBQUEsR0FBQUUsQ0FBQTs7Ozs7OytCQUdhOzs7Ozs7V0FBQUMsSUFBQTs7Ozs7a0NBVG9COzs7a0NBQ3hCOzs7a0NBQ0s7QUFFdkI7QUFDQSxNQUFNQyx1QkFBQTtBQUFBO0FBQUEsQ0FBQUosY0FBQSxHQUFBRSxDQUFBLE9BQTBCRyxJQUFBLENBQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0VBQ3ZDQyxLQUFBLEVBQU9ILElBQUEsQ0FBQUMsQ0FBQyxDQUFDRyxNQUFNLEdBQUdDLEdBQUcsQ0FBQyxHQUFHO0FBQzNCO0FBRU8sZUFBZVAsS0FBS1EsT0FBb0I7RUFBQTtFQUFBWCxjQUFBLEdBQUFZLENBQUE7RUFBQVosY0FBQSxHQUFBRSxDQUFBO0VBQzdDLElBQUk7SUFDRixNQUFNVyxJQUFBO0lBQUE7SUFBQSxDQUFBYixjQUFBLEdBQUFFLENBQUEsT0FBTyxNQUFNUyxPQUFBLENBQVFHLElBQUk7SUFFL0I7SUFDQSxNQUFNO01BQUVOO0lBQUssQ0FBRTtJQUFBO0lBQUEsQ0FBQVIsY0FBQSxHQUFBRSxDQUFBLE9BQUdFLHVCQUFBLENBQXdCVyxLQUFLLENBQUNGLElBQUE7SUFFaEQ7SUFDQSxNQUFNRyxPQUFBO0lBQUE7SUFBQSxDQUFBaEIsY0FBQSxHQUFBRSxDQUFBLFFBQVUsTUFBTWUsT0FBQSxDQUFBQyxNQUFNLENBQUNGLE9BQU8sQ0FBQ0csU0FBUyxDQUFDO01BQzdDQyxLQUFBLEVBQU87UUFDTEMsZ0JBQUEsRUFBa0JiLEtBQUE7UUFDbEJjLHlCQUFBLEVBQTJCO1VBQ3pCQyxFQUFBLEVBQUksSUFBSUMsSUFBQTtRQUNWO01BQ0Y7SUFDRjtJQUFBO0lBQUF4QixjQUFBLEdBQUFFLENBQUE7SUFFQSxJQUFJLENBQUNjLE9BQUEsRUFBUztNQUFBO01BQUFoQixjQUFBLEdBQUF5QixDQUFBO01BQUF6QixjQUFBLEdBQUFFLENBQUE7TUFDWixPQUFPd0IsT0FBQSxDQUFBQyxZQUFZLENBQUNiLElBQUksQ0FDdEI7UUFBRWMsT0FBQSxFQUFTO01BQTZCLEdBQ3hDO1FBQUVDLE1BQUEsRUFBUTtNQUFJO0lBRWxCO0lBQUE7SUFBQTtNQUFBN0IsY0FBQSxHQUFBeUIsQ0FBQTtJQUFBO0lBQUF6QixjQUFBLEdBQUFFLENBQUE7SUFFQSxPQUFPd0IsT0FBQSxDQUFBQyxZQUFZLENBQUNiLElBQUksQ0FBQztNQUFFYyxPQUFBLEVBQVM7SUFBZSxHQUFHO01BQUVDLE1BQUEsRUFBUTtJQUFJO0VBQ3RFLEVBQUUsT0FBT0MsS0FBQSxFQUFPO0lBQUE7SUFBQTlCLGNBQUEsR0FBQUUsQ0FBQTtJQUNkNkIsT0FBQSxDQUFRRCxLQUFLLENBQUMsaUNBQWlDQSxLQUFBO0lBQUE7SUFBQTlCLGNBQUEsR0FBQUUsQ0FBQTtJQUUvQyxJQUFJNEIsS0FBQSxZQUFpQnpCLElBQUEsQ0FBQUMsQ0FBQyxDQUFDMEIsUUFBUSxFQUFFO01BQUE7TUFBQWhDLGNBQUEsR0FBQXlCLENBQUE7TUFBQXpCLGNBQUEsR0FBQUUsQ0FBQTtNQUMvQixPQUFPd0IsT0FBQSxDQUFBQyxZQUFZLENBQUNiLElBQUksQ0FDdEI7UUFBRWMsT0FBQSxFQUFTO1FBQW1CSyxNQUFBLEVBQVFILEtBQUEsQ0FBTUc7TUFBTyxHQUNuRDtRQUFFSixNQUFBLEVBQVE7TUFBSTtJQUVsQjtJQUFBO0lBQUE7TUFBQTdCLGNBQUEsR0FBQXlCLENBQUE7SUFBQTtJQUFBekIsY0FBQSxHQUFBRSxDQUFBO0lBRUEsT0FBT3dCLE9BQUEsQ0FBQUMsWUFBWSxDQUFDYixJQUFJLENBQ3RCO01BQUVjLE9BQUEsRUFBUztJQUEyQixHQUN0QztNQUFFQyxNQUFBLEVBQVE7SUFBSTtFQUVsQjtBQUNGIiwiaWdub3JlTGlzdCI6W119