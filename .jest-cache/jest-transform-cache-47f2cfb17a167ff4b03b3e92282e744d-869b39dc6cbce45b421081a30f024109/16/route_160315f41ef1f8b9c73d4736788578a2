8d59c2101edd4dcc9ad42f145986e91a
"use strict";

/* istanbul ignore next */
function cov_1yqq44it02() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\metricas\\route.ts";
  var hash = "64d8da3b10013551cf70a108733ea564920432b5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\metricas\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 48
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 52
        }
      },
      "7": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "8": {
        start: {
          line: 16,
          column: 13
        },
        end: {
          line: 16,
          column: 27
        }
      },
      "9": {
        start: {
          line: 19,
          column: 34
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "10": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 238,
          column: 5
        }
      },
      "11": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 33,
          column: 80
        }
      },
      "12": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "13": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "14": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "15": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "16": {
        start: {
          line: 54,
          column: 28
        },
        end: {
          line: 54,
          column: 75
        }
      },
      "17": {
        start: {
          line: 56,
          column: 26
        },
        end: {
          line: 74,
          column: 10
        }
      },
      "18": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "19": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "20": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "21": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "22": {
        start: {
          line: 91,
          column: 33
        },
        end: {
          line: 91,
          column: 53
        }
      },
      "23": {
        start: {
          line: 92,
          column: 24
        },
        end: {
          line: 96,
          column: 10
        }
      },
      "24": {
        start: {
          line: 99,
          column: 22
        },
        end: {
          line: 99,
          column: 32
        }
      },
      "25": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "26": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 54
        }
      },
      "27": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 48
        }
      },
      "28": {
        start: {
          line: 104,
          column: 26
        },
        end: {
          line: 104,
          column: 36
        }
      },
      "29": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "30": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 85
        }
      },
      "31": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 108,
          column: 26
        }
      },
      "32": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 86
        }
      },
      "33": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 26
        }
      },
      "34": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 86
        }
      },
      "35": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 26
        }
      },
      "36": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 116,
          column: 87
        }
      },
      "37": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 26
        }
      },
      "38": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 86
        }
      },
      "39": {
        start: {
          line: 123,
          column: 57
        },
        end: {
          line: 167,
          column: 10
        }
      },
      "40": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 169,
          column: 126
        }
      },
      "41": {
        start: {
          line: 169,
          column: 85
        },
        end: {
          line: 169,
          column: 98
        }
      },
      "42": {
        start: {
          line: 170,
          column: 32
        },
        end: {
          line: 170,
          column: 45
        }
      },
      "43": {
        start: {
          line: 172,
          column: 33
        },
        end: {
          line: 175,
          column: 14
        }
      },
      "44": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 55
        }
      },
      "45": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 23
        }
      },
      "46": {
        start: {
          line: 177,
          column: 34
        },
        end: {
          line: 177,
          column: 137
        }
      },
      "47": {
        start: {
          line: 179,
          column: 25
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "48": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      },
      "49": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 70
        }
      },
      "50": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "51": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 231,
          column: 15
        }
      },
      "52": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 237,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 18
          }
        },
        loc: {
          start: {
            line: 30,
            column: 40
          },
          end: {
            line: 239,
            column: 1
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 169,
            column: 74
          },
          end: {
            line: 169,
            column: 75
          }
        },
        loc: {
          start: {
            line: 169,
            column: 85
          },
          end: {
            line: 169,
            column: 98
          }
        },
        line: 169
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 172,
            column: 50
          },
          end: {
            line: 172,
            column: 51
          }
        },
        loc: {
          start: {
            line: 172,
            column: 63
          },
          end: {
            line: 175,
            column: 9
          }
        },
        line: 172
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "2": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "3": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "4": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 49
          }
        }, {
          start: {
            line: 83,
            column: 53
          },
          end: {
            line: 83,
            column: 92
          }
        }],
        line: 83
      },
      "5": {
        loc: {
          start: {
            line: 95,
            column: 21
          },
          end: {
            line: 95,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 21
          },
          end: {
            line: 95,
            column: 48
          }
        }, {
          start: {
            line: 95,
            column: 52
          },
          end: {
            line: 95,
            column: 57
          }
        }],
        line: 95
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: 103,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 100,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 100,
            column: 40
          }
        }, {
          start: {
            line: 100,
            column: 44
          },
          end: {
            line: 100,
            column: 62
          }
        }, {
          start: {
            line: 100,
            column: 66
          },
          end: {
            line: 100,
            column: 81
          }
        }],
        line: 100
      },
      "8": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 108,
            column: 26
          }
        }, {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 26
          }
        }, {
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 114,
            column: 26
          }
        }, {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 117,
            column: 26
          }
        }, {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 119,
            column: 86
          }
        }],
        line: 105
      },
      "9": {
        loc: {
          start: {
            line: 169,
            column: 32
          },
          end: {
            line: 169,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 56
          },
          end: {
            line: 169,
            column: 122
          }
        }, {
          start: {
            line: 169,
            column: 125
          },
          end: {
            line: 169,
            column: 126
          }
        }],
        line: 169
      },
      "10": {
        loc: {
          start: {
            line: 173,
            column: 30
          },
          end: {
            line: 173,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 30
          },
          end: {
            line: 173,
            column: 44
          }
        }, {
          start: {
            line: 173,
            column: 48
          },
          end: {
            line: 173,
            column: 49
          }
        }],
        line: 173
      },
      "11": {
        loc: {
          start: {
            line: 202,
            column: 24
          },
          end: {
            line: 206,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 42
          },
          end: {
            line: 206,
            column: 17
          }
        }, {
          start: {
            line: 206,
            column: 20
          },
          end: {
            line: 206,
            column: 24
          }
        }],
        line: 202
      },
      "12": {
        loc: {
          start: {
            line: 213,
            column: 31
          },
          end: {
            line: 213,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 213,
            column: 54
          },
          end: {
            line: 213,
            column: 60
          }
        }, {
          start: {
            line: 213,
            column: 63
          },
          end: {
            line: 213,
            column: 103
          }
        }],
        line: 213
      },
      "13": {
        loc: {
          start: {
            line: 213,
            column: 63
          },
          end: {
            line: 213,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 213,
            column: 86
          },
          end: {
            line: 213,
            column: 93
          }
        }, {
          start: {
            line: 213,
            column: 96
          },
          end: {
            line: 213,
            column: 103
          }
        }],
        line: 213
      },
      "14": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\metricas\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { idAtendenteSchema } from '@/lib/validations';\nimport { ZodError } from 'zod';\nimport { z } from 'zod';\n\n/**\n * Schema para filtros de m\xE9tricas\n */\nconst filtrosMetricasSchema = z.object({\n  dataInicio: z.string().datetime().optional(),\n  dataFim: z.string().datetime().optional(),\n  periodo: z.enum(['7d', '30d', '90d', '1y', 'custom']).default('30d'),\n});\n\n/**\n * Interface para par\xE2metros da rota\n */\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * GET /api/atendentes/[id]/metricas\n * Busca m\xE9tricas de desempenho de um atendente espec\xEDfico\n */\nexport async function GET(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'N\xE3o autorizado' }, { status: 401 });\n    }\n\n    // Verificar permiss\xF5es\n    if (!['ADMIN', 'GERENTE', 'ATENDENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: 'Sem permiss\xE3o para acessar m\xE9tricas' },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID do atendente\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Verificar se o atendente existe\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      select: {\n        id: true,\n        usuarioId: true,\n        status: true,\n        dataAdmissao: true,\n        cargo: true,\n        setor: true,\n        usuario: {\n          select: {\n            nome: true,\n            email: true,\n          },\n        },\n      },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: 'Atendente n\xE3o encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o atendente pode ver apenas suas pr\xF3prias m\xE9tricas\n    if (\n      session.user.userType === 'ATENDENTE' &&\n      atendente.usuarioId !== session.user.id\n    ) {\n      return NextResponse.json(\n        { erro: 'Sem permiss\xE3o para acessar estas m\xE9tricas' },\n        { status: 403 }\n      );\n    }\n\n    // Processar filtros da query string\n    const { searchParams } = new URL(request.url);\n    const filtros = filtrosMetricasSchema.parse({\n      dataInicio: searchParams.get('dataInicio'),\n      dataFim: searchParams.get('dataFim'),\n      periodo: searchParams.get('periodo') || '30d',\n    });\n\n    // Calcular datas baseadas no per\xEDodo\n    let dataInicio: Date;\n    let dataFim: Date = new Date();\n\n    if (filtros.periodo === 'custom' && filtros.dataInicio && filtros.dataFim) {\n      dataInicio = new Date(filtros.dataInicio);\n      dataFim = new Date(filtros.dataFim);\n    } else {\n      const agora = new Date();\n      switch (filtros.periodo) {\n        case '7d':\n          dataInicio = new Date(agora.getTime() - 7 * 24 * 60 * 60 * 1000);\n          break;\n        case '30d':\n          dataInicio = new Date(agora.getTime() - 30 * 24 * 60 * 60 * 1000);\n          break;\n        case '90d':\n          dataInicio = new Date(agora.getTime() - 90 * 24 * 60 * 60 * 1000);\n          break;\n        case '1y':\n          dataInicio = new Date(agora.getTime() - 365 * 24 * 60 * 60 * 1000);\n          break;\n        default:\n          dataInicio = new Date(agora.getTime() - 30 * 24 * 60 * 60 * 1000);\n      }\n    }\n\n    // Buscar m\xE9tricas b\xE1sicas\n    const [documentosCount, avaliacoes, historico] = await Promise.all([\n      // Contagem de documentos\n      prisma.documentoAtendente.count({\n        where: {\n          atendenteId,\n          ativo: true,\n          criadoEm: {\n            gte: dataInicio,\n            lte: dataFim,\n          },\n        },\n      }),\n\n      // Avalia\xE7\xF5es no per\xEDodo\n      prisma.avaliacao.findMany({\n        where: {\n          atendenteId,\n          dataAvaliacao: {\n            gte: dataInicio,\n            lte: dataFim,\n          },\n        },\n        select: {\n          nota: true,\n          dataAvaliacao: true,\n          comentario: true,\n        },\n        orderBy: {\n          dataAvaliacao: 'desc',\n        },\n      }),\n\n      // Hist\xF3rico de altera\xE7\xF5es\n      prisma.historicoAlteracaoAtendente.findMany({\n        where: {\n          atendenteId,\n          criadoEm: {\n            gte: dataInicio,\n            lte: dataFim,\n          },\n        },\n        select: {\n          tipo: true,\n          criadoEm: true,\n        },\n      }),\n    ]);\n\n    // Calcular m\xE9tricas de avalia\xE7\xE3o\n    const mediaAvaliacoes =\n      avaliacoes.length > 0\n        ? avaliacoes.reduce((acc, av) => acc + av.nota, 0) / avaliacoes.length\n        : 0;\n\n    const ultimaAvaliacao = avaliacoes[0];\n\n    // Calcular atividade por tipo\n    const atividadePorTipo = historico.reduce(\n      (acc, item) => {\n        acc[item.tipo] = (acc[item.tipo] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>\n    );\n\n    // Calcular dias desde a admiss\xE3o\n    const diasDesdeAdmissao = Math.floor(\n      (new Date().getTime() - new Date(atendente.dataAdmissao).getTime()) /\n        (1000 * 60 * 60 * 24)\n    );\n\n    // Montar resposta com m\xE9tricas\n    const metricas = {\n      atendente: {\n        id: atendente.id,\n        nome: atendente.usuario.nome,\n        email: atendente.usuario.email,\n        cargo: atendente.cargo,\n        setor: atendente.setor,\n        status: atendente.status,\n        dataAdmissao: atendente.dataAdmissao,\n        diasDesdeAdmissao,\n      },\n      periodo: {\n        dataInicio,\n        dataFim,\n        periodo: filtros.periodo,\n      },\n      documentos: {\n        total: documentosCount,\n        ativosNoPeriodo: documentosCount,\n      },\n      avaliacoes: {\n        total: avaliacoes.length,\n        media: Number(mediaAvaliacoes.toFixed(2)),\n        ultima: ultimaAvaliacao\n          ? {\n              nota: ultimaAvaliacao.nota,\n              data: ultimaAvaliacao.dataAvaliacao,\n              comentario: ultimaAvaliacao.comentario,\n            }\n          : null,\n      },\n      atividade: {\n        totalAlteracoes: historico.length,\n        porTipo: atividadePorTipo,\n      },\n      resumo: {\n        produtividade:\n          mediaAvaliacoes >= 8\n            ? 'Alta'\n            : mediaAvaliacoes >= 6\n              ? 'M\xE9dia'\n              : 'Baixa',\n        statusGeral: atendente.status,\n        documentosAtualizados: documentosCount > 0,\n        avaliacoesRecentes: avaliacoes.length > 0,\n      },\n    };\n\n    return NextResponse.json({\n      metricas,\n      geradoEm: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('Erro ao buscar m\xE9tricas do atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: 'Dados inv\xE1lidos',\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["GET", "filtrosMetricasSchema", "z", "object", "dataInicio", "string", "datetime", "optional", "dataFim", "periodo", "enum", "default", "request", "params", "session", "getServerSession", "authOptions", "user", "NextResponse", "json", "erro", "status", "includes", "userType", "atendenteId", "idAtendenteSchema", "parse", "id", "atendente", "prisma", "findUnique", "where", "select", "usuarioId", "dataAdmissao", "cargo", "setor", "usuario", "nome", "email", "searchParams", "URL", "url", "filtros", "get", "Date", "agora", "getTime", "documentosCount", "avaliacoes", "historico", "Promise", "all", "documentoAtendente", "count", "ativo", "criadoEm", "gte", "lte", "avaliacao", "findMany", "dataAvaliacao", "nota", "comentario", "orderBy", "historicoAlteracaoAtendente", "tipo", "mediaAvaliacoes", "length", "reduce", "acc", "av", "ultimaAvaliacao", "atividadePorTipo", "item", "diasDesdeAdmissao", "Math", "floor", "metricas", "documentos", "total", "ativosNoPeriodo", "media", "Number", "toFixed", "ultima", "data", "atividade", "totalAlteracoes", "porTipo", "resumo", "produtividade", "statusGeral", "documentosAtualizados", "avaliacoesRecentes", "geradoEm", "toISOString", "error", "console", "ZodError", "detalhes", "errors"],
      mappings: ";;;;+BA8BsBA;;;eAAAA;;;wBA9BoB;0BACT;sBACL;wBACL;6BACW;qBACT;AAGzB;;CAEC,GACD,MAAMC,wBAAwBC,MAAC,CAACC,MAAM,CAAC;IACrCC,YAAYF,MAAC,CAACG,MAAM,GAAGC,QAAQ,GAAGC,QAAQ;IAC1CC,SAASN,MAAC,CAACG,MAAM,GAAGC,QAAQ,GAAGC,QAAQ;IACvCE,SAASP,MAAC,CAACQ,IAAI,CAAC;QAAC;QAAM;QAAO;QAAO;QAAM;KAAS,EAAEC,OAAO,CAAC;AAChE;AAeO,eAAeX,IAAIY,OAAoB,EAAE,EAAEC,MAAM,EAAe;IACrE,IAAI;QACF,yBAAyB;QACzB,MAAMC,UAAU,MAAMC,IAAAA,0BAAgB,EAACC,iBAAW;QAClD,IAAI,CAACF,SAASG,MAAM;YAClB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEC,MAAM;YAAiB,GAAG;gBAAEC,QAAQ;YAAI;QACrE;QAEA,uBAAuB;QACvB,IAAI,CAAC;YAAC;YAAS;YAAW;SAAY,CAACC,QAAQ,CAACR,QAAQG,IAAI,CAACM,QAAQ,GAAG;YACtE,OAAOL,oBAAY,CAACC,IAAI,CACtB;gBAAEC,MAAM;YAAsC,GAC9C;gBAAEC,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,MAAMG,cAAcC,8BAAiB,CAACC,KAAK,CAACb,OAAOc,EAAE;QAErD,kCAAkC;QAClC,MAAMC,YAAY,MAAMC,cAAM,CAACD,SAAS,CAACE,UAAU,CAAC;YAClDC,OAAO;gBAAEJ,IAAIH;YAAY;YACzBQ,QAAQ;gBACNL,IAAI;gBACJM,WAAW;gBACXZ,QAAQ;gBACRa,cAAc;gBACdC,OAAO;gBACPC,OAAO;gBACPC,SAAS;oBACPL,QAAQ;wBACNM,MAAM;wBACNC,OAAO;oBACT;gBACF;YACF;QACF;QAEA,IAAI,CAACX,WAAW;YACd,OAAOV,oBAAY,CAACC,IAAI,CACtB;gBAAEC,MAAM;YAA2B,GACnC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,kEAAkE;QAClE,IACEP,QAAQG,IAAI,CAACM,QAAQ,KAAK,eAC1BK,UAAUK,SAAS,KAAKnB,QAAQG,IAAI,CAACU,EAAE,EACvC;YACA,OAAOT,oBAAY,CAACC,IAAI,CACtB;gBAAEC,MAAM;YAA4C,GACpD;gBAAEC,QAAQ;YAAI;QAElB;QAEA,oCAAoC;QACpC,MAAM,EAAEmB,YAAY,EAAE,GAAG,IAAIC,IAAI7B,QAAQ8B,GAAG;QAC5C,MAAMC,UAAU1C,sBAAsByB,KAAK,CAAC;YAC1CtB,YAAYoC,aAAaI,GAAG,CAAC;YAC7BpC,SAASgC,aAAaI,GAAG,CAAC;YAC1BnC,SAAS+B,aAAaI,GAAG,CAAC,cAAc;QAC1C;QAEA,qCAAqC;QACrC,IAAIxC;QACJ,IAAII,UAAgB,IAAIqC;QAExB,IAAIF,QAAQlC,OAAO,KAAK,YAAYkC,QAAQvC,UAAU,IAAIuC,QAAQnC,OAAO,EAAE;YACzEJ,aAAa,IAAIyC,KAAKF,QAAQvC,UAAU;YACxCI,UAAU,IAAIqC,KAAKF,QAAQnC,OAAO;QACpC,OAAO;YACL,MAAMsC,QAAQ,IAAID;YAClB,OAAQF,QAAQlC,OAAO;gBACrB,KAAK;oBACHL,aAAa,IAAIyC,KAAKC,MAAMC,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK;oBAC3D;gBACF,KAAK;oBACH3C,aAAa,IAAIyC,KAAKC,MAAMC,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK;oBAC5D;gBACF,KAAK;oBACH3C,aAAa,IAAIyC,KAAKC,MAAMC,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK;oBAC5D;gBACF,KAAK;oBACH3C,aAAa,IAAIyC,KAAKC,MAAMC,OAAO,KAAK,MAAM,KAAK,KAAK,KAAK;oBAC7D;gBACF;oBACE3C,aAAa,IAAIyC,KAAKC,MAAMC,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK;YAChE;QACF;QAEA,0BAA0B;QAC1B,MAAM,CAACC,iBAAiBC,YAAYC,UAAU,GAAG,MAAMC,QAAQC,GAAG,CAAC;YACjE,yBAAyB;YACzBvB,cAAM,CAACwB,kBAAkB,CAACC,KAAK,CAAC;gBAC9BvB,OAAO;oBACLP;oBACA+B,OAAO;oBACPC,UAAU;wBACRC,KAAKrD;wBACLsD,KAAKlD;oBACP;gBACF;YACF;YAEA,wBAAwB;YACxBqB,cAAM,CAAC8B,SAAS,CAACC,QAAQ,CAAC;gBACxB7B,OAAO;oBACLP;oBACAqC,eAAe;wBACbJ,KAAKrD;wBACLsD,KAAKlD;oBACP;gBACF;gBACAwB,QAAQ;oBACN8B,MAAM;oBACND,eAAe;oBACfE,YAAY;gBACd;gBACAC,SAAS;oBACPH,eAAe;gBACjB;YACF;YAEA,0BAA0B;YAC1BhC,cAAM,CAACoC,2BAA2B,CAACL,QAAQ,CAAC;gBAC1C7B,OAAO;oBACLP;oBACAgC,UAAU;wBACRC,KAAKrD;wBACLsD,KAAKlD;oBACP;gBACF;gBACAwB,QAAQ;oBACNkC,MAAM;oBACNV,UAAU;gBACZ;YACF;SACD;QAED,iCAAiC;QACjC,MAAMW,kBACJlB,WAAWmB,MAAM,GAAG,IAChBnB,WAAWoB,MAAM,CAAC,CAACC,KAAKC,KAAOD,MAAMC,GAAGT,IAAI,EAAE,KAAKb,WAAWmB,MAAM,GACpE;QAEN,MAAMI,kBAAkBvB,UAAU,CAAC,EAAE;QAErC,8BAA8B;QAC9B,MAAMwB,mBAAmBvB,UAAUmB,MAAM,CACvC,CAACC,KAAKI;YACJJ,GAAG,CAACI,KAAKR,IAAI,CAAC,GAAG,AAACI,CAAAA,GAAG,CAACI,KAAKR,IAAI,CAAC,IAAI,CAAA,IAAK;YACzC,OAAOI;QACT,GACA,CAAC;QAGH,iCAAiC;QACjC,MAAMK,oBAAoBC,KAAKC,KAAK,CAClC,AAAC,CAAA,IAAIhC,OAAOE,OAAO,KAAK,IAAIF,KAAKjB,UAAUM,YAAY,EAAEa,OAAO,EAAC,IAC9D,CAAA,OAAO,KAAK,KAAK,EAAC;QAGvB,+BAA+B;QAC/B,MAAM+B,WAAW;YACflD,WAAW;gBACTD,IAAIC,UAAUD,EAAE;gBAChBW,MAAMV,UAAUS,OAAO,CAACC,IAAI;gBAC5BC,OAAOX,UAAUS,OAAO,CAACE,KAAK;gBAC9BJ,OAAOP,UAAUO,KAAK;gBACtBC,OAAOR,UAAUQ,KAAK;gBACtBf,QAAQO,UAAUP,MAAM;gBACxBa,cAAcN,UAAUM,YAAY;gBACpCyC;YACF;YACAlE,SAAS;gBACPL;gBACAI;gBACAC,SAASkC,QAAQlC,OAAO;YAC1B;YACAsE,YAAY;gBACVC,OAAOhC;gBACPiC,iBAAiBjC;YACnB;YACAC,YAAY;gBACV+B,OAAO/B,WAAWmB,MAAM;gBACxBc,OAAOC,OAAOhB,gBAAgBiB,OAAO,CAAC;gBACtCC,QAAQb,kBACJ;oBACEV,MAAMU,gBAAgBV,IAAI;oBAC1BwB,MAAMd,gBAAgBX,aAAa;oBACnCE,YAAYS,gBAAgBT,UAAU;gBACxC,IACA;YACN;YACAwB,WAAW;gBACTC,iBAAiBtC,UAAUkB,MAAM;gBACjCqB,SAAShB;YACX;YACAiB,QAAQ;gBACNC,eACExB,mBAAmB,IACf,SACAA,mBAAmB,IACjB,UACA;gBACRyB,aAAahE,UAAUP,MAAM;gBAC7BwE,uBAAuB7C,kBAAkB;gBACzC8C,oBAAoB7C,WAAWmB,MAAM,GAAG;YAC1C;QACF;QAEA,OAAOlD,oBAAY,CAACC,IAAI,CAAC;YACvB2D;YACAiB,UAAU,IAAIlD,OAAOmD,WAAW;QAClC;IACF,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,yCAAyCA;QAEvD,IAAIA,iBAAiBE,aAAQ,EAAE;YAC7B,OAAOjF,oBAAY,CAACC,IAAI,CACtB;gBACEC,MAAM;gBACNgF,UAAUH,MAAMI,MAAM;YACxB,GACA;gBAAEhF,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,MAAM;QAA2B,GACnC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "64d8da3b10013551cf70a108733ea564920432b5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1yqq44it02 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1yqq44it02();
cov_1yqq44it02().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1yqq44it02().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1yqq44it02().f[0]++;
    cov_1yqq44it02().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_1yqq44it02().s[3]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_1yqq44it02().s[4]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_1yqq44it02().s[5]++, require("../../../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(cov_1yqq44it02().s[6]++, require("../../../../../lib/prisma"));
const _validations =
/* istanbul ignore next */
(cov_1yqq44it02().s[7]++, require("../../../../../lib/validations"));
const _zod =
/* istanbul ignore next */
(cov_1yqq44it02().s[8]++, require("zod"));
/**
 * Schema para filtros de métricas
 */
const filtrosMetricasSchema =
/* istanbul ignore next */
(cov_1yqq44it02().s[9]++, _zod.z.object({
  dataInicio: _zod.z.string().datetime().optional(),
  dataFim: _zod.z.string().datetime().optional(),
  periodo: _zod.z.enum(['7d', '30d', '90d', '1y', 'custom']).default('30d')
}));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1yqq44it02().f[1]++;
  cov_1yqq44it02().s[10]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[11]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_1yqq44it02().s[12]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_1yqq44it02().b[0][0]++;
      cov_1yqq44it02().s[13]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1yqq44it02().b[0][1]++;
    }
    // Verificar permissões
    cov_1yqq44it02().s[14]++;
    if (!['ADMIN', 'GERENTE', 'ATENDENTE'].includes(session.user.userType)) {
      /* istanbul ignore next */
      cov_1yqq44it02().b[1][0]++;
      cov_1yqq44it02().s[15]++;
      return _server.NextResponse.json({
        erro: 'Sem permissão para acessar métricas'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1yqq44it02().b[1][1]++;
    }
    // Validar ID do atendente
    const atendenteId =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[16]++, _validations.idAtendenteSchema.parse(params.id));
    // Verificar se o atendente existe
    const atendente =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[17]++, await _prisma.prisma.atendente.findUnique({
      where: {
        id: atendenteId
      },
      select: {
        id: true,
        usuarioId: true,
        status: true,
        dataAdmissao: true,
        cargo: true,
        setor: true,
        usuario: {
          select: {
            nome: true,
            email: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_1yqq44it02().s[18]++;
    if (!atendente) {
      /* istanbul ignore next */
      cov_1yqq44it02().b[2][0]++;
      cov_1yqq44it02().s[19]++;
      return _server.NextResponse.json({
        erro: 'Atendente não encontrado'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1yqq44it02().b[2][1]++;
    }
    // Verificar se o atendente pode ver apenas suas próprias métricas
    cov_1yqq44it02().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_1yqq44it02().b[4][0]++, session.user.userType === 'ATENDENTE') &&
    /* istanbul ignore next */
    (cov_1yqq44it02().b[4][1]++, atendente.usuarioId !== session.user.id)) {
      /* istanbul ignore next */
      cov_1yqq44it02().b[3][0]++;
      cov_1yqq44it02().s[21]++;
      return _server.NextResponse.json({
        erro: 'Sem permissão para acessar estas métricas'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1yqq44it02().b[3][1]++;
    }
    // Processar filtros da query string
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[22]++, new URL(request.url));
    const filtros =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[23]++, filtrosMetricasSchema.parse({
      dataInicio: searchParams.get('dataInicio'),
      dataFim: searchParams.get('dataFim'),
      periodo:
      /* istanbul ignore next */
      (cov_1yqq44it02().b[5][0]++, searchParams.get('periodo')) ||
      /* istanbul ignore next */
      (cov_1yqq44it02().b[5][1]++, '30d')
    }));
    // Calcular datas baseadas no período
    let dataInicio;
    let dataFim =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[24]++, new Date());
    /* istanbul ignore next */
    cov_1yqq44it02().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_1yqq44it02().b[7][0]++, filtros.periodo === 'custom') &&
    /* istanbul ignore next */
    (cov_1yqq44it02().b[7][1]++, filtros.dataInicio) &&
    /* istanbul ignore next */
    (cov_1yqq44it02().b[7][2]++, filtros.dataFim)) {
      /* istanbul ignore next */
      cov_1yqq44it02().b[6][0]++;
      cov_1yqq44it02().s[26]++;
      dataInicio = new Date(filtros.dataInicio);
      /* istanbul ignore next */
      cov_1yqq44it02().s[27]++;
      dataFim = new Date(filtros.dataFim);
    } else {
      /* istanbul ignore next */
      cov_1yqq44it02().b[6][1]++;
      const agora =
      /* istanbul ignore next */
      (cov_1yqq44it02().s[28]++, new Date());
      /* istanbul ignore next */
      cov_1yqq44it02().s[29]++;
      switch (filtros.periodo) {
        case '7d':
          /* istanbul ignore next */
          cov_1yqq44it02().b[8][0]++;
          cov_1yqq44it02().s[30]++;
          dataInicio = new Date(agora.getTime() - 7 * 24 * 60 * 60 * 1000);
          /* istanbul ignore next */
          cov_1yqq44it02().s[31]++;
          break;
        case '30d':
          /* istanbul ignore next */
          cov_1yqq44it02().b[8][1]++;
          cov_1yqq44it02().s[32]++;
          dataInicio = new Date(agora.getTime() - 30 * 24 * 60 * 60 * 1000);
          /* istanbul ignore next */
          cov_1yqq44it02().s[33]++;
          break;
        case '90d':
          /* istanbul ignore next */
          cov_1yqq44it02().b[8][2]++;
          cov_1yqq44it02().s[34]++;
          dataInicio = new Date(agora.getTime() - 90 * 24 * 60 * 60 * 1000);
          /* istanbul ignore next */
          cov_1yqq44it02().s[35]++;
          break;
        case '1y':
          /* istanbul ignore next */
          cov_1yqq44it02().b[8][3]++;
          cov_1yqq44it02().s[36]++;
          dataInicio = new Date(agora.getTime() - 365 * 24 * 60 * 60 * 1000);
          /* istanbul ignore next */
          cov_1yqq44it02().s[37]++;
          break;
        default:
          /* istanbul ignore next */
          cov_1yqq44it02().b[8][4]++;
          cov_1yqq44it02().s[38]++;
          dataInicio = new Date(agora.getTime() - 30 * 24 * 60 * 60 * 1000);
      }
    }
    // Buscar métricas básicas
    const [documentosCount, avaliacoes, historico] =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[39]++, await Promise.all([
    // Contagem de documentos
    _prisma.prisma.documentoAtendente.count({
      where: {
        atendenteId,
        ativo: true,
        criadoEm: {
          gte: dataInicio,
          lte: dataFim
        }
      }
    }),
    // Avaliações no período
    _prisma.prisma.avaliacao.findMany({
      where: {
        atendenteId,
        dataAvaliacao: {
          gte: dataInicio,
          lte: dataFim
        }
      },
      select: {
        nota: true,
        dataAvaliacao: true,
        comentario: true
      },
      orderBy: {
        dataAvaliacao: 'desc'
      }
    }),
    // Histórico de alterações
    _prisma.prisma.historicoAlteracaoAtendente.findMany({
      where: {
        atendenteId,
        criadoEm: {
          gte: dataInicio,
          lte: dataFim
        }
      },
      select: {
        tipo: true,
        criadoEm: true
      }
    })]));
    // Calcular métricas de avaliação
    const mediaAvaliacoes =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[40]++, avaliacoes.length > 0 ?
    /* istanbul ignore next */
    (cov_1yqq44it02().b[9][0]++, avaliacoes.reduce((acc, av) => {
      /* istanbul ignore next */
      cov_1yqq44it02().f[2]++;
      cov_1yqq44it02().s[41]++;
      return acc + av.nota;
    }, 0) / avaliacoes.length) :
    /* istanbul ignore next */
    (cov_1yqq44it02().b[9][1]++, 0));
    const ultimaAvaliacao =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[42]++, avaliacoes[0]);
    // Calcular atividade por tipo
    const atividadePorTipo =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[43]++, historico.reduce((acc, item) => {
      /* istanbul ignore next */
      cov_1yqq44it02().f[3]++;
      cov_1yqq44it02().s[44]++;
      acc[item.tipo] = (
      /* istanbul ignore next */
      (cov_1yqq44it02().b[10][0]++, acc[item.tipo]) ||
      /* istanbul ignore next */
      (cov_1yqq44it02().b[10][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_1yqq44it02().s[45]++;
      return acc;
    }, {}));
    // Calcular dias desde a admissão
    const diasDesdeAdmissao =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[46]++, Math.floor((new Date().getTime() - new Date(atendente.dataAdmissao).getTime()) / (1000 * 60 * 60 * 24)));
    // Montar resposta com métricas
    const metricas =
    /* istanbul ignore next */
    (cov_1yqq44it02().s[47]++, {
      atendente: {
        id: atendente.id,
        nome: atendente.usuario.nome,
        email: atendente.usuario.email,
        cargo: atendente.cargo,
        setor: atendente.setor,
        status: atendente.status,
        dataAdmissao: atendente.dataAdmissao,
        diasDesdeAdmissao
      },
      periodo: {
        dataInicio,
        dataFim,
        periodo: filtros.periodo
      },
      documentos: {
        total: documentosCount,
        ativosNoPeriodo: documentosCount
      },
      avaliacoes: {
        total: avaliacoes.length,
        media: Number(mediaAvaliacoes.toFixed(2)),
        ultima: ultimaAvaliacao ?
        /* istanbul ignore next */
        (cov_1yqq44it02().b[11][0]++, {
          nota: ultimaAvaliacao.nota,
          data: ultimaAvaliacao.dataAvaliacao,
          comentario: ultimaAvaliacao.comentario
        }) :
        /* istanbul ignore next */
        (cov_1yqq44it02().b[11][1]++, null)
      },
      atividade: {
        totalAlteracoes: historico.length,
        porTipo: atividadePorTipo
      },
      resumo: {
        produtividade: mediaAvaliacoes >= 8 ?
        /* istanbul ignore next */
        (cov_1yqq44it02().b[12][0]++, 'Alta') :
        /* istanbul ignore next */
        (cov_1yqq44it02().b[12][1]++, mediaAvaliacoes >= 6 ?
        /* istanbul ignore next */
        (cov_1yqq44it02().b[13][0]++, 'Média') :
        /* istanbul ignore next */
        (cov_1yqq44it02().b[13][1]++, 'Baixa')),
        statusGeral: atendente.status,
        documentosAtualizados: documentosCount > 0,
        avaliacoesRecentes: avaliacoes.length > 0
      }
    });
    /* istanbul ignore next */
    cov_1yqq44it02().s[48]++;
    return _server.NextResponse.json({
      metricas,
      geradoEm: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1yqq44it02().s[49]++;
    console.error('Erro ao buscar métricas do atendente:', error);
    /* istanbul ignore next */
    cov_1yqq44it02().s[50]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_1yqq44it02().b[14][0]++;
      cov_1yqq44it02().s[51]++;
      return _server.NextResponse.json({
        erro: 'Dados inválidos',
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1yqq44it02().b[14][1]++;
    }
    cov_1yqq44it02().s[52]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJmaWx0cm9zTWV0cmljYXNTY2hlbWEiLCJjb3ZfMXlxcTQ0aXQwMiIsInMiLCJfem9kIiwieiIsIm9iamVjdCIsImRhdGFJbmljaW8iLCJzdHJpbmciLCJkYXRldGltZSIsIm9wdGlvbmFsIiwiZGF0YUZpbSIsInBlcmlvZG8iLCJlbnVtIiwiZGVmYXVsdCIsInJlcXVlc3QiLCJwYXJhbXMiLCJmIiwic2Vzc2lvbiIsIl9uZXh0YXV0aCIsImdldFNlcnZlclNlc3Npb24iLCJfYXV0aCIsImF1dGhPcHRpb25zIiwidXNlciIsImIiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsImVycm8iLCJzdGF0dXMiLCJpbmNsdWRlcyIsInVzZXJUeXBlIiwiYXRlbmRlbnRlSWQiLCJfdmFsaWRhdGlvbnMiLCJpZEF0ZW5kZW50ZVNjaGVtYSIsInBhcnNlIiwiaWQiLCJhdGVuZGVudGUiLCJfcHJpc21hIiwicHJpc21hIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwic2VsZWN0IiwidXN1YXJpb0lkIiwiZGF0YUFkbWlzc2FvIiwiY2FyZ28iLCJzZXRvciIsInVzdWFyaW8iLCJub21lIiwiZW1haWwiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJmaWx0cm9zIiwiZ2V0IiwiRGF0ZSIsImFnb3JhIiwiZ2V0VGltZSIsImRvY3VtZW50b3NDb3VudCIsImF2YWxpYWNvZXMiLCJoaXN0b3JpY28iLCJQcm9taXNlIiwiYWxsIiwiZG9jdW1lbnRvQXRlbmRlbnRlIiwiY291bnQiLCJhdGl2byIsImNyaWFkb0VtIiwiZ3RlIiwibHRlIiwiYXZhbGlhY2FvIiwiZmluZE1hbnkiLCJkYXRhQXZhbGlhY2FvIiwibm90YSIsImNvbWVudGFyaW8iLCJvcmRlckJ5IiwiaGlzdG9yaWNvQWx0ZXJhY2FvQXRlbmRlbnRlIiwidGlwbyIsIm1lZGlhQXZhbGlhY29lcyIsImxlbmd0aCIsInJlZHVjZSIsImFjYyIsImF2IiwidWx0aW1hQXZhbGlhY2FvIiwiYXRpdmlkYWRlUG9yVGlwbyIsIml0ZW0iLCJkaWFzRGVzZGVBZG1pc3NhbyIsIk1hdGgiLCJmbG9vciIsIm1ldHJpY2FzIiwiZG9jdW1lbnRvcyIsInRvdGFsIiwiYXRpdm9zTm9QZXJpb2RvIiwibWVkaWEiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwidWx0aW1hIiwiZGF0YSIsImF0aXZpZGFkZSIsInRvdGFsQWx0ZXJhY29lcyIsInBvclRpcG8iLCJyZXN1bW8iLCJwcm9kdXRpdmlkYWRlIiwic3RhdHVzR2VyYWwiLCJkb2N1bWVudG9zQXR1YWxpemFkb3MiLCJhdmFsaWFjb2VzUmVjZW50ZXMiLCJnZXJhZG9FbSIsInRvSVNPU3RyaW5nIiwiZXJyb3IiLCJjb25zb2xlIiwiWm9kRXJyb3IiLCJkZXRhbGhlcyIsImVycm9ycyJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmVyZXUgSnJcXERvY3VtZW50c1xcRGV2XFxuZXdcXHNyY1xcYXBwXFxhcGlcXGF0ZW5kZW50ZXNcXFtpZF1cXG1ldHJpY2FzXFxyb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgZ2V0U2VydmVyU2Vzc2lvbiB9IGZyb20gJ25leHQtYXV0aCc7XG5pbXBvcnQgeyBhdXRoT3B0aW9ucyB9IGZyb20gJ0AvbGliL2F1dGgnO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQC9saWIvcHJpc21hJztcbmltcG9ydCB7IGlkQXRlbmRlbnRlU2NoZW1hIH0gZnJvbSAnQC9saWIvdmFsaWRhdGlvbnMnO1xuaW1wb3J0IHsgWm9kRXJyb3IgfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbi8qKlxuICogU2NoZW1hIHBhcmEgZmlsdHJvcyBkZSBtw6l0cmljYXNcbiAqL1xuY29uc3QgZmlsdHJvc01ldHJpY2FzU2NoZW1hID0gei5vYmplY3Qoe1xuICBkYXRhSW5pY2lvOiB6LnN0cmluZygpLmRhdGV0aW1lKCkub3B0aW9uYWwoKSxcbiAgZGF0YUZpbTogei5zdHJpbmcoKS5kYXRldGltZSgpLm9wdGlvbmFsKCksXG4gIHBlcmlvZG86IHouZW51bShbJzdkJywgJzMwZCcsICc5MGQnLCAnMXknLCAnY3VzdG9tJ10pLmRlZmF1bHQoJzMwZCcpLFxufSk7XG5cbi8qKlxuICogSW50ZXJmYWNlIHBhcmEgcGFyw6JtZXRyb3MgZGEgcm90YVxuICovXG5pbnRlcmZhY2UgUm91dGVQYXJhbXMge1xuICBwYXJhbXM6IHtcbiAgICBpZDogc3RyaW5nO1xuICB9O1xufVxuXG4vKipcbiAqIEdFVCAvYXBpL2F0ZW5kZW50ZXMvW2lkXS9tZXRyaWNhc1xuICogQnVzY2EgbcOpdHJpY2FzIGRlIGRlc2VtcGVuaG8gZGUgdW0gYXRlbmRlbnRlIGVzcGVjw61maWNvXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QsIHsgcGFyYW1zIH06IFJvdXRlUGFyYW1zKSB7XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZpY2FyIGF1dGVudGljYcOnw6NvXG4gICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGdldFNlcnZlclNlc3Npb24oYXV0aE9wdGlvbnMpO1xuICAgIGlmICghc2Vzc2lvbj8udXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJybzogJ07Do28gYXV0b3JpemFkbycgfSwgeyBzdGF0dXM6IDQwMSB9KTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZmljYXIgcGVybWlzc8O1ZXNcbiAgICBpZiAoIVsnQURNSU4nLCAnR0VSRU5URScsICdBVEVOREVOVEUnXS5pbmNsdWRlcyhzZXNzaW9uLnVzZXIudXNlclR5cGUpKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJybzogJ1NlbSBwZXJtaXNzw6NvIHBhcmEgYWNlc3NhciBtw6l0cmljYXMnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDMgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGFyIElEIGRvIGF0ZW5kZW50ZVxuICAgIGNvbnN0IGF0ZW5kZW50ZUlkID0gaWRBdGVuZGVudGVTY2hlbWEucGFyc2UocGFyYW1zLmlkKTtcblxuICAgIC8vIFZlcmlmaWNhciBzZSBvIGF0ZW5kZW50ZSBleGlzdGVcbiAgICBjb25zdCBhdGVuZGVudGUgPSBhd2FpdCBwcmlzbWEuYXRlbmRlbnRlLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IGF0ZW5kZW50ZUlkIH0sXG4gICAgICBzZWxlY3Q6IHtcbiAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgIHVzdWFyaW9JZDogdHJ1ZSxcbiAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICBkYXRhQWRtaXNzYW86IHRydWUsXG4gICAgICAgIGNhcmdvOiB0cnVlLFxuICAgICAgICBzZXRvcjogdHJ1ZSxcbiAgICAgICAgdXN1YXJpbzoge1xuICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgbm9tZTogdHJ1ZSxcbiAgICAgICAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCFhdGVuZGVudGUpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvOiAnQXRlbmRlbnRlIG7Do28gZW5jb250cmFkbycgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwNCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFZlcmlmaWNhciBzZSBvIGF0ZW5kZW50ZSBwb2RlIHZlciBhcGVuYXMgc3VhcyBwcsOzcHJpYXMgbcOpdHJpY2FzXG4gICAgaWYgKFxuICAgICAgc2Vzc2lvbi51c2VyLnVzZXJUeXBlID09PSAnQVRFTkRFTlRFJyAmJlxuICAgICAgYXRlbmRlbnRlLnVzdWFyaW9JZCAhPT0gc2Vzc2lvbi51c2VyLmlkXG4gICAgKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJybzogJ1NlbSBwZXJtaXNzw6NvIHBhcmEgYWNlc3NhciBlc3RhcyBtw6l0cmljYXMnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDMgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzYXIgZmlsdHJvcyBkYSBxdWVyeSBzdHJpbmdcbiAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgY29uc3QgZmlsdHJvcyA9IGZpbHRyb3NNZXRyaWNhc1NjaGVtYS5wYXJzZSh7XG4gICAgICBkYXRhSW5pY2lvOiBzZWFyY2hQYXJhbXMuZ2V0KCdkYXRhSW5pY2lvJyksXG4gICAgICBkYXRhRmltOiBzZWFyY2hQYXJhbXMuZ2V0KCdkYXRhRmltJyksXG4gICAgICBwZXJpb2RvOiBzZWFyY2hQYXJhbXMuZ2V0KCdwZXJpb2RvJykgfHwgJzMwZCcsXG4gICAgfSk7XG5cbiAgICAvLyBDYWxjdWxhciBkYXRhcyBiYXNlYWRhcyBubyBwZXLDrW9kb1xuICAgIGxldCBkYXRhSW5pY2lvOiBEYXRlO1xuICAgIGxldCBkYXRhRmltOiBEYXRlID0gbmV3IERhdGUoKTtcblxuICAgIGlmIChmaWx0cm9zLnBlcmlvZG8gPT09ICdjdXN0b20nICYmIGZpbHRyb3MuZGF0YUluaWNpbyAmJiBmaWx0cm9zLmRhdGFGaW0pIHtcbiAgICAgIGRhdGFJbmljaW8gPSBuZXcgRGF0ZShmaWx0cm9zLmRhdGFJbmljaW8pO1xuICAgICAgZGF0YUZpbSA9IG5ldyBEYXRlKGZpbHRyb3MuZGF0YUZpbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGFnb3JhID0gbmV3IERhdGUoKTtcbiAgICAgIHN3aXRjaCAoZmlsdHJvcy5wZXJpb2RvKSB7XG4gICAgICAgIGNhc2UgJzdkJzpcbiAgICAgICAgICBkYXRhSW5pY2lvID0gbmV3IERhdGUoYWdvcmEuZ2V0VGltZSgpIC0gNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICczMGQnOlxuICAgICAgICAgIGRhdGFJbmljaW8gPSBuZXcgRGF0ZShhZ29yYS5nZXRUaW1lKCkgLSAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICc5MGQnOlxuICAgICAgICAgIGRhdGFJbmljaW8gPSBuZXcgRGF0ZShhZ29yYS5nZXRUaW1lKCkgLSA5MCAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcxeSc6XG4gICAgICAgICAgZGF0YUluaWNpbyA9IG5ldyBEYXRlKGFnb3JhLmdldFRpbWUoKSAtIDM2NSAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGRhdGFJbmljaW8gPSBuZXcgRGF0ZShhZ29yYS5nZXRUaW1lKCkgLSAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJ1c2NhciBtw6l0cmljYXMgYsOhc2ljYXNcbiAgICBjb25zdCBbZG9jdW1lbnRvc0NvdW50LCBhdmFsaWFjb2VzLCBoaXN0b3JpY29dID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgLy8gQ29udGFnZW0gZGUgZG9jdW1lbnRvc1xuICAgICAgcHJpc21hLmRvY3VtZW50b0F0ZW5kZW50ZS5jb3VudCh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgYXRlbmRlbnRlSWQsXG4gICAgICAgICAgYXRpdm86IHRydWUsXG4gICAgICAgICAgY3JpYWRvRW06IHtcbiAgICAgICAgICAgIGd0ZTogZGF0YUluaWNpbyxcbiAgICAgICAgICAgIGx0ZTogZGF0YUZpbSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSksXG5cbiAgICAgIC8vIEF2YWxpYcOnw7VlcyBubyBwZXLDrW9kb1xuICAgICAgcHJpc21hLmF2YWxpYWNhby5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgYXRlbmRlbnRlSWQsXG4gICAgICAgICAgZGF0YUF2YWxpYWNhbzoge1xuICAgICAgICAgICAgZ3RlOiBkYXRhSW5pY2lvLFxuICAgICAgICAgICAgbHRlOiBkYXRhRmltLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIG5vdGE6IHRydWUsXG4gICAgICAgICAgZGF0YUF2YWxpYWNhbzogdHJ1ZSxcbiAgICAgICAgICBjb21lbnRhcmlvOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBvcmRlckJ5OiB7XG4gICAgICAgICAgZGF0YUF2YWxpYWNhbzogJ2Rlc2MnLFxuICAgICAgICB9LFxuICAgICAgfSksXG5cbiAgICAgIC8vIEhpc3TDs3JpY28gZGUgYWx0ZXJhw6fDtWVzXG4gICAgICBwcmlzbWEuaGlzdG9yaWNvQWx0ZXJhY2FvQXRlbmRlbnRlLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICBhdGVuZGVudGVJZCxcbiAgICAgICAgICBjcmlhZG9FbToge1xuICAgICAgICAgICAgZ3RlOiBkYXRhSW5pY2lvLFxuICAgICAgICAgICAgbHRlOiBkYXRhRmltLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIHRpcG86IHRydWUsXG4gICAgICAgICAgY3JpYWRvRW06IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICBdKTtcblxuICAgIC8vIENhbGN1bGFyIG3DqXRyaWNhcyBkZSBhdmFsaWHDp8Ojb1xuICAgIGNvbnN0IG1lZGlhQXZhbGlhY29lcyA9XG4gICAgICBhdmFsaWFjb2VzLmxlbmd0aCA+IDBcbiAgICAgICAgPyBhdmFsaWFjb2VzLnJlZHVjZSgoYWNjLCBhdikgPT4gYWNjICsgYXYubm90YSwgMCkgLyBhdmFsaWFjb2VzLmxlbmd0aFxuICAgICAgICA6IDA7XG5cbiAgICBjb25zdCB1bHRpbWFBdmFsaWFjYW8gPSBhdmFsaWFjb2VzWzBdO1xuXG4gICAgLy8gQ2FsY3VsYXIgYXRpdmlkYWRlIHBvciB0aXBvXG4gICAgY29uc3QgYXRpdmlkYWRlUG9yVGlwbyA9IGhpc3Rvcmljby5yZWR1Y2UoXG4gICAgICAoYWNjLCBpdGVtKSA9PiB7XG4gICAgICAgIGFjY1tpdGVtLnRpcG9dID0gKGFjY1tpdGVtLnRpcG9dIHx8IDApICsgMTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sXG4gICAgICB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+XG4gICAgKTtcblxuICAgIC8vIENhbGN1bGFyIGRpYXMgZGVzZGUgYSBhZG1pc3PDo29cbiAgICBjb25zdCBkaWFzRGVzZGVBZG1pc3NhbyA9IE1hdGguZmxvb3IoXG4gICAgICAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhdGVuZGVudGUuZGF0YUFkbWlzc2FvKS5nZXRUaW1lKCkpIC9cbiAgICAgICAgKDEwMDAgKiA2MCAqIDYwICogMjQpXG4gICAgKTtcblxuICAgIC8vIE1vbnRhciByZXNwb3N0YSBjb20gbcOpdHJpY2FzXG4gICAgY29uc3QgbWV0cmljYXMgPSB7XG4gICAgICBhdGVuZGVudGU6IHtcbiAgICAgICAgaWQ6IGF0ZW5kZW50ZS5pZCxcbiAgICAgICAgbm9tZTogYXRlbmRlbnRlLnVzdWFyaW8ubm9tZSxcbiAgICAgICAgZW1haWw6IGF0ZW5kZW50ZS51c3VhcmlvLmVtYWlsLFxuICAgICAgICBjYXJnbzogYXRlbmRlbnRlLmNhcmdvLFxuICAgICAgICBzZXRvcjogYXRlbmRlbnRlLnNldG9yLFxuICAgICAgICBzdGF0dXM6IGF0ZW5kZW50ZS5zdGF0dXMsXG4gICAgICAgIGRhdGFBZG1pc3NhbzogYXRlbmRlbnRlLmRhdGFBZG1pc3NhbyxcbiAgICAgICAgZGlhc0Rlc2RlQWRtaXNzYW8sXG4gICAgICB9LFxuICAgICAgcGVyaW9kbzoge1xuICAgICAgICBkYXRhSW5pY2lvLFxuICAgICAgICBkYXRhRmltLFxuICAgICAgICBwZXJpb2RvOiBmaWx0cm9zLnBlcmlvZG8sXG4gICAgICB9LFxuICAgICAgZG9jdW1lbnRvczoge1xuICAgICAgICB0b3RhbDogZG9jdW1lbnRvc0NvdW50LFxuICAgICAgICBhdGl2b3NOb1BlcmlvZG86IGRvY3VtZW50b3NDb3VudCxcbiAgICAgIH0sXG4gICAgICBhdmFsaWFjb2VzOiB7XG4gICAgICAgIHRvdGFsOiBhdmFsaWFjb2VzLmxlbmd0aCxcbiAgICAgICAgbWVkaWE6IE51bWJlcihtZWRpYUF2YWxpYWNvZXMudG9GaXhlZCgyKSksXG4gICAgICAgIHVsdGltYTogdWx0aW1hQXZhbGlhY2FvXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIG5vdGE6IHVsdGltYUF2YWxpYWNhby5ub3RhLFxuICAgICAgICAgICAgICBkYXRhOiB1bHRpbWFBdmFsaWFjYW8uZGF0YUF2YWxpYWNhbyxcbiAgICAgICAgICAgICAgY29tZW50YXJpbzogdWx0aW1hQXZhbGlhY2FvLmNvbWVudGFyaW8sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiBudWxsLFxuICAgICAgfSxcbiAgICAgIGF0aXZpZGFkZToge1xuICAgICAgICB0b3RhbEFsdGVyYWNvZXM6IGhpc3Rvcmljby5sZW5ndGgsXG4gICAgICAgIHBvclRpcG86IGF0aXZpZGFkZVBvclRpcG8sXG4gICAgICB9LFxuICAgICAgcmVzdW1vOiB7XG4gICAgICAgIHByb2R1dGl2aWRhZGU6XG4gICAgICAgICAgbWVkaWFBdmFsaWFjb2VzID49IDhcbiAgICAgICAgICAgID8gJ0FsdGEnXG4gICAgICAgICAgICA6IG1lZGlhQXZhbGlhY29lcyA+PSA2XG4gICAgICAgICAgICAgID8gJ03DqWRpYSdcbiAgICAgICAgICAgICAgOiAnQmFpeGEnLFxuICAgICAgICBzdGF0dXNHZXJhbDogYXRlbmRlbnRlLnN0YXR1cyxcbiAgICAgICAgZG9jdW1lbnRvc0F0dWFsaXphZG9zOiBkb2N1bWVudG9zQ291bnQgPiAwLFxuICAgICAgICBhdmFsaWFjb2VzUmVjZW50ZXM6IGF2YWxpYWNvZXMubGVuZ3RoID4gMCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBtZXRyaWNhcyxcbiAgICAgIGdlcmFkb0VtOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJybyBhbyBidXNjYXIgbcOpdHJpY2FzIGRvIGF0ZW5kZW50ZTonLCBlcnJvcik7XG5cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBab2RFcnJvcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7XG4gICAgICAgICAgZXJybzogJ0RhZG9zIGludsOhbGlkb3MnLFxuICAgICAgICAgIGRldGFsaGVzOiBlcnJvci5lcnJvcnMsXG4gICAgICAgIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm86ICdFcnJvIGludGVybm8gZG8gc2Vydmlkb3InIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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