{"version":3,"names":["atualizarStatusPeriodo","cov_2443vh0tk6","f","s","atualizarStatusPeriodos","calcularStatusPeriodo","middlewareAtualizacaoStatus","agora","Date","periodosParaAtualizar","_databaseconfig","prisma","periodoAvaliacao","findMany","where","OR","status","_client","StatusPeriodo","PLANEJADO","dataInicio","lte","dataFim","gte","ATIVO","lt","select","id","nome","resultados","periodosAtualizados","periodosAtivados","periodosFinalizados","detalhes","periodo","novoStatus","b","FINALIZADO","update","data","atualizadoEm","push","statusAnterior","statusNovo","sucesso","error","console","erro","Error","message","periodoId","findUnique","atualizado","statusAtual","CANCELADO","periodoIds","length","resultado"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\utils\\periodo-status-updater.ts"],"sourcesContent":["import { prisma } from '@/lib/database-config';\nimport { StatusPeriodo } from '@prisma/client';\n\n/**\n * Atualiza automaticamente o status dos períodos de avaliação baseado nas datas atuais\n * \n * Regras de negócio:\n * - PLANEJADO -> ATIVO: quando a data atual >= dataInicio e <= dataFim\n * - ATIVO -> FINALIZADO: quando a data atual > dataFim\n * - Períodos CANCELADOS não são alterados\n * \n * @returns Objeto com informações sobre as atualizações realizadas\n */\nexport async function atualizarStatusPeriodos() {\n  const agora = new Date();\n  \n  try {\n    // Buscar períodos que precisam de atualização de status\n    const periodosParaAtualizar = await prisma.periodoAvaliacao.findMany({\n      where: {\n        OR: [\n          {\n            // PLANEJADO -> ATIVO: data atual está dentro do período\n            status: StatusPeriodo.PLANEJADO,\n            dataInicio: {\n              lte: agora\n            },\n            dataFim: {\n              gte: agora\n            }\n          },\n          {\n            // ATIVO -> FINALIZADO: data atual passou do fim do período\n            status: StatusPeriodo.ATIVO,\n            dataFim: {\n              lt: agora\n            }\n          }\n        ]\n      },\n      select: {\n        id: true,\n        nome: true,\n        status: true,\n        dataInicio: true,\n        dataFim: true\n      }\n    });\n\n    const resultados = {\n      periodosAtualizados: 0,\n      periodosAtivados: 0,\n      periodosFinalizados: 0,\n      detalhes: [] as Array<{\n        id: string;\n        nome: string;\n        statusAnterior: StatusPeriodo;\n        statusNovo: StatusPeriodo;\n      }>\n    };\n\n    // Processar cada período que precisa de atualização\n    for (const periodo of periodosParaAtualizar) {\n      let novoStatus: StatusPeriodo;\n      \n      if (periodo.status === StatusPeriodo.PLANEJADO && \n          agora >= periodo.dataInicio && \n          agora <= periodo.dataFim) {\n        novoStatus = StatusPeriodo.ATIVO;\n        resultados.periodosAtivados++;\n      } else if (periodo.status === StatusPeriodo.ATIVO && \n                 agora > periodo.dataFim) {\n        novoStatus = StatusPeriodo.FINALIZADO;\n        resultados.periodosFinalizados++;\n      } else {\n        continue; // Não precisa atualizar\n      }\n\n      // Atualizar o status no banco de dados\n      await prisma.periodoAvaliacao.update({\n        where: { id: periodo.id },\n        data: { \n          status: novoStatus,\n          atualizadoEm: agora\n        }\n      });\n\n      resultados.periodosAtualizados++;\n      resultados.detalhes.push({\n        id: periodo.id,\n        nome: periodo.nome,\n        statusAnterior: periodo.status,\n        statusNovo: novoStatus\n      });\n    }\n\n    return {\n      sucesso: true,\n      ...resultados\n    };\n\n  } catch (error) {\n    console.error('Erro ao atualizar status dos períodos:', error);\n    return {\n      sucesso: false,\n      erro: error instanceof Error ? error.message : 'Erro desconhecido',\n      periodosAtualizados: 0,\n      periodosAtivados: 0,\n      periodosFinalizados: 0,\n      detalhes: []\n    };\n  }\n}\n\n/**\n * Verifica se um período específico precisa de atualização de status\n * e o atualiza se necessário\n * \n * @param periodoId ID do período a ser verificado\n * @returns Informações sobre a atualização realizada\n */\nexport async function atualizarStatusPeriodo(periodoId: string) {\n  const agora = new Date();\n  \n  try {\n    const periodo = await prisma.periodoAvaliacao.findUnique({\n      where: { id: periodoId },\n      select: {\n        id: true,\n        nome: true,\n        status: true,\n        dataInicio: true,\n        dataFim: true\n      }\n    });\n\n    if (!periodo) {\n      return {\n        sucesso: false,\n        erro: 'Período não encontrado'\n      };\n    }\n\n    // Verificar se precisa atualizar\n    let novoStatus: StatusPeriodo | null = null;\n    \n    if (periodo.status === StatusPeriodo.PLANEJADO && \n        agora >= periodo.dataInicio && \n        agora <= periodo.dataFim) {\n      novoStatus = StatusPeriodo.ATIVO;\n    } else if (periodo.status === StatusPeriodo.ATIVO && \n               agora > periodo.dataFim) {\n      novoStatus = StatusPeriodo.FINALIZADO;\n    }\n\n    if (!novoStatus) {\n      return {\n        sucesso: true,\n        atualizado: false,\n        statusAtual: periodo.status\n      };\n    }\n\n    // Atualizar o status\n    await prisma.periodoAvaliacao.update({\n      where: { id: periodoId },\n      data: { \n        status: novoStatus,\n        atualizadoEm: agora\n      }\n    });\n\n    return {\n      sucesso: true,\n      atualizado: true,\n      statusAnterior: periodo.status,\n      statusNovo: novoStatus\n    };\n\n  } catch (error) {\n    console.error('Erro ao atualizar status do período:', error);\n    return {\n      sucesso: false,\n      erro: error instanceof Error ? error.message : 'Erro desconhecido'\n    };\n  }\n}\n\n/**\n * Obtém o status atual que um período deveria ter baseado nas datas\n * (sem fazer alterações no banco de dados)\n * \n * @param dataInicio Data de início do período\n * @param dataFim Data de fim do período\n * @param statusAtual Status atual do período\n * @returns Status que o período deveria ter\n */\nexport function calcularStatusPeriodo(\n  dataInicio: Date,\n  dataFim: Date,\n  statusAtual: StatusPeriodo\n): StatusPeriodo {\n  const agora = new Date();\n  \n  // Períodos cancelados não mudam de status automaticamente\n  if (statusAtual === StatusPeriodo.CANCELADO) {\n    return StatusPeriodo.CANCELADO;\n  }\n  \n  // Verificar se o período já deveria ter terminado\n  if (agora > dataFim) {\n    return StatusPeriodo.FINALIZADO;\n  }\n  \n  // Verificar se o período já deveria estar ativo\n  if (agora >= dataInicio && agora <= dataFim) {\n    return StatusPeriodo.ATIVO;\n  }\n  \n  // Período ainda não começou\n  return StatusPeriodo.PLANEJADO;\n}\n\n/**\n * Middleware para atualização automática de status antes de operações críticas\n * Deve ser chamado antes de:\n * - Listar períodos\n * - Buscar período específico\n * - Criar/editar avaliações\n * \n * @param periodoIds IDs específicos para atualizar (opcional)\n */\nexport async function middlewareAtualizacaoStatus(periodoIds?: string[]) {\n  try {\n    if (periodoIds && periodoIds.length > 0) {\n      // Atualizar apenas períodos específicos\n      const resultados = [];\n      for (const id of periodoIds) {\n        const resultado = await atualizarStatusPeriodo(id);\n        resultados.push(resultado);\n      }\n      return resultados;\n    } else {\n      // Atualizar todos os períodos que precisam\n      return await atualizarStatusPeriodos();\n    }\n  } catch (error) {\n    console.error('Erro no middleware de atualização de status:', error);\n    // Não falhar a operação principal por causa do middleware\n    return {\n      sucesso: false,\n      erro: error instanceof Error ? error.message : 'Erro no middleware'\n    };\n  }\n}"],"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","ignoreList":[]}