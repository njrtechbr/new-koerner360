{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\preferencias-notificacao.ts"],"sourcesContent":["import { \n  PreferenciasNotificacao, \n  PreferenciasNotificacaoInput, \n  PREFERENCIAS_DEFAULTS \n} from '../types/preferencias-notificacao';\nimport { prisma } from '../prisma';\n\nexport class PreferenciasNotificacaoService {\n  /**\n   * Busca as preferências de notificação de um usuário\n   * Se não existir, cria com valores padrão\n   */\n  static async buscarPorUsuario(usuarioId: string): Promise<PreferenciasNotificacao> {\n    try {\n      let preferencias = await prisma.preferenciaNotificacao.findUnique({\n        where: { usuarioId },\n      });\n\n      if (!preferencias) {\n        preferencias = await this.criarPreferenciasDefault(usuarioId);\n      }\n\n      return this.formatarPreferencias(preferencias);\n    } catch (error) {\n      console.error('Erro ao buscar preferências de notificação:', error);\n      throw new Error('Falha ao buscar preferências de notificação');\n    }\n  }\n\n  /**\n   * Atualiza as preferências de notificação de um usuário\n   */\n  static async atualizar(\n    usuarioId: string, \n    dados: PreferenciasNotificacaoInput\n  ): Promise<PreferenciasNotificacao> {\n    try {\n      // Busca preferências existentes ou cria com defaults\n      let preferenciasExistentes = await prisma.preferenciaNotificacao.findUnique({\n        where: { usuarioId },\n      });\n\n      if (!preferenciasExistentes) {\n        preferenciasExistentes = await this.criarPreferenciasDefault(usuarioId);\n      }\n\n      // Mescla dados existentes com novos dados\n      const dadosAtualizados = this.mesclarDados(preferenciasExistentes, dados);\n\n      const preferenciasAtualizadas = await prisma.preferenciaNotificacao.update({\n        where: { usuarioId },\n        data: {\n          ...dadosAtualizados,\n          atualizadoEm: new Date(),\n          versao: { increment: 1 },\n        },\n      });\n\n      return this.formatarPreferencias(preferenciasAtualizadas);\n    } catch (error) {\n      console.error('Erro ao atualizar preferências de notificação:', error);\n      throw new Error('Falha ao atualizar preferências de notificação');\n    }\n  }\n\n  /**\n   * Reseta as preferências para os valores padrão\n   */\n  static async resetarParaDefault(usuarioId: string): Promise<PreferenciasNotificacao> {\n    try {\n      const preferenciasResetadas = await prisma.preferenciaNotificacao.upsert({\n        where: { usuarioId },\n        update: {\n          ...this.criarDadosDefault(),\n          atualizadoEm: new Date(),\n          versao: { increment: 1 },\n        },\n        create: {\n          usuarioId,\n          ...this.criarDadosDefault(),\n        },\n      });\n\n      return this.formatarPreferencias(preferenciasResetadas);\n    } catch (error) {\n      console.error('Erro ao resetar preferências de notificação:', error);\n      throw new Error('Falha ao resetar preferências de notificação');\n    }\n  }\n\n  /**\n   * Pausa as notificações por um período\n   */\n  static async pausarNotificacoes(\n    usuarioId: string,\n    dataInicio: Date,\n    dataFim: Date,\n    motivo?: string\n  ): Promise<PreferenciasNotificacao> {\n    return this.atualizar(usuarioId, {\n      pausarNotificacoes: {\n        ativo: true,\n        dataInicio,\n        dataFim,\n        motivo,\n      },\n    });\n  }\n\n  /**\n   * Retoma as notificações (remove pausa)\n   */\n  static async retomarNotificacoes(usuarioId: string): Promise<PreferenciasNotificacao> {\n    return this.atualizar(usuarioId, {\n      pausarNotificacoes: {\n        ativo: false,\n        dataInicio: undefined,\n        dataFim: undefined,\n        motivo: undefined,\n      },\n    });\n  }\n\n  /**\n   * Verifica se as notificações estão pausadas para um usuário\n   */\n  static async verificarNotificacoesPausadas(usuarioId: string): Promise<boolean> {\n    try {\n      const preferencias = await this.buscarPorUsuario(usuarioId);\n      \n      if (!preferencias.pausarNotificacoes.ativo) {\n        return false;\n      }\n\n      const agora = new Date();\n      const dataInicio = preferencias.pausarNotificacoes.dataInicio;\n      const dataFim = preferencias.pausarNotificacoes.dataFim;\n\n      if (dataInicio && agora < dataInicio) {\n        return false;\n      }\n\n      if (dataFim && agora > dataFim) {\n        // Auto-retomar se passou do período\n        await this.retomarNotificacoes(usuarioId);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Erro ao verificar notificações pausadas:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Busca usuários que devem receber notificações de um tipo específico\n   */\n  static async buscarUsuariosParaNotificacao(\n    tipoNotificacao: keyof PreferenciasNotificacao['tiposNotificacao'],\n    urgencia?: PreferenciasNotificacao['urgenciaMinima']\n  ): Promise<string[]> {\n    try {\n      const whereClause: any = {\n        notificacoesAtivas: true,\n        [`tiposNotificacao.${tipoNotificacao}`]: true,\n        pausarNotificacoes: {\n          path: ['ativo'],\n          equals: false,\n        },\n      };\n\n      if (urgencia) {\n        const urgenciaOrder = { BAIXA: 1, MEDIA: 2, ALTA: 3 };\n        const urgenciaMinima = urgenciaOrder[urgencia];\n        \n        whereClause.OR = [\n          { urgenciaMinima: 'BAIXA' },\n          ...(urgenciaMinima >= 2 ? [{ urgenciaMinima: 'MEDIA' }] : []),\n          ...(urgenciaMinima >= 3 ? [{ urgenciaMinima: 'ALTA' }] : []),\n        ];\n      }\n\n      const preferencias = await prisma.preferenciaNotificacao.findMany({\n        where: whereClause,\n        select: { usuarioId: true },\n      });\n\n      return preferencias.map(p => p.usuarioId);\n    } catch (error) {\n      console.error('Erro ao buscar usuários para notificação:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Atualiza a data da última notificação enviada\n   */\n  static async atualizarUltimaNotificacao(usuarioId: string): Promise<void> {\n    try {\n      await prisma.preferenciaNotificacao.update({\n        where: { usuarioId },\n        data: { ultimaNotificacaoEnviada: new Date() },\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar última notificação:', error);\n    }\n  }\n\n  /**\n   * Cria preferências com valores padrão para um usuário\n   */\n  private static async criarPreferenciasDefault(usuarioId: string): Promise<any> {\n    return prisma.preferenciaNotificacao.create({\n      data: {\n        usuarioId,\n        ...this.criarDadosDefault(),\n      },\n    });\n  }\n\n  /**\n   * Cria objeto com dados padrão\n   */\n  private static criarDadosDefault(): any {\n    return {\n      notificacoesAtivas: PREFERENCIAS_DEFAULTS.notificacoesAtivas,\n      emailAtivo: PREFERENCIAS_DEFAULTS.emailAtivo,\n      diasAntecedenciaLembrete: PREFERENCIAS_DEFAULTS.diasAntecedenciaLembrete,\n      horarioEnvio: PREFERENCIAS_DEFAULTS.horarioEnvio,\n      incluirFinsDeSemanaSemana: PREFERENCIAS_DEFAULTS.incluirFinsDeSemanaSemana,\n      incluirFeriados: PREFERENCIAS_DEFAULTS.incluirFeriados,\n      tiposNotificacao: PREFERENCIAS_DEFAULTS.tiposNotificacao,\n      urgenciaMinima: PREFERENCIAS_DEFAULTS.urgenciaMinima,\n      frequenciaLembretes: PREFERENCIAS_DEFAULTS.frequenciaLembretes,\n      incluirDetalhesAvaliacao: PREFERENCIAS_DEFAULTS.incluirDetalhesAvaliacao,\n      incluirLinkDireto: PREFERENCIAS_DEFAULTS.incluirLinkDireto,\n      incluirResumoEstatisticas: PREFERENCIAS_DEFAULTS.incluirResumoEstatisticas,\n      formatoEmail: PREFERENCIAS_DEFAULTS.formatoEmail,\n      idiomaNotificacao: PREFERENCIAS_DEFAULTS.idiomaNotificacao,\n      pausarNotificacoes: {\n        ativo: false,\n      },\n      filtros: PREFERENCIAS_DEFAULTS.filtros,\n      criadoEm: new Date(),\n      atualizadoEm: new Date(),\n      versao: 1,\n    };\n  }\n\n  /**\n   * Mescla dados existentes com novos dados\n   */\n  private static mesclarDados(existentes: any, novos: PreferenciasNotificacaoInput): any {\n    const resultado = { ...existentes };\n\n    // Atualiza campos simples\n    Object.keys(novos).forEach(key => {\n      if (key === 'tiposNotificacao' || key === 'frequenciaLembretes' || \n          key === 'pausarNotificacoes' || key === 'filtros') {\n        // Para objetos aninhados, mescla propriedades\n        resultado[key] = {\n          ...resultado[key],\n          ...novos[key as keyof PreferenciasNotificacaoInput],\n        };\n      } else {\n        resultado[key] = novos[key as keyof PreferenciasNotificacaoInput];\n      }\n    });\n\n    return resultado;\n  }\n\n  /**\n   * Formata dados do banco para o tipo TypeScript\n   */\n  private static formatarPreferencias(dados: any): PreferenciasNotificacao {\n    return {\n      id: dados.id,\n      usuarioId: dados.usuarioId,\n      notificacoesAtivas: dados.notificacoesAtivas,\n      emailAtivo: dados.emailAtivo,\n      diasAntecedenciaLembrete: dados.diasAntecedenciaLembrete,\n      horarioEnvio: dados.horarioEnvio,\n      incluirFinsDeSemanaSemana: dados.incluirFinsDeSemanaSemana,\n      incluirFeriados: dados.incluirFeriados,\n      tiposNotificacao: dados.tiposNotificacao,\n      urgenciaMinima: dados.urgenciaMinima,\n      frequenciaLembretes: dados.frequenciaLembretes,\n      incluirDetalhesAvaliacao: dados.incluirDetalhesAvaliacao,\n      incluirLinkDireto: dados.incluirLinkDireto,\n      incluirResumoEstatisticas: dados.incluirResumoEstatisticas,\n      formatoEmail: dados.formatoEmail,\n      idiomaNotificacao: dados.idiomaNotificacao,\n      pausarNotificacoes: dados.pausarNotificacoes || { ativo: false },\n      filtros: dados.filtros,\n      criadoEm: dados.criadoEm,\n      atualizadoEm: dados.atualizadoEm,\n      ultimaNotificacaoEnviada: dados.ultimaNotificacaoEnviada,\n      versao: dados.versao,\n    };\n  }\n}"],"names":["PreferenciasNotificacaoService","buscarPorUsuario","usuarioId","preferencias","prisma","preferenciaNotificacao","findUnique","where","criarPreferenciasDefault","formatarPreferencias","error","console","Error","atualizar","dados","preferenciasExistentes","dadosAtualizados","mesclarDados","preferenciasAtualizadas","update","data","atualizadoEm","Date","versao","increment","resetarParaDefault","preferenciasResetadas","upsert","criarDadosDefault","create","pausarNotificacoes","dataInicio","dataFim","motivo","ativo","retomarNotificacoes","undefined","verificarNotificacoesPausadas","agora","buscarUsuariosParaNotificacao","tipoNotificacao","urgencia","whereClause","notificacoesAtivas","path","equals","urgenciaOrder","BAIXA","MEDIA","ALTA","urgenciaMinima","OR","findMany","select","map","p","atualizarUltimaNotificacao","ultimaNotificacaoEnviada","PREFERENCIAS_DEFAULTS","emailAtivo","diasAntecedenciaLembrete","horarioEnvio","incluirFinsDeSemanaSemana","incluirFeriados","tiposNotificacao","frequenciaLembretes","incluirDetalhesAvaliacao","incluirLinkDireto","incluirResumoEstatisticas","formatoEmail","idiomaNotificacao","filtros","criadoEm","existentes","novos","resultado","Object","keys","forEach","key","id"],"mappings":"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"}