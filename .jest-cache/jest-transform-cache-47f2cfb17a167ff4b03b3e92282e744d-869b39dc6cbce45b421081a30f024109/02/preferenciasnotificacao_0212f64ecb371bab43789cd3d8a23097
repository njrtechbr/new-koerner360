2ddfe31bd1fc9498e017ea533674c38e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PreferenciasNotificacaoService", {
    enumerable: true,
    get: function() {
        return PreferenciasNotificacaoService;
    }
});
const _preferenciasnotificacao = require("../types/preferencias-notificacao");
const _prisma = require("../prisma");
class PreferenciasNotificacaoService {
    /**
   * Busca as preferências de notificação de um usuário
   * Se não existir, cria com valores padrão
   */ static async buscarPorUsuario(usuarioId) {
        try {
            let preferencias = await _prisma.prisma.preferenciaNotificacao.findUnique({
                where: {
                    usuarioId
                }
            });
            if (!preferencias) {
                preferencias = await this.criarPreferenciasDefault(usuarioId);
            }
            return this.formatarPreferencias(preferencias);
        } catch (error) {
            console.error('Erro ao buscar preferências de notificação:', error);
            throw new Error('Falha ao buscar preferências de notificação');
        }
    }
    /**
   * Atualiza as preferências de notificação de um usuário
   */ static async atualizar(usuarioId, dados) {
        try {
            // Busca preferências existentes ou cria com defaults
            let preferenciasExistentes = await _prisma.prisma.preferenciaNotificacao.findUnique({
                where: {
                    usuarioId
                }
            });
            if (!preferenciasExistentes) {
                preferenciasExistentes = await this.criarPreferenciasDefault(usuarioId);
            }
            // Mescla dados existentes com novos dados
            const dadosAtualizados = this.mesclarDados(preferenciasExistentes, dados);
            const preferenciasAtualizadas = await _prisma.prisma.preferenciaNotificacao.update({
                where: {
                    usuarioId
                },
                data: {
                    ...dadosAtualizados,
                    atualizadoEm: new Date(),
                    versao: {
                        increment: 1
                    }
                }
            });
            return this.formatarPreferencias(preferenciasAtualizadas);
        } catch (error) {
            console.error('Erro ao atualizar preferências de notificação:', error);
            throw new Error('Falha ao atualizar preferências de notificação');
        }
    }
    /**
   * Reseta as preferências para os valores padrão
   */ static async resetarParaDefault(usuarioId) {
        try {
            const preferenciasResetadas = await _prisma.prisma.preferenciaNotificacao.upsert({
                where: {
                    usuarioId
                },
                update: {
                    ...this.criarDadosDefault(),
                    atualizadoEm: new Date(),
                    versao: {
                        increment: 1
                    }
                },
                create: {
                    usuarioId,
                    ...this.criarDadosDefault()
                }
            });
            return this.formatarPreferencias(preferenciasResetadas);
        } catch (error) {
            console.error('Erro ao resetar preferências de notificação:', error);
            throw new Error('Falha ao resetar preferências de notificação');
        }
    }
    /**
   * Pausa as notificações por um período
   */ static async pausarNotificacoes(usuarioId, dataInicio, dataFim, motivo) {
        return this.atualizar(usuarioId, {
            pausarNotificacoes: {
                ativo: true,
                dataInicio,
                dataFim,
                motivo
            }
        });
    }
    /**
   * Retoma as notificações (remove pausa)
   */ static async retomarNotificacoes(usuarioId) {
        return this.atualizar(usuarioId, {
            pausarNotificacoes: {
                ativo: false,
                dataInicio: undefined,
                dataFim: undefined,
                motivo: undefined
            }
        });
    }
    /**
   * Verifica se as notificações estão pausadas para um usuário
   */ static async verificarNotificacoesPausadas(usuarioId) {
        try {
            const preferencias = await this.buscarPorUsuario(usuarioId);
            if (!preferencias.pausarNotificacoes.ativo) {
                return false;
            }
            const agora = new Date();
            const dataInicio = preferencias.pausarNotificacoes.dataInicio;
            const dataFim = preferencias.pausarNotificacoes.dataFim;
            if (dataInicio && agora < dataInicio) {
                return false;
            }
            if (dataFim && agora > dataFim) {
                // Auto-retomar se passou do período
                await this.retomarNotificacoes(usuarioId);
                return false;
            }
            return true;
        } catch (error) {
            console.error('Erro ao verificar notificações pausadas:', error);
            return false;
        }
    }
    /**
   * Busca usuários que devem receber notificações de um tipo específico
   */ static async buscarUsuariosParaNotificacao(tipoNotificacao, urgencia) {
        try {
            const whereClause = {
                notificacoesAtivas: true,
                [`tiposNotificacao.${tipoNotificacao}`]: true,
                pausarNotificacoes: {
                    path: [
                        'ativo'
                    ],
                    equals: false
                }
            };
            if (urgencia) {
                const urgenciaOrder = {
                    BAIXA: 1,
                    MEDIA: 2,
                    ALTA: 3
                };
                const urgenciaMinima = urgenciaOrder[urgencia];
                whereClause.OR = [
                    {
                        urgenciaMinima: 'BAIXA'
                    },
                    ...urgenciaMinima >= 2 ? [
                        {
                            urgenciaMinima: 'MEDIA'
                        }
                    ] : [],
                    ...urgenciaMinima >= 3 ? [
                        {
                            urgenciaMinima: 'ALTA'
                        }
                    ] : []
                ];
            }
            const preferencias = await _prisma.prisma.preferenciaNotificacao.findMany({
                where: whereClause,
                select: {
                    usuarioId: true
                }
            });
            return preferencias.map((p)=>p.usuarioId);
        } catch (error) {
            console.error('Erro ao buscar usuários para notificação:', error);
            return [];
        }
    }
    /**
   * Atualiza a data da última notificação enviada
   */ static async atualizarUltimaNotificacao(usuarioId) {
        try {
            await _prisma.prisma.preferenciaNotificacao.update({
                where: {
                    usuarioId
                },
                data: {
                    ultimaNotificacaoEnviada: new Date()
                }
            });
        } catch (error) {
            console.error('Erro ao atualizar última notificação:', error);
        }
    }
    /**
   * Cria preferências com valores padrão para um usuário
   */ static async criarPreferenciasDefault(usuarioId) {
        return _prisma.prisma.preferenciaNotificacao.create({
            data: {
                usuarioId,
                ...this.criarDadosDefault()
            }
        });
    }
    /**
   * Cria objeto com dados padrão
   */ static criarDadosDefault() {
        return {
            notificacoesAtivas: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.notificacoesAtivas,
            emailAtivo: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.emailAtivo,
            diasAntecedenciaLembrete: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.diasAntecedenciaLembrete,
            horarioEnvio: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.horarioEnvio,
            incluirFinsDeSemanaSemana: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirFinsDeSemanaSemana,
            incluirFeriados: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirFeriados,
            tiposNotificacao: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.tiposNotificacao,
            urgenciaMinima: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.urgenciaMinima,
            frequenciaLembretes: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.frequenciaLembretes,
            incluirDetalhesAvaliacao: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirDetalhesAvaliacao,
            incluirLinkDireto: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirLinkDireto,
            incluirResumoEstatisticas: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.incluirResumoEstatisticas,
            formatoEmail: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.formatoEmail,
            idiomaNotificacao: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.idiomaNotificacao,
            pausarNotificacoes: {
                ativo: false
            },
            filtros: _preferenciasnotificacao.PREFERENCIAS_DEFAULTS.filtros,
            criadoEm: new Date(),
            atualizadoEm: new Date(),
            versao: 1
        };
    }
    /**
   * Mescla dados existentes com novos dados
   */ static mesclarDados(existentes, novos) {
        const resultado = {
            ...existentes
        };
        // Atualiza campos simples
        Object.keys(novos).forEach((key)=>{
            if (key === 'tiposNotificacao' || key === 'frequenciaLembretes' || key === 'pausarNotificacoes' || key === 'filtros') {
                // Para objetos aninhados, mescla propriedades
                resultado[key] = {
                    ...resultado[key],
                    ...novos[key]
                };
            } else {
                resultado[key] = novos[key];
            }
        });
        return resultado;
    }
    /**
   * Formata dados do banco para o tipo TypeScript
   */ static formatarPreferencias(dados) {
        return {
            id: dados.id,
            usuarioId: dados.usuarioId,
            notificacoesAtivas: dados.notificacoesAtivas,
            emailAtivo: dados.emailAtivo,
            diasAntecedenciaLembrete: dados.diasAntecedenciaLembrete,
            horarioEnvio: dados.horarioEnvio,
            incluirFinsDeSemanaSemana: dados.incluirFinsDeSemanaSemana,
            incluirFeriados: dados.incluirFeriados,
            tiposNotificacao: dados.tiposNotificacao,
            urgenciaMinima: dados.urgenciaMinima,
            frequenciaLembretes: dados.frequenciaLembretes,
            incluirDetalhesAvaliacao: dados.incluirDetalhesAvaliacao,
            incluirLinkDireto: dados.incluirLinkDireto,
            incluirResumoEstatisticas: dados.incluirResumoEstatisticas,
            formatoEmail: dados.formatoEmail,
            idiomaNotificacao: dados.idiomaNotificacao,
            pausarNotificacoes: dados.pausarNotificacoes || {
                ativo: false
            },
            filtros: dados.filtros,
            criadoEm: dados.criadoEm,
            atualizadoEm: dados.atualizadoEm,
            ultimaNotificacaoEnviada: dados.ultimaNotificacaoEnviada,
            versao: dados.versao
        };
    }
}

//# sourceMappingURL=data:application/json;base64,