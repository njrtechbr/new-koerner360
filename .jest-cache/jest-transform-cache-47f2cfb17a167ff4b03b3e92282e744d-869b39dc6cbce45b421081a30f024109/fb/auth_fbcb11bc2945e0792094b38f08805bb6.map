{"version":3,"names":["CONFIGURACOES_SEGURANCA","cov_lmu56q2xt","f","s","MENSAGENS_ERRO_AUTH","alterarEmailSchema","gerarSenhaTemporariaSchema","loginSchema","logoutSchema","primeiroAcessoSchema","redefinirSenhaComTokenSchema","reenviarCodigoSchema","registroSchema","solicitarRecuperacaoSenhaSchema","validacaoAuthCustomizada","validarCredenciais","validarDadosRegistro","validarSessaoSchema","validarToken","verificarEmailSchema","verificarTokenSchema","_zod","z","object","email","_usuarios","emailSchema","senha","string","min","lembrarMe","boolean","default","nome","nomeSchema","senhaSchema","confirmarSenha","userType","enum","errorMap","message","aceitarTermos","refine","val","data","path","token","novaSenha","adminKey","senhaTemporaria","refreshToken","optional","logoutTodos","emailAtual","novoEmail","codigo","length","tipo","dados","safeParse","CREDENCIAIS_INVALIDAS","CONTA_INATIVA","CONTA_BLOQUEADA","TOKEN_INVALIDO","TOKEN_EXPIRADO","EMAIL_NAO_VERIFICADO","SENHA_TEMPORARIA_EXPIRADA","SESSAO_EXPIRADA","ACESSO_NEGADO","MUITAS_TENTATIVAS","MAX_TENTATIVAS_LOGIN","TEMPO_BLOQUEIO_MINUTOS","DURACAO_TOKEN_RECUPERACAO_HORAS","DURACAO_SESSAO_HORAS","DURACAO_REFRESH_TOKEN_DIAS","TAMANHO_CODIGO_VERIFICACAO","DURACAO_CODIGO_VERIFICACAO_MINUTOS","podeLogar","motivo","validarForcaSenha","criterios","tamanho","minuscula","test","maiuscula","numero","especial","pontuacao","Object","values","filter","Boolean","valida","nivel","b","gerarCodigoVerificacao","Math","random","toString","slice","padStart","validarFormatoToken","partes","split"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\auth.ts"],"sourcesContent":["import { z } from 'zod';\nimport {\n  emailSchema,\n  senhaSchema,\n  nomeSchema,\n  perfilUsuarioSchema,\n} from './usuarios';\n\n/**\n * Schemas de validação para operações de autenticação\n * Centralizando validações de login, registro, recuperação de senha, etc.\n */\n\n// Schema para login\nexport const loginSchema = z.object({\n  email: emailSchema,\n  senha: z.string().min(1, 'Senha é obrigatória'),\n  lembrarMe: z.boolean().default(false),\n});\n\n// Schema para registro de usuário\nexport const registroSchema = z\n  .object({\n    nome: nomeSchema,\n    email: emailSchema,\n    senha: senhaSchema,\n    confirmarSenha: z.string().min(1, 'Confirmação de senha é obrigatória'),\n    userType: z.enum(['ADMIN', 'GESTOR', 'ATENDENTE'], {\n      errorMap: () => ({ message: 'Tipo de usuário inválido' }),\n    }),\n    aceitarTermos: z.boolean().refine(val => val === true, {\n      message: 'Você deve aceitar os termos de uso',\n    }),\n  })\n  .refine(data => data.senha === data.confirmarSenha, {\n    message: 'Senha e confirmação devem ser iguais',\n    path: ['confirmarSenha'],\n  });\n\n// Schema para solicitação de recuperação de senha\nexport const solicitarRecuperacaoSenhaSchema = z.object({\n  email: emailSchema,\n});\n\n// Schema para redefinição de senha com token\nexport const redefinirSenhaComTokenSchema = z\n  .object({\n    token: z.string().min(1, 'Token é obrigatório'),\n    novaSenha: senhaSchema,\n    confirmarSenha: z.string().min(1, 'Confirmação de senha é obrigatória'),\n  })\n  .refine(data => data.novaSenha === data.confirmarSenha, {\n    message: 'Nova senha e confirmação devem ser iguais',\n    path: ['confirmarSenha'],\n  });\n\n// Schema para verificação de token\nexport const verificarTokenSchema = z.object({\n  token: z.string().min(1, 'Token é obrigatório'),\n});\n\n// Schema para geração de senha temporária (admin)\nexport const gerarSenhaTemporariaSchema = z.object({\n  email: emailSchema,\n  adminKey: z.string().min(1, 'Chave de administrador é obrigatória'),\n});\n\n// Schema para primeiro acesso (alteração de senha temporária)\nexport const primeiroAcessoSchema = z\n  .object({\n    email: emailSchema,\n    senhaTemporaria: z.string().min(1, 'Senha temporária é obrigatória'),\n    novaSenha: senhaSchema,\n    confirmarSenha: z.string().min(1, 'Confirmação de senha é obrigatória'),\n  })\n  .refine(data => data.novaSenha === data.confirmarSenha, {\n    message: 'Nova senha e confirmação devem ser iguais',\n    path: ['confirmarSenha'],\n  });\n\n// Schema para validação de sessão\nexport const validarSessaoSchema = z.object({\n  token: z.string().min(1, 'Token de sessão é obrigatório'),\n  refreshToken: z.string().optional(),\n});\n\n// Schema para logout\nexport const logoutSchema = z.object({\n  token: z.string().optional(),\n  logoutTodos: z.boolean().default(false),\n});\n\n// Schema para alteração de email\nexport const alterarEmailSchema = z\n  .object({\n    emailAtual: emailSchema,\n    novoEmail: emailSchema,\n    senha: z.string().min(1, 'Senha é obrigatória para confirmar a alteração'),\n  })\n  .refine(data => data.emailAtual !== data.novoEmail, {\n    message: 'O novo email deve ser diferente do atual',\n    path: ['novoEmail'],\n  });\n\n// Schema para verificação de email\nexport const verificarEmailSchema = z.object({\n  email: emailSchema,\n  codigo: z.string().length(6, 'Código deve ter 6 dígitos'),\n});\n\n// Schema para reenvio de código de verificação\nexport const reenviarCodigoSchema = z.object({\n  email: emailSchema,\n  tipo: z.enum(['verificacao', 'recuperacao'], {\n    errorMap: () => ({ message: 'Tipo deve ser verificacao ou recuperacao' }),\n  }),\n});\n\n// Tipos TypeScript derivados dos schemas\nexport type LoginInput = z.infer<typeof loginSchema>;\nexport type RegistroInput = z.infer<typeof registroSchema>;\nexport type SolicitarRecuperacaoSenhaInput = z.infer<\n  typeof solicitarRecuperacaoSenhaSchema\n>;\nexport type RedefinirSenhaComTokenInput = z.infer<\n  typeof redefinirSenhaComTokenSchema\n>;\nexport type VerificarTokenInput = z.infer<typeof verificarTokenSchema>;\nexport type GerarSenhaTemporariaInput = z.infer<\n  typeof gerarSenhaTemporariaSchema\n>;\nexport type PrimeiroAcessoInput = z.infer<typeof primeiroAcessoSchema>;\nexport type ValidarSessaoInput = z.infer<typeof validarSessaoSchema>;\nexport type LogoutInput = z.infer<typeof logoutSchema>;\nexport type AlterarEmailInput = z.infer<typeof alterarEmailSchema>;\nexport type VerificarEmailInput = z.infer<typeof verificarEmailSchema>;\nexport type ReenviarCodigoInput = z.infer<typeof reenviarCodigoSchema>;\n\n// Utilitários de validação para autenticação\nexport const validarCredenciais = (dados: unknown) => {\n  return loginSchema.safeParse(dados);\n};\n\nexport const validarDadosRegistro = (dados: unknown) => {\n  return registroSchema.safeParse(dados);\n};\n\nexport const validarToken = (token: string) => {\n  return verificarTokenSchema.safeParse({ token });\n};\n\n// Mensagens de erro específicas para autenticação\nexport const MENSAGENS_ERRO_AUTH = {\n  CREDENCIAIS_INVALIDAS: 'Email ou senha incorretos',\n  CONTA_INATIVA: 'Sua conta está inativa. Entre em contato com o administrador',\n  CONTA_BLOQUEADA:\n    'Sua conta foi bloqueada devido a múltiplas tentativas de login',\n  TOKEN_INVALIDO: 'Token inválido ou expirado',\n  TOKEN_EXPIRADO: 'Token expirado. Solicite um novo',\n  EMAIL_NAO_VERIFICADO: 'Email não verificado. Verifique sua caixa de entrada',\n  SENHA_TEMPORARIA_EXPIRADA: 'Senha temporária expirada. Solicite uma nova',\n  SESSAO_EXPIRADA: 'Sua sessão expirou. Faça login novamente',\n  ACESSO_NEGADO:\n    'Acesso negado. Você não tem permissão para acessar este recurso',\n  MUITAS_TENTATIVAS:\n    'Muitas tentativas de login. Tente novamente em alguns minutos',\n} as const;\n\n// Configurações de segurança\nexport const CONFIGURACOES_SEGURANCA = {\n  MAX_TENTATIVAS_LOGIN: 5,\n  TEMPO_BLOQUEIO_MINUTOS: 15,\n  DURACAO_TOKEN_RECUPERACAO_HORAS: 1,\n  DURACAO_SESSAO_HORAS: 24,\n  DURACAO_REFRESH_TOKEN_DIAS: 7,\n  TAMANHO_CODIGO_VERIFICACAO: 6,\n  DURACAO_CODIGO_VERIFICACAO_MINUTOS: 10,\n} as const;\n\n// Validações customizadas para autenticação\nexport const validacaoAuthCustomizada = {\n  /**\n   * Valida se o usuário pode fazer login\n   */\n  podeLogar: async (email: string) => {\n    // Verificar se a conta está ativa, não bloqueada, etc.\n    return { podeLogar: true, motivo: null };\n  },\n\n  /**\n   * Valida força da senha\n   */\n  validarForcaSenha: (senha: string) => {\n    const criterios = {\n      tamanho: senha.length >= 8,\n      minuscula: /[a-z]/.test(senha),\n      maiuscula: /[A-Z]/.test(senha),\n      numero: /\\d/.test(senha),\n      especial: /[@$!%*?&]/.test(senha),\n    };\n\n    const pontuacao = Object.values(criterios).filter(Boolean).length;\n\n    return {\n      valida: pontuacao === 5,\n      pontuacao,\n      criterios,\n      nivel: pontuacao < 3 ? 'fraca' : pontuacao < 5 ? 'media' : 'forte',\n    };\n  },\n\n  /**\n   * Gera código de verificação\n   */\n  gerarCodigoVerificacao: () => {\n    return Math.random().toString().slice(2, 8).padStart(6, '0');\n  },\n\n  /**\n   * Valida formato de token JWT\n   */\n  validarFormatoToken: (token: string) => {\n    const partes = token.split('.');\n    return partes.length === 3;\n  },\n};\n"],"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","ignoreList":[]}