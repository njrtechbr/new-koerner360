{"version":3,"names":["GET","request","cov_1mj4wl62vw","f","s","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","_mensagens","MENSAGENS_ERRO_ATENDENTES","SEM_PERMISSAO","searchParams","URL","url","parametrosConsulta","Object","fromEntries","entries","pagina","limite","busca","atendenteId","tipo","dataInicio","dataFim","criadoPorId","_historicoatendentes","consultaHistoricoGeralSchema","parse","filtros","criadoEm","gte","Date","lte","OR","atendente","usuario","nome","contains","mode","descricao","offset","historico","total","Promise","all","_prisma","prisma","historicoAlteracaoAtendente","findMany","where","include","select","id","email","cargo","setor","orderBy","skip","take","count","totalPaginas","Math","ceil","temProximaPagina","temPaginaAnterior","estatisticasPorTipo","estatisticasPorPeriodo","topUsuarios","groupBy","by","_count","now","idsTopUsuarios","map","item","filter","Boolean","informacoesTopUsuarios","in","topUsuariosCompletos","find","u","totalAlteracoes","tipoAlteracao","dadosAnteriores","JSON","dadosNovos","alteradoPor","paginacao","paginaAtual","totalItens","itensPorPagina","estatisticas","porTipo","reduce","acc","ultimos7Dias","error","console","_zod","ZodError","DADOS_INVALIDOS","detalhes","errors","ERRO_INTERNO"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\historico\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { ZodError } from 'zod';\nimport { consultaHistoricoGeralSchema } from '@/lib/validations/historico-atendentes';\nimport { MENSAGENS_ERRO_ATENDENTES } from '@/lib/constants/mensagens';\n\n/**\n * GET /api/atendentes/historico\n * Lista o histórico de alterações de todos os atendentes\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN e GERENTE podem ver histórico geral)\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Extrair parâmetros de consulta\n    const { searchParams } = new URL(request.url);\n    const parametrosConsulta = Object.fromEntries(searchParams.entries());\n\n    // Validar parâmetros\n    const {\n      pagina = 1,\n      limite = 20,\n      busca,\n      atendenteId,\n      tipo,\n      dataInicio,\n      dataFim,\n      criadoPorId,\n    } = consultaHistoricoGeralSchema.parse(parametrosConsulta);\n\n    // Construir filtros\n    const filtros: any = {};\n\n    // Filtro por atendente específico\n    if (atendenteId) {\n      filtros.atendenteId = atendenteId;\n    }\n\n    // Filtro por tipo de alteração\n    if (tipo) {\n      filtros.tipo = tipo;\n    }\n\n    // Filtro por período\n    if (dataInicio || dataFim) {\n      filtros.criadoEm = {};\n      if (dataInicio) {\n        filtros.criadoEm.gte = new Date(dataInicio);\n      }\n      if (dataFim) {\n        filtros.criadoEm.lte = new Date(dataFim);\n      }\n    }\n\n    // Filtro por usuário que fez a alteração\n    if (criadoPorId) {\n      filtros.criadoPorId = criadoPorId;\n    }\n\n    // Filtro de busca (nome do atendente ou descrição)\n    if (busca) {\n      filtros.OR = [\n        {\n          atendente: {\n            usuario: {\n              nome: {\n                contains: busca,\n                mode: 'insensitive',\n              },\n            },\n          },\n        },\n        {\n          descricao: {\n            contains: busca,\n            mode: 'insensitive',\n          },\n        },\n      ];\n    }\n\n    // Calcular offset\n    const offset = (pagina - 1) * limite;\n\n    // Buscar histórico com paginação\n    const [historico, total] = await Promise.all([\n      prisma.historicoAlteracaoAtendente.findMany({\n        where: filtros,\n        include: {\n          atendente: {\n            select: {\n              id: true,\n              usuario: {\n                select: {\n                  nome: true,\n                  email: true,\n                },\n              },\n              cargo: true,\n              setor: true,\n              status: true,\n            },\n          },\n          usuario: {\n            select: {\n              nome: true,\n              email: true,\n              userType: true,\n            },\n          },\n        },\n        orderBy: {\n          criadoEm: 'desc',\n        },\n        skip: offset,\n        take: limite,\n      }),\n      prisma.historicoAlteracaoAtendente.count({\n        where: filtros,\n      }),\n    ]);\n\n    // Calcular informações de paginação\n    const totalPaginas = Math.ceil(total / limite);\n    const temProximaPagina = pagina < totalPaginas;\n    const temPaginaAnterior = pagina > 1;\n\n    // Buscar estatísticas gerais\n    const [estatisticasPorTipo, estatisticasPorPeriodo, topUsuarios] =\n      await Promise.all([\n        // Estatísticas por tipo de alteração\n        prisma.historicoAlteracaoAtendente.groupBy({\n          by: ['tipo'],\n          where: filtros,\n          _count: {\n            id: true,\n          },\n        }),\n\n        // Estatísticas por período (últimos 7 dias)\n        prisma.historicoAlteracaoAtendente.groupBy({\n          by: ['tipo'],\n          where: {\n            ...filtros,\n            criadoEm: {\n              gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n            },\n          },\n          _count: {\n            id: true,\n          },\n        }),\n\n        // Top 5 usuários que mais fizeram alterações\n        prisma.historicoAlteracaoAtendente.groupBy({\n          by: ['criadoPorId'],\n          where: filtros,\n          _count: {\n            id: true,\n          },\n          orderBy: {\n            _count: {\n              id: 'desc',\n            },\n          },\n          take: 5,\n        }),\n      ]);\n\n    // Buscar informações dos top usuários\n    const idsTopUsuarios = topUsuarios\n      .map(item => item.criadoPorId)\n      .filter(Boolean);\n    const informacoesTopUsuarios = await prisma.usuario.findMany({\n      where: {\n        id: {\n          in: idsTopUsuarios,\n        },\n      },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        userType: true,\n      },\n    });\n\n    // Mapear top usuários com suas informações\n    const topUsuariosCompletos = topUsuarios.map(item => {\n      const usuario = informacoesTopUsuarios.find(\n        u => u.id === item.criadoPorId\n      );\n      return {\n        usuario: usuario || {\n          id: item.criadoPorId || 'N/A',\n          nome: 'Usuário não encontrado',\n          email: '',\n          userType: '',\n        },\n        totalAlteracoes: item._count.id,\n      };\n    });\n\n    return NextResponse.json({\n      historico: historico.map(item => ({\n        id: item.id,\n        tipoAlteracao: item.tipo,\n        descricao: item.descricao,\n        dadosAnteriores: item.dadosAnteriores\n          ? JSON.parse(item.dadosAnteriores)\n          : null,\n        dadosNovos: item.dadosNovos ? JSON.parse(item.dadosNovos) : null,\n        atendente: {\n          id: item.atendente.id,\n          nome: item.atendente.usuario.nome,\n          email: item.atendente.usuario.email,\n          cargo: item.atendente.cargo,\n          setor: item.atendente.setor,\n          status: item.atendente.status,\n        },\n        alteradoPor: {\n          id: item.criadoPorId,\n          nome: item.usuario.nome,\n          email: item.usuario.email,\n          tipo: item.usuario.userType,\n        },\n        criadoEm: item.criadoEm,\n      })),\n      paginacao: {\n        paginaAtual: pagina,\n        totalPaginas,\n        totalItens: total,\n        itensPorPagina: limite,\n        temProximaPagina,\n        temPaginaAnterior,\n      },\n      estatisticas: {\n        totalAlteracoes: total,\n        porTipo: estatisticasPorTipo.reduce(\n          (acc, item) => {\n            acc[item.tipo] = item._count.id;\n            return acc;\n          },\n          {} as Record<string, number>\n        ),\n        ultimos7Dias: estatisticasPorPeriodo.reduce(\n          (acc, item) => {\n            acc[item.tipo] = item._count.id;\n            return acc;\n          },\n          {} as Record<string, number>\n        ),\n        topUsuarios: topUsuariosCompletos,\n      },\n      filtros: {\n        busca,\n        atendenteId,\n        tipo,\n        dataInicio,\n        dataFim,\n        criadoPorId,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao buscar histórico geral de atendentes:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}