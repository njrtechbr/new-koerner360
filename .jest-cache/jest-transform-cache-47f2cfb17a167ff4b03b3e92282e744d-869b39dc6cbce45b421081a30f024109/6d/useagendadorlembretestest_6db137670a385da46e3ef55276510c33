88f024b25c23e355798d809c38dee5fc
"use strict";
// Mock do hook useToast
jest.mock('../use-toast', ()=>({
        useToast: vi.fn(()=>({
                toast: jest.fn()
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _useagendadorlembretes = require("../use-agendador-lembretes");
const _usetoast = require("../use-toast");
// Mock do fetch global
const mockFetch = jest.fn();
global.fetch = mockFetch;
// Mock dos dados de teste
const mockConfiguracao = {
    ativo: true,
    horarioEnvio: '09:00',
    diasAntecedencia: 3,
    incluirFinsDeSemanaSemana: false,
    incluirFeriados: false,
    tiposNotificacao: [
        'AVALIACAO_PENDENTE',
        'AVALIACAO_VENCIDA'
    ],
    criadoEm: new Date().toISOString(),
    atualizadoEm: new Date().toISOString()
};
const mockStatus = {
    ativo: true,
    executando: false,
    ultimaExecucao: new Date().toISOString(),
    proximaExecucao: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
    totalLembretes: 15,
    lembretesEnviados: 12,
    lembretesPendentes: 3,
    lembretesFalhas: 0
};
const mockEstatisticas = {
    agendados: 15,
    enviados: 12,
    pendentes: 3,
    falhas: 0,
    proximosEnvios: [
        {
            data: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
            quantidade: 5
        }
    ],
    ultimosEnvios: [
        {
            data: new Date().toISOString(),
            quantidade: 3,
            sucesso: 3,
            falhas: 0
        }
    ]
};
(0, _globals.describe)('useAgendadorLembretes', ()=>{
    const mockToast = jest.fn();
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
        _usetoast.useToast.mockReturnValue({
            toast: mockToast
        });
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.describe)('buscarConfiguracao', ()=>{
        (0, _globals.it)('deve buscar configuração com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarConfiguracao();
            });
            (0, _globals.expect)(result.current.configuracao).toEqual(mockConfiguracao);
            (0, _globals.expect)(result.current.carregando).toBe(false);
            (0, _globals.expect)(result.current.erro).toBeNull();
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/configuracao', _globals.expect.objectContaining({
                method: 'GET'
            }));
        });
        (0, _globals.it)('deve lidar com erro na busca da configuração', async ()=>{
            const errorMessage = 'Erro ao buscar configuração';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarConfiguracao();
            });
            (0, _globals.expect)(result.current.configuracao).toBeNull();
            (0, _globals.expect)(result.current.carregando).toBe(false);
            (0, _globals.expect)(result.current.erro).toBe(errorMessage);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('atualizarConfiguracao', ()=>{
        (0, _globals.it)('deve atualizar configuração com sucesso', async ()=>{
            const novaConfiguracao = {
                ativo: false,
                horarioEnvio: '10:00',
                diasAntecedencia: 5
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...mockConfiguracao,
                        ...novaConfiguracao
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let configuracaoAtualizada;
            await (0, _react.act)(async ()=>{
                configuracaoAtualizada = await result.current.atualizarConfiguracao(novaConfiguracao);
            });
            (0, _globals.expect)(configuracaoAtualizada).toEqual({
                ...mockConfiguracao,
                ...novaConfiguracao
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/configuracao', _globals.expect.objectContaining({
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(novaConfiguracao)
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Configuração atualizada com sucesso'
            });
        });
        (0, _globals.it)('deve lidar com erro ao atualizar configuração', async ()=>{
            const errorMessage = 'Erro ao atualizar configuração';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            const novaConfiguracao = {
                ativo: false
            };
            let configuracaoAtualizada;
            await (0, _react.act)(async ()=>{
                configuracaoAtualizada = await result.current.atualizarConfiguracao(novaConfiguracao);
            });
            (0, _globals.expect)(configuracaoAtualizada).toBeNull();
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('buscarStatus', ()=>{
        (0, _globals.it)('deve buscar status com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatus
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarStatus();
            });
            (0, _globals.expect)(result.current.status).toEqual(mockStatus);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/status', _globals.expect.objectContaining({
                method: 'GET'
            }));
        });
        (0, _globals.it)('deve lidar com erro na busca do status', async ()=>{
            const errorMessage = 'Erro ao buscar status';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarStatus();
            });
            (0, _globals.expect)(result.current.status).toBeNull();
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('buscarEstatisticas', ()=>{
        (0, _globals.it)('deve buscar estatísticas com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.buscarEstatisticas();
            });
            (0, _globals.expect)(result.current.estatisticas).toEqual(mockEstatisticas);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/estatisticas', _globals.expect.objectContaining({
                method: 'GET'
            }));
        });
        (0, _globals.it)('deve buscar estatísticas com filtros', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            const filtros = {
                dataInicio: new Date('2024-01-01'),
                dataFim: new Date('2024-12-31'),
                tipo: 'AVALIACAO_PENDENTE'
            };
            await (0, _react.act)(async ()=>{
                await result.current.buscarEstatisticas(filtros);
            });
            const url = mockFetch.mock.calls[0][0];
            (0, _globals.expect)(url).toContain('dataInicio=2024-01-01');
            (0, _globals.expect)(url).toContain('dataFim=2024-12-31');
            (0, _globals.expect)(url).toContain('tipo=AVALIACAO_PENDENTE');
        });
    });
    (0, _globals.describe)('iniciarAgendador', ()=>{
        (0, _globals.it)('deve iniciar agendador com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.iniciarAgendador();
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/iniciar', _globals.expect.objectContaining({
                method: 'POST'
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Agendador iniciado com sucesso'
            });
        });
        (0, _globals.it)('deve lidar com erro ao iniciar agendador', async ()=>{
            const errorMessage = 'Erro ao iniciar agendador';
            mockFetch.mockRejectedValueOnce(new Error(errorMessage));
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.iniciarAgendador();
            });
            (0, _globals.expect)(sucesso).toBe(false);
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Erro',
                description: errorMessage,
                variant: 'destructive'
            });
        });
    });
    (0, _globals.describe)('pararAgendador', ()=>{
        (0, _globals.it)('deve parar agendador com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let sucesso;
            await (0, _react.act)(async ()=>{
                sucesso = await result.current.pararAgendador();
            });
            (0, _globals.expect)(sucesso).toBe(true);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/parar', _globals.expect.objectContaining({
                method: 'POST'
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Agendador parado com sucesso'
            });
        });
    });
    (0, _globals.describe)('forcarVerificacao', ()=>{
        (0, _globals.it)('deve forçar verificação com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        processados: 5
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let resultado;
            await (0, _react.act)(async ()=>{
                resultado = await result.current.forcarVerificacao();
            });
            (0, _globals.expect)(resultado).toEqual({
                processados: 5
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/verificar', _globals.expect.objectContaining({
                method: 'POST'
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Verificação executada com sucesso. 5 lembretes processados.'
            });
        });
    });
    (0, _globals.describe)('limparLembretesPendentes', ()=>{
        (0, _globals.it)('deve limpar lembretes pendentes com sucesso', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        removidos: 3
                    })
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let resultado;
            await (0, _react.act)(async ()=>{
                resultado = await result.current.limparLembretesPendentes();
            });
            (0, _globals.expect)(resultado).toEqual({
                removidos: 3
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/limpar', _globals.expect.objectContaining({
                method: 'DELETE'
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: '3 lembretes pendentes removidos com sucesso'
            });
        });
    });
    (0, _globals.describe)('resetarConfiguracao', ()=>{
        (0, _globals.it)('deve resetar configuração com sucesso', async ()=>{
            const configuracaoPadrao = {
                ativo: false,
                horarioEnvio: '09:00',
                diasAntecedencia: 3,
                incluirFinsDeSemanaSemana: false,
                incluirFeriados: false,
                tiposNotificacao: []
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>configuracaoPadrao
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            let configuracao;
            await (0, _react.act)(async ()=>{
                configuracao = await result.current.resetarConfiguracao();
            });
            (0, _globals.expect)(configuracao).toEqual(configuracaoPadrao);
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/agendador-lembretes/reset', _globals.expect.objectContaining({
                method: 'POST'
            }));
            (0, _globals.expect)(mockToast).toHaveBeenCalledWith({
                title: 'Sucesso',
                description: 'Configuração resetada para os valores padrão'
            });
        });
    });
    (0, _globals.describe)('estados de carregamento', ()=>{
        (0, _globals.it)('deve gerenciar estado de carregamento corretamente', async ()=>{
            let resolvePromise;
            const promise = new Promise((resolve)=>{
                resolvePromise = resolve;
            });
            mockFetch.mockReturnValueOnce(promise);
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            // Iniciar busca
            (0, _react.act)(()=>{
                result.current.buscarConfiguracao();
            });
            // Verificar que está carregando
            (0, _globals.expect)(result.current.carregando).toBe(true);
            // Resolver promise
            await (0, _react.act)(async ()=>{
                resolvePromise({
                    ok: true,
                    json: async ()=>mockConfiguracao
                });
            });
            // Verificar que não está mais carregando
            (0, _globals.expect)(result.current.carregando).toBe(false);
        });
    });
    (0, _globals.describe)('atualização automática', ()=>{
        (0, _globals.it)('deve atualizar dados automaticamente após ações', async ()=>{
            // Mock para buscarConfiguracao
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatus
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            await (0, _react.act)(async ()=>{
                await result.current.iniciarAgendador();
            });
            // Verificar que as funções de busca foram chamadas após a ação
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(4); // iniciar + buscarConfiguracao + buscarStatus + buscarEstatisticas
        });
    });
    (0, _globals.describe)('integração completa', ()=>{
        (0, _globals.it)('deve executar fluxo completo de configuração e controle', async ()=>{
            // Setup mocks para todas as chamadas
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        ...mockConfiguracao,
                        ativo: false
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatus
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockConfiguracao
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockStatus
            }).mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockEstatisticas
            });
            const { result } = (0, _react.renderHook)(()=>(0, _useagendadorlembretes.useAgendadorLembretes)());
            // 1. Buscar configuração inicial
            await (0, _react.act)(async ()=>{
                await result.current.buscarConfiguracao();
            });
            (0, _globals.expect)(result.current.configuracao).toEqual(mockConfiguracao);
            // 2. Atualizar configuração
            await (0, _react.act)(async ()=>{
                await result.current.atualizarConfiguracao({
                    ativo: false
                });
            });
            // 3. Buscar status e estatísticas
            await (0, _react.act)(async ()=>{
                await result.current.buscarStatus();
                await result.current.buscarEstatisticas();
            });
            // 4. Iniciar agendador
            await (0, _react.act)(async ()=>{
                await result.current.iniciarAgendador();
            });
            // Verificar que todas as chamadas foram feitas
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(9);
            (0, _globals.expect)(result.current.status).toEqual(mockStatus);
            (0, _globals.expect)(result.current.estatisticas).toEqual(mockEstatisticas);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmVyZXUgSnJcXERvY3VtZW50c1xcRGV2XFxuZXdcXHNyY1xcaG9va3NcXF9fdGVzdHNfX1xcdXNlLWFnZW5kYWRvci1sZW1icmV0ZXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXJIb29rLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVFYWNoLCBhZnRlckVhY2ggfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7IHVzZUFnZW5kYWRvckxlbWJyZXRlcyB9IGZyb20gJy4uL3VzZS1hZ2VuZGFkb3ItbGVtYnJldGVzJztcbmltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnLi4vdXNlLXRvYXN0JztcblxuLy8gTW9jayBkbyBob29rIHVzZVRvYXN0XG5qZXN0Lm1vY2soJy4uL3VzZS10b2FzdCcsICgpID0+ICh7XG4gIHVzZVRvYXN0OiB2aS5mbigoKSA9PiAoe1xuICAgIHRvYXN0OiBqZXN0LmZuKCksXG4gIH0pKSxcbn0pKTtcblxuLy8gTW9jayBkbyBmZXRjaCBnbG9iYWxcbmNvbnN0IG1vY2tGZXRjaCA9IGplc3QuZm4oKTtcbmdsb2JhbC5mZXRjaCA9IG1vY2tGZXRjaDtcblxuLy8gTW9jayBkb3MgZGFkb3MgZGUgdGVzdGVcbmNvbnN0IG1vY2tDb25maWd1cmFjYW8gPSB7XG4gIGF0aXZvOiB0cnVlLFxuICBob3JhcmlvRW52aW86ICcwOTowMCcsXG4gIGRpYXNBbnRlY2VkZW5jaWE6IDMsXG4gIGluY2x1aXJGaW5zRGVTZW1hbmFTZW1hbmE6IGZhbHNlLFxuICBpbmNsdWlyRmVyaWFkb3M6IGZhbHNlLFxuICB0aXBvc05vdGlmaWNhY2FvOiBbJ0FWQUxJQUNBT19QRU5ERU5URScsICdBVkFMSUFDQU9fVkVOQ0lEQSddLFxuICBjcmlhZG9FbTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICBhdHVhbGl6YWRvRW06IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbn07XG5cbmNvbnN0IG1vY2tTdGF0dXMgPSB7XG4gIGF0aXZvOiB0cnVlLFxuICBleGVjdXRhbmRvOiBmYWxzZSxcbiAgdWx0aW1hRXhlY3VjYW86IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgcHJveGltYUV4ZWN1Y2FvOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSxcbiAgdG90YWxMZW1icmV0ZXM6IDE1LFxuICBsZW1icmV0ZXNFbnZpYWRvczogMTIsXG4gIGxlbWJyZXRlc1BlbmRlbnRlczogMyxcbiAgbGVtYnJldGVzRmFsaGFzOiAwLFxufTtcblxuY29uc3QgbW9ja0VzdGF0aXN0aWNhcyA9IHtcbiAgYWdlbmRhZG9zOiAxNSxcbiAgZW52aWFkb3M6IDEyLFxuICBwZW5kZW50ZXM6IDMsXG4gIGZhbGhhczogMCxcbiAgcHJveGltb3NFbnZpb3M6IFtcbiAgICB7XG4gICAgICBkYXRhOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHF1YW50aWRhZGU6IDUsXG4gICAgfSxcbiAgXSxcbiAgdWx0aW1vc0VudmlvczogW1xuICAgIHtcbiAgICAgIGRhdGE6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHF1YW50aWRhZGU6IDMsXG4gICAgICBzdWNlc3NvOiAzLFxuICAgICAgZmFsaGFzOiAwLFxuICAgIH0sXG4gIF0sXG59O1xuXG5kZXNjcmliZSgndXNlQWdlbmRhZG9yTGVtYnJldGVzJywgKCkgPT4ge1xuICBjb25zdCBtb2NrVG9hc3QgPSBqZXN0LmZuKCk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgKHVzZVRvYXN0IGFzIGFueSkubW9ja1JldHVyblZhbHVlKHsgdG9hc3Q6IG1vY2tUb2FzdCB9KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2J1c2NhckNvbmZpZ3VyYWNhbycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBidXNjYXIgY29uZmlndXJhw6fDo28gY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IG1vY2tDb25maWd1cmFjYW8sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5idXNjYXJDb25maWd1cmFjYW8oKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY29uZmlndXJhY2FvKS50b0VxdWFsKG1vY2tDb25maWd1cmFjYW8pO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNhcnJlZ2FuZG8pLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm8pLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJy9hcGkvYWdlbmRhZG9yLWxlbWJyZXRlcy9jb25maWd1cmFjYW8nLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBsaWRhciBjb20gZXJybyBuYSBidXNjYSBkYSBjb25maWd1cmHDp8OjbycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICdFcnJvIGFvIGJ1c2NhciBjb25maWd1cmHDp8Ojbyc7XG4gICAgICBtb2NrRmV0Y2gubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5idXNjYXJDb25maWd1cmFjYW8oKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY29uZmlndXJhY2FvKS50b0JlTnVsbCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmNhcnJlZ2FuZG8pLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmVycm8pLnRvQmUoZXJyb3JNZXNzYWdlKTtcbiAgICAgIGV4cGVjdChtb2NrVG9hc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgdGl0bGU6ICdFcnJvJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yTWVzc2FnZSxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnYXR1YWxpemFyQ29uZmlndXJhY2FvJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGF0dWFsaXphciBjb25maWd1cmHDp8OjbyBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG5vdmFDb25maWd1cmFjYW8gPSB7XG4gICAgICAgIGF0aXZvOiBmYWxzZSxcbiAgICAgICAgaG9yYXJpb0VudmlvOiAnMTA6MDAnLFxuICAgICAgICBkaWFzQW50ZWNlZGVuY2lhOiA1LFxuICAgICAgfTtcblxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyAuLi5tb2NrQ29uZmlndXJhY2FvLCAuLi5ub3ZhQ29uZmlndXJhY2FvIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFnZW5kYWRvckxlbWJyZXRlcygpKTtcblxuICAgICAgbGV0IGNvbmZpZ3VyYWNhb0F0dWFsaXphZGE7XG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25maWd1cmFjYW9BdHVhbGl6YWRhID0gYXdhaXQgcmVzdWx0LmN1cnJlbnQuYXR1YWxpemFyQ29uZmlndXJhY2FvKG5vdmFDb25maWd1cmFjYW8pO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChjb25maWd1cmFjYW9BdHVhbGl6YWRhKS50b0VxdWFsKHsgLi4ubW9ja0NvbmZpZ3VyYWNhbywgLi4ubm92YUNvbmZpZ3VyYWNhbyB9KTtcbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnL2FwaS9hZ2VuZGFkb3ItbGVtYnJldGVzL2NvbmZpZ3VyYWNhbycsXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShub3ZhQ29uZmlndXJhY2FvKSxcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChtb2NrVG9hc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgdGl0bGU6ICdTdWNlc3NvJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdDb25maWd1cmHDp8OjbyBhdHVhbGl6YWRhIGNvbSBzdWNlc3NvJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGlkYXIgY29tIGVycm8gYW8gYXR1YWxpemFyIGNvbmZpZ3VyYcOnw6NvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ0Vycm8gYW8gYXR1YWxpemFyIGNvbmZpZ3VyYcOnw6NvJztcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKGVycm9yTWVzc2FnZSkpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBZ2VuZGFkb3JMZW1icmV0ZXMoKSk7XG5cbiAgICAgIGNvbnN0IG5vdmFDb25maWd1cmFjYW8gPSB7XG4gICAgICAgIGF0aXZvOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIGxldCBjb25maWd1cmFjYW9BdHVhbGl6YWRhO1xuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uZmlndXJhY2FvQXR1YWxpemFkYSA9IGF3YWl0IHJlc3VsdC5jdXJyZW50LmF0dWFsaXphckNvbmZpZ3VyYWNhbyhub3ZhQ29uZmlndXJhY2FvKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QoY29uZmlndXJhY2FvQXR1YWxpemFkYSkudG9CZU51bGwoKTtcbiAgICAgIGV4cGVjdChtb2NrVG9hc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgdGl0bGU6ICdFcnJvJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yTWVzc2FnZSxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnYnVzY2FyU3RhdHVzJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGJ1c2NhciBzdGF0dXMgY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IG1vY2tTdGF0dXMsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5idXNjYXJTdGF0dXMoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc3RhdHVzKS50b0VxdWFsKG1vY2tTdGF0dXMpO1xuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICcvYXBpL2FnZW5kYWRvci1sZW1icmV0ZXMvc3RhdHVzJyxcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGlkYXIgY29tIGVycm8gbmEgYnVzY2EgZG8gc3RhdHVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ0Vycm8gYW8gYnVzY2FyIHN0YXR1cyc7XG4gICAgICBtb2NrRmV0Y2gubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5idXNjYXJTdGF0dXMoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuc3RhdHVzKS50b0JlTnVsbCgpO1xuICAgICAgZXhwZWN0KG1vY2tUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0aXRsZTogJ0Vycm8nLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3JNZXNzYWdlLFxuICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdidXNjYXJFc3RhdGlzdGljYXMnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgYnVzY2FyIGVzdGF0w61zdGljYXMgY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IG1vY2tFc3RhdGlzdGljYXMsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5idXNjYXJFc3RhdGlzdGljYXMoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXN0YXRpc3RpY2FzKS50b0VxdWFsKG1vY2tFc3RhdGlzdGljYXMpO1xuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICcvYXBpL2FnZW5kYWRvci1sZW1icmV0ZXMvZXN0YXRpc3RpY2FzJyxcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgYnVzY2FyIGVzdGF0w61zdGljYXMgY29tIGZpbHRyb3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IG1vY2tFc3RhdGlzdGljYXMsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBjb25zdCBmaWx0cm9zID0ge1xuICAgICAgICBkYXRhSW5pY2lvOiBuZXcgRGF0ZSgnMjAyNC0wMS0wMScpLFxuICAgICAgICBkYXRhRmltOiBuZXcgRGF0ZSgnMjAyNC0xMi0zMScpLFxuICAgICAgICB0aXBvOiAnQVZBTElBQ0FPX1BFTkRFTlRFJyBhcyBjb25zdCxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmJ1c2NhckVzdGF0aXN0aWNhcyhmaWx0cm9zKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB1cmwgPSBtb2NrRmV0Y2gubW9jay5jYWxsc1swXVswXTtcbiAgICAgIGV4cGVjdCh1cmwpLnRvQ29udGFpbignZGF0YUluaWNpbz0yMDI0LTAxLTAxJyk7XG4gICAgICBleHBlY3QodXJsKS50b0NvbnRhaW4oJ2RhdGFGaW09MjAyNC0xMi0zMScpO1xuICAgICAgZXhwZWN0KHVybCkudG9Db250YWluKCd0aXBvPUFWQUxJQUNBT19QRU5ERU5URScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaW5pY2lhckFnZW5kYWRvcicsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBpbmljaWFyIGFnZW5kYWRvciBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBZ2VuZGFkb3JMZW1icmV0ZXMoKSk7XG5cbiAgICAgIGxldCBzdWNlc3NvO1xuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgc3VjZXNzbyA9IGF3YWl0IHJlc3VsdC5jdXJyZW50LmluaWNpYXJBZ2VuZGFkb3IoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc3VjZXNzbykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnL2FwaS9hZ2VuZGFkb3ItbGVtYnJldGVzL2luaWNpYXInLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBleHBlY3QobW9ja1RvYXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHRpdGxlOiAnU3VjZXNzbycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQWdlbmRhZG9yIGluaWNpYWRvIGNvbSBzdWNlc3NvJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGlkYXIgY29tIGVycm8gYW8gaW5pY2lhciBhZ2VuZGFkb3InLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAnRXJybyBhbyBpbmljaWFyIGFnZW5kYWRvcic7XG4gICAgICBtb2NrRmV0Y2gubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBsZXQgc3VjZXNzbztcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIHN1Y2Vzc28gPSBhd2FpdCByZXN1bHQuY3VycmVudC5pbmljaWFyQWdlbmRhZG9yKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHN1Y2Vzc28pLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KG1vY2tUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0aXRsZTogJ0Vycm8nLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3JNZXNzYWdlLFxuICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwYXJhckFnZW5kYWRvcicsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBwYXJhciBhZ2VuZGFkb3IgY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+ICh7IHN1Y2Nlc3M6IHRydWUgfSksXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBsZXQgc3VjZXNzbztcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIHN1Y2Vzc28gPSBhd2FpdCByZXN1bHQuY3VycmVudC5wYXJhckFnZW5kYWRvcigpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChzdWNlc3NvKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICcvYXBpL2FnZW5kYWRvci1sZW1icmV0ZXMvcGFyYXInLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBleHBlY3QobW9ja1RvYXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHRpdGxlOiAnU3VjZXNzbycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQWdlbmRhZG9yIHBhcmFkbyBjb20gc3VjZXNzbycsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2ZvcmNhclZlcmlmaWNhY2FvJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGZvcsOnYXIgdmVyaWZpY2HDp8OjbyBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgcHJvY2Vzc2Fkb3M6IDUgfSksXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBsZXQgcmVzdWx0YWRvO1xuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgcmVzdWx0YWRvID0gYXdhaXQgcmVzdWx0LmN1cnJlbnQuZm9yY2FyVmVyaWZpY2FjYW8oKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0YWRvKS50b0VxdWFsKHsgcHJvY2Vzc2Fkb3M6IDUgfSk7XG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJy9hcGkvYWdlbmRhZG9yLWxlbWJyZXRlcy92ZXJpZmljYXInLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBleHBlY3QobW9ja1RvYXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHRpdGxlOiAnU3VjZXNzbycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVmVyaWZpY2HDp8OjbyBleGVjdXRhZGEgY29tIHN1Y2Vzc28uIDUgbGVtYnJldGVzIHByb2Nlc3NhZG9zLicsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2xpbXBhckxlbWJyZXRlc1BlbmRlbnRlcycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBsaW1wYXIgbGVtYnJldGVzIHBlbmRlbnRlcyBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgcmVtb3ZpZG9zOiAzIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFnZW5kYWRvckxlbWJyZXRlcygpKTtcblxuICAgICAgbGV0IHJlc3VsdGFkbztcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIHJlc3VsdGFkbyA9IGF3YWl0IHJlc3VsdC5jdXJyZW50LmxpbXBhckxlbWJyZXRlc1BlbmRlbnRlcygpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHRhZG8pLnRvRXF1YWwoeyByZW1vdmlkb3M6IDMgfSk7XG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJy9hcGkvYWdlbmRhZG9yLWxlbWJyZXRlcy9saW1wYXInLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChtb2NrVG9hc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgdGl0bGU6ICdTdWNlc3NvJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICczIGxlbWJyZXRlcyBwZW5kZW50ZXMgcmVtb3ZpZG9zIGNvbSBzdWNlc3NvJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVzZXRhckNvbmZpZ3VyYWNhbycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSByZXNldGFyIGNvbmZpZ3VyYcOnw6NvIGNvbSBzdWNlc3NvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29uZmlndXJhY2FvUGFkcmFvID0ge1xuICAgICAgICBhdGl2bzogZmFsc2UsXG4gICAgICAgIGhvcmFyaW9FbnZpbzogJzA5OjAwJyxcbiAgICAgICAgZGlhc0FudGVjZWRlbmNpYTogMyxcbiAgICAgICAgaW5jbHVpckZpbnNEZVNlbWFuYVNlbWFuYTogZmFsc2UsXG4gICAgICAgIGluY2x1aXJGZXJpYWRvczogZmFsc2UsXG4gICAgICAgIHRpcG9zTm90aWZpY2FjYW86IFtdLFxuICAgICAgfTtcblxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBjb25maWd1cmFjYW9QYWRyYW8sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBsZXQgY29uZmlndXJhY2FvO1xuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uZmlndXJhY2FvID0gYXdhaXQgcmVzdWx0LmN1cnJlbnQucmVzZXRhckNvbmZpZ3VyYWNhbygpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChjb25maWd1cmFjYW8pLnRvRXF1YWwoY29uZmlndXJhY2FvUGFkcmFvKTtcbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnL2FwaS9hZ2VuZGFkb3ItbGVtYnJldGVzL3Jlc2V0JyxcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1vY2tUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0aXRsZTogJ1N1Y2Vzc28nLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0NvbmZpZ3VyYcOnw6NvIHJlc2V0YWRhIHBhcmEgb3MgdmFsb3JlcyBwYWRyw6NvJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZXN0YWRvcyBkZSBjYXJyZWdhbWVudG8nLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgZ2VyZW5jaWFyIGVzdGFkbyBkZSBjYXJyZWdhbWVudG8gY29ycmV0YW1lbnRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHJlc29sdmVQcm9taXNlOiAodmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICB9KTtcblxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXR1cm5WYWx1ZU9uY2UocHJvbWlzZSk7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFnZW5kYWRvckxlbWJyZXRlcygpKTtcblxuICAgICAgLy8gSW5pY2lhciBidXNjYVxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuYnVzY2FyQ29uZmlndXJhY2FvKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSBlc3TDoSBjYXJyZWdhbmRvXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZSh0cnVlKTtcblxuICAgICAgLy8gUmVzb2x2ZXIgcHJvbWlzZVxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZVByb21pc2UhKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrQ29uZmlndXJhY2FvLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBWZXJpZmljYXIgcXVlIG7Do28gZXN0w6EgbWFpcyBjYXJyZWdhbmRvXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuY2FycmVnYW5kbykudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhdHVhbGl6YcOnw6NvIGF1dG9tw6F0aWNhJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGF0dWFsaXphciBkYWRvcyBhdXRvbWF0aWNhbWVudGUgYXDDs3MgYcOnw7VlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgcGFyYSBidXNjYXJDb25maWd1cmFjYW9cbiAgICAgIG1vY2tGZXRjaFxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrQ29uZmlndXJhY2FvLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrU3RhdHVzLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrRXN0YXRpc3RpY2FzLFxuICAgICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5pbmljaWFyQWdlbmRhZG9yKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHF1ZSBhcyBmdW7Dp8O1ZXMgZGUgYnVzY2EgZm9yYW0gY2hhbWFkYXMgYXDDs3MgYSBhw6fDo29cbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyg0KTsgLy8gaW5pY2lhciArIGJ1c2NhckNvbmZpZ3VyYWNhbyArIGJ1c2NhclN0YXR1cyArIGJ1c2NhckVzdGF0aXN0aWNhc1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaW50ZWdyYcOnw6NvIGNvbXBsZXRhJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGV4ZWN1dGFyIGZsdXhvIGNvbXBsZXRvIGRlIGNvbmZpZ3VyYcOnw6NvIGUgY29udHJvbGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTZXR1cCBtb2NrcyBwYXJhIHRvZGFzIGFzIGNoYW1hZGFzXG4gICAgICBtb2NrRmV0Y2hcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogYXN5bmMgKCkgPT4gbW9ja0NvbmZpZ3VyYWNhbyxcbiAgICAgICAgfSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgLi4ubW9ja0NvbmZpZ3VyYWNhbywgYXRpdm86IGZhbHNlIH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrQ29uZmlndXJhY2FvLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrU3RhdHVzLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrRXN0YXRpc3RpY2FzLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrQ29uZmlndXJhY2FvLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrU3RhdHVzLFxuICAgICAgICB9KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrRXN0YXRpc3RpY2FzLFxuICAgICAgICB9KTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWdlbmRhZG9yTGVtYnJldGVzKCkpO1xuXG4gICAgICAvLyAxLiBCdXNjYXIgY29uZmlndXJhw6fDo28gaW5pY2lhbFxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuYnVzY2FyQ29uZmlndXJhY2FvKCk7XG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5jb25maWd1cmFjYW8pLnRvRXF1YWwobW9ja0NvbmZpZ3VyYWNhbyk7XG5cbiAgICAgIC8vIDIuIEF0dWFsaXphciBjb25maWd1cmHDp8Ojb1xuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuYXR1YWxpemFyQ29uZmlndXJhY2FvKHsgYXRpdm86IGZhbHNlIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIDMuIEJ1c2NhciBzdGF0dXMgZSBlc3RhdMOtc3RpY2FzXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5idXNjYXJTdGF0dXMoKTtcbiAgICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuYnVzY2FyRXN0YXRpc3RpY2FzKCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gNC4gSW5pY2lhciBhZ2VuZGFkb3JcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmluaWNpYXJBZ2VuZGFkb3IoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBWZXJpZmljYXIgcXVlIHRvZGFzIGFzIGNoYW1hZGFzIGZvcmFtIGZlaXRhc1xuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDkpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnN0YXR1cykudG9FcXVhbChtb2NrU3RhdHVzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5lc3RhdGlzdGljYXMpLnRvRXF1YWwobW9ja0VzdGF0aXN0aWNhcyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwidXNlVG9hc3QiLCJ2aSIsImZuIiwidG9hc3QiLCJtb2NrRmV0Y2giLCJnbG9iYWwiLCJmZXRjaCIsIm1vY2tDb25maWd1cmFjYW8iLCJhdGl2byIsImhvcmFyaW9FbnZpbyIsImRpYXNBbnRlY2VkZW5jaWEiLCJpbmNsdWlyRmluc0RlU2VtYW5hU2VtYW5hIiwiaW5jbHVpckZlcmlhZG9zIiwidGlwb3NOb3RpZmljYWNhbyIsImNyaWFkb0VtIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiYXR1YWxpemFkb0VtIiwibW9ja1N0YXR1cyIsImV4ZWN1dGFuZG8iLCJ1bHRpbWFFeGVjdWNhbyIsInByb3hpbWFFeGVjdWNhbyIsIm5vdyIsInRvdGFsTGVtYnJldGVzIiwibGVtYnJldGVzRW52aWFkb3MiLCJsZW1icmV0ZXNQZW5kZW50ZXMiLCJsZW1icmV0ZXNGYWxoYXMiLCJtb2NrRXN0YXRpc3RpY2FzIiwiYWdlbmRhZG9zIiwiZW52aWFkb3MiLCJwZW5kZW50ZXMiLCJmYWxoYXMiLCJwcm94aW1vc0VudmlvcyIsImRhdGEiLCJxdWFudGlkYWRlIiwidWx0aW1vc0VudmlvcyIsInN1Y2Vzc28iLCJkZXNjcmliZSIsIm1vY2tUb2FzdCIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja1JldHVyblZhbHVlIiwiYWZ0ZXJFYWNoIiwicmVzZXRBbGxNb2NrcyIsIml0IiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwib2siLCJqc29uIiwicmVzdWx0IiwicmVuZGVySG9vayIsInVzZUFnZW5kYWRvckxlbWJyZXRlcyIsImFjdCIsImN1cnJlbnQiLCJidXNjYXJDb25maWd1cmFjYW8iLCJleHBlY3QiLCJjb25maWd1cmFjYW8iLCJ0b0VxdWFsIiwiY2FycmVnYW5kbyIsInRvQmUiLCJlcnJvIiwidG9CZU51bGwiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm9iamVjdENvbnRhaW5pbmciLCJtZXRob2QiLCJlcnJvck1lc3NhZ2UiLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJFcnJvciIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJ2YXJpYW50Iiwibm92YUNvbmZpZ3VyYWNhbyIsImNvbmZpZ3VyYWNhb0F0dWFsaXphZGEiLCJhdHVhbGl6YXJDb25maWd1cmFjYW8iLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJidXNjYXJTdGF0dXMiLCJzdGF0dXMiLCJidXNjYXJFc3RhdGlzdGljYXMiLCJlc3RhdGlzdGljYXMiLCJmaWx0cm9zIiwiZGF0YUluaWNpbyIsImRhdGFGaW0iLCJ0aXBvIiwidXJsIiwiY2FsbHMiLCJ0b0NvbnRhaW4iLCJzdWNjZXNzIiwiaW5pY2lhckFnZW5kYWRvciIsInBhcmFyQWdlbmRhZG9yIiwicHJvY2Vzc2Fkb3MiLCJyZXN1bHRhZG8iLCJmb3JjYXJWZXJpZmljYWNhbyIsInJlbW92aWRvcyIsImxpbXBhckxlbWJyZXRlc1BlbmRlbnRlcyIsImNvbmZpZ3VyYWNhb1BhZHJhbyIsInJlc2V0YXJDb25maWd1cmFjYW8iLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1vY2tSZXR1cm5WYWx1ZU9uY2UiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiXSwibWFwcGluZ3MiOiI7QUFLQSx3QkFBd0I7QUFDeEJBLEtBQUtDLElBQUksQ0FBQyxnQkFBZ0IsSUFBTyxDQUFBO1FBQy9CQyxVQUFVQyxHQUFHQyxFQUFFLENBQUMsSUFBTyxDQUFBO2dCQUNyQkMsT0FBT0wsS0FBS0ksRUFBRTtZQUNoQixDQUFBO0lBQ0YsQ0FBQTs7Ozt1QkFWZ0M7eUJBQzRCO3VDQUN0QjswQkFDYjtBQVN6Qix1QkFBdUI7QUFDdkIsTUFBTUUsWUFBWU4sS0FBS0ksRUFBRTtBQUN6QkcsT0FBT0MsS0FBSyxHQUFHRjtBQUVmLDBCQUEwQjtBQUMxQixNQUFNRyxtQkFBbUI7SUFDdkJDLE9BQU87SUFDUEMsY0FBYztJQUNkQyxrQkFBa0I7SUFDbEJDLDJCQUEyQjtJQUMzQkMsaUJBQWlCO0lBQ2pCQyxrQkFBa0I7UUFBQztRQUFzQjtLQUFvQjtJQUM3REMsVUFBVSxJQUFJQyxPQUFPQyxXQUFXO0lBQ2hDQyxjQUFjLElBQUlGLE9BQU9DLFdBQVc7QUFDdEM7QUFFQSxNQUFNRSxhQUFhO0lBQ2pCVixPQUFPO0lBQ1BXLFlBQVk7SUFDWkMsZ0JBQWdCLElBQUlMLE9BQU9DLFdBQVc7SUFDdENLLGlCQUFpQixJQUFJTixLQUFLQSxLQUFLTyxHQUFH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