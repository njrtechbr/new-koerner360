{"version":3,"names":["useMetricasAvaliacoes","cov_153a5rdrl7","f","s","useRankingAtendentes","filtrosIniciais","metricas","setMetricas","_react","useState","ranking","setRanking","comparativo","setComparativo","loading","setLoading","error","setError","filtrosAtuais","setFiltrosAtuais","fazerRequisicao","useCallback","url","options","b","response","fetch","headers","ok","errorData","json","catch","Error","status","data","success","message","buscarMetricas","filtros","filtrosParaUsar","dados","method","body","JSON","stringify","err","mensagem","console","buscarRanking","limite","gerarComparativo","periodos","length","limparErro","recarregar","useEffect"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-metricas-avaliacoes.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { \n  MetricasAtendente, \n  MetricasPeriodo, \n  ComparativoTemporal, \n  FiltrosMetricas \n} from '@/lib/utils/metricas-avaliacoes';\n\n// Tipos para os dados da API\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message: string;\n  meta?: any;\n}\n\ninterface MetricasConsolidadas {\n  metricasGerais: MetricasPeriodo;\n  metricasPorAtendente: MetricasAtendente[];\n  ranking: MetricasAtendente[];\n}\n\ninterface UseMetricasAvaliacoesReturn {\n  // Estados\n  metricas: MetricasConsolidadas | null;\n  ranking: MetricasAtendente[];\n  comparativo: ComparativoTemporal | null;\n  loading: boolean;\n  error: string | null;\n  \n  // Funções\n  buscarMetricas: (filtros?: FiltrosMetricas) => Promise<void>;\n  buscarRanking: (filtros?: FiltrosMetricas, limite?: number) => Promise<void>;\n  gerarComparativo: (periodos: any[], filtros?: FiltrosMetricas) => Promise<void>;\n  limparErro: () => void;\n  recarregar: () => Promise<void>;\n}\n\n/**\n * Hook personalizado para gerenciar métricas de avaliações\n * Fornece funcionalidades para buscar métricas consolidadas, ranking e comparativos\n */\nexport function useMetricasAvaliacoes(filtrosIniciais?: FiltrosMetricas): UseMetricasAvaliacoesReturn {\n  // Estados\n  const [metricas, setMetricas] = useState<MetricasConsolidadas | null>(null);\n  const [ranking, setRanking] = useState<MetricasAtendente[]>([]);\n  const [comparativo, setComparativo] = useState<ComparativoTemporal | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [filtrosAtuais, setFiltrosAtuais] = useState<FiltrosMetricas | undefined>(filtrosIniciais);\n\n  /**\n   * Função auxiliar para fazer requisições à API\n   */\n  const fazerRequisicao = useCallback(async <T>(\n    url: string, \n    options: RequestInit = {}\n  ): Promise<T> => {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `Erro HTTP: ${response.status}`);\n    }\n\n    const data: ApiResponse<T> = await response.json();\n    \n    if (!data.success) {\n      throw new Error(data.message || 'Erro na resposta da API');\n    }\n\n    return data.data;\n  }, []);\n\n  /**\n   * Buscar métricas consolidadas\n   */\n  const buscarMetricas = useCallback(async (filtros?: FiltrosMetricas) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const filtrosParaUsar = filtros || filtrosAtuais;\n      setFiltrosAtuais(filtrosParaUsar);\n\n      const dados = await fazerRequisicao<MetricasConsolidadas>(\n        '/api/avaliacoes/metricas/consolidadas',\n        {\n          method: 'POST',\n          body: JSON.stringify({ filtros: filtrosParaUsar }),\n        }\n      );\n\n      setMetricas(dados);\n    } catch (err) {\n      const mensagem = err instanceof Error ? err.message : 'Erro desconhecido';\n      setError(`Erro ao buscar métricas: ${mensagem}`);\n      console.error('Erro ao buscar métricas:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filtrosAtuais, fazerRequisicao]);\n\n  /**\n   * Buscar ranking de atendentes\n   */\n  const buscarRanking = useCallback(async (filtros?: FiltrosMetricas, limite = 10) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const filtrosParaUsar = filtros || filtrosAtuais;\n\n      const dados = await fazerRequisicao<MetricasAtendente[]>(\n        '/api/avaliacoes/metricas/ranking',\n        {\n          method: 'POST',\n          body: JSON.stringify({ \n            filtros: filtrosParaUsar,\n            limite \n          }),\n        }\n      );\n\n      setRanking(dados);\n    } catch (err) {\n      const mensagem = err instanceof Error ? err.message : 'Erro desconhecido';\n      setError(`Erro ao buscar ranking: ${mensagem}`);\n      console.error('Erro ao buscar ranking:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filtrosAtuais, fazerRequisicao]);\n\n  /**\n   * Gerar comparativo temporal\n   */\n  const gerarComparativo = useCallback(async (\n    periodos: any[], \n    filtros?: FiltrosMetricas\n  ) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const filtrosParaUsar = filtros || filtrosAtuais;\n\n      if (periodos.length < 2) {\n        throw new Error('É necessário pelo menos 2 períodos para comparação');\n      }\n\n      const dados = await fazerRequisicao<ComparativoTemporal>(\n        '/api/avaliacoes/metricas/comparativo',\n        {\n          method: 'POST',\n          body: JSON.stringify({ \n            filtros: filtrosParaUsar,\n            periodos \n          }),\n        }\n      );\n\n      setComparativo(dados);\n    } catch (err) {\n      const mensagem = err instanceof Error ? err.message : 'Erro desconhecido';\n      setError(`Erro ao gerar comparativo: ${mensagem}`);\n      console.error('Erro ao gerar comparativo:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filtrosAtuais, fazerRequisicao]);\n\n  /**\n   * Limpar erro\n   */\n  const limparErro = useCallback(() => {\n    setError(null);\n  }, []);\n\n  /**\n   * Recarregar dados atuais\n   */\n  const recarregar = useCallback(async () => {\n    if (filtrosAtuais) {\n      await buscarMetricas(filtrosAtuais);\n    }\n  }, [buscarMetricas, filtrosAtuais]);\n\n  // Carregar métricas iniciais se filtros foram fornecidos\n  useEffect(() => {\n    if (filtrosIniciais) {\n      buscarMetricas(filtrosIniciais);\n    }\n  }, []); // Executar apenas uma vez na montagem\n\n  return {\n    // Estados\n    metricas,\n    ranking,\n    comparativo,\n    loading,\n    error,\n    \n    // Funções\n    buscarMetricas,\n    buscarRanking,\n    gerarComparativo,\n    limparErro,\n    recarregar,\n  };\n}\n\n/**\n * Hook simplificado para buscar apenas o ranking\n */\nexport function useRankingAtendentes(limite = 10, filtros?: FiltrosMetricas) {\n  const [ranking, setRanking] = useState<MetricasAtendente[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const buscarRanking = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await fetch('/api/avaliacoes/metricas/ranking', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ filtros, limite }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Erro HTTP: ${response.status}`);\n      }\n\n      const data: ApiResponse<MetricasAtendente[]> = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message);\n      }\n\n      setRanking(data.data);\n    } catch (err) {\n      const mensagem = err instanceof Error ? err.message : 'Erro desconhecido';\n      setError(mensagem);\n      console.error('Erro ao buscar ranking:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filtros, limite]);\n\n  useEffect(() => {\n    buscarRanking();\n  }, [buscarRanking]);\n\n  return {\n    ranking,\n    loading,\n    error,\n    recarregar: buscarRanking,\n  };\n}"],"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","ignoreList":[]}