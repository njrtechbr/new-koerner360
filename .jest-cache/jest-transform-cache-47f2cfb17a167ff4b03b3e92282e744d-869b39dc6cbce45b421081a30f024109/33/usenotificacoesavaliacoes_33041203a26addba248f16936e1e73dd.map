{"version":3,"names":["cov_mi9hjnw4d","actualCoverage","s","useConfiguracaoNotificacoes","f","useNotificacoesAvaliacoes","useTemNotificacoesPendentes","usuarioId","autoRefresh","b","refreshInterval","avaliacoesPendentes","setAvaliacoesPendentes","_react","useState","estatisticas","setEstatisticas","configuracao","setConfiguracao","loading","setLoading","error","setError","fetchData","useCallback","avaliacoes","_notificacoesavaliacoes","buscarAvaliacoesPendentesUsuario","stats","gerarEstatisticasNotificacoes","config","buscarConfiguracaoNotificacao","err","console","Error","message","useEffect","interval","setInterval","clearInterval","marcarComoLida","avaliacaoId","prev","filter","avaliacao","id","totalPendentes","atualizarConfiguracao","novaConfig","configAtualizada","refetch","temNotificacoes","setTemNotificacoes","quantidadeTotal","setQuantidadeTotal","quantidadeCriticas","setQuantidadeCriticas","verificarNotificacoes","length","criticas","carregarConfiguracao","salvarConfiguracao","verificarPermissaoNotificacao","tipo","deveReceberNotificacao"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-notificacoes-avaliacoes.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  AvaliacaoPendente,\n  EstatisticasNotificacoes,\n  NotificacaoConfig,\n  buscarAvaliacoesPendentesUsuario,\n  gerarEstatisticasNotificacoes,\n  buscarConfiguracaoNotificacao,\n  deveReceberNotificacao\n} from '@/lib/utils/notificacoes-avaliacoes';\n\ninterface UseNotificacoesAvaliacoesProps {\n  usuarioId: string;\n  autoRefresh?: boolean;\n  refreshInterval?: number; // em milissegundos\n}\n\ninterface UseNotificacoesAvaliacoesReturn {\n  avaliacoesPendentes: AvaliacaoPendente[];\n  estatisticas: EstatisticasNotificacoes | null;\n  configuracao: NotificacaoConfig | null;\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n  marcarComoLida: (avaliacaoId: string) => void;\n  atualizarConfiguracao: (novaConfig: Partial<NotificacaoConfig>) => Promise<void>;\n}\n\nexport function useNotificacoesAvaliacoes({\n  usuarioId,\n  autoRefresh = false,\n  refreshInterval = 60000 // 1 minuto\n}: UseNotificacoesAvaliacoesProps): UseNotificacoesAvaliacoesReturn {\n  const [avaliacoesPendentes, setAvaliacoesPendentes] = useState<AvaliacaoPendente[]>([]);\n  const [estatisticas, setEstatisticas] = useState<EstatisticasNotificacoes | null>(null);\n  const [configuracao, setConfiguracao] = useState<NotificacaoConfig | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Buscar avaliações pendentes\n      const avaliacoes = await buscarAvaliacoesPendentesUsuario(usuarioId);\n      setAvaliacoesPendentes(avaliacoes);\n\n      // Gerar estatísticas\n      const stats = await gerarEstatisticasNotificacoes(usuarioId);\n      setEstatisticas(stats);\n\n      // Buscar configuração\n      const config = await buscarConfiguracaoNotificacao(usuarioId);\n      setConfiguracao(config);\n\n    } catch (err) {\n      console.error('Erro ao buscar notificações:', err);\n      setError(err instanceof Error ? err.message : 'Erro desconhecido');\n    } finally {\n      setLoading(false);\n    }\n  }, [usuarioId]);\n\n  // Carregar dados iniciais\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Auto-refresh\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(() => {\n      fetchData();\n    }, refreshInterval);\n\n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval, fetchData]);\n\n  const marcarComoLida = useCallback((avaliacaoId: string) => {\n    // Por enquanto, apenas remove da lista local\n    // Em uma implementação real, isso seria persistido no backend\n    setAvaliacoesPendentes(prev => \n      prev.filter(avaliacao => avaliacao.id !== avaliacaoId)\n    );\n\n    // Atualizar estatísticas\n    if (estatisticas) {\n      setEstatisticas(prev => {\n        if (!prev) return null;\n        return {\n          ...prev,\n          totalPendentes: prev.totalPendentes - 1\n        };\n      });\n    }\n  }, [estatisticas]);\n\n  const atualizarConfiguracao = useCallback(async (novaConfig: Partial<NotificacaoConfig>) => {\n    try {\n      // Em uma implementação real, isso seria uma chamada para a API\n      if (configuracao) {\n        const configAtualizada = { ...configuracao, ...novaConfig };\n        setConfiguracao(configAtualizada);\n      }\n    } catch (err) {\n      console.error('Erro ao atualizar configuração:', err);\n      setError(err instanceof Error ? err.message : 'Erro ao atualizar configuração');\n    }\n  }, [configuracao]);\n\n  return {\n    avaliacoesPendentes,\n    estatisticas,\n    configuracao,\n    loading,\n    error,\n    refetch: fetchData,\n    marcarComoLida,\n    atualizarConfiguracao\n  };\n}\n\n// Hook simplificado para apenas verificar se há notificações\nexport function useTemNotificacoesPendentes(usuarioId: string): {\n  temNotificacoes: boolean;\n  quantidadeTotal: number;\n  quantidadeCriticas: number;\n  loading: boolean;\n} {\n  const [temNotificacoes, setTemNotificacoes] = useState(false);\n  const [quantidadeTotal, setQuantidadeTotal] = useState(0);\n  const [quantidadeCriticas, setQuantidadeCriticas] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const verificarNotificacoes = async () => {\n      try {\n        setLoading(true);\n        const avaliacoes = await buscarAvaliacoesPendentesUsuario(usuarioId);\n        const stats = await gerarEstatisticasNotificacoes(usuarioId);\n        \n        setTemNotificacoes(avaliacoes.length > 0);\n        setQuantidadeTotal(stats.totalPendentes);\n        setQuantidadeCriticas(stats.criticas);\n      } catch (err) {\n        console.error('Erro ao verificar notificações:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    verificarNotificacoes();\n  }, [usuarioId]);\n\n  return {\n    temNotificacoes,\n    quantidadeTotal,\n    quantidadeCriticas,\n    loading\n  };\n}\n\n// Hook para configurações de notificação\nexport function useConfiguracaoNotificacoes(usuarioId: string) {\n  const [configuracao, setConfiguracao] = useState<NotificacaoConfig | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const carregarConfiguracao = async () => {\n      try {\n        setLoading(true);\n        const config = await buscarConfiguracaoNotificacao(usuarioId);\n        setConfiguracao(config);\n      } catch (err) {\n        console.error('Erro ao carregar configuração:', err);\n        setError(err instanceof Error ? err.message : 'Erro desconhecido');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    carregarConfiguracao();\n  }, [usuarioId]);\n\n  const salvarConfiguracao = useCallback(async (novaConfig: Partial<NotificacaoConfig>) => {\n    try {\n      // Em uma implementação real, isso seria uma chamada para a API\n      if (configuracao) {\n        const configAtualizada = { ...configuracao, ...novaConfig };\n        setConfiguracao(configAtualizada);\n        return configAtualizada;\n      }\n      return null;\n    } catch (err) {\n      console.error('Erro ao salvar configuração:', err);\n      setError(err instanceof Error ? err.message : 'Erro ao salvar configuração');\n      return null;\n    }\n  }, [configuracao]);\n\n  const verificarPermissaoNotificacao = useCallback(async (tipo: 'email' | 'interface') => {\n    return await deveReceberNotificacao(usuarioId, tipo);\n  }, [usuarioId]);\n\n  return {\n    configuracao,\n    loading,\n    error,\n    salvarConfiguracao,\n    verificarPermissaoNotificacao\n  };\n}"],"mappingsgB;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MAyIAC,4BAAA;IAAA;IAAAH,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAC,2BAAA;;MAzIAE,0BAAA;IAAA;IAAAL,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAG,yBAAA;;MAiGAC,4BAAA;IAAA;IAAAN,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAI,2BAAA;;;;;iCA7HiC;;;iCAS1C;AAmBA,SAASD,0BAA0B;EACxCE,SAAS;EACTC,WAAA;EAAA;EAAA,CAAAR,aAAA,GAAAS,CAAA,UAAc,KAAK;EACnBC,eAAA;EAAA;EAAA,CAAAV,aAAA,GAAAS,CAAA,UAAkB,OAAM;AAAD,CACQ;EAAA;EAAAT,aAAA,GAAAI,CAAA;EAC/B,MAAM,CAACO,mBAAA,EAAqBC,sBAAA,CAAuB;EAAA;EAAA,CAAAZ,aAAA,GAAAE,CAAA,OAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAsB,EAAE;EACtF,MAAM,CAACC,YAAA,EAAcC,eAAA,CAAgB;EAAA;EAAA,CAAAhB,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAkC;EAClF,MAAM,CAACG,YAAA,EAAcC,eAAA,CAAgB;EAAA;EAAA,CAAAlB,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAA2B;EAC3E,MAAM,CAACK,OAAA,EAASC,UAAA,CAAW;EAAA;EAAA,CAAApB,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAC;EACvC,MAAM,CAACO,KAAA,EAAOC,QAAA,CAAS;EAAA;EAAA,CAAAtB,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAgB;EAElD,MAAMS,SAAA;EAAA;EAAA,CAAAvB,aAAA,GAAAE,CAAA,QAAY,IAAAW,MAAA,CAAAW,WAAW,EAAC;IAAA;IAAAxB,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAC5B,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACFkB,UAAA,CAAW;MAAA;MAAApB,aAAA,GAAAE,CAAA;MACXoB,QAAA,CAAS;MAET;MACA,MAAMG,UAAA;MAAA;MAAA,CAAAzB,aAAA,GAAAE,CAAA,QAAa,MAAM,IAAAwB,uBAAA,CAAAC,gCAAgC,EAACpB,SAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MAC1DU,sBAAA,CAAuBa,UAAA;MAEvB;MACA,MAAMG,KAAA;MAAA;MAAA,CAAA5B,aAAA,GAAAE,CAAA,QAAQ,MAAM,IAAAwB,uBAAA,CAAAG,6BAA6B,EAACtB,SAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MAClDc,eAAA,CAAgBY,KAAA;MAEhB;MACA,MAAME,MAAA;MAAA;MAAA,CAAA9B,aAAA,GAAAE,CAAA,QAAS,MAAM,IAAAwB,uBAAA,CAAAK,6BAA6B,EAACxB,SAAA;MAAA;MAAAP,aAAA,GAAAE,CAAA;MACnDgB,eAAA,CAAgBY,MAAA;IAElB,EAAE,OAAOE,GAAA,EAAK;MAAA;MAAAhC,aAAA,GAAAE,CAAA;MACZ+B,OAAA,CAAQZ,KAAK,CAAC,gCAAgCW,GAAA;MAAA;MAAAhC,aAAA,GAAAE,CAAA;MAC9CoB,QAAA,CAASU,GAAA,YAAeE,KAAA;MAAA;MAAA,CAAAlC,aAAA,GAAAS,CAAA,UAAQuB,GAAA,CAAIG,OAAO;MAAA;MAAA,CAAAnC,aAAA,GAAAS,CAAA,UAAG;IAChD,UAAU;MAAA;MAAAT,aAAA,GAAAE,CAAA;MACRkB,UAAA,CAAW;IACb;EACF,GAAG,CAACb,SAAA,CAAU;EAEd;EAAA;EAAAP,aAAA,GAAAE,CAAA;EACA,IAAAW,MAAA,CAAAuB,SAAS,EAAC;IAAA;IAAApC,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACRqB,SAAA;EACF,GAAG,CAACA,SAAA,CAAU;EAEd;EAAA;EAAAvB,aAAA,GAAAE,CAAA;EACA,IAAAW,MAAA,CAAAuB,SAAS,EAAC;IAAA;IAAApC,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACR,IAAI,CAACM,WAAA,EAAa;MAAA;MAAAR,aAAA,GAAAS,CAAA;MAAAT,aAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,aAAA,GAAAS,CAAA;IAAA;IAElB,MAAM4B,QAAA;IAAA;IAAA,CAAArC,aAAA,GAAAE,CAAA,QAAWoC,WAAA,CAAY;MAAA;MAAAtC,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MAC3BqB,SAAA;IACF,GAAGb,eAAA;IAAA;IAAAV,aAAA,GAAAE,CAAA;IAEH,OAAO,MAAM;MAAA;MAAAF,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MAAA,OAAAqC,aAAA,CAAcF,QAAA;IAAA;EAC7B,GAAG,CAAC7B,WAAA,EAAaE,eAAA,EAAiBa,SAAA,CAAU;EAE5C,MAAMiB,cAAA;EAAA;EAAA,CAAAxC,aAAA,GAAAE,CAAA,QAAiB,IAAAW,MAAA,CAAAW,WAAW,EAAEiB,WAAA;IAAA;IAAAzC,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAClC;IACA;IACAU,sBAAA,CAAuB8B,IAAA,IACrB;MAAA;MAAA1C,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MAAA,OAAAwC,IAAA,CAAKC,MAAM,CAACC,SAAA,IAAa;QAAA;QAAA5C,aAAA,GAAAI,CAAA;QAAAJ,aAAA,GAAAE,CAAA;QAAA,OAAA0C,SAAA,CAAUC,EAAE,KAAKJ,WAAA;MAAA;IAAA;IAG5C;IAAA;IAAAzC,aAAA,GAAAE,CAAA;IACA,IAAIa,YAAA,EAAc;MAAA;MAAAf,aAAA,GAAAS,CAAA;MAAAT,aAAA,GAAAE,CAAA;MAChBc,eAAA,CAAgB0B,IAAA;QAAA;QAAA1C,aAAA,GAAAI,CAAA;QAAAJ,aAAA,GAAAE,CAAA;QACd,IAAI,CAACwC,IAAA,EAAM;UAAA;UAAA1C,aAAA,GAAAS,CAAA;UAAAT,aAAA,GAAAE,CAAA;UAAA,OAAO;QAAA;QAAA;QAAA;UAAAF,aAAA,GAAAS,CAAA;QAAA;QAAAT,aAAA,GAAAE,CAAA;QAClB,OAAO;UACL,GAAGwC,IAAI;UACPI,cAAA,EAAgBJ,IAAA,CAAKI,cAAc,GAAG;QACxC;MACF;IACF;IAAA;IAAA;MAAA9C,aAAA,GAAAS,CAAA;IAAA;EACF,GAAG,CAACM,YAAA,CAAa;EAEjB,MAAMgC,qBAAA;EAAA;EAAA,CAAA/C,aAAA,GAAAE,CAAA,QAAwB,IAAAW,MAAA,CAAAW,WAAW,EAAC,MAAOwB,UAAA;IAAA;IAAAhD,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAC/C,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF;MACA,IAAIe,YAAA,EAAc;QAAA;QAAAjB,aAAA,GAAAS,CAAA;QAChB,MAAMwC,gBAAA;QAAA;QAAA,CAAAjD,aAAA,GAAAE,CAAA,QAAmB;UAAE,GAAGe,YAAY;UAAE,GAAG+B;QAAW;QAAA;QAAAhD,aAAA,GAAAE,CAAA;QAC1DgB,eAAA,CAAgB+B,gBAAA;MAClB;MAAA;MAAA;QAAAjD,aAAA,GAAAS,CAAA;MAAA;IACF,EAAE,OAAOuB,GAAA,EAAK;MAAA;MAAAhC,aAAA,GAAAE,CAAA;MACZ+B,OAAA,CAAQZ,KAAK,CAAC,mCAAmCW,GAAA;MAAA;MAAAhC,aAAA,GAAAE,CAAA;MACjDoB,QAAA,CAASU,GAAA,YAAeE,KAAA;MAAA;MAAA,CAAAlC,aAAA,GAAAS,CAAA,UAAQuB,GAAA,CAAIG,OAAO;MAAA;MAAA,CAAAnC,aAAA,GAAAS,CAAA,UAAG;IAChD;EACF,GAAG,CAACQ,YAAA,CAAa;EAAA;EAAAjB,aAAA,GAAAE,CAAA;EAEjB,OAAO;IACLS,mBAAA;IACAI,YAAA;IACAE,YAAA;IACAE,OAAA;IACAE,KAAA;IACA6B,OAAA,EAAS3B,SAAA;IACTiB,cAAA;IACAO;EACF;AACF;AAGO,SAASzC,4BAA4BC,SAAiB;EAAA;EAAAP,aAAA,GAAAI,CAAA;EAM3D,MAAM,CAAC+C,eAAA,EAAiBC,kBAAA,CAAmB;EAAA;EAAA,CAAApD,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAC;EACvD,MAAM,CAACuC,eAAA,EAAiBC,kBAAA,CAAmB;EAAA;EAAA,CAAAtD,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAC;EACvD,MAAM,CAACyC,kBAAA,EAAoBC,qBAAA,CAAsB;EAAA;EAAA,CAAAxD,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAC;EAC7D,MAAM,CAACK,OAAA,EAASC,UAAA,CAAW;EAAA;EAAA,CAAApB,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAC;EAAA;EAAAd,aAAA,GAAAE,CAAA;EAEvC,IAAAW,MAAA,CAAAuB,SAAS,EAAC;IAAA;IAAApC,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACR,MAAMuD,qBAAA,GAAwB,MAAAA,CAAA;MAAA;MAAAzD,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MAC5B,IAAI;QAAA;QAAAF,aAAA,GAAAE,CAAA;QACFkB,UAAA,CAAW;QACX,MAAMK,UAAA;QAAA;QAAA,CAAAzB,aAAA,GAAAE,CAAA,QAAa,MAAM,IAAAwB,uBAAA,CAAAC,gCAAgC,EAACpB,SAAA;QAC1D,MAAMqB,KAAA;QAAA;QAAA,CAAA5B,aAAA,GAAAE,CAAA,QAAQ,MAAM,IAAAwB,uBAAA,CAAAG,6BAA6B,EAACtB,SAAA;QAAA;QAAAP,aAAA,GAAAE,CAAA;QAElDkD,kBAAA,CAAmB3B,UAAA,CAAWiC,MAAM,GAAG;QAAA;QAAA1D,aAAA,GAAAE,CAAA;QACvCoD,kBAAA,CAAmB1B,KAAA,CAAMkB,cAAc;QAAA;QAAA9C,aAAA,GAAAE,CAAA;QACvCsD,qBAAA,CAAsB5B,KAAA,CAAM+B,QAAQ;MACtC,EAAE,OAAO3B,GAAA,EAAK;QAAA;QAAAhC,aAAA,GAAAE,CAAA;QACZ+B,OAAA,CAAQZ,KAAK,CAAC,mCAAmCW,GAAA;MACnD,UAAU;QAAA;QAAAhC,aAAA,GAAAE,CAAA;QACRkB,UAAA,CAAW;MACb;IACF;IAAA;IAAApB,aAAA,GAAAE,CAAA;IAEAuD,qBAAA;EACF,GAAG,CAAClD,SAAA,CAAU;EAAA;EAAAP,aAAA,GAAAE,CAAA;EAEd,OAAO;IACLiD,eAAA;IACAE,eAAA;IACAE,kBAAA;IACApC;EACF;AACF;AAGO,SAAShB,4BAA4BI,SAAiB;EAAA;EAAAP,aAAA,GAAAI,CAAA;EAC3D,MAAM,CAACa,YAAA,EAAcC,eAAA,CAAgB;EAAA;EAAA,CAAAlB,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAA2B;EAC3E,MAAM,CAACK,OAAA,EAASC,UAAA,CAAW;EAAA;EAAA,CAAApB,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAC;EACvC,MAAM,CAACO,KAAA,EAAOC,QAAA,CAAS;EAAA;EAAA,CAAAtB,aAAA,GAAAE,CAAA,QAAG,IAAAW,MAAA,CAAAC,QAAQ,EAAgB;EAAA;EAAAd,aAAA,GAAAE,CAAA;EAElD,IAAAW,MAAA,CAAAuB,SAAS,EAAC;IAAA;IAAApC,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACR,MAAM0D,oBAAA,GAAuB,MAAAA,CAAA;MAAA;MAAA5D,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MAC3B,IAAI;QAAA;QAAAF,aAAA,GAAAE,CAAA;QACFkB,UAAA,CAAW;QACX,MAAMU,MAAA;QAAA;QAAA,CAAA9B,aAAA,GAAAE,CAAA,QAAS,MAAM,IAAAwB,uBAAA,CAAAK,6BAA6B,EAACxB,SAAA;QAAA;QAAAP,aAAA,GAAAE,CAAA;QACnDgB,eAAA,CAAgBY,MAAA;MAClB,EAAE,OAAOE,GAAA,EAAK;QAAA;QAAAhC,aAAA,GAAAE,CAAA;QACZ+B,OAAA,CAAQZ,KAAK,CAAC,kCAAkCW,GAAA;QAAA;QAAAhC,aAAA,GAAAE,CAAA;QAChDoB,QAAA,CAASU,GAAA,YAAeE,KAAA;QAAA;QAAA,CAAAlC,aAAA,GAAAS,CAAA,UAAQuB,GAAA,CAAIG,OAAO;QAAA;QAAA,CAAAnC,aAAA,GAAAS,CAAA,UAAG;MAChD,UAAU;QAAA;QAAAT,aAAA,GAAAE,CAAA;QACRkB,UAAA,CAAW;MACb;IACF;IAAA;IAAApB,aAAA,GAAAE,CAAA;IAEA0D,oBAAA;EACF,GAAG,CAACrD,SAAA,CAAU;EAEd,MAAMsD,kBAAA;EAAA;EAAA,CAAA7D,aAAA,GAAAE,CAAA,QAAqB,IAAAW,MAAA,CAAAW,WAAW,EAAC,MAAOwB,UAAA;IAAA;IAAAhD,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAC5C,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF;MACA,IAAIe,YAAA,EAAc;QAAA;QAAAjB,aAAA,GAAAS,CAAA;QAChB,MAAMwC,gBAAA;QAAA;QAAA,CAAAjD,aAAA,GAAAE,CAAA,QAAmB;UAAE,GAAGe,YAAY;UAAE,GAAG+B;QAAW;QAAA;QAAAhD,aAAA,GAAAE,CAAA;QAC1DgB,eAAA,CAAgB+B,gBAAA;QAAA;QAAAjD,aAAA,GAAAE,CAAA;QAChB,OAAO+C,gBAAA;MACT;MAAA;MAAA;QAAAjD,aAAA,GAAAS,CAAA;MAAA;MAAAT,aAAA,GAAAE,CAAA;MACA,OAAO;IACT,EAAE,OAAO8B,GAAA,EAAK;MAAA;MAAAhC,aAAA,GAAAE,CAAA;MACZ+B,OAAA,CAAQZ,KAAK,CAAC,gCAAgCW,GAAA;MAAA;MAAAhC,aAAA,GAAAE,CAAA;MAC9CoB,QAAA,CAASU,GAAA,YAAeE,KAAA;MAAA;MAAA,CAAAlC,aAAA,GAAAS,CAAA,WAAQuB,GAAA,CAAIG,OAAO;MAAA;MAAA,CAAAnC,aAAA,GAAAS,CAAA,WAAG;MAAA;MAAAT,aAAA,GAAAE,CAAA;MAC9C,OAAO;IACT;EACF,GAAG,CAACe,YAAA,CAAa;EAEjB,MAAM6C,6BAAA;EAAA;EAAA,CAAA9D,aAAA,GAAAE,CAAA,QAAgC,IAAAW,MAAA,CAAAW,WAAW,EAAC,MAAOuC,IAAA;IAAA;IAAA/D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACvD,OAAO,MAAM,IAAAwB,uBAAA,CAAAsC,sBAAsB,EAACzD,SAAA,EAAWwD,IAAA;EACjD,GAAG,CAACxD,SAAA,CAAU;EAAA;EAAAP,aAAA,GAAAE,CAAA;EAEd,OAAO;IACLe,YAAA;IACAE,OAAA;IACAE,KAAA;IACAwC,kBAAA;IACAC;EACF;AACF","ignoreList":[]}