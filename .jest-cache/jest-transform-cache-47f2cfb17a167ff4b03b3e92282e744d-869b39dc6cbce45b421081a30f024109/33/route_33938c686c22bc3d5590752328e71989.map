{"version":3,"names":["DELETE","cov_211kgoml3q","f","s","GET","POST","pausarSchema","_zod","z","object","dataInicio","string","datetime","optional","dataFim","motivo","request","session","_nextauth","getServerSession","_route","authOptions","user","id","b","_server","NextResponse","json","error","status","body","validationResult","safeParse","success","details","errors","data","inicio","Date","fim","preferenciasAtualizadas","_preferenciasnotificacao","PreferenciasNotificacaoService","pausarNotificacoes","message","toLocaleDateString","console","Error","retomarNotificacoes","pausadas","verificarNotificacoesPausadas"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\preferencias-notificacao\\pausar\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '../../auth/[...nextauth]/route';\nimport { PreferenciasNotificacaoService } from '@/lib/services/preferencias-notificacao';\nimport { z } from 'zod';\n\n// Schema de validação para pausar notificações\nconst pausarSchema = z.object({\n  dataInicio: z.string().datetime().optional(),\n  dataFim: z.string().datetime(),\n  motivo: z.string().optional(),\n});\n\n/**\n * POST /api/preferencias-notificacao/pausar\n * Pausa as notificações por um período específico\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    \n    // Validação dos dados\n    const validationResult = pausarSchema.safeParse(body);\n    if (!validationResult.success) {\n      return NextResponse.json(\n        { \n          error: 'Dados inválidos',\n          details: validationResult.error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    const { dataInicio, dataFim, motivo } = validationResult.data;\n    \n    // Converte strings para Date\n    const inicio = dataInicio ? new Date(dataInicio) : new Date();\n    const fim = new Date(dataFim);\n    \n    // Validação de datas\n    if (fim <= inicio) {\n      return NextResponse.json(\n        { error: 'Data de fim deve ser posterior à data de início' },\n        { status: 400 }\n      );\n    }\n\n    const preferenciasAtualizadas = await PreferenciasNotificacaoService.pausarNotificacoes(\n      session.user.id,\n      inicio,\n      fim,\n      motivo\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: preferenciasAtualizadas,\n      message: `Notificações pausadas até ${fim.toLocaleDateString('pt-BR')}`,\n    });\n  } catch (error) {\n    console.error('Erro ao pausar notificações:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        details: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/preferencias-notificacao/pausar\n * Retoma as notificações (remove pausa)\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    const preferenciasAtualizadas = await PreferenciasNotificacaoService.retomarNotificacoes(\n      session.user.id\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: preferenciasAtualizadas,\n      message: 'Notificações retomadas com sucesso',\n    });\n  } catch (error) {\n    console.error('Erro ao retomar notificações:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        details: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/preferencias-notificacao/pausar\n * Verifica se as notificações estão pausadas\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    const pausadas = await PreferenciasNotificacaoService.verificarNotificacoesPausadas(\n      session.user.id\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: { pausadas },\n    });\n  } catch (error) {\n    console.error('Erro ao verificar status de pausa:', error);\n    return NextResponse.json(\n      { \n        error: 'Erro interno do servidor',\n        details: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}"],"mappings":"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","ignoreList":[]}