{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\database-config.ts"],"sourcesContent":["/**\n * Configura√ß√µes avan√ßadas de banco de dados e connection pooling\n */\n\nexport interface DatabaseConfig {\n  connectionLimit: number;\n  poolTimeout: number;\n  connectTimeout: number;\n  idleTimeout: number;\n  maxLifetime: number;\n  enableQueryLogging: boolean;\n  enableSlowQueryLogging: boolean;\n  slowQueryThreshold: number;\n}\n\n// Configura√ß√µes por ambiente\nconst configs: Record<string, DatabaseConfig> = {\n  development: {\n    connectionLimit: 10,\n    poolTimeout: 20, // segundos\n    connectTimeout: 60, // segundos\n    idleTimeout: 300, // 5 minutos\n    maxLifetime: 3600, // 1 hora\n    enableQueryLogging: true,\n    enableSlowQueryLogging: true,\n    slowQueryThreshold: 1000, // 1 segundo\n  },\n\n  test: {\n    connectionLimit: 5,\n    poolTimeout: 10,\n    connectTimeout: 30,\n    idleTimeout: 60, // 1 minuto\n    maxLifetime: 600, // 10 minutos\n    enableQueryLogging: false,\n    enableSlowQueryLogging: false,\n    slowQueryThreshold: 5000,\n  },\n\n  production: {\n    connectionLimit: 20,\n    poolTimeout: 30,\n    connectTimeout: 60,\n    idleTimeout: 600, // 10 minutos\n    maxLifetime: 7200, // 2 horas\n    enableQueryLogging: false,\n    enableSlowQueryLogging: true,\n    slowQueryThreshold: 2000, // 2 segundos\n  },\n};\n\n/**\n * Obt√©m a configura√ß√£o do banco de dados baseada no ambiente\n */\nexport const getDatabaseConfig = (): DatabaseConfig => {\n  const env = process.env.NODE_ENV || 'development';\n  return configs[env] || configs.development;\n};\n\n/**\n * Constr√≥i a URL de conex√£o com par√¢metros de connection pooling\n */\nexport const buildDatabaseUrl = (baseUrl?: string): string => {\n  const config = getDatabaseConfig();\n  const url = baseUrl || process.env.DATABASE_URL || '';\n\n  // Se a URL j√° cont√©m par√¢metros de pooling, retorna como est√°\n  if (url.includes('connection_limit=')) {\n    return url;\n  }\n\n  // Adiciona par√¢metros de connection pooling\n  const separator = url.includes('?') ? '&' : '?';\n  const poolingParams = [\n    `connection_limit=${config.connectionLimit}`,\n    `pool_timeout=${config.poolTimeout}`,\n    `connect_timeout=${config.connectTimeout}`,\n    'sslmode=prefer',\n  ].join('&');\n\n  return `${url}${separator}${poolingParams}`;\n};\n\n/**\n * Configura√ß√µes de log baseadas no ambiente e configura√ß√£o\n */\nexport const getLogConfig = () => {\n  const config = getDatabaseConfig();\n  const env = process.env.NODE_ENV || 'development';\n\n  if (!config.enableQueryLogging) {\n    return ['error'];\n  }\n\n  switch (env) {\n    case 'development':\n      return ['query', 'info', 'warn', 'error'];\n    case 'test':\n      return ['error'];\n    case 'production':\n      return ['warn', 'error'];\n    default:\n      return ['error'];\n  }\n};\n\n/**\n * Middleware para logging de queries lentas\n */\nexport const createSlowQueryLogger = () => {\n  const config = getDatabaseConfig();\n\n  if (!config.enableSlowQueryLogging) {\n    return null;\n  }\n\n  return {\n    beforeRequest: (params: any) => {\n      params.startTime = Date.now();\n    },\n    afterRequest: (params: any) => {\n      const duration = Date.now() - params.startTime;\n\n      if (duration > config.slowQueryThreshold) {\n        console.warn(`üêå Query lenta detectada (${duration}ms):`, {\n          query: params.query,\n          duration: `${duration}ms`,\n          threshold: `${config.slowQueryThreshold}ms`,\n        });\n      }\n    },\n  };\n};\n\n/**\n * Configura√ß√µes de retry para conex√µes\n */\nexport const getRetryConfig = () => {\n  const env = process.env.NODE_ENV || 'development';\n\n  return {\n    retries: env === 'production' ? 3 : 1,\n    retryDelay: 1000, // 1 segundo\n    maxRetryDelay: 5000, // 5 segundos\n  };\n};\n\n/**\n * Monitora o status do pool de conex√µes\n */\nexport const createConnectionPoolMonitor = () => {\n  let activeConnections = 0;\n  let totalConnections = 0;\n\n  return {\n    onConnect: () => {\n      activeConnections++;\n      totalConnections++;\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log(\n          `üìä Pool de conex√µes: ${activeConnections} ativas, ${totalConnections} total`\n        );\n      }\n    },\n\n    onDisconnect: () => {\n      activeConnections--;\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log(\n          `üìä Pool de conex√µes: ${activeConnections} ativas, ${totalConnections} total`\n        );\n      }\n    },\n\n    getStats: () => ({\n      activeConnections,\n      totalConnections,\n      config: getDatabaseConfig(),\n    }),\n  };\n};\n\n/**\n * Configura√ß√µes de health check para o banco\n */\nexport const getHealthCheckConfig = () => {\n  const env = process.env.NODE_ENV || 'development';\n\n  return {\n    enabled: true,\n    interval: env === 'production' ? 30000 : 60000, // 30s prod, 60s dev\n    timeout: 5000, // 5 segundos\n    retries: 3,\n    query: 'SELECT 1 as health_check',\n  };\n};\n\n/**\n * Utilit√°rio para validar configura√ß√µes de ambiente\n */\nexport const validateDatabaseConfig = (): {\n  valid: boolean;\n  errors: string[];\n} => {\n  const errors: string[] = [];\n\n  if (!process.env.DATABASE_URL) {\n    errors.push('DATABASE_URL n√£o est√° definida');\n  }\n\n  const config = getDatabaseConfig();\n\n  if (config.connectionLimit < 1) {\n    errors.push('connectionLimit deve ser maior que 0');\n  }\n\n  if (config.poolTimeout < 1) {\n    errors.push('poolTimeout deve ser maior que 0');\n  }\n\n  if (config.connectTimeout < 1) {\n    errors.push('connectTimeout deve ser maior que 0');\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  };\n};\n\nexport default {\n  getDatabaseConfig,\n  buildDatabaseUrl,\n  getLogConfig,\n  createSlowQueryLogger,\n  getRetryConfig,\n  createConnectionPoolMonitor,\n  getHealthCheckConfig,\n  validateDatabaseConfig,\n};\n"],"names":["buildDatabaseUrl","createConnectionPoolMonitor","createSlowQueryLogger","getDatabaseConfig","getHealthCheckConfig","getLogConfig","getRetryConfig","validateDatabaseConfig","configs","development","connectionLimit","poolTimeout","connectTimeout","idleTimeout","maxLifetime","enableQueryLogging","enableSlowQueryLogging","slowQueryThreshold","test","production","env","process","NODE_ENV","baseUrl","config","url","DATABASE_URL","includes","separator","poolingParams","join","beforeRequest","params","startTime","Date","now","afterRequest","duration","console","warn","query","threshold","retries","retryDelay","maxRetryDelay","activeConnections","totalConnections","onConnect","log","onDisconnect","getStats","enabled","interval","timeout","errors","push","valid","length"],"mappings":"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"}