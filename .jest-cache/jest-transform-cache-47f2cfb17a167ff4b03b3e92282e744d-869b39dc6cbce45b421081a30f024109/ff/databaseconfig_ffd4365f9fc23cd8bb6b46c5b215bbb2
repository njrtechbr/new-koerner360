835bd6d7766ba66a18bef1cbeb61c472
/**
 * Configura√ß√µes avan√ßadas de banco de dados e connection pooling
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get buildDatabaseUrl () {
        return buildDatabaseUrl;
    },
    get createConnectionPoolMonitor () {
        return createConnectionPoolMonitor;
    },
    get createSlowQueryLogger () {
        return createSlowQueryLogger;
    },
    get default () {
        return _default;
    },
    get getDatabaseConfig () {
        return getDatabaseConfig;
    },
    get getHealthCheckConfig () {
        return getHealthCheckConfig;
    },
    get getLogConfig () {
        return getLogConfig;
    },
    get getRetryConfig () {
        return getRetryConfig;
    },
    get validateDatabaseConfig () {
        return validateDatabaseConfig;
    }
});
// Configura√ß√µes por ambiente
const configs = {
    development: {
        connectionLimit: 10,
        poolTimeout: 20,
        connectTimeout: 60,
        idleTimeout: 300,
        maxLifetime: 3600,
        enableQueryLogging: true,
        enableSlowQueryLogging: true,
        slowQueryThreshold: 1000
    },
    test: {
        connectionLimit: 5,
        poolTimeout: 10,
        connectTimeout: 30,
        idleTimeout: 60,
        maxLifetime: 600,
        enableQueryLogging: false,
        enableSlowQueryLogging: false,
        slowQueryThreshold: 5000
    },
    production: {
        connectionLimit: 20,
        poolTimeout: 30,
        connectTimeout: 60,
        idleTimeout: 600,
        maxLifetime: 7200,
        enableQueryLogging: false,
        enableSlowQueryLogging: true,
        slowQueryThreshold: 2000
    }
};
const getDatabaseConfig = ()=>{
    const env = process.env.NODE_ENV || 'development';
    return configs[env] || configs.development;
};
const buildDatabaseUrl = (baseUrl)=>{
    const config = getDatabaseConfig();
    const url = baseUrl || process.env.DATABASE_URL || '';
    // Se a URL j√° cont√©m par√¢metros de pooling, retorna como est√°
    if (url.includes('connection_limit=')) {
        return url;
    }
    // Adiciona par√¢metros de connection pooling
    const separator = url.includes('?') ? '&' : '?';
    const poolingParams = [
        `connection_limit=${config.connectionLimit}`,
        `pool_timeout=${config.poolTimeout}`,
        `connect_timeout=${config.connectTimeout}`,
        'sslmode=prefer'
    ].join('&');
    return `${url}${separator}${poolingParams}`;
};
const getLogConfig = ()=>{
    const config = getDatabaseConfig();
    const env = process.env.NODE_ENV || 'development';
    if (!config.enableQueryLogging) {
        return [
            'error'
        ];
    }
    switch(env){
        case 'development':
            return [
                'query',
                'info',
                'warn',
                'error'
            ];
        case 'test':
            return [
                'error'
            ];
        case 'production':
            return [
                'warn',
                'error'
            ];
        default:
            return [
                'error'
            ];
    }
};
const createSlowQueryLogger = ()=>{
    const config = getDatabaseConfig();
    if (!config.enableSlowQueryLogging) {
        return null;
    }
    return {
        beforeRequest: (params)=>{
            params.startTime = Date.now();
        },
        afterRequest: (params)=>{
            const duration = Date.now() - params.startTime;
            if (duration > config.slowQueryThreshold) {
                console.warn(`üêå Query lenta detectada (${duration}ms):`, {
                    query: params.query,
                    duration: `${duration}ms`,
                    threshold: `${config.slowQueryThreshold}ms`
                });
            }
        }
    };
};
const getRetryConfig = ()=>{
    const env = process.env.NODE_ENV || 'development';
    return {
        retries: env === 'production' ? 3 : 1,
        retryDelay: 1000,
        maxRetryDelay: 5000
    };
};
const createConnectionPoolMonitor = ()=>{
    let activeConnections = 0;
    let totalConnections = 0;
    return {
        onConnect: ()=>{
            activeConnections++;
            totalConnections++;
            if (process.env.NODE_ENV === 'development') {
                console.log(`üìä Pool de conex√µes: ${activeConnections} ativas, ${totalConnections} total`);
            }
        },
        onDisconnect: ()=>{
            activeConnections--;
            if (process.env.NODE_ENV === 'development') {
                console.log(`üìä Pool de conex√µes: ${activeConnections} ativas, ${totalConnections} total`);
            }
        },
        getStats: ()=>({
                activeConnections,
                totalConnections,
                config: getDatabaseConfig()
            })
    };
};
const getHealthCheckConfig = ()=>{
    const env = process.env.NODE_ENV || 'development';
    return {
        enabled: true,
        interval: env === 'production' ? 30000 : 60000,
        timeout: 5000,
        retries: 3,
        query: 'SELECT 1 as health_check'
    };
};
const validateDatabaseConfig = ()=>{
    const errors = [];
    if (!process.env.DATABASE_URL) {
        errors.push('DATABASE_URL n√£o est√° definida');
    }
    const config = getDatabaseConfig();
    if (config.connectionLimit < 1) {
        errors.push('connectionLimit deve ser maior que 0');
    }
    if (config.poolTimeout < 1) {
        errors.push('poolTimeout deve ser maior que 0');
    }
    if (config.connectTimeout < 1) {
        errors.push('connectTimeout deve ser maior que 0');
    }
    return {
        valid: errors.length === 0,
        errors
    };
};
const _default = {
    getDatabaseConfig,
    buildDatabaseUrl,
    getLogConfig,
    createSlowQueryLogger,
    getRetryConfig,
    createConnectionPoolMonitor,
    getHealthCheckConfig,
    validateDatabaseConfig
};

//# sourceMappingURL=data:application/json;base64,