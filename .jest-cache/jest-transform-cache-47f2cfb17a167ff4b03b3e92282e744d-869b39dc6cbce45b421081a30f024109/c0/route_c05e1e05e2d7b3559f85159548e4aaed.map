{"version":3,"names":["DELETE","cov_1qcwcqhmnc","f","s","GET","POST","PUT","configuracaoLembretesSchema","_zod","z","object","diasAntecedencia","array","number","min","max","horarioEnvio","string","regex","ativo","boolean","incluirFimDeSemana","incluirFeriados","acaoAgendadorSchema","acao","enum","avaliacaoId","optional","request","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","papel","agendador","_agendadorlembretes","obterAgendadorLembretes","estaAtivo","configuracao","obterConfiguracao","estatisticas","obterEstatisticas","sucesso","dados","error","console","detalhes","Error","message","body","dadosValidados","parse","estavoAtivo","parar","atualizarConfiguracao","iniciar","mensagem","ZodError","errors","map","e","path","join","resultado","forcarVerificacao","reagendarAvaliacao","searchParams","URL","url","get"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\lembretes\\agendamento\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { obterAgendadorLembretes } from '@/lib/services/agendador-lembretes';\nimport { z } from 'zod';\n\n// Schema de validação para configuração de lembretes\nconst configuracaoLembretesSchema = z.object({\n  diasAntecedencia: z.array(z.number().min(1).max(30)).min(1).max(10),\n  horarioEnvio: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Formato de horário inválido (HH:mm)'),\n  ativo: z.boolean(),\n  incluirFimDeSemana: z.boolean(),\n  incluirFeriados: z.boolean(),\n});\n\n// Schema para ações do agendador\nconst acaoAgendadorSchema = z.object({\n  acao: z.enum(['iniciar', 'parar', 'forcar_verificacao', 'reagendar_avaliacao']),\n  avaliacaoId: z.string().optional(),\n});\n\n/**\n * GET /api/lembretes/agendamento\n * Obtém o status e configuração do agendador de lembretes\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN e GESTOR)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem acessar.' },\n        { status: 403 }\n      );\n    }\n\n    const agendador = obterAgendadorLembretes();\n\n    // Obter status e configuração\n    const status = {\n      ativo: agendador.estaAtivo(),\n      configuracao: agendador.obterConfiguracao(),\n      estatisticas: await agendador.obterEstatisticas(),\n    };\n\n    return NextResponse.json({\n      sucesso: true,\n      dados: status,\n    });\n\n  } catch (error) {\n    console.error('Erro ao obter status do agendador:', error);\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PUT /api/lembretes/agendamento\n * Atualiza a configuração do agendador de lembretes\n */\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN e GESTOR)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem configurar.' },\n        { status: 403 }\n      );\n    }\n\n    // Validar dados da requisição\n    const body = await request.json();\n    const dadosValidados = configuracaoLembretesSchema.parse(body);\n\n    const agendador = obterAgendadorLembretes();\n    const estavoAtivo = agendador.estaAtivo();\n\n    // Parar agendador se estiver ativo\n    if (estavoAtivo) {\n      agendador.parar();\n    }\n\n    // Atualizar configuração\n    await agendador.atualizarConfiguracao(dadosValidados);\n\n    // Reiniciar agendador se estava ativo\n    if (estavoAtivo && dadosValidados.ativo) {\n      await agendador.iniciar();\n    }\n\n    return NextResponse.json({\n      sucesso: true,\n      mensagem: 'Configuração do agendador atualizada com sucesso',\n      dados: {\n        configuracao: agendador.obterConfiguracao(),\n        ativo: agendador.estaAtivo(),\n      },\n    });\n\n  } catch (error) {\n    console.error('Erro ao atualizar configuração do agendador:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          erro: 'Dados inválidos',\n          detalhes: error.errors.map(e => `${e.path.join('.')}: ${e.message}`)\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/lembretes/agendamento\n * Executa ações no agendador (iniciar, parar, forçar verificação, etc.)\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN e GESTOR)\n    if (!['ADMIN', 'GESTOR'].includes(session.user.papel)) {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores e gestores podem executar ações.' },\n        { status: 403 }\n      );\n    }\n\n    // Validar dados da requisição\n    const body = await request.json();\n    const dadosValidados = acaoAgendadorSchema.parse(body);\n\n    const agendador = obterAgendadorLembretes();\n    let resultado: any = {};\n\n    switch (dadosValidados.acao) {\n      case 'iniciar':\n        if (agendador.estaAtivo()) {\n          return NextResponse.json(\n            { erro: 'Agendador já está ativo' },\n            { status: 400 }\n          );\n        }\n        await agendador.iniciar();\n        resultado = { mensagem: 'Agendador iniciado com sucesso' };\n        break;\n\n      case 'parar':\n        if (!agendador.estaAtivo()) {\n          return NextResponse.json(\n            { erro: 'Agendador já está parado' },\n            { status: 400 }\n          );\n        }\n        agendador.parar();\n        resultado = { mensagem: 'Agendador parado com sucesso' };\n        break;\n\n      case 'forcar_verificacao':\n        if (!agendador.estaAtivo()) {\n          return NextResponse.json(\n            { erro: 'Agendador deve estar ativo para forçar verificação' },\n            { status: 400 }\n          );\n        }\n        await agendador.forcarVerificacao();\n        resultado = { mensagem: 'Verificação de lembretes executada com sucesso' };\n        break;\n\n      case 'reagendar_avaliacao':\n        if (!dadosValidados.avaliacaoId) {\n          return NextResponse.json(\n            { erro: 'ID da avaliação é obrigatório para reagendamento' },\n            { status: 400 }\n          );\n        }\n        await agendador.reagendarAvaliacao(dadosValidados.avaliacaoId);\n        resultado = { \n          mensagem: 'Lembretes da avaliação reagendados com sucesso',\n          avaliacaoId: dadosValidados.avaliacaoId\n        };\n        break;\n\n      default:\n        return NextResponse.json(\n          { erro: 'Ação não reconhecida' },\n          { status: 400 }\n        );\n    }\n\n    return NextResponse.json({\n      sucesso: true,\n      ...resultado,\n      status: {\n        ativo: agendador.estaAtivo(),\n        configuracao: agendador.obterConfiguracao(),\n      },\n    });\n\n  } catch (error) {\n    console.error('Erro ao executar ação no agendador:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          erro: 'Dados inválidos',\n          detalhes: error.errors.map(e => `${e.path.join('.')}: ${e.message}`)\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/lembretes/agendamento\n * Limpa lembretes agendados ou reseta configurações\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões (apenas ADMIN)\n    if (session.user.papel !== 'ADMIN') {\n      return NextResponse.json(\n        { erro: 'Acesso negado. Apenas administradores podem limpar lembretes.' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const acao = searchParams.get('acao') || 'limpar_pendentes';\n\n    const agendador = obterAgendadorLembretes();\n    let resultado: any = {};\n\n    switch (acao) {\n      case 'limpar_pendentes':\n        // Implementar limpeza de lembretes pendentes\n        resultado = { mensagem: 'Lembretes pendentes limpos com sucesso' };\n        break;\n\n      case 'resetar_configuracao':\n        // Parar agendador\n        if (agendador.estaAtivo()) {\n          agendador.parar();\n        }\n        \n        // Resetar para configuração padrão\n        await agendador.atualizarConfiguracao({\n          diasAntecedencia: [7, 3, 1],\n          horarioEnvio: '09:00',\n          ativo: true,\n          incluirFimDeSemana: false,\n          incluirFeriados: false,\n        });\n        \n        resultado = { mensagem: 'Configuração resetada para padrão' };\n        break;\n\n      default:\n        return NextResponse.json(\n          { erro: 'Ação de limpeza não reconhecida' },\n          { status: 400 }\n        );\n    }\n\n    return NextResponse.json({\n      sucesso: true,\n      ...resultado,\n      status: {\n        ativo: agendador.estaAtivo(),\n        configuracao: agendador.obterConfiguracao(),\n      },\n    });\n\n  } catch (error) {\n    console.error('Erro ao limpar lembretes:', error);\n    return NextResponse.json(\n      { \n        erro: 'Erro interno do servidor',\n        detalhes: error instanceof Error ? error.message : 'Erro desconhecido'\n      },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}