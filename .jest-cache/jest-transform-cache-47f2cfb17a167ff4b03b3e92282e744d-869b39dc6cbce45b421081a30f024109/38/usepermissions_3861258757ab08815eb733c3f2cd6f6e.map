{"version":3,"names":["cov_1u7in17zv2","actualCoverage","s","usePermissions","f","useProtegerPorPermissao","useProtegerPorTipo","PERMISSOES_POR_TIPO","ADMIN","GESTOR","ATENDENTE","ROTAS_PROTEGIDAS","data","session","status","_react","useSession","temPermissao","permissao","b","user","userType","tipoUsuario","permissoesUsuario","includes","temAlgumaPermissao","permissoes","some","temTodasPermissoes","every","podeAcessarRota","rota","permissoesNecessarias","ehTipoUsuario","tipo","ehAdmin","ehGestor","ehAtendente","obterPermissoes","obterTipoUsuario","podeGerenciarUsuarios","podeCriarUsuarios","podeEditarUsuarios","podeExcluirUsuarios","podeAtivarUsuarios","podeDesativarUsuarios","podeRedefinirSenhaUsuarios","podeVisualizarUsuarios","podeImportarUsuarios","podeExportarUsuarios","carregando","autenticado","usuario","podeAcessar","tipos","tipoAtual"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-permissions.ts"],"sourcesContent":["'use client';\n\nimport { useSession } from 'next-auth/react';\nimport { TipoUsuario } from '@/generated/prisma';\n\n// Definição de permissões por tipo de usuário\nconst PERMISSOES_POR_TIPO: Record<TipoUsuario, string[]> = {\n  ADMIN: [\n    // Usuários\n    'gerenciar_usuarios',\n    'criar_usuarios',\n    'editar_usuarios',\n    'excluir_usuarios',\n    'ativar_usuarios',\n    'desativar_usuarios',\n    'redefinir_senha_usuarios',\n    'visualizar_usuarios',\n    'importar_usuarios',\n    'exportar_usuarios',\n\n    // Atendentes\n    'gerenciar_atendentes',\n\n    // Sistema\n    'visualizar_relatorios',\n    'gerenciar_sistema',\n    'visualizar_dashboard_admin',\n    'gerenciar_feedbacks',\n    'gerenciar_avaliacoes',\n    'gerenciar_gamificacao',\n  ],\n  GESTOR: [\n    // Usuários (limitado)\n    'visualizar_usuarios',\n    'criar_usuarios',\n    'editar_usuarios',\n    'ativar_usuarios',\n    'desativar_usuarios',\n    'exportar_usuarios',\n\n    // Atendentes\n    'gerenciar_atendentes',\n\n    // Sistema\n    'visualizar_relatorios',\n    'visualizar_dashboard_gestor',\n    'gerenciar_feedbacks',\n    'gerenciar_avaliacoes',\n    'visualizar_gamificacao',\n  ],\n  ATENDENTE: [\n    // Usuários (apenas visualização)\n    'visualizar_usuarios',\n\n    // Sistema\n    'visualizar_dashboard_atendente',\n    'criar_feedbacks',\n    'visualizar_avaliacoes_proprias',\n    'visualizar_gamificacao_propria',\n  ],\n};\n\n// Definição de rotas protegidas por permissão\nconst ROTAS_PROTEGIDAS: Record<string, string[]> = {\n  '/dashboard/admin': ['visualizar_dashboard_admin'],\n  '/dashboard/gestor': ['visualizar_dashboard_gestor'],\n  '/dashboard/atendente': ['visualizar_dashboard_atendente'],\n  '/usuarios': ['gerenciar_usuarios'],\n  '/atendentes': ['gerenciar_atendentes'],\n  '/relatorios': ['visualizar_relatorios'],\n  '/sistema': ['gerenciar_sistema'],\n  '/feedbacks': ['gerenciar_feedbacks', 'criar_feedbacks'],\n  '/avaliacoes': ['gerenciar_avaliacoes', 'visualizar_avaliacoes_proprias'],\n  '/gamificacao': ['gerenciar_gamificacao', 'visualizar_gamificacao_propria'],\n};\n\nexport function usePermissions() {\n  const { data: session, status } = useSession();\n\n  /**\n   * Verifica se o usuário tem uma permissão específica\n   */\n  const temPermissao = (permissao: string): boolean => {\n    if (status === 'loading' || !session?.user?.userType) {\n      return false;\n    }\n\n    const tipoUsuario = session.user.userType as TipoUsuario;\n    const permissoesUsuario = PERMISSOES_POR_TIPO[tipoUsuario] || [];\n\n    return permissoesUsuario.includes(permissao);\n  };\n\n  /**\n   * Verifica se o usuário tem pelo menos uma das permissões fornecidas\n   */\n  const temAlgumaPermissao = (permissoes: string[]): boolean => {\n    return permissoes.some(permissao => temPermissao(permissao));\n  };\n\n  /**\n   * Verifica se o usuário tem todas as permissões fornecidas\n   */\n  const temTodasPermissoes = (permissoes: string[]): boolean => {\n    return permissoes.every(permissao => temPermissao(permissao));\n  };\n\n  /**\n   * Verifica se o usuário pode acessar uma rota específica\n   */\n  const podeAcessarRota = (rota: string): boolean => {\n    const permissoesNecessarias = ROTAS_PROTEGIDAS[rota];\n\n    if (!permissoesNecessarias) {\n      return true; // Rota não protegida\n    }\n\n    return temAlgumaPermissao(permissoesNecessarias);\n  };\n\n  /**\n   * Verifica se o usuário é de um tipo específico\n   */\n  const ehTipoUsuario = (tipo: TipoUsuario): boolean => {\n    if (status === 'loading' || !session?.user?.userType) {\n      return false;\n    }\n\n    return session.user.userType === tipo;\n  };\n\n  /**\n   * Verifica se o usuário é administrador\n   */\n  const ehAdmin = (): boolean => ehTipoUsuario('ADMIN');\n\n  /**\n   * Verifica se o usuário é gestor\n   */\n  const ehGestor = (): boolean => ehTipoUsuario('GESTOR');\n\n  /**\n   * Verifica se o usuário é atendente\n   */\n  const ehAtendente = (): boolean => ehTipoUsuario('ATENDENTE');\n\n  /**\n   * Obtém todas as permissões do usuário atual\n   */\n  const obterPermissoes = (): string[] => {\n    if (status === 'loading' || !session?.user?.userType) {\n      return [];\n    }\n\n    const tipoUsuario = session.user.userType as TipoUsuario;\n    return PERMISSOES_POR_TIPO[tipoUsuario] || [];\n  };\n\n  /**\n   * Obtém o tipo de usuário atual\n   */\n  const obterTipoUsuario = (): TipoUsuario | null => {\n    if (status === 'loading' || !session?.user?.userType) {\n      return null;\n    }\n\n    return session.user.userType as TipoUsuario;\n  };\n\n  // Permissões específicas para usuários\n  const podeGerenciarUsuarios = (): boolean =>\n    temPermissao('gerenciar_usuarios');\n  const podeCriarUsuarios = (): boolean => temPermissao('criar_usuarios');\n  const podeEditarUsuarios = (): boolean => temPermissao('editar_usuarios');\n  const podeExcluirUsuarios = (): boolean => temPermissao('excluir_usuarios');\n  const podeAtivarUsuarios = (): boolean => temPermissao('ativar_usuarios');\n  const podeDesativarUsuarios = (): boolean =>\n    temPermissao('desativar_usuarios');\n  const podeRedefinirSenhaUsuarios = (): boolean =>\n    temPermissao('redefinir_senha_usuarios');\n  const podeVisualizarUsuarios = (): boolean =>\n    temPermissao('visualizar_usuarios');\n  const podeImportarUsuarios = (): boolean => temPermissao('importar_usuarios');\n  const podeExportarUsuarios = (): boolean => temPermissao('exportar_usuarios');\n\n  return {\n    // Verificações de permissão\n    temPermissao,\n    temAlgumaPermissao,\n    temTodasPermissoes,\n    podeAcessarRota,\n\n    // Verificações de tipo de usuário\n    ehTipoUsuario,\n    ehAdmin,\n    ehGestor,\n    ehAtendente,\n\n    // Permissões específicas de usuários\n    podeGerenciarUsuarios,\n    podeCriarUsuarios,\n    podeEditarUsuarios,\n    podeExcluirUsuarios,\n    podeAtivarUsuarios,\n    podeDesativarUsuarios,\n    podeRedefinirSenhaUsuarios,\n    podeVisualizarUsuarios,\n    podeImportarUsuarios,\n    podeExportarUsuarios,\n\n    // Utilitários\n    obterPermissoes,\n    obterTipoUsuario,\n\n    // Estado da sessão\n    carregando: status === 'loading',\n    autenticado: status === 'authenticated',\n    usuario: session?.user,\n  };\n}\n\n// Hook para proteger componentes baseado em permissões\nexport function useProtegerPorPermissao(permissoes: string[]) {\n  const { temAlgumaPermissao, carregando } = usePermissions();\n\n  return {\n    podeAcessar: temAlgumaPermissao(permissoes),\n    carregando,\n  };\n}\n\n// Hook para proteger componentes baseado em tipo de usuário\nexport function useProtegerPorTipo(tipos: TipoUsuario[]) {\n  const { obterTipoUsuario, carregando } = usePermissions();\n  const tipoAtual = obterTipoUsuario();\n\n  return {\n    podeAcessar: tipoAtual ? tipos.includes(tipoAtual) : false,\n    carregando,\n  };\n}\n"],"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","ignoreList":[]}