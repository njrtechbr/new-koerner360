{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\__tests__\\preferencias-notificacao.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { PreferenciasNotificacaoService } from '../preferencias-notificacao';\nimport { TipoNotificacao, UrgenciaNotificacao } from '../../types/notificacao';\n\n// Mock do Prisma\nconst mockPrisma = {\n  preferenciasNotificacao: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    upsert: jest.fn(),\n    delete: jest.fn(),\n  },\n  pausaNotificacao: {\n    findFirst: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n};\n\n// Dados de teste\nconst mockPreferencias = {\n  id: 'pref1',\n  usuarioId: 'user1',\n  ativo: true,\n  notificacaoEmail: true,\n  formatoEmail: 'html' as const,\n  idioma: 'pt-BR',\n  conteudo: {\n    incluirDetalhesAvaliacao: true,\n    incluirLinkDireto: true,\n    incluirResumoEstatisticas: false,\n  },\n  urgenciaMinima: 'media' as UrgenciaNotificacao,\n  tiposNotificacao: {\n    pendente: {\n      ativo: true,\n      frequencia: 'diaria',\n      diasAntecedencia: [7, 3, 1],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n    vencida: {\n      ativo: true,\n      frequencia: 'imediata',\n      diasAntecedencia: [0],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: true,\n      incluirFeriados: true,\n    },\n    proximaVencimento: {\n      ativo: true,\n      frequencia: 'semanal',\n      diasAntecedencia: [7, 3],\n      horarioEnvio: '14:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n    nova: {\n      ativo: false,\n      frequencia: 'imediata',\n      diasAntecedencia: [0],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: true,\n      incluirFeriados: true,\n    },\n    completada: {\n      ativo: false,\n      frequencia: 'imediata',\n      diasAntecedencia: [0],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: true,\n      incluirFeriados: true,\n    },\n    personalizada: {\n      ativo: false,\n      frequencia: 'personalizada',\n      diasAntecedencia: [],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n  },\n  filtros: {\n    avaliacoesUsuario: true,\n    avaliacoesQueAvalia: true,\n  },\n  criadaEm: new Date().toISOString(),\n  atualizadaEm: new Date().toISOString(),\n};\n\nconst mockPausa = {\n  id: 'pausa1',\n  usuarioId: 'user1',\n  ativo: true,\n  dataInicio: new Date().toISOString(),\n  dataFim: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n  motivo: 'Férias',\n  criadaEm: new Date().toISOString(),\n  atualizadaEm: new Date().toISOString(),\n};\n\nconst mockPreferenciasPadrao = {\n  ativo: true,\n  notificacaoEmail: true,\n  formatoEmail: 'html' as const,\n  idioma: 'pt-BR',\n  conteudo: {\n    incluirDetalhesAvaliacao: true,\n    incluirLinkDireto: true,\n    incluirResumoEstatisticas: false,\n  },\n  urgenciaMinima: 'baixa' as UrgenciaNotificacao,\n  tiposNotificacao: {\n    pendente: {\n      ativo: true,\n      frequencia: 'diaria',\n      diasAntecedencia: [7, 3, 1],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n    vencida: {\n      ativo: true,\n      frequencia: 'imediata',\n      diasAntecedencia: [0],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: true,\n      incluirFeriados: true,\n    },\n    proximaVencimento: {\n      ativo: true,\n      frequencia: 'semanal',\n      diasAntecedencia: [7, 3],\n      horarioEnvio: '14:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n    nova: {\n      ativo: false,\n      frequencia: 'imediata',\n      diasAntecedencia: [0],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: true,\n      incluirFeriados: true,\n    },\n    completada: {\n      ativo: false,\n      frequencia: 'imediata',\n      diasAntecedencia: [0],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: true,\n      incluirFeriados: true,\n    },\n    personalizada: {\n      ativo: false,\n      frequencia: 'personalizada',\n      diasAntecedencia: [],\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n  },\n  filtros: {\n    avaliacoesUsuario: true,\n    avaliacoesQueAvalia: true,\n  },\n};\n\ndescribe('PreferenciasNotificacaoService', () => {\n  let service: PreferenciasNotificacaoService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    service = new PreferenciasNotificacaoService(mockPrisma as any);\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('buscarPreferencias', () => {\n    it('deve buscar preferências existentes', async () => {\n      mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);\n\n      const resultado = await service.buscarPreferencias('user1');\n\n      expect(mockPrisma.preferenciasNotificacao.findUnique).toHaveBeenCalledWith({\n        where: { usuarioId: 'user1' },\n      });\n\n      expect(resultado).toEqual(mockPreferencias);\n    });\n\n    it('deve retornar preferências padrão se não existir', async () => {\n      mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(null);\n\n      const resultado = await service.buscarPreferencias('user1');\n\n      expect(resultado).toEqual({\n        usuarioId: 'user1',\n        ...mockPreferenciasPadrao,\n      });\n    });\n\n    it('deve tratar erro de banco de dados', async () => {\n      mockPrisma.preferenciasNotificacao.findUnique.mockRejectedValueOnce(\n        new Error('Database error')\n      );\n\n      await expect(service.buscarPreferencias('user1')).rejects.toThrow(\n        'Database error'\n      );\n    });\n  });\n\n  describe('atualizarPreferencias', () => {\n    it('deve atualizar preferências existentes', async () => {\n      const novasPreferencias = {\n        ativo: false,\n        notificacaoEmail: false,\n        urgenciaMinima: 'alta' as UrgenciaNotificacao,\n      };\n\n      const preferenciasAtualizadas = {\n        ...mockPreferencias,\n        ...novasPreferencias,\n      };\n\n      mockPrisma.preferenciasNotificacao.upsert.mockResolvedValueOnce(preferenciasAtualizadas);\n\n      const resultado = await service.atualizarPreferencias('user1', novasPreferencias);\n\n      expect(mockPrisma.preferenciasNotificacao.upsert).toHaveBeenCalledWith({\n        where: { usuarioId: 'user1' },\n        create: {\n          usuarioId: 'user1',\n          ...mockPreferenciasPadrao,\n          ...novasPreferencias,\n        },\n        update: novasPreferencias,\n      });\n\n      expect(resultado.ativo).toBe(false);\n      expect(resultado.notificacaoEmail).toBe(false);\n      expect(resultado.urgenciaMinima).toBe('alta');\n    });\n\n    it('deve criar preferências se não existir', async () => {\n      const novasPreferencias = {\n        idioma: 'en-US',\n        formatoEmail: 'texto' as const,\n      };\n\n      const preferenciasCompletas = {\n        id: 'pref2',\n        usuarioId: 'user2',\n        ...mockPreferenciasPadrao,\n        ...novasPreferencias,\n      };\n\n      mockPrisma.preferenciasNotificacao.upsert.mockResolvedValueOnce(preferenciasCompletas);\n\n      const resultado = await service.atualizarPreferencias('user2', novasPreferencias);\n\n      expect(resultado.idioma).toBe('en-US');\n      expect(resultado.formatoEmail).toBe('texto');\n    });\n\n    it('deve validar dados de entrada', async () => {\n      const preferenciasInvalidas = {\n        urgenciaMinima: 'invalida' as any,\n      };\n\n      await expect(\n        service.atualizarPreferencias('user1', preferenciasInvalidas)\n      ).rejects.toThrow('Urgência inválida');\n    });\n\n    it('deve validar horários de envio', async () => {\n      const preferenciasInvalidas = {\n        tiposNotificacao: {\n          pendente: {\n            horarioEnvio: '25:00', // Horário inválido\n          },\n        },\n      };\n\n      await expect(\n        service.atualizarPreferencias('user1', preferenciasInvalidas)\n      ).rejects.toThrow('Horário inválido');\n    });\n\n    it('deve validar dias de antecedência', async () => {\n      const preferenciasInvalidas = {\n        tiposNotificacao: {\n          pendente: {\n            diasAntecedencia: [-1, 0], // Valores inválidos\n          },\n        },\n      };\n\n      await expect(\n        service.atualizarPreferencias('user1', preferenciasInvalidas)\n      ).rejects.toThrow('Dias de antecedência devem ser positivos');\n    });\n  });\n\n  describe('resetarPreferencias', () => {\n    it('deve resetar preferências para padrões', async () => {\n      const preferenciasResetadas = {\n        id: 'pref1',\n        usuarioId: 'user1',\n        ...mockPreferenciasPadrao,\n      };\n\n      mockPrisma.preferenciasNotificacao.upsert.mockResolvedValueOnce(preferenciasResetadas);\n\n      const resultado = await service.resetarPreferencias('user1');\n\n      expect(mockPrisma.preferenciasNotificacao.upsert).toHaveBeenCalledWith({\n        where: { usuarioId: 'user1' },\n        create: {\n          usuarioId: 'user1',\n          ...mockPreferenciasPadrao,\n        },\n        update: mockPreferenciasPadrao,\n      });\n\n      expect(resultado.ativo).toBe(true);\n      expect(resultado.urgenciaMinima).toBe('baixa');\n      expect(resultado.tiposNotificacao.pendente.ativo).toBe(true);\n    });\n\n    it('deve tratar erro ao resetar', async () => {\n      mockPrisma.preferenciasNotificacao.upsert.mockRejectedValueOnce(\n        new Error('Reset failed')\n      );\n\n      await expect(service.resetarPreferencias('user1')).rejects.toThrow(\n        'Reset failed'\n      );\n    });\n  });\n\n  describe('pausarNotificacoes', () => {\n    it('deve pausar notificações por período específico', async () => {\n      const dataInicio = new Date();\n      const dataFim = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);\n      const motivo = 'Férias de fim de ano';\n\n      mockPrisma.pausaNotificacao.create.mockResolvedValueOnce({\n        ...mockPausa,\n        dataInicio: dataInicio.toISOString(),\n        dataFim: dataFim.toISOString(),\n        motivo,\n      });\n\n      const resultado = await service.pausarNotificacoes(\n        'user1',\n        dataInicio,\n        dataFim,\n        motivo\n      );\n\n      expect(mockPrisma.pausaNotificacao.create).toHaveBeenCalledWith({\n        data: {\n          usuarioId: 'user1',\n          ativo: true,\n          dataInicio,\n          dataFim,\n          motivo,\n        },\n      });\n\n      expect(resultado.ativo).toBe(true);\n      expect(resultado.motivo).toBe(motivo);\n    });\n\n    it('deve pausar notificações indefinidamente', async () => {\n      const dataInicio = new Date();\n      const motivo = 'Licença médica';\n\n      mockPrisma.pausaNotificacao.create.mockResolvedValueOnce({\n        ...mockPausa,\n        dataInicio: dataInicio.toISOString(),\n        dataFim: null,\n        motivo,\n      });\n\n      const resultado = await service.pausarNotificacoes(\n        'user1',\n        dataInicio,\n        undefined,\n        motivo\n      );\n\n      expect(mockPrisma.pausaNotificacao.create).toHaveBeenCalledWith({\n        data: {\n          usuarioId: 'user1',\n          ativo: true,\n          dataInicio,\n          dataFim: null,\n          motivo,\n        },\n      });\n\n      expect(resultado.dataFim).toBeNull();\n    });\n\n    it('deve validar datas de pausa', async () => {\n      const dataInicio = new Date();\n      const dataFim = new Date(Date.now() - 24 * 60 * 60 * 1000); // Data no passado\n\n      await expect(\n        service.pausarNotificacoes('user1', dataInicio, dataFim)\n      ).rejects.toThrow('Data fim deve ser posterior à data início');\n    });\n\n    it('deve substituir pausa existente', async () => {\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(mockPausa);\n      mockPrisma.pausaNotificacao.update.mockResolvedValueOnce({\n        ...mockPausa,\n        dataFim: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),\n        motivo: 'Extensão de férias',\n      });\n\n      const dataInicio = new Date();\n      const dataFim = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000);\n      const motivo = 'Extensão de férias';\n\n      const resultado = await service.pausarNotificacoes(\n        'user1',\n        dataInicio,\n        dataFim,\n        motivo\n      );\n\n      expect(mockPrisma.pausaNotificacao.update).toHaveBeenCalledWith({\n        where: { id: mockPausa.id },\n        data: {\n          dataInicio,\n          dataFim,\n          motivo,\n          ativo: true,\n        },\n      });\n\n      expect(resultado.motivo).toBe('Extensão de férias');\n    });\n  });\n\n  describe('retomarNotificacoes', () => {\n    it('deve retomar notificações pausadas', async () => {\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(mockPausa);\n      mockPrisma.pausaNotificacao.update.mockResolvedValueOnce({\n        ...mockPausa,\n        ativo: false,\n      });\n\n      const resultado = await service.retomarNotificacoes('user1');\n\n      expect(mockPrisma.pausaNotificacao.update).toHaveBeenCalledWith({\n        where: { id: mockPausa.id },\n        data: { ativo: false },\n      });\n\n      expect(resultado.ativo).toBe(false);\n    });\n\n    it('deve retornar null se não há pausa ativa', async () => {\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);\n\n      const resultado = await service.retomarNotificacoes('user1');\n\n      expect(resultado).toBeNull();\n      expect(mockPrisma.pausaNotificacao.update).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('verificarStatusPausa', () => {\n    it('deve retornar status de pausa ativa', async () => {\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(mockPausa);\n\n      const resultado = await service.verificarStatusPausa('user1');\n\n      expect(mockPrisma.pausaNotificacao.findFirst).toHaveBeenCalledWith({\n        where: {\n          usuarioId: 'user1',\n          ativo: true,\n          OR: [\n            { dataFim: null },\n            { dataFim: { gte: expect.any(Date) } },\n          ],\n        },\n      });\n\n      expect(resultado).toEqual({\n        pausado: true,\n        pausa: mockPausa,\n      });\n    });\n\n    it('deve retornar status sem pausa', async () => {\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);\n\n      const resultado = await service.verificarStatusPausa('user1');\n\n      expect(resultado).toEqual({\n        pausado: false,\n        pausa: null,\n      });\n    });\n\n    it('deve considerar pausa expirada como inativa', async () => {\n      const pausaExpirada = {\n        ...mockPausa,\n        dataFim: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // Ontem\n      };\n\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);\n\n      const resultado = await service.verificarStatusPausa('user1');\n\n      expect(resultado.pausado).toBe(false);\n    });\n  });\n\n  describe('validarPreferencias', () => {\n    it('deve validar preferências válidas', () => {\n      expect(() => service.validarPreferencias(mockPreferencias)).not.toThrow();\n    });\n\n    it('deve rejeitar urgência inválida', () => {\n      const preferenciasInvalidas = {\n        ...mockPreferencias,\n        urgenciaMinima: 'invalida' as any,\n      };\n\n      expect(() => service.validarPreferencias(preferenciasInvalidas)).toThrow(\n        'Urgência inválida'\n      );\n    });\n\n    it('deve rejeitar formato de e-mail inválido', () => {\n      const preferenciasInvalidas = {\n        ...mockPreferencias,\n        formatoEmail: 'invalido' as any,\n      };\n\n      expect(() => service.validarPreferencias(preferenciasInvalidas)).toThrow(\n        'Formato de e-mail inválido'\n      );\n    });\n\n    it('deve rejeitar idioma inválido', () => {\n      const preferenciasInvalidas = {\n        ...mockPreferencias,\n        idioma: 'xx-XX',\n      };\n\n      expect(() => service.validarPreferencias(preferenciasInvalidas)).toThrow(\n        'Idioma não suportado'\n      );\n    });\n\n    it('deve validar tipos de notificação', () => {\n      const preferenciasInvalidas = {\n        ...mockPreferencias,\n        tiposNotificacao: {\n          ...mockPreferencias.tiposNotificacao,\n          pendente: {\n            ...mockPreferencias.tiposNotificacao.pendente,\n            frequencia: 'invalida' as any,\n          },\n        },\n      };\n\n      expect(() => service.validarPreferencias(preferenciasInvalidas)).toThrow(\n        'Frequência inválida'\n      );\n    });\n  });\n\n  describe('obterPreferenciasPadrao', () => {\n    it('deve retornar preferências padrão corretas', () => {\n      const padrao = service.obterPreferenciasPadrao();\n\n      expect(padrao.ativo).toBe(true);\n      expect(padrao.notificacaoEmail).toBe(true);\n      expect(padrao.formatoEmail).toBe('html');\n      expect(padrao.idioma).toBe('pt-BR');\n      expect(padrao.urgenciaMinima).toBe('baixa');\n      expect(padrao.tiposNotificacao.pendente.ativo).toBe(true);\n      expect(padrao.tiposNotificacao.vencida.ativo).toBe(true);\n      expect(padrao.tiposNotificacao.nova.ativo).toBe(false);\n    });\n  });\n\n  describe('verificarPermissaoNotificacao', () => {\n    it('deve permitir notificação se preferências ativas', async () => {\n      mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);\n\n      const resultado = await service.verificarPermissaoNotificacao(\n        'user1',\n        'pendente' as TipoNotificacao,\n        'media' as UrgenciaNotificacao\n      );\n\n      expect(resultado.permitido).toBe(true);\n      expect(resultado.motivo).toBeUndefined();\n    });\n\n    it('deve bloquear se notificações desativadas', async () => {\n      const preferenciasInativas = {\n        ...mockPreferencias,\n        ativo: false,\n      };\n\n      mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(preferenciasInativas);\n\n      const resultado = await service.verificarPermissaoNotificacao(\n        'user1',\n        'pendente' as TipoNotificacao,\n        'media' as UrgenciaNotificacao\n      );\n\n      expect(resultado.permitido).toBe(false);\n      expect(resultado.motivo).toBe('Notificações desativadas pelo usuário');\n    });\n\n    it('deve bloquear se tipo específico desativado', async () => {\n      const preferenciasComTipoInativo = {\n        ...mockPreferencias,\n        tiposNotificacao: {\n          ...mockPreferencias.tiposNotificacao,\n          pendente: {\n            ...mockPreferencias.tiposNotificacao.pendente,\n            ativo: false,\n          },\n        },\n      };\n\n      mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(preferenciasComTipoInativo);\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);\n\n      const resultado = await service.verificarPermissaoNotificacao(\n        'user1',\n        'pendente' as TipoNotificacao,\n        'media' as UrgenciaNotificacao\n      );\n\n      expect(resultado.permitido).toBe(false);\n      expect(resultado.motivo).toBe('Tipo de notificação pendente desativado');\n    });\n\n    it('deve bloquear se urgência abaixo do mínimo', async () => {\n      const preferenciasUrgenciaAlta = {\n        ...mockPreferencias,\n        urgenciaMinima: 'alta' as UrgenciaNotificacao,\n      };\n\n      mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(preferenciasUrgenciaAlta);\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);\n\n      const resultado = await service.verificarPermissaoNotificacao(\n        'user1',\n        'pendente' as TipoNotificacao,\n        'baixa' as UrgenciaNotificacao\n      );\n\n      expect(resultado.permitido).toBe(false);\n      expect(resultado.motivo).toBe('Urgência abaixo do mínimo configurado');\n    });\n\n    it('deve bloquear se notificações pausadas', async () => {\n      mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(mockPausa);\n\n      const resultado = await service.verificarPermissaoNotificacao(\n        'user1',\n        'pendente' as TipoNotificacao,\n        'media' as UrgenciaNotificacao\n      );\n\n      expect(resultado.permitido).toBe(false);\n      expect(resultado.motivo).toBe('Notificações pausadas: Férias');\n    });\n  });\n\n  describe('Tratamento de Erros', () => {\n    it('deve tratar erro de conexão com banco', async () => {\n      mockPrisma.preferenciasNotificacao.findUnique.mockRejectedValueOnce(\n        new Error('Database connection failed')\n      );\n\n      await expect(service.buscarPreferencias('user1')).rejects.toThrow(\n        'Database connection failed'\n      );\n    });\n\n    it('deve tratar erro na atualização', async () => {\n      mockPrisma.preferenciasNotificacao.upsert.mockRejectedValueOnce(\n        new Error('Update failed')\n      );\n\n      await expect(\n        service.atualizarPreferencias('user1', { ativo: false })\n      ).rejects.toThrow('Update failed');\n    });\n\n    it('deve tratar erro na pausa', async () => {\n      mockPrisma.pausaNotificacao.create.mockRejectedValueOnce(\n        new Error('Pause failed')\n      );\n\n      await expect(\n        service.pausarNotificacoes('user1', new Date(), new Date(Date.now() + 86400000))\n      ).rejects.toThrow('Pause failed');\n    });\n  });\n\n  describe('Performance', () => {\n    it('deve usar índices apropriados para consultas', async () => {\n      await service.buscarPreferencias('user1');\n\n      expect(mockPrisma.preferenciasNotificacao.findUnique).toHaveBeenCalledWith({\n        where: { usuarioId: 'user1' }, // Campo indexado\n      });\n    });\n\n    it('deve otimizar consultas de status de pausa', async () => {\n      await service.verificarStatusPausa('user1');\n\n      expect(mockPrisma.pausaNotificacao.findFirst).toHaveBeenCalledWith({\n        where: {\n          usuarioId: 'user1', // Campo indexado\n          ativo: true, // Campo indexado\n          OR: expect.any(Array),\n        },\n      });\n    });\n  });\n\n  describe('Integração', () => {\n    it('deve integrar com sistema de notificações', async () => {\n      mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);\n      mockPrisma.pausaNotificacao.findFirst.mockResolvedValueOnce(null);\n\n      const permissao = await service.verificarPermissaoNotificacao(\n        'user1',\n        'pendente' as TipoNotificacao,\n        'media' as UrgenciaNotificacao\n      );\n\n      expect(permissao.permitido).toBe(true);\n      expect(permissao.preferencias).toEqual(mockPreferencias);\n    });\n\n    it('deve fornecer configurações para agendador', async () => {\n      mockPrisma.preferenciasNotificacao.findUnique.mockResolvedValueOnce(mockPreferencias);\n\n      const preferencias = await service.buscarPreferencias('user1');\n\n      expect(preferencias.tiposNotificacao.pendente.frequencia).toBe('diaria');\n      expect(preferencias.tiposNotificacao.pendente.horarioEnvio).toBe('09:00');\n      expect(preferencias.tiposNotificacao.pendente.diasAntecedencia).toEqual([7, 3, 1]);\n    });\n  });\n\n  describe('Validações Específicas', () => {\n    it('deve validar horário no formato HH:MM', () => {\n      expect(() => service.validarHorario('09:30')).not.toThrow();\n      expect(() => service.validarHorario('23:59')).not.toThrow();\n      expect(() => service.validarHorario('00:00')).not.toThrow();\n      \n      expect(() => service.validarHorario('24:00')).toThrow('Horário inválido');\n      expect(() => service.validarHorario('09:60')).toThrow('Horário inválido');\n      expect(() => service.validarHorario('9:30')).toThrow('Horário inválido');\n      expect(() => service.validarHorario('09:3')).toThrow('Horário inválido');\n    });\n\n    it('deve validar dias de antecedência', () => {\n      expect(() => service.validarDiasAntecedencia([1, 3, 7])).not.toThrow();\n      expect(() => service.validarDiasAntecedencia([0])).not.toThrow();\n      expect(() => service.validarDiasAntecedencia([])).not.toThrow();\n      \n      expect(() => service.validarDiasAntecedencia([-1])).toThrow(\n        'Dias de antecedência devem ser positivos'\n      );\n      expect(() => service.validarDiasAntecedencia([1, -3, 7])).toThrow(\n        'Dias de antecedência devem ser positivos'\n      );\n    });\n\n    it('deve validar urgência', () => {\n      expect(() => service.validarUrgencia('baixa')).not.toThrow();\n      expect(() => service.validarUrgencia('media')).not.toThrow();\n      expect(() => service.validarUrgencia('alta')).not.toThrow();\n      \n      expect(() => service.validarUrgencia('invalida' as any)).toThrow(\n        'Urgência inválida'\n      );\n    });\n\n    it('deve validar frequência', () => {\n      expect(() => service.validarFrequencia('imediata')).not.toThrow();\n      expect(() => service.validarFrequencia('diaria')).not.toThrow();\n      expect(() => service.validarFrequencia('semanal')).not.toThrow();\n      expect(() => service.validarFrequencia('personalizada')).not.toThrow();\n      \n      expect(() => service.validarFrequencia('invalida' as any)).toThrow(\n        'Frequência inválida'\n      );\n    });\n  });\n});"],"names":["mockPrisma","preferenciasNotificacao","findUnique","jest","fn","create","update","upsert","delete","pausaNotificacao","findFirst","mockPreferencias","id","usuarioId","ativo","notificacaoEmail","formatoEmail","idioma","conteudo","incluirDetalhesAvaliacao","incluirLinkDireto","incluirResumoEstatisticas","urgenciaMinima","tiposNotificacao","pendente","frequencia","diasAntecedencia","horarioEnvio","incluirFinsDeSemanaSemana","incluirFeriados","vencida","proximaVencimento","nova","completada","personalizada","filtros","avaliacoesUsuario","avaliacoesQueAvalia","criadaEm","Date","toISOString","atualizadaEm","mockPausa","dataInicio","dataFim","now","motivo","mockPreferenciasPadrao","describe","service","beforeEach","clearAllMocks","PreferenciasNotificacaoService","afterEach","resetAllMocks","it","mockResolvedValueOnce","resultado","buscarPreferencias","expect","toHaveBeenCalledWith","where","toEqual","mockRejectedValueOnce","Error","rejects","toThrow","novasPreferencias","preferenciasAtualizadas","atualizarPreferencias","toBe","preferenciasCompletas","preferenciasInvalidas","preferenciasResetadas","resetarPreferencias","pausarNotificacoes","data","undefined","toBeNull","retomarNotificacoes","not","toHaveBeenCalled","verificarStatusPausa","OR","gte","any","pausado","pausa","pausaExpirada","validarPreferencias","padrao","obterPreferenciasPadrao","verificarPermissaoNotificacao","permitido","toBeUndefined","preferenciasInativas","preferenciasComTipoInativo","preferenciasUrgenciaAlta","Array","permissao","preferencias","validarHorario","validarDiasAntecedencia","validarUrgencia","validarFrequencia"],"mappings":"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"}