{"version":3,"names":["GET","filtrosMetricasSchema","cov_1yqq44it02","s","_zod","z","object","dataInicio","string","datetime","optional","dataFim","periodo","enum","default","request","params","f","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","atendenteId","_validations","idAtendenteSchema","parse","id","atendente","_prisma","prisma","findUnique","where","select","usuarioId","dataAdmissao","cargo","setor","usuario","nome","email","searchParams","URL","url","filtros","get","Date","agora","getTime","documentosCount","avaliacoes","historico","Promise","all","documentoAtendente","count","ativo","criadoEm","gte","lte","avaliacao","findMany","dataAvaliacao","nota","comentario","orderBy","historicoAlteracaoAtendente","tipo","mediaAvaliacoes","length","reduce","acc","av","ultimaAvaliacao","atividadePorTipo","item","diasDesdeAdmissao","Math","floor","metricas","documentos","total","ativosNoPeriodo","media","Number","toFixed","ultima","data","atividade","totalAlteracoes","porTipo","resumo","produtividade","statusGeral","documentosAtualizados","avaliacoesRecentes","geradoEm","toISOString","error","console","ZodError","detalhes","errors"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\metricas\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { idAtendenteSchema } from '@/lib/validations';\nimport { ZodError } from 'zod';\nimport { z } from 'zod';\n\n/**\n * Schema para filtros de métricas\n */\nconst filtrosMetricasSchema = z.object({\n  dataInicio: z.string().datetime().optional(),\n  dataFim: z.string().datetime().optional(),\n  periodo: z.enum(['7d', '30d', '90d', '1y', 'custom']).default('30d'),\n});\n\n/**\n * Interface para parâmetros da rota\n */\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * GET /api/atendentes/[id]/metricas\n * Busca métricas de desempenho de um atendente específico\n */\nexport async function GET(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões\n    if (!['ADMIN', 'GERENTE', 'ATENDENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para acessar métricas' },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID do atendente\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Verificar se o atendente existe\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      select: {\n        id: true,\n        usuarioId: true,\n        status: true,\n        dataAdmissao: true,\n        cargo: true,\n        setor: true,\n        usuario: {\n          select: {\n            nome: true,\n            email: true,\n          },\n        },\n      },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: 'Atendente não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o atendente pode ver apenas suas próprias métricas\n    if (\n      session.user.userType === 'ATENDENTE' &&\n      atendente.usuarioId !== session.user.id\n    ) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para acessar estas métricas' },\n        { status: 403 }\n      );\n    }\n\n    // Processar filtros da query string\n    const { searchParams } = new URL(request.url);\n    const filtros = filtrosMetricasSchema.parse({\n      dataInicio: searchParams.get('dataInicio'),\n      dataFim: searchParams.get('dataFim'),\n      periodo: searchParams.get('periodo') || '30d',\n    });\n\n    // Calcular datas baseadas no período\n    let dataInicio: Date;\n    let dataFim: Date = new Date();\n\n    if (filtros.periodo === 'custom' && filtros.dataInicio && filtros.dataFim) {\n      dataInicio = new Date(filtros.dataInicio);\n      dataFim = new Date(filtros.dataFim);\n    } else {\n      const agora = new Date();\n      switch (filtros.periodo) {\n        case '7d':\n          dataInicio = new Date(agora.getTime() - 7 * 24 * 60 * 60 * 1000);\n          break;\n        case '30d':\n          dataInicio = new Date(agora.getTime() - 30 * 24 * 60 * 60 * 1000);\n          break;\n        case '90d':\n          dataInicio = new Date(agora.getTime() - 90 * 24 * 60 * 60 * 1000);\n          break;\n        case '1y':\n          dataInicio = new Date(agora.getTime() - 365 * 24 * 60 * 60 * 1000);\n          break;\n        default:\n          dataInicio = new Date(agora.getTime() - 30 * 24 * 60 * 60 * 1000);\n      }\n    }\n\n    // Buscar métricas básicas\n    const [documentosCount, avaliacoes, historico] = await Promise.all([\n      // Contagem de documentos\n      prisma.documentoAtendente.count({\n        where: {\n          atendenteId,\n          ativo: true,\n          criadoEm: {\n            gte: dataInicio,\n            lte: dataFim,\n          },\n        },\n      }),\n\n      // Avaliações no período\n      prisma.avaliacao.findMany({\n        where: {\n          atendenteId,\n          dataAvaliacao: {\n            gte: dataInicio,\n            lte: dataFim,\n          },\n        },\n        select: {\n          nota: true,\n          dataAvaliacao: true,\n          comentario: true,\n        },\n        orderBy: {\n          dataAvaliacao: 'desc',\n        },\n      }),\n\n      // Histórico de alterações\n      prisma.historicoAlteracaoAtendente.findMany({\n        where: {\n          atendenteId,\n          criadoEm: {\n            gte: dataInicio,\n            lte: dataFim,\n          },\n        },\n        select: {\n          tipo: true,\n          criadoEm: true,\n        },\n      }),\n    ]);\n\n    // Calcular métricas de avaliação\n    const mediaAvaliacoes =\n      avaliacoes.length > 0\n        ? avaliacoes.reduce((acc, av) => acc + av.nota, 0) / avaliacoes.length\n        : 0;\n\n    const ultimaAvaliacao = avaliacoes[0];\n\n    // Calcular atividade por tipo\n    const atividadePorTipo = historico.reduce(\n      (acc, item) => {\n        acc[item.tipo] = (acc[item.tipo] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>\n    );\n\n    // Calcular dias desde a admissão\n    const diasDesdeAdmissao = Math.floor(\n      (new Date().getTime() - new Date(atendente.dataAdmissao).getTime()) /\n        (1000 * 60 * 60 * 24)\n    );\n\n    // Montar resposta com métricas\n    const metricas = {\n      atendente: {\n        id: atendente.id,\n        nome: atendente.usuario.nome,\n        email: atendente.usuario.email,\n        cargo: atendente.cargo,\n        setor: atendente.setor,\n        status: atendente.status,\n        dataAdmissao: atendente.dataAdmissao,\n        diasDesdeAdmissao,\n      },\n      periodo: {\n        dataInicio,\n        dataFim,\n        periodo: filtros.periodo,\n      },\n      documentos: {\n        total: documentosCount,\n        ativosNoPeriodo: documentosCount,\n      },\n      avaliacoes: {\n        total: avaliacoes.length,\n        media: Number(mediaAvaliacoes.toFixed(2)),\n        ultima: ultimaAvaliacao\n          ? {\n              nota: ultimaAvaliacao.nota,\n              data: ultimaAvaliacao.dataAvaliacao,\n              comentario: ultimaAvaliacao.comentario,\n            }\n          : null,\n      },\n      atividade: {\n        totalAlteracoes: historico.length,\n        porTipo: atividadePorTipo,\n      },\n      resumo: {\n        produtividade:\n          mediaAvaliacoes >= 8\n            ? 'Alta'\n            : mediaAvaliacoes >= 6\n              ? 'Média'\n              : 'Baixa',\n        statusGeral: atendente.status,\n        documentosAtualizados: documentosCount > 0,\n        avaliacoesRecentes: avaliacoes.length > 0,\n      },\n    };\n\n    return NextResponse.json({\n      metricas,\n      geradoEm: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('Erro ao buscar métricas do atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: 'Dados inválidos',\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}