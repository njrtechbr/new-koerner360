c1743cc21f3d3b2eb8dd277c9026dada
"use strict";

/* istanbul ignore next */
function cov_2pcs236ny2() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\atualizar-status\\route.ts";
  var hash = "1bafca9de826f57d5ba57b09d146f322b79276b0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\atualizar-status\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 15
        },
        end: {
          line: 20,
          column: 56
        }
      },
      "8": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 21,
          column: 85
        }
      },
      "9": {
        start: {
          line: 22,
          column: 13
        },
        end: {
          line: 22,
          column: 27
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 51
        }
      },
      "11": {
        start: {
          line: 24,
          column: 39
        },
        end: {
          line: 24,
          column: 51
        }
      },
      "12": {
        start: {
          line: 25,
          column: 28
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "13": {
        start: {
          line: 26,
          column: 27
        },
        end: {
          line: 26,
          column: 40
        }
      },
      "14": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 20
        }
      },
      "15": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 66
        }
      },
      "16": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "17": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 19
        }
      },
      "18": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "19": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 10
        }
      },
      "20": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 53
        }
      },
      "21": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "22": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 30
        }
      },
      "23": {
        start: {
          line: 44,
          column: 17
        },
        end: {
          line: 46,
          column: 5
        }
      },
      "24": {
        start: {
          line: 47,
          column: 32
        },
        end: {
          line: 47,
          column: 88
        }
      },
      "25": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "26": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "27": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 95
        }
      },
      "28": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "29": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 57
        }
      },
      "30": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 39
        }
      },
      "31": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 25
        }
      },
      "32": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "33": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 31
        }
      },
      "34": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 18
        }
      },
      "35": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 68,
          column: 2
        }
      },
      "36": {
        start: {
          line: 67,
          column: 45
        },
        end: {
          line: 67,
          column: 59
        }
      },
      "37": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 158,
          column: 5
        }
      },
      "38": {
        start: {
          line: 72,
          column: 24
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "39": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "40": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "41": {
        start: {
          line: 81,
          column: 25
        },
        end: {
          line: 81,
          column: 46
        }
      },
      "42": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "43": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "44": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 93,
          column: 40
        }
      },
      "45": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "46": {
        start: {
          line: 98,
          column: 38
        },
        end: {
          line: 98,
          column: 68
        }
      },
      "47": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "48": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 91
        }
      },
      "49": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "50": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 109,
          column: 19
        }
      },
      "51": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "52": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 83
        }
      },
      "53": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "54": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 130,
          column: 19
        }
      },
      "55": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "56": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 63
        }
      },
      "57": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "58": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 151,
          column: 15
        }
      },
      "59": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "60": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      "61": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 48
        }
      },
      "62": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "63": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "64": {
        start: {
          line: 172,
          column: 25
        },
        end: {
          line: 172,
          column: 46
        }
      },
      "65": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "66": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 181,
          column: 15
        }
      },
      "67": {
        start: {
          line: 184,
          column: 27
        },
        end: {
          line: 184,
          column: 144
        }
      },
      "68": {
        start: {
          line: 184,
          column: 74
        },
        end: {
          line: 184,
          column: 143
        }
      },
      "69": {
        start: {
          line: 185,
          column: 34
        },
        end: {
          line: 185,
          column: 134
        }
      },
      "70": {
        start: {
          line: 185,
          column: 81
        },
        end: {
          line: 185,
          column: 133
        }
      },
      "71": {
        start: {
          line: 186,
          column: 42
        },
        end: {
          line: 186,
          column: 172
        }
      },
      "72": {
        start: {
          line: 186,
          column: 89
        },
        end: {
          line: 186,
          column: 171
        }
      },
      "73": {
        start: {
          line: 187,
          column: 22
        },
        end: {
          line: 187,
          column: 32
        }
      },
      "74": {
        start: {
          line: 189,
          column: 25
        },
        end: {
          line: 205,
          column: 10
        }
      },
      "75": {
        start: {
          line: 207,
          column: 38
        },
        end: {
          line: 207,
          column: 40
        }
      },
      "76": {
        start: {
          line: 208,
          column: 33
        },
        end: {
          line: 208,
          column: 35
        }
      },
      "77": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "78": {
        start: {
          line: 210,
          column: 34
        },
        end: {
          line: 210,
          column: 108
        }
      },
      "79": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 228,
          column: 13
        }
      },
      "80": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 219,
          column: 19
        }
      },
      "81": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 227,
          column: 19
        }
      },
      "82": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 240,
          column: 11
        }
      },
      "83": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 63
        }
      },
      "84": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 33
          }
        },
        loc: {
          start: {
            line: 23,
            column: 47
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 27,
            column: 40
          }
        },
        loc: {
          start: {
            line: 27,
            column: 61
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "5": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 31,
            column: 34
          }
        },
        loc: {
          start: {
            line: 31,
            column: 53
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 31
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 67,
            column: 38
          },
          end: {
            line: 67,
            column: 39
          }
        },
        loc: {
          start: {
            line: 67,
            column: 45
          },
          end: {
            line: 67,
            column: 59
          }
        },
        line: 67
      },
      "7": {
        name: "POST",
        decl: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 19
          }
        },
        loc: {
          start: {
            line: 69,
            column: 29
          },
          end: {
            line: 159,
            column: 1
          }
        },
        line: 69
      },
      "8": {
        name: "GET",
        decl: {
          start: {
            line: 160,
            column: 15
          },
          end: {
            line: 160,
            column: 18
          }
        },
        loc: {
          start: {
            line: 160,
            column: 28
          },
          end: {
            line: 249,
            column: 1
          }
        },
        line: 160
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 184,
            column: 56
          },
          end: {
            line: 184,
            column: 57
          }
        },
        loc: {
          start: {
            line: 184,
            column: 74
          },
          end: {
            line: 184,
            column: 143
          }
        },
        line: 184
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 185,
            column: 63
          },
          end: {
            line: 185,
            column: 64
          }
        },
        loc: {
          start: {
            line: 185,
            column: 81
          },
          end: {
            line: 185,
            column: 133
          }
        },
        line: 185
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 186,
            column: 71
          },
          end: {
            line: 186,
            column: 72
          }
        },
        loc: {
          start: {
            line: 186,
            column: 89
          },
          end: {
            line: 186,
            column: 171
          }
        },
        line: 186
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 29
          },
          end: {
            line: 28,
            column: 45
          }
        }, {
          start: {
            line: 28,
            column: 48
          },
          end: {
            line: 28,
            column: 65
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 20
          }
        }, {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 27
          }
        }, {
          start: {
            line: 32,
            column: 31
          },
          end: {
            line: 32,
            column: 45
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 35,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 35,
            column: 20
          }
        }, {
          start: {
            line: 35,
            column: 24
          },
          end: {
            line: 35,
            column: 47
          }
        }, {
          start: {
            line: 35,
            column: 51
          },
          end: {
            line: 35,
            column: 76
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "7": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 13
          }
        }, {
          start: {
            line: 41,
            column: 17
          },
          end: {
            line: 41,
            column: 31
          }
        }],
        line: 41
      },
      "8": {
        loc: {
          start: {
            line: 47,
            column: 32
          },
          end: {
            line: 47,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 32
          },
          end: {
            line: 47,
            column: 53
          }
        }, {
          start: {
            line: 47,
            column: 57
          },
          end: {
            line: 47,
            column: 88
          }
        }],
        line: 47
      },
      "9": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "10": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 29
          }
        }, {
          start: {
            line: 49,
            column: 33
          },
          end: {
            line: 49,
            column: 79
          }
        }],
        line: 49
      },
      "11": {
        loc: {
          start: {
            line: 50,
            column: 23
          },
          end: {
            line: 50,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 47
          },
          end: {
            line: 50,
            column: 88
          }
        }, {
          start: {
            line: 50,
            column: 91
          },
          end: {
            line: 50,
            column: 95
          }
        }],
        line: 50
      },
      "12": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        }, {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 55,
            column: 13
          }
        }],
        line: 51
      },
      "13": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 20
          }
        }, {
          start: {
            line: 51,
            column: 25
          },
          end: {
            line: 51,
            column: 33
          }
        }, {
          start: {
            line: 51,
            column: 37
          },
          end: {
            line: 51,
            column: 45
          }
        }],
        line: 51
      },
      "14": {
        loc: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "15": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "16": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "17": {
        loc: {
          start: {
            line: 95,
            column: 23
          },
          end: {
            line: 95,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 23
          },
          end: {
            line: 95,
            column: 56
          }
        }, {
          start: {
            line: 95,
            column: 60
          },
          end: {
            line: 95,
            column: 69
          }
        }],
        line: 95
      },
      "18": {
        loc: {
          start: {
            line: 96,
            column: 20
          },
          end: {
            line: 96,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 20
          },
          end: {
            line: 96,
            column: 50
          }
        }, {
          start: {
            line: 96,
            column: 54
          },
          end: {
            line: 96,
            column: 63
          }
        }],
        line: 96
      },
      "19": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: 121,
            column: 15
          },
          end: {
            line: 142,
            column: 9
          }
        }],
        line: 100
      },
      "20": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "21": {
        loc: {
          start: {
            line: 113,
            column: 26
          },
          end: {
            line: 113,
            column: 180
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 49
          },
          end: {
            line: 113,
            column: 139
          }
        }, {
          start: {
            line: 113,
            column: 142
          },
          end: {
            line: 113,
            column: 180
          }
        }],
        line: 113
      },
      "22": {
        loc: {
          start: {
            line: 118,
            column: 32
          },
          end: {
            line: 118,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 32
          },
          end: {
            line: 118,
            column: 52
          }
        }, {
          start: {
            line: 118,
            column: 56
          },
          end: {
            line: 118,
            column: 77
          }
        }],
        line: 118
      },
      "23": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "24": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "25": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "26": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "27": {
        loc: {
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 228,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 228,
            column: 13
          }
        }, {
          start: {
            line: 220,
            column: 19
          },
          end: {
            line: 228,
            column: 13
          }
        }],
        line: 211
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\atualizar-status\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@/app/api/auth/[...nextauth]/route';\nimport { TipoUsuario } from '@prisma/client';\nimport { atualizarStatusPeriodos, atualizarStatusPeriodo } from '@/lib/utils/periodo-status-updater';\nimport { z } from 'zod';\n\n// Schema para valida\xE7\xE3o dos par\xE2metros de query\nconst querySchema = z.object({\n  periodoId: z.string().optional(),\n  forcar: z.string().transform(val => val === 'true').optional()\n});\n\n/**\n * POST /api/periodos-avaliacao/atualizar-status\n * \n * Atualiza automaticamente o status dos per\xEDodos de avalia\xE7\xE3o baseado nas datas atuais\n * \n * Query Parameters:\n * - periodoId (opcional): ID espec\xEDfico do per\xEDodo para atualizar\n * - forcar (opcional): Se true, for\xE7a a atualiza\xE7\xE3o mesmo que n\xE3o seja necess\xE1ria\n * \n * Permiss\xF5es: ADMIN, GESTOR\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await auth();\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'N\xE3o autenticado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es\n    const userType = session.user.userType as TipoUsuario;\n    if (!['ADMIN', 'GESTOR'].includes(userType)) {\n      return NextResponse.json(\n        { erro: 'Sem permiss\xE3o para atualizar status de per\xEDodos' },\n        { status: 403 }\n      );\n    }\n\n    // Validar query parameters\n    const url = new URL(request.url);\n    const queryParams = {\n      periodoId: url.searchParams.get('periodoId') || undefined,\n      forcar: url.searchParams.get('forcar') || undefined\n    };\n\n    const { periodoId, forcar } = querySchema.parse(queryParams);\n\n    let resultado;\n\n    if (periodoId) {\n      // Atualizar per\xEDodo espec\xEDfico\n      resultado = await atualizarStatusPeriodo(periodoId);\n      \n      if (!resultado.sucesso) {\n        return NextResponse.json(\n          { \n            erro: 'Erro ao atualizar status do per\xEDodo',\n            detalhes: resultado.erro\n          },\n          { status: 400 }\n        );\n      }\n\n      return NextResponse.json({\n        sucesso: true,\n        mensagem: resultado.atualizado \n          ? `Status do per\xEDodo atualizado de ${resultado.statusAnterior} para ${resultado.statusNovo}`\n          : 'Per\xEDodo j\xE1 est\xE1 com o status correto',\n        periodo: {\n          id: periodoId,\n          atualizado: resultado.atualizado,\n          statusAnterior: resultado.statusAnterior,\n          statusNovo: resultado.statusNovo || resultado.statusAtual\n        }\n      });\n    } else {\n      // Atualizar todos os per\xEDodos\n      resultado = await atualizarStatusPeriodos();\n      \n      if (!resultado.sucesso) {\n        return NextResponse.json(\n          { \n            erro: 'Erro ao atualizar status dos per\xEDodos',\n            detalhes: resultado.erro\n          },\n          { status: 500 }\n        );\n      }\n\n      return NextResponse.json({\n        sucesso: true,\n        mensagem: `Atualiza\xE7\xE3o conclu\xEDda: ${resultado.periodosAtualizados} per\xEDodo(s) atualizado(s)`,\n        estatisticas: {\n          periodosAtualizados: resultado.periodosAtualizados,\n          periodosAtivados: resultado.periodosAtivados,\n          periodosFinalizados: resultado.periodosFinalizados\n        },\n        detalhes: resultado.detalhes\n      });\n    }\n\n  } catch (error) {\n    console.error('Erro na atualiza\xE7\xE3o de status:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          erro: 'Par\xE2metros inv\xE1lidos',\n          detalhes: error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/periodos-avaliacao/atualizar-status\n * \n * Verifica quais per\xEDodos precisam de atualiza\xE7\xE3o de status (sem fazer altera\xE7\xF5es)\n * \n * Permiss\xF5es: ADMIN, GESTOR\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await auth();\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'N\xE3o autenticado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permiss\xF5es\n    const userType = session.user.userType as TipoUsuario;\n    if (!['ADMIN', 'GESTOR'].includes(userType)) {\n      return NextResponse.json(\n        { erro: 'Sem permiss\xE3o para verificar status de per\xEDodos' },\n        { status: 403 }\n      );\n    }\n\n    // Importar prisma e StatusPeriodo aqui para evitar problemas de importa\xE7\xE3o\n    const { prisma } = await import('@/lib/database-config');\n    const { StatusPeriodo } = await import('@prisma/client');\n    const { calcularStatusPeriodo } = await import('@/lib/utils/periodo-status-updater');\n\n    const agora = new Date();\n\n    // Buscar todos os per\xEDodos que n\xE3o est\xE3o cancelados\n    const periodos = await prisma.periodoAvaliacao.findMany({\n      where: {\n        status: {\n          not: StatusPeriodo.CANCELADO\n        }\n      },\n      select: {\n        id: true,\n        nome: true,\n        status: true,\n        dataInicio: true,\n        dataFim: true\n      },\n      orderBy: {\n        dataInicio: 'asc'\n      }\n    });\n\n    // Verificar quais per\xEDodos precisam de atualiza\xE7\xE3o\n    const periodosParaAtualizar = [];\n    const periodosCorretos = [];\n\n    for (const periodo of periodos) {\n      const statusCorreto = calcularStatusPeriodo(\n        periodo.dataInicio,\n        periodo.dataFim,\n        periodo.status\n      );\n\n      if (statusCorreto !== periodo.status) {\n        periodosParaAtualizar.push({\n          id: periodo.id,\n          nome: periodo.nome,\n          statusAtual: periodo.status,\n          statusCorreto: statusCorreto,\n          dataInicio: periodo.dataInicio,\n          dataFim: periodo.dataFim\n        });\n      } else {\n        periodosCorretos.push({\n          id: periodo.id,\n          nome: periodo.nome,\n          status: periodo.status,\n          dataInicio: periodo.dataInicio,\n          dataFim: periodo.dataFim\n        });\n      }\n    }\n\n    return NextResponse.json({\n      sucesso: true,\n      dataVerificacao: agora,\n      resumo: {\n        totalPeriodos: periodos.length,\n        periodosCorretos: periodosCorretos.length,\n        periodosParaAtualizar: periodosParaAtualizar.length\n      },\n      periodosParaAtualizar,\n      periodosCorretos\n    });\n\n  } catch (error) {\n    console.error('Erro na verifica\xE7\xE3o de status:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "querySchema", "z", "object", "periodoId", "string", "optional", "forcar", "transform", "val", "request", "session", "auth", "user", "NextResponse", "json", "erro", "status", "userType", "includes", "url", "URL", "queryParams", "searchParams", "get", "undefined", "parse", "resultado", "atualizarStatusPeriodo", "sucesso", "detalhes", "mensagem", "atualizado", "statusAnterior", "statusNovo", "periodo", "id", "statusAtual", "atualizarStatusPeriodos", "periodosAtualizados", "estatisticas", "periodosAtivados", "periodosFinalizados", "error", "console", "ZodError", "errors", "prisma", "StatusPeriodo", "calcularStatusPeriodo", "agora", "Date", "periodos", "periodoAvaliacao", "findMany", "where", "not", "CANCELADO", "select", "nome", "dataInicio", "dataFim", "orderBy", "periodosParaAtualizar", "periodosCorretos", "statusCorreto", "push", "dataVerificacao", "resumo", "totalPeriodos", "length"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1bafca9de826f57d5ba57b09d146f322b79276b0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2pcs236ny2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2pcs236ny2();
cov_2pcs236ny2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2pcs236ny2().f[0]++;
  cov_2pcs236ny2().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2pcs236ny2().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2pcs236ny2().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2pcs236ny2().f[1]++;
    cov_2pcs236ny2().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2pcs236ny2().f[2]++;
    cov_2pcs236ny2().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2pcs236ny2().s[6]++, require("next/server"));
const _route =
/* istanbul ignore next */
(cov_2pcs236ny2().s[7]++, require("../../auth/[...nextauth]/route"));
const _periodostatusupdater =
/* istanbul ignore next */
(cov_2pcs236ny2().s[8]++, require("../../../../lib/utils/periodo-status-updater"));
const _zod =
/* istanbul ignore next */
(cov_2pcs236ny2().s[9]++, require("zod"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_2pcs236ny2().f[3]++;
  cov_2pcs236ny2().s[10]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_2pcs236ny2().b[0][0]++;
    cov_2pcs236ny2().s[11]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_2pcs236ny2().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_2pcs236ny2().s[12]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_2pcs236ny2().s[13]++, new WeakMap());
  /* istanbul ignore next */
  cov_2pcs236ny2().s[14]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_2pcs236ny2().f[4]++;
    cov_2pcs236ny2().s[15]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_2pcs236ny2().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_2pcs236ny2().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_2pcs236ny2().f[5]++;
  cov_2pcs236ny2().s[16]++;
  if (
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_2pcs236ny2().b[2][0]++;
    cov_2pcs236ny2().s[17]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_2pcs236ny2().b[2][1]++;
  }
  cov_2pcs236ny2().s[18]++;
  if (
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_2pcs236ny2().b[4][0]++;
    cov_2pcs236ny2().s[19]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_2pcs236ny2().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_2pcs236ny2().s[20]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_2pcs236ny2().s[21]++;
  if (
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_2pcs236ny2().b[6][0]++;
    cov_2pcs236ny2().s[22]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_2pcs236ny2().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_2pcs236ny2().s[23]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_2pcs236ny2().s[24]++,
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_2pcs236ny2().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_2pcs236ny2().s[25]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_2pcs236ny2().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_2pcs236ny2().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_2pcs236ny2().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_2pcs236ny2().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_2pcs236ny2().s[27]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_2pcs236ny2().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_2pcs236ny2().b[11][1]++, null));
      /* istanbul ignore next */
      cov_2pcs236ny2().s[28]++;
      if (
      /* istanbul ignore next */
      (cov_2pcs236ny2().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_2pcs236ny2().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_2pcs236ny2().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_2pcs236ny2().b[12][0]++;
        cov_2pcs236ny2().s[29]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_2pcs236ny2().b[12][1]++;
        cov_2pcs236ny2().s[30]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_2pcs236ny2().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_2pcs236ny2().s[31]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_2pcs236ny2().s[32]++;
  if (cache) {
    /* istanbul ignore next */
    cov_2pcs236ny2().b[14][0]++;
    cov_2pcs236ny2().s[33]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_2pcs236ny2().b[14][1]++;
  }
  cov_2pcs236ny2().s[34]++;
  return newObj;
}
// Schema para validação dos parâmetros de query
const querySchema =
/* istanbul ignore next */
(cov_2pcs236ny2().s[35]++, _zod.z.object({
  periodoId: _zod.z.string().optional(),
  forcar: _zod.z.string().transform(val => {
    /* istanbul ignore next */
    cov_2pcs236ny2().f[6]++;
    cov_2pcs236ny2().s[36]++;
    return val === 'true';
  }).optional()
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_2pcs236ny2().f[7]++;
  cov_2pcs236ny2().s[37]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[38]++, await (0, _route.auth)());
    /* istanbul ignore next */
    cov_2pcs236ny2().s[39]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2pcs236ny2().b[15][0]++;
      cov_2pcs236ny2().s[40]++;
      return _server.NextResponse.json({
        erro: 'Não autenticado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pcs236ny2().b[15][1]++;
    }
    // Verificar permissões
    const userType =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[41]++, session.user.userType);
    /* istanbul ignore next */
    cov_2pcs236ny2().s[42]++;
    if (!['ADMIN', 'GESTOR'].includes(userType)) {
      /* istanbul ignore next */
      cov_2pcs236ny2().b[16][0]++;
      cov_2pcs236ny2().s[43]++;
      return _server.NextResponse.json({
        erro: 'Sem permissão para atualizar status de períodos'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pcs236ny2().b[16][1]++;
    }
    // Validar query parameters
    const url =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[44]++, new URL(request.url));
    const queryParams =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[45]++, {
      periodoId:
      /* istanbul ignore next */
      (cov_2pcs236ny2().b[17][0]++, url.searchParams.get('periodoId')) ||
      /* istanbul ignore next */
      (cov_2pcs236ny2().b[17][1]++, undefined),
      forcar:
      /* istanbul ignore next */
      (cov_2pcs236ny2().b[18][0]++, url.searchParams.get('forcar')) ||
      /* istanbul ignore next */
      (cov_2pcs236ny2().b[18][1]++, undefined)
    });
    const {
      periodoId,
      forcar
    } =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[46]++, querySchema.parse(queryParams));
    let resultado;
    /* istanbul ignore next */
    cov_2pcs236ny2().s[47]++;
    if (periodoId) {
      /* istanbul ignore next */
      cov_2pcs236ny2().b[19][0]++;
      cov_2pcs236ny2().s[48]++;
      // Atualizar período específico
      resultado = await (0, _periodostatusupdater.atualizarStatusPeriodo)(periodoId);
      /* istanbul ignore next */
      cov_2pcs236ny2().s[49]++;
      if (!resultado.sucesso) {
        /* istanbul ignore next */
        cov_2pcs236ny2().b[20][0]++;
        cov_2pcs236ny2().s[50]++;
        return _server.NextResponse.json({
          erro: 'Erro ao atualizar status do período',
          detalhes: resultado.erro
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2pcs236ny2().b[20][1]++;
      }
      cov_2pcs236ny2().s[51]++;
      return _server.NextResponse.json({
        sucesso: true,
        mensagem: resultado.atualizado ?
        /* istanbul ignore next */
        (cov_2pcs236ny2().b[21][0]++, `Status do período atualizado de ${resultado.statusAnterior} para ${resultado.statusNovo}`) :
        /* istanbul ignore next */
        (cov_2pcs236ny2().b[21][1]++, 'Período já está com o status correto'),
        periodo: {
          id: periodoId,
          atualizado: resultado.atualizado,
          statusAnterior: resultado.statusAnterior,
          statusNovo:
          /* istanbul ignore next */
          (cov_2pcs236ny2().b[22][0]++, resultado.statusNovo) ||
          /* istanbul ignore next */
          (cov_2pcs236ny2().b[22][1]++, resultado.statusAtual)
        }
      });
    } else {
      /* istanbul ignore next */
      cov_2pcs236ny2().b[19][1]++;
      cov_2pcs236ny2().s[52]++;
      // Atualizar todos os períodos
      resultado = await (0, _periodostatusupdater.atualizarStatusPeriodos)();
      /* istanbul ignore next */
      cov_2pcs236ny2().s[53]++;
      if (!resultado.sucesso) {
        /* istanbul ignore next */
        cov_2pcs236ny2().b[23][0]++;
        cov_2pcs236ny2().s[54]++;
        return _server.NextResponse.json({
          erro: 'Erro ao atualizar status dos períodos',
          detalhes: resultado.erro
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_2pcs236ny2().b[23][1]++;
      }
      cov_2pcs236ny2().s[55]++;
      return _server.NextResponse.json({
        sucesso: true,
        mensagem: `Atualização concluída: ${resultado.periodosAtualizados} período(s) atualizado(s)`,
        estatisticas: {
          periodosAtualizados: resultado.periodosAtualizados,
          periodosAtivados: resultado.periodosAtivados,
          periodosFinalizados: resultado.periodosFinalizados
        },
        detalhes: resultado.detalhes
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2pcs236ny2().s[56]++;
    console.error('Erro na atualização de status:', error);
    /* istanbul ignore next */
    cov_2pcs236ny2().s[57]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_2pcs236ny2().b[24][0]++;
      cov_2pcs236ny2().s[58]++;
      return _server.NextResponse.json({
        erro: 'Parâmetros inválidos',
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pcs236ny2().b[24][1]++;
    }
    cov_2pcs236ny2().s[59]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2pcs236ny2().f[8]++;
  cov_2pcs236ny2().s[60]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[61]++, await (0, _route.auth)());
    /* istanbul ignore next */
    cov_2pcs236ny2().s[62]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2pcs236ny2().b[25][0]++;
      cov_2pcs236ny2().s[63]++;
      return _server.NextResponse.json({
        erro: 'Não autenticado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pcs236ny2().b[25][1]++;
    }
    // Verificar permissões
    const userType =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[64]++, session.user.userType);
    /* istanbul ignore next */
    cov_2pcs236ny2().s[65]++;
    if (!['ADMIN', 'GESTOR'].includes(userType)) {
      /* istanbul ignore next */
      cov_2pcs236ny2().b[26][0]++;
      cov_2pcs236ny2().s[66]++;
      return _server.NextResponse.json({
        erro: 'Sem permissão para verificar status de períodos'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pcs236ny2().b[26][1]++;
    }
    // Importar prisma e StatusPeriodo aqui para evitar problemas de importação
    const {
      prisma
    } =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[67]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_2pcs236ny2().f[9]++;
      cov_2pcs236ny2().s[68]++;
      return /*#__PURE__*/_interop_require_wildcard(require("../../../../lib/database-config"));
    }));
    const {
      StatusPeriodo
    } =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[69]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_2pcs236ny2().f[10]++;
      cov_2pcs236ny2().s[70]++;
      return /*#__PURE__*/_interop_require_wildcard(require("@prisma/client"));
    }));
    const {
      calcularStatusPeriodo
    } =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[71]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_2pcs236ny2().f[11]++;
      cov_2pcs236ny2().s[72]++;
      return /*#__PURE__*/_interop_require_wildcard(require("../../../../lib/utils/periodo-status-updater"));
    }));
    const agora =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[73]++, new Date());
    // Buscar todos os períodos que não estão cancelados
    const periodos =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[74]++, await prisma.periodoAvaliacao.findMany({
      where: {
        status: {
          not: StatusPeriodo.CANCELADO
        }
      },
      select: {
        id: true,
        nome: true,
        status: true,
        dataInicio: true,
        dataFim: true
      },
      orderBy: {
        dataInicio: 'asc'
      }
    }));
    // Verificar quais períodos precisam de atualização
    const periodosParaAtualizar =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[75]++, []);
    const periodosCorretos =
    /* istanbul ignore next */
    (cov_2pcs236ny2().s[76]++, []);
    /* istanbul ignore next */
    cov_2pcs236ny2().s[77]++;
    for (const periodo of periodos) {
      const statusCorreto =
      /* istanbul ignore next */
      (cov_2pcs236ny2().s[78]++, calcularStatusPeriodo(periodo.dataInicio, periodo.dataFim, periodo.status));
      /* istanbul ignore next */
      cov_2pcs236ny2().s[79]++;
      if (statusCorreto !== periodo.status) {
        /* istanbul ignore next */
        cov_2pcs236ny2().b[27][0]++;
        cov_2pcs236ny2().s[80]++;
        periodosParaAtualizar.push({
          id: periodo.id,
          nome: periodo.nome,
          statusAtual: periodo.status,
          statusCorreto: statusCorreto,
          dataInicio: periodo.dataInicio,
          dataFim: periodo.dataFim
        });
      } else {
        /* istanbul ignore next */
        cov_2pcs236ny2().b[27][1]++;
        cov_2pcs236ny2().s[81]++;
        periodosCorretos.push({
          id: periodo.id,
          nome: periodo.nome,
          status: periodo.status,
          dataInicio: periodo.dataInicio,
          dataFim: periodo.dataFim
        });
      }
    }
    /* istanbul ignore next */
    cov_2pcs236ny2().s[82]++;
    return _server.NextResponse.json({
      sucesso: true,
      dataVerificacao: agora,
      resumo: {
        totalPeriodos: periodos.length,
        periodosCorretos: periodosCorretos.length,
        periodosParaAtualizar: periodosParaAtualizar.length
      },
      periodosParaAtualizar,
      periodosCorretos
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pcs236ny2().s[83]++;
    console.error('Erro na verificação de status:', error);
    /* istanbul ignore next */
    cov_2pcs236ny2().s[84]++;
    return _server.NextResponse.json({
      erro: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,