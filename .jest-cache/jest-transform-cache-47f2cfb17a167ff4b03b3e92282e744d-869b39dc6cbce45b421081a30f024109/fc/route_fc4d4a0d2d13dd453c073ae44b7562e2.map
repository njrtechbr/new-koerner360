{"version":3,"names":["GET","cov_2klbh5wike","f","s","POST","uploadDocumentoSchema","_zod","z","object","atendenteId","string","uuid","optional","tipo","enum","categoria","default","request","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","formData","arquivo","get","parametrosValidados","parse","tipoUpload","validacao","_upload","validateFile","valid","error","subDirectory","resultado","saveFile","type","preserveOriginalName","success","mensagem","url","filePath","nomeArquivo","fileName","nomeOriginal","originalName","tamanho","size","tipoMime","mimeType","console","ZodError","detalhes","errors","configuracao","tamanhoMaximo","documento","UPLOAD_CONFIG","MAX_FILE_SIZE","DOCUMENT","imagem","IMAGE","tiposPermitidos","ALLOWED_TYPES","extensoesPermitidas","ALLOWED_EXTENSIONS"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\upload\\documentos\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { saveFile, validateFile, UPLOAD_CONFIG } from '@/lib/upload';\nimport { z } from 'zod';\n\n/**\n * Schema para validação dos parâmetros de upload\n */\nconst uploadDocumentoSchema = z.object({\n  atendenteId: z\n    .string()\n    .uuid('ID do atendente deve ser um UUID válido')\n    .optional(),\n  tipo: z\n    .enum([\n      'RG',\n      'CPF',\n      'CNH',\n      'CTPS',\n      'TITULO_ELEITOR',\n      'CERTIFICADO',\n      'DIPLOMA',\n      'OUTRO',\n    ])\n    .optional(),\n  categoria: z.enum(['documento', 'foto']).default('documento'),\n});\n\n/**\n * POST /api/upload/documentos\n * Faz upload de documentos e fotos para atendentes\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para fazer upload de documentos' },\n        { status: 403 }\n      );\n    }\n\n    // Extrair dados do FormData\n    const formData = await request.formData();\n    const arquivo = formData.get('arquivo') as File;\n    const atendenteId = formData.get('atendenteId') as string;\n    const tipo = formData.get('tipo') as string;\n    const categoria = (formData.get('categoria') as string) || 'documento';\n\n    // Validar se o arquivo foi enviado\n    if (!arquivo) {\n      return NextResponse.json(\n        { erro: 'Nenhum arquivo foi enviado' },\n        { status: 400 }\n      );\n    }\n\n    // Validar parâmetros\n    const parametrosValidados = uploadDocumentoSchema.parse({\n      atendenteId,\n      tipo,\n      categoria,\n    });\n\n    // Determinar tipo de upload baseado na categoria\n    const tipoUpload =\n      parametrosValidados.categoria === 'foto' ? 'IMAGE' : 'DOCUMENT';\n\n    // Validar arquivo\n    const validacao = validateFile(arquivo, tipoUpload);\n    if (!validacao.valid) {\n      return NextResponse.json({ erro: validacao.error }, { status: 400 });\n    }\n\n    // Determinar subdiretório baseado no atendente (se fornecido)\n    const subDirectory = parametrosValidados.atendenteId\n      ? `atendente_${parametrosValidados.atendenteId}`\n      : 'temp';\n\n    // Fazer upload do arquivo\n    const resultado = await saveFile(arquivo, {\n      type: tipoUpload,\n      subDirectory,\n      preserveOriginalName: false,\n    });\n\n    if (!resultado.success) {\n      return NextResponse.json(\n        { erro: resultado.error || 'Erro ao fazer upload do arquivo' },\n        { status: 500 }\n      );\n    }\n\n    // Retornar informações do arquivo\n    return NextResponse.json(\n      {\n        mensagem: 'Upload realizado com sucesso',\n        arquivo: {\n          url: resultado.filePath,\n          nomeArquivo: resultado.fileName,\n          nomeOriginal: resultado.originalName,\n          tamanho: resultado.size,\n          tipoMime: resultado.mimeType,\n          categoria: parametrosValidados.categoria,\n          tipo: parametrosValidados.tipo,\n        },\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Erro no upload de documento:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        {\n          erro: 'Dados inválidos',\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/upload/documentos\n * Retorna informações sobre os tipos de arquivo permitidos\n */\nexport async function GET() {\n  try {\n    return NextResponse.json({\n      configuracao: {\n        tamanhoMaximo: {\n          documento: `${UPLOAD_CONFIG.MAX_FILE_SIZE.DOCUMENT / (1024 * 1024)}MB`,\n          imagem: `${UPLOAD_CONFIG.MAX_FILE_SIZE.IMAGE / (1024 * 1024)}MB`,\n        },\n        tiposPermitidos: {\n          documento: UPLOAD_CONFIG.ALLOWED_TYPES.DOCUMENT,\n          imagem: UPLOAD_CONFIG.ALLOWED_TYPES.IMAGE,\n        },\n        extensoesPermitidas: {\n          documento: UPLOAD_CONFIG.ALLOWED_EXTENSIONS.DOCUMENT,\n          imagem: UPLOAD_CONFIG.ALLOWED_EXTENSIONS.IMAGE,\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao obter configurações de upload:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}