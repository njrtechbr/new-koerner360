{"version":3,"names":["GET","cov_bxee128x6","f","s","POST","request","sucesso","usuario","resposta","_authorization","verificarPermissaoAPI","b","registrarTentativaAcesso","rota","nextUrl","pathname","metodo","method","ip","userAgent","headers","get","undefined","autorizado","motivo","includes","session","user","perfil","_server","NextResponse","json","erro","status","searchParams","URL","url","parametros","_validations","listarUsuariosSchema","parse","pagina","limite","busca","ativo","ordenarPor","ordem","pular","filtros","OR","nome","contains","mode","email","usuarios","total","Promise","all","_prisma","prisma","findMany","where","select","id","criadoEm","atualizadoEm","orderBy","skip","take","count","totalPaginas","Math","ceil","paginacao","paginaAtual","totalItens","itensPorPagina","temProxima","temAnterior","error","console","z","ZodError","detalhes","errors","body","dadosValidados","criarUsuarioSchema","usuarioExistente","findUnique","senhaHash","bcrypt","hash","senha","novoUsuario","create","data","mensagem"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\usuarios\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from '@/lib/auth/server';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { criarUsuarioSchema, listarUsuariosSchema } from '@/lib/validations';\nimport {\n  verificarPermissaoAPI,\n  registrarTentativaAcesso,\n} from '@/lib/auth/authorization';\nimport { hash } from 'bcryptjs';\nimport { Prisma } from '@prisma/client';\n\n/**\n * GET /api/usuarios - Listar usuários com paginação e filtros\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autorização\n    const { sucesso, usuario, resposta } = await verificarPermissaoAPI(\n      request,\n      ['visualizar_usuarios']\n    );\n\n    if (!sucesso) {\n      await registrarTentativaAcesso({\n        usuario,\n        rota: request.nextUrl.pathname,\n        metodo: request.method,\n        ip: request.ip,\n        userAgent: request.headers.get('user-agent') || undefined,\n        autorizado: false,\n        motivo: 'Permissão insuficiente para visualizar usuários',\n      });\n      return resposta!;\n    }\n\n    // Verificar se o usuário tem permissão para listar usuários\n    if (!['ADMIN', 'GESTOR'].includes(session.user.perfil)) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para listar usuários' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const parametros = listarUsuariosSchema.parse({\n      pagina: searchParams.get('pagina'),\n      limite: searchParams.get('limite'),\n      busca: searchParams.get('busca'),\n      perfil: searchParams.get('perfil'),\n      ativo: searchParams.get('ativo'),\n      ordenarPor: searchParams.get('ordenarPor'),\n      ordem: searchParams.get('ordem'),\n    });\n\n    const { pagina, limite, busca, perfil, ativo, ordenarPor, ordem } =\n      parametros;\n    const pular = (pagina - 1) * limite;\n\n    // Construir filtros\n    const filtros: any = {};\n\n    if (busca) {\n      filtros.OR = [\n        { nome: { contains: busca, mode: 'insensitive' } },\n        { email: { contains: busca, mode: 'insensitive' } },\n      ];\n    }\n\n    if (perfil) {\n      filtros.perfil = perfil;\n    }\n\n    if (ativo !== undefined) {\n      filtros.ativo = ativo;\n    }\n\n    // Buscar usuários com paginação\n    const [usuarios, total] = await Promise.all([\n      prisma.usuario.findMany({\n        where: filtros,\n        select: {\n          id: true,\n          nome: true,\n          email: true,\n          perfil: true,\n          ativo: true,\n          criadoEm: true,\n          atualizadoEm: true,\n        },\n        orderBy: { [ordenarPor]: ordem },\n        skip: pular,\n        take: limite,\n      }),\n      prisma.usuario.count({ where: filtros }),\n    ]);\n\n    const totalPaginas = Math.ceil(total / limite);\n\n    return NextResponse.json({\n      usuarios,\n      paginacao: {\n        paginaAtual: pagina,\n        totalPaginas,\n        totalItens: total,\n        itensPorPagina: limite,\n        temProxima: pagina < totalPaginas,\n        temAnterior: pagina > 1,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao listar usuários:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { erro: 'Parâmetros inválidos', detalhes: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/usuarios - Criar novo usuário\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autorização\n    const { sucesso, usuario, resposta } = await verificarPermissaoAPI(\n      request,\n      ['criar_usuarios']\n    );\n\n    if (!sucesso) {\n      await registrarTentativaAcesso({\n        usuario,\n        rota: request.nextUrl.pathname,\n        metodo: request.method,\n        ip: request.ip,\n        userAgent: request.headers.get('user-agent') || undefined,\n        autorizado: false,\n        motivo: 'Permissão insuficiente para criar usuários',\n      });\n      return resposta!;\n    }\n\n    // Verificar se o usuário tem permissão para criar usuários\n    if (!['ADMIN', 'GESTOR'].includes(session.user.perfil)) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para criar usuários' },\n        { status: 403 }\n      );\n    }\n\n    const body = await request.json();\n    const dadosValidados = criarUsuarioSchema.parse(body);\n\n    // Verificar se o email já existe\n    const usuarioExistente = await prisma.usuario.findUnique({\n      where: { email: dadosValidados.email },\n    });\n\n    if (usuarioExistente) {\n      return NextResponse.json(\n        { erro: 'Email já está em uso' },\n        { status: 409 }\n      );\n    }\n\n    // Criptografar senha\n    const senhaHash = await bcrypt.hash(dadosValidados.senha, 12);\n\n    // Criar usuário\n    const novoUsuario = await prisma.usuario.create({\n      data: {\n        nome: dadosValidados.nome,\n        email: dadosValidados.email,\n        senha: senhaHash,\n        perfil: dadosValidados.perfil,\n        ativo: dadosValidados.ativo,\n      },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        perfil: true,\n        ativo: true,\n        criadoEm: true,\n      },\n    });\n\n    return NextResponse.json(\n      {\n        mensagem: 'Usuário criado com sucesso',\n        usuario: novoUsuario,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Erro ao criar usuário:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { erro: 'Dados inválidos', detalhes: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}