{"version":3,"names":["DELETE","cov_29axsrvgw","f","s","GET","POST","PUT","configuracaoEmailSchema","_zod","z","object","emailsAtivos","boolean","emailPrincipal","string","email","optional","emailsAdicionais","array","frequenciaNotificacao","enum","tiposNotificacao","avaliacaoPendente","lembreteVencimento","avaliacaoVencida","resumoSemanal","horarioPreferido","regex","diasAntecedencia","number","min","max","formatoHtml","incluirResumo","assinaturaPersonalizada","request","session","_auth","auth","user","id","b","_server","NextResponse","json","erro","status","searchParams","URL","url","usuarioId","get","temPermissao","_permissoes","verificarPermissao","configuracao","_prisma","prisma","configuracaoEmailNotificacao","findUnique","where","include","usuario","select","nome","ativo","criadoEm","Date","atualizadoEm","error","console","body","dadosConfiguracao","usuarioAlvo","dadosValidados","parse","upsert","update","create","mensagem","ZodError","detalhes","errors","map","err","campo","path","join","message","configuracaoExistente","data","configuracaoAtualizada"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\notificacoes\\email\\configuracao\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { auth } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { verificarPermissao } from '@/lib/utils/permissoes';\n\n// Schema de validação para configuração de e-mail\nconst configuracaoEmailSchema = z.object({\n  emailsAtivos: z.boolean(),\n  emailPrincipal: z.string().email().optional(),\n  emailsAdicionais: z.array(z.string().email()).optional(),\n  frequenciaNotificacao: z.enum(['imediata', 'diaria', 'semanal']),\n  tiposNotificacao: z.object({\n    avaliacaoPendente: z.boolean(),\n    lembreteVencimento: z.boolean(),\n    avaliacaoVencida: z.boolean(),\n    resumoSemanal: z.boolean(),\n  }),\n  horarioPreferido: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),\n  diasAntecedencia: z.number().min(1).max(30),\n  formatoHtml: z.boolean(),\n  incluirResumo: z.boolean(),\n  assinaturaPersonalizada: z.string().max(500).optional(),\n});\n\n// GET - Buscar configuração de e-mail do usuário\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const usuarioId = searchParams.get('usuarioId') || session.user.id;\n\n    // Verificar permissões\n    if (usuarioId !== session.user.id) {\n      const temPermissao = await verificarPermissao(\n        session.user.id,\n        ['ADMIN', 'GESTOR']\n      );\n      \n      if (!temPermissao) {\n        return NextResponse.json(\n          { erro: 'Sem permissão para acessar configurações de outro usuário' },\n          { status: 403 }\n        );\n      }\n    }\n\n    // Buscar configuração existente\n    const configuracao = await prisma.configuracaoEmailNotificacao.findUnique({\n      where: { usuarioId },\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n          },\n        },\n      },\n    });\n\n    if (!configuracao) {\n      // Retornar configuração padrão se não existir\n      const usuario = await prisma.usuario.findUnique({\n        where: { id: usuarioId },\n        select: { id: true, nome: true, email: true },\n      });\n\n      if (!usuario) {\n        return NextResponse.json(\n          { erro: 'Usuário não encontrado' },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({\n        configuracao: {\n          usuarioId,\n          emailsAtivos: false,\n          emailPrincipal: usuario.email,\n          emailsAdicionais: [],\n          frequenciaNotificacao: 'diaria',\n          tiposNotificacao: {\n            avaliacaoPendente: true,\n            lembreteVencimento: true,\n            avaliacaoVencida: true,\n            resumoSemanal: false,\n          },\n          horarioPreferido: '09:00',\n          diasAntecedencia: 3,\n          formatoHtml: true,\n          incluirResumo: true,\n          assinaturaPersonalizada: null,\n          ativo: true,\n          criadoEm: new Date(),\n          atualizadoEm: new Date(),\n        },\n        usuario,\n      });\n    }\n\n    return NextResponse.json({\n      configuracao,\n      usuario: configuracao.usuario,\n    });\n  } catch (error) {\n    console.error('Erro ao buscar configuração de e-mail:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT - Atualizar configuração de e-mail\nexport async function PUT(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { usuarioId, ...dadosConfiguracao } = body;\n    const usuarioAlvo = usuarioId || session.user.id;\n\n    // Verificar permissões\n    if (usuarioAlvo !== session.user.id) {\n      const temPermissao = await verificarPermissao(\n        session.user.id,\n        ['ADMIN', 'GESTOR']\n      );\n      \n      if (!temPermissao) {\n        return NextResponse.json(\n          { erro: 'Sem permissão para alterar configurações de outro usuário' },\n          { status: 403 }\n        );\n      }\n    }\n\n    // Validar dados\n    const dadosValidados = configuracaoEmailSchema.parse(dadosConfiguracao);\n\n    // Verificar se o usuário existe\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: usuarioAlvo },\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { erro: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Atualizar ou criar configuração\n    const configuracao = await prisma.configuracaoEmailNotificacao.upsert({\n      where: { usuarioId: usuarioAlvo },\n      update: {\n        ...dadosValidados,\n        atualizadoEm: new Date(),\n      },\n      create: {\n        usuarioId: usuarioAlvo,\n        ...dadosValidados,\n        ativo: true,\n      },\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json({\n      configuracao,\n      mensagem: 'Configuração de e-mail atualizada com sucesso',\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        {\n          erro: 'Dados inválidos',\n          detalhes: error.errors.map(err => ({\n            campo: err.path.join('.'),\n            mensagem: err.message,\n          })),\n        },\n        { status: 400 }\n      );\n    }\n\n    console.error('Erro ao atualizar configuração de e-mail:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Criar nova configuração de e-mail\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { usuarioId, ...dadosConfiguracao } = body;\n    const usuarioAlvo = usuarioId || session.user.id;\n\n    // Verificar permissões\n    if (usuarioAlvo !== session.user.id) {\n      const temPermissao = await verificarPermissao(\n        session.user.id,\n        ['ADMIN']\n      );\n      \n      if (!temPermissao) {\n        return NextResponse.json(\n          { erro: 'Sem permissão para criar configurações para outro usuário' },\n          { status: 403 }\n        );\n      }\n    }\n\n    // Validar dados\n    const dadosValidados = configuracaoEmailSchema.parse(dadosConfiguracao);\n\n    // Verificar se já existe configuração\n    const configuracaoExistente = await prisma.configuracaoEmailNotificacao.findUnique({\n      where: { usuarioId: usuarioAlvo },\n    });\n\n    if (configuracaoExistente) {\n      return NextResponse.json(\n        { erro: 'Configuração de e-mail já existe para este usuário' },\n        { status: 409 }\n      );\n    }\n\n    // Verificar se o usuário existe\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: usuarioAlvo },\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { erro: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Criar configuração\n    const configuracao = await prisma.configuracaoEmailNotificacao.create({\n      data: {\n        usuarioId: usuarioAlvo,\n        ...dadosValidados,\n        ativo: true,\n      },\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json(\n      {\n        configuracao,\n        mensagem: 'Configuração de e-mail criada com sucesso',\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        {\n          erro: 'Dados inválidos',\n          detalhes: error.errors.map(err => ({\n            campo: err.path.join('.'),\n            mensagem: err.message,\n          })),\n        },\n        { status: 400 }\n      );\n    }\n\n    console.error('Erro ao criar configuração de e-mail:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Desativar configuração de e-mail\nexport async function DELETE(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { erro: 'Usuário não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const usuarioId = searchParams.get('usuarioId') || session.user.id;\n\n    // Verificar permissões\n    if (usuarioId !== session.user.id) {\n      const temPermissao = await verificarPermissao(\n        session.user.id,\n        ['ADMIN']\n      );\n      \n      if (!temPermissao) {\n        return NextResponse.json(\n          { erro: 'Sem permissão para desativar configurações de outro usuário' },\n          { status: 403 }\n        );\n      }\n    }\n\n    // Verificar se a configuração existe\n    const configuracao = await prisma.configuracaoEmailNotificacao.findUnique({\n      where: { usuarioId },\n    });\n\n    if (!configuracao) {\n      return NextResponse.json(\n        { erro: 'Configuração de e-mail não encontrada' },\n        { status: 404 }\n      );\n    }\n\n    // Desativar configuração (não deletar)\n    const configuracaoAtualizada = await prisma.configuracaoEmailNotificacao.update({\n      where: { usuarioId },\n      data: {\n        ativo: false,\n        emailsAtivos: false,\n        atualizadoEm: new Date(),\n      },\n    });\n\n    return NextResponse.json({\n      configuracao: configuracaoAtualizada,\n      mensagem: 'Configuração de e-mail desativada com sucesso',\n    });\n  } catch (error) {\n    console.error('Erro ao desativar configuração de e-mail:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],"mappingsgUsBA,OAAA;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAAH,MAAA;;MAtSAI,IAAA;IAAA;IAAAH,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAAC,GAAA;;MA8LAC,KAAA;IAAA;IAAAJ,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAAE,IAAA;;MA9FAC,IAAA;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAAG,GAAA;;;;;iCA1HoB;;;iCACxB;;;kCACG;;;kCACE;;;kCACY;AAEnC;AACA,MAAMC,uBAAA;AAAA;AAAA,CAAAN,aAAA,GAAAE,CAAA,QAA0BK,IAAA,CAAAC,CAAC,CAACC,MAAM,CAAC;EACvCC,YAAA,EAAcH,IAAA,CAAAC,CAAC,CAACG,OAAO;EACvBC,cAAA,EAAgBL,IAAA,CAAAC,CAAC,CAACK,MAAM,GAAGC,KAAK,GAAGC,QAAQ;EAC3CC,gBAAA,EAAkBT,IAAA,CAAAC,CAAC,CAACS,KAAK,CAACV,IAAA,CAAAC,CAAC,CAACK,MAAM,GAAGC,KAAK,IAAIC,QAAQ;EACtDG,qBAAA,EAAuBX,IAAA,CAAAC,CAAC,CAACW,IAAI,CAAC,CAAC,YAAY,UAAU,UAAU;EAC/DC,gBAAA,EAAkBb,IAAA,CAAAC,CAAC,CAACC,MAAM,CAAC;IACzBY,iBAAA,EAAmBd,IAAA,CAAAC,CAAC,CAACG,OAAO;IAC5BW,kBAAA,EAAoBf,IAAA,CAAAC,CAAC,CAACG,OAAO;IAC7BY,gBAAA,EAAkBhB,IAAA,CAAAC,CAAC,CAACG,OAAO;IAC3Ba,aAAA,EAAejB,IAAA,CAAAC,CAAC,CAACG,OAAO;EAC1B;EACAc,gBAAA,EAAkBlB,IAAA,CAAAC,CAAC,CAACK,MAAM,GAAGa,KAAK,CAAC;EACnCC,gBAAA,EAAkBpB,IAAA,CAAAC,CAAC,CAACoB,MAAM,GAAGC,GAAG,CAAC,GAAGC,GAAG,CAAC;EACxCC,WAAA,EAAaxB,IAAA,CAAAC,CAAC,CAACG,OAAO;EACtBqB,aAAA,EAAezB,IAAA,CAAAC,CAAC,CAACG,OAAO;EACxBsB,uBAAA,EAAyB1B,IAAA,CAAAC,CAAC,CAACK,MAAM,GAAGiB,GAAG,CAAC,KAAKf,QAAQ;AACvD;AAGO,eAAeZ,IAAI+B,OAAoB;EAAA;EAAAlC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC5C,IAAI;IACF,MAAMiC,OAAA;IAAA;IAAA,CAAAnC,aAAA,GAAAE,CAAA,QAAU,MAAM,IAAAkC,KAAA,CAAAC,IAAI;IAAA;IAAArC,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACiC,OAAA,EAASG,IAAA,EAAMC,EAAA,EAAI;MAAA;MAAAvC,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MACtB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAM;MAA0B,GAClC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAEA,MAAM;MAAEM;IAAY,CAAE;IAAA;IAAA,CAAA9C,aAAA,GAAAE,CAAA,QAAG,IAAI6C,GAAA,CAAIb,OAAA,CAAQc,GAAG;IAC5C,MAAMC,SAAA;IAAA;IAAA,CAAAjD,aAAA,GAAAE,CAAA;IAAY;IAAA,CAAAF,aAAA,GAAAwC,CAAA,UAAAM,YAAA,CAAaI,GAAG,CAAC;IAAA;IAAA,CAAAlD,aAAA,GAAAwC,CAAA,UAAgBL,OAAA,CAAQG,IAAI,CAACC,EAAE;IAElE;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IACA,IAAI+C,SAAA,KAAcd,OAAA,CAAQG,IAAI,CAACC,EAAE,EAAE;MAAA;MAAAvC,aAAA,GAAAwC,CAAA;MACjC,MAAMW,YAAA;MAAA;MAAA,CAAAnD,aAAA,GAAAE,CAAA,QAAe,MAAM,IAAAkD,WAAA,CAAAC,kBAAkB,EAC3ClB,OAAA,CAAQG,IAAI,CAACC,EAAE,EACf,CAAC,SAAS,SAAS;MAAA;MAAAvC,aAAA,GAAAE,CAAA;MAGrB,IAAI,CAACiD,YAAA,EAAc;QAAA;QAAAnD,aAAA,GAAAwC,CAAA;QAAAxC,aAAA,GAAAE,CAAA;QACjB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;UAAEC,IAAA,EAAM;QAA4D,GACpE;UAAEC,MAAA,EAAQ;QAAI;MAElB;MAAA;MAAA;QAAA7C,aAAA,GAAAwC,CAAA;MAAA;IACF;IAAA;IAAA;MAAAxC,aAAA,GAAAwC,CAAA;IAAA;IAEA;IACA,MAAMc,YAAA;IAAA;IAAA,CAAAtD,aAAA,GAAAE,CAAA,QAAe,MAAMqD,OAAA,CAAAC,MAAM,CAACC,4BAA4B,CAACC,UAAU,CAAC;MACxEC,KAAA,EAAO;QAAEV;MAAU;MACnBW,OAAA,EAAS;QACPC,OAAA,EAAS;UACPC,MAAA,EAAQ;YACNvB,EAAA,EAAI;YACJwB,IAAA,EAAM;YACNjD,KAAA,EAAO;UACT;QACF;MACF;IACF;IAAA;IAAAd,aAAA,GAAAE,CAAA;IAEA,IAAI,CAACoD,YAAA,EAAc;MAAA;MAAAtD,aAAA,GAAAwC,CAAA;MACjB;MACA,MAAMqB,OAAA;MAAA;MAAA,CAAA7D,aAAA,GAAAE,CAAA,QAAU,MAAMqD,OAAA,CAAAC,MAAM,CAACK,OAAO,CAACH,UAAU,CAAC;QAC9CC,KAAA,EAAO;UAAEpB,EAAA,EAAIU;QAAU;QACvBa,MAAA,EAAQ;UAAEvB,EAAA,EAAI;UAAMwB,IAAA,EAAM;UAAMjD,KAAA,EAAO;QAAK;MAC9C;MAAA;MAAAd,aAAA,GAAAE,CAAA;MAEA,IAAI,CAAC2D,OAAA,EAAS;QAAA;QAAA7D,aAAA,GAAAwC,CAAA;QAAAxC,aAAA,GAAAE,CAAA;QACZ,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;UAAEC,IAAA,EAAM;QAAyB,GACjC;UAAEC,MAAA,EAAQ;QAAI;MAElB;MAAA;MAAA;QAAA7C,aAAA,GAAAwC,CAAA;MAAA;MAAAxC,aAAA,GAAAE,CAAA;MAEA,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QACvBW,YAAA,EAAc;UACZL,SAAA;UACAvC,YAAA,EAAc;UACdE,cAAA,EAAgBiD,OAAA,CAAQ/C,KAAK;UAC7BE,gBAAA,EAAkB,EAAE;UACpBE,qBAAA,EAAuB;UACvBE,gBAAA,EAAkB;YAChBC,iBAAA,EAAmB;YACnBC,kBAAA,EAAoB;YACpBC,gBAAA,EAAkB;YAClBC,aAAA,EAAe;UACjB;UACAC,gBAAA,EAAkB;UAClBE,gBAAA,EAAkB;UAClBI,WAAA,EAAa;UACbC,aAAA,EAAe;UACfC,uBAAA,EAAyB;UACzB+B,KAAA,EAAO;UACPC,QAAA,EAAU,IAAIC,IAAA;UACdC,YAAA,EAAc,IAAID,IAAA;QACpB;QACAL;MACF;IACF;IAAA;IAAA;MAAA7D,aAAA,GAAAwC,CAAA;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IAEA,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBW,YAAA;MACAO,OAAA,EAASP,YAAA,CAAaO;IACxB;EACF,EAAE,OAAOO,KAAA,EAAO;IAAA;IAAApE,aAAA,GAAAE,CAAA;IACdmE,OAAA,CAAQD,KAAK,CAAC,0CAA0CA,KAAA;IAAA;IAAApE,aAAA,GAAAE,CAAA;IACxD,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,IAAA,EAAM;IAA2B,GACnC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF;AAGO,eAAexC,IAAI6B,OAAoB;EAAA;EAAAlC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC5C,IAAI;IACF,MAAMiC,OAAA;IAAA;IAAA,CAAAnC,aAAA,GAAAE,CAAA,QAAU,MAAM,IAAAkC,KAAA,CAAAC,IAAI;IAAA;IAAArC,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACiC,OAAA,EAASG,IAAA,EAAMC,EAAA,EAAI;MAAA;MAAAvC,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MACtB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAM;MAA0B,GAClC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAEA,MAAM8B,IAAA;IAAA;IAAA,CAAAtE,aAAA,GAAAE,CAAA,QAAO,MAAMgC,OAAA,CAAQS,IAAI;IAC/B,MAAM;MAAEM,SAAS;MAAE,GAAGsB;IAAA,CAAmB;IAAA;IAAA,CAAAvE,aAAA,GAAAE,CAAA,QAAGoE,IAAA;IAC5C,MAAME,WAAA;IAAA;IAAA,CAAAxE,aAAA,GAAAE,CAAA;IAAc;IAAA,CAAAF,aAAA,GAAAwC,CAAA,UAAAS,SAAA;IAAA;IAAA,CAAAjD,aAAA,GAAAwC,CAAA,UAAaL,OAAA,CAAQG,IAAI,CAACC,EAAE;IAEhD;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IACA,IAAIsE,WAAA,KAAgBrC,OAAA,CAAQG,IAAI,CAACC,EAAE,EAAE;MAAA;MAAAvC,aAAA,GAAAwC,CAAA;MACnC,MAAMW,YAAA;MAAA;MAAA,CAAAnD,aAAA,GAAAE,CAAA,QAAe,MAAM,IAAAkD,WAAA,CAAAC,kBAAkB,EAC3ClB,OAAA,CAAQG,IAAI,CAACC,EAAE,EACf,CAAC,SAAS,SAAS;MAAA;MAAAvC,aAAA,GAAAE,CAAA;MAGrB,IAAI,CAACiD,YAAA,EAAc;QAAA;QAAAnD,aAAA,GAAAwC,CAAA;QAAAxC,aAAA,GAAAE,CAAA;QACjB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;UAAEC,IAAA,EAAM;QAA4D,GACpE;UAAEC,MAAA,EAAQ;QAAI;MAElB;MAAA;MAAA;QAAA7C,aAAA,GAAAwC,CAAA;MAAA;IACF;IAAA;IAAA;MAAAxC,aAAA,GAAAwC,CAAA;IAAA;IAEA;IACA,MAAMiC,cAAA;IAAA;IAAA,CAAAzE,aAAA,GAAAE,CAAA,QAAiBI,uBAAA,CAAwBoE,KAAK,CAACH,iBAAA;IAErD;IACA,MAAMV,OAAA;IAAA;IAAA,CAAA7D,aAAA,GAAAE,CAAA,QAAU,MAAMqD,OAAA,CAAAC,MAAM,CAACK,OAAO,CAACH,UAAU,CAAC;MAC9CC,KAAA,EAAO;QAAEpB,EAAA,EAAIiC;MAAY;IAC3B;IAAA;IAAAxE,aAAA,GAAAE,CAAA;IAEA,IAAI,CAAC2D,OAAA,EAAS;MAAA;MAAA7D,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MACZ,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAM;MAAyB,GACjC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAEA;IACA,MAAMc,YAAA;IAAA;IAAA,CAAAtD,aAAA,GAAAE,CAAA,QAAe,MAAMqD,OAAA,CAAAC,MAAM,CAACC,4BAA4B,CAACkB,MAAM,CAAC;MACpEhB,KAAA,EAAO;QAAEV,SAAA,EAAWuB;MAAY;MAChCI,MAAA,EAAQ;QACN,GAAGH,cAAc;QACjBN,YAAA,EAAc,IAAID,IAAA;MACpB;MACAW,MAAA,EAAQ;QACN5B,SAAA,EAAWuB,WAAA;QACX,GAAGC,cAAc;QACjBT,KAAA,EAAO;MACT;MACAJ,OAAA,EAAS;QACPC,OAAA,EAAS;UACPC,MAAA,EAAQ;YACNvB,EAAA,EAAI;YACJwB,IAAA,EAAM;YACNjD,KAAA,EAAO;UACT;QACF;MACF;IACF;IAAA;IAAAd,aAAA,GAAAE,CAAA;IAEA,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBW,YAAA;MACAwB,QAAA,EAAU;IACZ;EACF,EAAE,OAAOV,KAAA,EAAO;IAAA;IAAApE,aAAA,GAAAE,CAAA;IACd,IAAIkE,KAAA,YAAiB7D,IAAA,CAAAC,CAAC,CAACuE,QAAQ,EAAE;MAAA;MAAA/E,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MAC/B,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QACEC,IAAA,EAAM;QACNoC,QAAA,EAAUZ,KAAA,CAAMa,MAAM,CAACC,GAAG,CAACC,GAAA,IAAQ;UAAA;UAAAnF,aAAA,GAAAC,CAAA;UAAAD,aAAA,GAAAE,CAAA;UAAA;YACjCkF,KAAA,EAAOD,GAAA,CAAIE,IAAI,CAACC,IAAI,CAAC;YACrBR,QAAA,EAAUK,GAAA,CAAII;UAChB;QAAA;MACF,GACA;QAAE1C,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IAEAmE,OAAA,CAAQD,KAAK,CAAC,6CAA6CA,KAAA;IAAA;IAAApE,aAAA,GAAAE,CAAA;IAC3D,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,IAAA,EAAM;IAA2B,GACnC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF;AAGO,eAAezC,KAAK8B,OAAoB;EAAA;EAAAlC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC7C,IAAI;IACF,MAAMiC,OAAA;IAAA;IAAA,CAAAnC,aAAA,GAAAE,CAAA,QAAU,MAAM,IAAAkC,KAAA,CAAAC,IAAI;IAAA;IAAArC,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACiC,OAAA,EAASG,IAAA,EAAMC,EAAA,EAAI;MAAA;MAAAvC,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MACtB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAM;MAA0B,GAClC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAEA,MAAM8B,IAAA;IAAA;IAAA,CAAAtE,aAAA,GAAAE,CAAA,QAAO,MAAMgC,OAAA,CAAQS,IAAI;IAC/B,MAAM;MAAEM,SAAS;MAAE,GAAGsB;IAAA,CAAmB;IAAA;IAAA,CAAAvE,aAAA,GAAAE,CAAA,QAAGoE,IAAA;IAC5C,MAAME,WAAA;IAAA;IAAA,CAAAxE,aAAA,GAAAE,CAAA;IAAc;IAAA,CAAAF,aAAA,GAAAwC,CAAA,WAAAS,SAAA;IAAA;IAAA,CAAAjD,aAAA,GAAAwC,CAAA,WAAaL,OAAA,CAAQG,IAAI,CAACC,EAAE;IAEhD;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IACA,IAAIsE,WAAA,KAAgBrC,OAAA,CAAQG,IAAI,CAACC,EAAE,EAAE;MAAA;MAAAvC,aAAA,GAAAwC,CAAA;MACnC,MAAMW,YAAA;MAAA;MAAA,CAAAnD,aAAA,GAAAE,CAAA,QAAe,MAAM,IAAAkD,WAAA,CAAAC,kBAAkB,EAC3ClB,OAAA,CAAQG,IAAI,CAACC,EAAE,EACf,CAAC,QAAQ;MAAA;MAAAvC,aAAA,GAAAE,CAAA;MAGX,IAAI,CAACiD,YAAA,EAAc;QAAA;QAAAnD,aAAA,GAAAwC,CAAA;QAAAxC,aAAA,GAAAE,CAAA;QACjB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;UAAEC,IAAA,EAAM;QAA4D,GACpE;UAAEC,MAAA,EAAQ;QAAI;MAElB;MAAA;MAAA;QAAA7C,aAAA,GAAAwC,CAAA;MAAA;IACF;IAAA;IAAA;MAAAxC,aAAA,GAAAwC,CAAA;IAAA;IAEA;IACA,MAAMiC,cAAA;IAAA;IAAA,CAAAzE,aAAA,GAAAE,CAAA,QAAiBI,uBAAA,CAAwBoE,KAAK,CAACH,iBAAA;IAErD;IACA,MAAMiB,qBAAA;IAAA;IAAA,CAAAxF,aAAA,GAAAE,CAAA,QAAwB,MAAMqD,OAAA,CAAAC,MAAM,CAACC,4BAA4B,CAACC,UAAU,CAAC;MACjFC,KAAA,EAAO;QAAEV,SAAA,EAAWuB;MAAY;IAClC;IAAA;IAAAxE,aAAA,GAAAE,CAAA;IAEA,IAAIsF,qBAAA,EAAuB;MAAA;MAAAxF,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MACzB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAM;MAAqD,GAC7D;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAEA;IACA,MAAMqB,OAAA;IAAA;IAAA,CAAA7D,aAAA,GAAAE,CAAA,QAAU,MAAMqD,OAAA,CAAAC,MAAM,CAACK,OAAO,CAACH,UAAU,CAAC;MAC9CC,KAAA,EAAO;QAAEpB,EAAA,EAAIiC;MAAY;IAC3B;IAAA;IAAAxE,aAAA,GAAAE,CAAA;IAEA,IAAI,CAAC2D,OAAA,EAAS;MAAA;MAAA7D,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MACZ,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAM;MAAyB,GACjC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAEA;IACA,MAAMc,YAAA;IAAA;IAAA,CAAAtD,aAAA,GAAAE,CAAA,QAAe,MAAMqD,OAAA,CAAAC,MAAM,CAACC,4BAA4B,CAACoB,MAAM,CAAC;MACpEY,IAAA,EAAM;QACJxC,SAAA,EAAWuB,WAAA;QACX,GAAGC,cAAc;QACjBT,KAAA,EAAO;MACT;MACAJ,OAAA,EAAS;QACPC,OAAA,EAAS;UACPC,MAAA,EAAQ;YACNvB,EAAA,EAAI;YACJwB,IAAA,EAAM;YACNjD,KAAA,EAAO;UACT;QACF;MACF;IACF;IAAA;IAAAd,aAAA,GAAAE,CAAA;IAEA,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MACEW,YAAA;MACAwB,QAAA,EAAU;IACZ,GACA;MAAEjC,MAAA,EAAQ;IAAI;EAElB,EAAE,OAAOuB,KAAA,EAAO;IAAA;IAAApE,aAAA,GAAAE,CAAA;IACd,IAAIkE,KAAA,YAAiB7D,IAAA,CAAAC,CAAC,CAACuE,QAAQ,EAAE;MAAA;MAAA/E,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MAC/B,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QACEC,IAAA,EAAM;QACNoC,QAAA,EAAUZ,KAAA,CAAMa,MAAM,CAACC,GAAG,CAACC,GAAA,IAAQ;UAAA;UAAAnF,aAAA,GAAAC,CAAA;UAAAD,aAAA,GAAAE,CAAA;UAAA;YACjCkF,KAAA,EAAOD,GAAA,CAAIE,IAAI,CAACC,IAAI,CAAC;YACrBR,QAAA,EAAUK,GAAA,CAAII;UAChB;QAAA;MACF,GACA;QAAE1C,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IAEAmE,OAAA,CAAQD,KAAK,CAAC,yCAAyCA,KAAA;IAAA;IAAApE,aAAA,GAAAE,CAAA;IACvD,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,IAAA,EAAM;IAA2B,GACnC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF;AAGO,eAAe9C,OAAOmC,OAAoB;EAAA;EAAAlC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC/C,IAAI;IACF,MAAMiC,OAAA;IAAA;IAAA,CAAAnC,aAAA,GAAAE,CAAA,QAAU,MAAM,IAAAkC,KAAA,CAAAC,IAAI;IAAA;IAAArC,aAAA,GAAAE,CAAA;IAC1B,IAAI,CAACiC,OAAA,EAASG,IAAA,EAAMC,EAAA,EAAI;MAAA;MAAAvC,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MACtB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAM;MAA0B,GAClC;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAEA,MAAM;MAAEM;IAAY,CAAE;IAAA;IAAA,CAAA9C,aAAA,GAAAE,CAAA,QAAG,IAAI6C,GAAA,CAAIb,OAAA,CAAQc,GAAG;IAC5C,MAAMC,SAAA;IAAA;IAAA,CAAAjD,aAAA,GAAAE,CAAA;IAAY;IAAA,CAAAF,aAAA,GAAAwC,CAAA,WAAAM,YAAA,CAAaI,GAAG,CAAC;IAAA;IAAA,CAAAlD,aAAA,GAAAwC,CAAA,WAAgBL,OAAA,CAAQG,IAAI,CAACC,EAAE;IAElE;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IACA,IAAI+C,SAAA,KAAcd,OAAA,CAAQG,IAAI,CAACC,EAAE,EAAE;MAAA;MAAAvC,aAAA,GAAAwC,CAAA;MACjC,MAAMW,YAAA;MAAA;MAAA,CAAAnD,aAAA,GAAAE,CAAA,QAAe,MAAM,IAAAkD,WAAA,CAAAC,kBAAkB,EAC3ClB,OAAA,CAAQG,IAAI,CAACC,EAAE,EACf,CAAC,QAAQ;MAAA;MAAAvC,aAAA,GAAAE,CAAA;MAGX,IAAI,CAACiD,YAAA,EAAc;QAAA;QAAAnD,aAAA,GAAAwC,CAAA;QAAAxC,aAAA,GAAAE,CAAA;QACjB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;UAAEC,IAAA,EAAM;QAA8D,GACtE;UAAEC,MAAA,EAAQ;QAAI;MAElB;MAAA;MAAA;QAAA7C,aAAA,GAAAwC,CAAA;MAAA;IACF;IAAA;IAAA;MAAAxC,aAAA,GAAAwC,CAAA;IAAA;IAEA;IACA,MAAMc,YAAA;IAAA;IAAA,CAAAtD,aAAA,GAAAE,CAAA,QAAe,MAAMqD,OAAA,CAAAC,MAAM,CAACC,4BAA4B,CAACC,UAAU,CAAC;MACxEC,KAAA,EAAO;QAAEV;MAAU;IACrB;IAAA;IAAAjD,aAAA,GAAAE,CAAA;IAEA,IAAI,CAACoD,YAAA,EAAc;MAAA;MAAAtD,aAAA,GAAAwC,CAAA;MAAAxC,aAAA,GAAAE,CAAA;MACjB,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,IAAA,EAAM;MAAwC,GAChD;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAA7C,aAAA,GAAAwC,CAAA;IAAA;IAEA;IACA,MAAMkD,sBAAA;IAAA;IAAA,CAAA1F,aAAA,GAAAE,CAAA,QAAyB,MAAMqD,OAAA,CAAAC,MAAM,CAACC,4BAA4B,CAACmB,MAAM,CAAC;MAC9EjB,KAAA,EAAO;QAAEV;MAAU;MACnBwC,IAAA,EAAM;QACJzB,KAAA,EAAO;QACPtD,YAAA,EAAc;QACdyD,YAAA,EAAc,IAAID,IAAA;MACpB;IACF;IAAA;IAAAlE,aAAA,GAAAE,CAAA;IAEA,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBW,YAAA,EAAcoC,sBAAA;MACdZ,QAAA,EAAU;IACZ;EACF,EAAE,OAAOV,KAAA,EAAO;IAAA;IAAApE,aAAA,GAAAE,CAAA;IACdmE,OAAA,CAAQD,KAAK,CAAC,6CAA6CA,KAAA;IAAA;IAAApE,aAAA,GAAAE,CAAA;IAC3D,OAAOuC,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,IAAA,EAAM;IAA2B,GACnC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}