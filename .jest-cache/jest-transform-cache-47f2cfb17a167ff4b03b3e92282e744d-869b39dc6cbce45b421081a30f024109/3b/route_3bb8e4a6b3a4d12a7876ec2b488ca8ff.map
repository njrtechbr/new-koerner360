{"version":3,"names":["POST","registroSchema","cov_18jx95dd53","s","_zod","z","object","nome","string","min","max","email","toLowerCase","senha","userType","enum","errorMap","f","message","request","body","json","validacao","safeParse","success","b","erros","error","errors","map","err","join","_server","NextResponse","status","data","usuarioExistente","_prisma","prisma","usuario","findUnique","where","saltRounds","senhaHash","_bcryptjs","default","hash","novoUsuario","create","trim","ativo","select","id","criadoEm","console","Error","includes"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\register\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\nimport { prisma } from '@/lib/prisma';\nimport { TipoUsuario } from '@/lib/types';\nimport { z } from 'zod';\n\n// Schema de validação para o registro\nconst registroSchema = z.object({\n  nome: z\n    .string()\n    .min(2, 'Nome deve ter pelo menos 2 caracteres')\n    .max(100, 'Nome muito longo'),\n  email: z.string().email('Email inválido').toLowerCase(),\n  senha: z.string().min(6, 'Senha deve ter pelo menos 6 caracteres'),\n  userType: z.enum(['ADMIN', 'GESTOR', 'ATENDENTE'], {\n    errorMap: () => ({ message: 'Tipo de usuário inválido' }),\n  }),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validar dados de entrada\n    const validacao = registroSchema.safeParse(body);\n\n    if (!validacao.success) {\n      const erros = validacao.error.errors.map(err => err.message).join(', ');\n      return NextResponse.json(\n        { message: `Dados inválidos: ${erros}` },\n        { status: 400 }\n      );\n    }\n\n    const { nome, email, senha, userType } = validacao.data;\n\n    // Verificar se o usuário já existe\n    const usuarioExistente = await prisma.usuario.findUnique({\n      where: { email },\n    });\n\n    if (usuarioExistente) {\n      return NextResponse.json(\n        { message: 'Este email já está cadastrado' },\n        { status: 409 }\n      );\n    }\n\n    // Gerar hash da senha\n    const saltRounds = 12;\n    const senhaHash = await bcrypt.hash(senha, saltRounds);\n\n    // Criar o usuário\n    const novoUsuario = await prisma.usuario.create({\n      data: {\n        nome: nome.trim(),\n        email,\n        senha: senhaHash,\n        userType: userType as TipoUsuario,\n        ativo: true,\n      },\n      select: {\n        id: true,\n        nome: true,\n        email: true,\n        userType: true,\n        ativo: true,\n        criadoEm: true,\n      },\n    });\n\n    return NextResponse.json(\n      {\n        message: 'Usuário criado com sucesso',\n        usuario: novoUsuario,\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Erro ao criar usuário:', error);\n\n    // Verificar se é erro de constraint única do Prisma\n    if (error instanceof Error && error.message.includes('Unique constraint')) {\n      return NextResponse.json(\n        { message: 'Este email já está cadastrado' },\n        { status: 409 }\n      );\n    }\n\n    return NextResponse.json(\n      { message: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}