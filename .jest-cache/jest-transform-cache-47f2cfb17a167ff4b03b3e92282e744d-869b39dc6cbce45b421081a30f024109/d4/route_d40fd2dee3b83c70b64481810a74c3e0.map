{"version":3,"names":["GET","cov_2pcs236ny2","f","s","POST","querySchema","_zod","z","object","periodoId","string","optional","forcar","transform","val","request","session","_route","auth","user","b","_server","NextResponse","json","erro","status","userType","includes","url","URL","queryParams","searchParams","get","undefined","parse","resultado","_periodostatusupdater","atualizarStatusPeriodo","sucesso","detalhes","mensagem","atualizado","statusAnterior","statusNovo","periodo","id","statusAtual","atualizarStatusPeriodos","periodosAtualizados","estatisticas","periodosAtivados","periodosFinalizados","error","console","ZodError","errors","prisma","Promise","resolve","then","_interop_require_wildcard","require","StatusPeriodo","calcularStatusPeriodo","agora","Date","periodos","periodoAvaliacao","findMany","where","not","CANCELADO","select","nome","dataInicio","dataFim","orderBy","periodosParaAtualizar","periodosCorretos","statusCorreto","push","dataVerificacao","resumo","totalPeriodos","length"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\atualizar-status\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@/app/api/auth/[...nextauth]/route';\nimport { TipoUsuario } from '@prisma/client';\nimport { atualizarStatusPeriodos, atualizarStatusPeriodo } from '@/lib/utils/periodo-status-updater';\nimport { z } from 'zod';\n\n// Schema para validação dos parâmetros de query\nconst querySchema = z.object({\n  periodoId: z.string().optional(),\n  forcar: z.string().transform(val => val === 'true').optional()\n});\n\n/**\n * POST /api/periodos-avaliacao/atualizar-status\n * \n * Atualiza automaticamente o status dos períodos de avaliação baseado nas datas atuais\n * \n * Query Parameters:\n * - periodoId (opcional): ID específico do período para atualizar\n * - forcar (opcional): Se true, força a atualização mesmo que não seja necessária\n * \n * Permissões: ADMIN, GESTOR\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await auth();\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões\n    const userType = session.user.userType as TipoUsuario;\n    if (!['ADMIN', 'GESTOR'].includes(userType)) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para atualizar status de períodos' },\n        { status: 403 }\n      );\n    }\n\n    // Validar query parameters\n    const url = new URL(request.url);\n    const queryParams = {\n      periodoId: url.searchParams.get('periodoId') || undefined,\n      forcar: url.searchParams.get('forcar') || undefined\n    };\n\n    const { periodoId, forcar } = querySchema.parse(queryParams);\n\n    let resultado;\n\n    if (periodoId) {\n      // Atualizar período específico\n      resultado = await atualizarStatusPeriodo(periodoId);\n      \n      if (!resultado.sucesso) {\n        return NextResponse.json(\n          { \n            erro: 'Erro ao atualizar status do período',\n            detalhes: resultado.erro\n          },\n          { status: 400 }\n        );\n      }\n\n      return NextResponse.json({\n        sucesso: true,\n        mensagem: resultado.atualizado \n          ? `Status do período atualizado de ${resultado.statusAnterior} para ${resultado.statusNovo}`\n          : 'Período já está com o status correto',\n        periodo: {\n          id: periodoId,\n          atualizado: resultado.atualizado,\n          statusAnterior: resultado.statusAnterior,\n          statusNovo: resultado.statusNovo || resultado.statusAtual\n        }\n      });\n    } else {\n      // Atualizar todos os períodos\n      resultado = await atualizarStatusPeriodos();\n      \n      if (!resultado.sucesso) {\n        return NextResponse.json(\n          { \n            erro: 'Erro ao atualizar status dos períodos',\n            detalhes: resultado.erro\n          },\n          { status: 500 }\n        );\n      }\n\n      return NextResponse.json({\n        sucesso: true,\n        mensagem: `Atualização concluída: ${resultado.periodosAtualizados} período(s) atualizado(s)`,\n        estatisticas: {\n          periodosAtualizados: resultado.periodosAtualizados,\n          periodosAtivados: resultado.periodosAtivados,\n          periodosFinalizados: resultado.periodosFinalizados\n        },\n        detalhes: resultado.detalhes\n      });\n    }\n\n  } catch (error) {\n    console.error('Erro na atualização de status:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          erro: 'Parâmetros inválidos',\n          detalhes: error.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/periodos-avaliacao/atualizar-status\n * \n * Verifica quais períodos precisam de atualização de status (sem fazer alterações)\n * \n * Permissões: ADMIN, GESTOR\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verificar autenticação\n    const session = await auth();\n    if (!session?.user) {\n      return NextResponse.json(\n        { erro: 'Não autenticado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar permissões\n    const userType = session.user.userType as TipoUsuario;\n    if (!['ADMIN', 'GESTOR'].includes(userType)) {\n      return NextResponse.json(\n        { erro: 'Sem permissão para verificar status de períodos' },\n        { status: 403 }\n      );\n    }\n\n    // Importar prisma e StatusPeriodo aqui para evitar problemas de importação\n    const { prisma } = await import('@/lib/database-config');\n    const { StatusPeriodo } = await import('@prisma/client');\n    const { calcularStatusPeriodo } = await import('@/lib/utils/periodo-status-updater');\n\n    const agora = new Date();\n\n    // Buscar todos os períodos que não estão cancelados\n    const periodos = await prisma.periodoAvaliacao.findMany({\n      where: {\n        status: {\n          not: StatusPeriodo.CANCELADO\n        }\n      },\n      select: {\n        id: true,\n        nome: true,\n        status: true,\n        dataInicio: true,\n        dataFim: true\n      },\n      orderBy: {\n        dataInicio: 'asc'\n      }\n    });\n\n    // Verificar quais períodos precisam de atualização\n    const periodosParaAtualizar = [];\n    const periodosCorretos = [];\n\n    for (const periodo of periodos) {\n      const statusCorreto = calcularStatusPeriodo(\n        periodo.dataInicio,\n        periodo.dataFim,\n        periodo.status\n      );\n\n      if (statusCorreto !== periodo.status) {\n        periodosParaAtualizar.push({\n          id: periodo.id,\n          nome: periodo.nome,\n          statusAtual: periodo.status,\n          statusCorreto: statusCorreto,\n          dataInicio: periodo.dataInicio,\n          dataFim: periodo.dataFim\n        });\n      } else {\n        periodosCorretos.push({\n          id: periodo.id,\n          nome: periodo.nome,\n          status: periodo.status,\n          dataInicio: periodo.dataInicio,\n          dataFim: periodo.dataFim\n        });\n      }\n    }\n\n    return NextResponse.json({\n      sucesso: true,\n      dataVerificacao: agora,\n      resumo: {\n        totalPeriodos: periodos.length,\n        periodosCorretos: periodosCorretos.length,\n        periodosParaAtualizar: periodosParaAtualizar.length\n      },\n      periodosParaAtualizar,\n      periodosCorretos\n    });\n\n  } catch (error) {\n    console.error('Erro na verificação de status:', error);\n    return NextResponse.json(\n      { erro: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}