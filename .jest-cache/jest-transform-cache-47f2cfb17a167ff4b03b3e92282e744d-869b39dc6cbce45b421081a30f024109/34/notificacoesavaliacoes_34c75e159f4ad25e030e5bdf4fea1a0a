a3a7f139ca3e7e61555ae04321ec3615
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get buscarAvaliacoesParaNotificacao () {
        return buscarAvaliacoesParaNotificacao;
    },
    get buscarAvaliacoesPendentesUsuario () {
        return buscarAvaliacoesPendentesUsuario;
    },
    get buscarConfiguracaoNotificacao () {
        return buscarConfiguracaoNotificacao;
    },
    get buscarTodasAvaliacoesPendentes () {
        return buscarTodasAvaliacoesPendentes;
    },
    get calcularUrgencia () {
        return calcularUrgencia;
    },
    get deveReceberNotificacao () {
        return deveReceberNotificacao;
    },
    get formatarMensagemNotificacao () {
        return formatarMensagemNotificacao;
    },
    get gerarEstatisticasNotificacoes () {
        return gerarEstatisticasNotificacoes;
    }
});
const _prisma = require("../prisma");
const _datefns = require("date-fns");
function calcularUrgencia(diasRestantes) {
    if (diasRestantes < 0) return 'critica'; // Vencida
    if (diasRestantes <= 1) return 'critica';
    if (diasRestantes <= 3) return 'alta';
    if (diasRestantes <= 7) return 'media';
    return 'baixa';
}
async function buscarAvaliacoesPendentesUsuario(usuarioId) {
    try {
        const avaliacoes = await _prisma.prisma.avaliacao.findMany({
            where: {
                avaliadorId: usuarioId,
                status: 'PENDENTE'
            },
            include: {
                periodo: true,
                avaliador: {
                    select: {
                        id: true,
                        nome: true,
                        email: true
                    }
                },
                avaliado: {
                    select: {
                        id: true,
                        nome: true,
                        setor: true,
                        departamento: true
                    }
                }
            },
            orderBy: {
                periodo: {
                    dataFim: 'asc'
                }
            }
        });
        return avaliacoes.map((avaliacao)=>{
            const dataLimite = avaliacao.periodo.dataFim;
            const diasRestantes = (0, _datefns.differenceInDays)(dataLimite, new Date());
            const urgencia = calcularUrgencia(diasRestantes);
            return {
                id: avaliacao.id,
                periodoId: avaliacao.periodoId,
                periodo: {
                    id: avaliacao.periodo.id,
                    nome: avaliacao.periodo.nome,
                    dataInicio: avaliacao.periodo.dataInicio,
                    dataFim: avaliacao.periodo.dataFim,
                    status: avaliacao.periodo.status
                },
                avaliadorId: avaliacao.avaliadorId,
                avaliador: avaliacao.avaliador,
                avaliadoId: avaliacao.avaliadoId,
                avaliado: avaliacao.avaliado,
                status: avaliacao.status,
                dataLimite,
                diasRestantes,
                urgencia,
                criadaEm: avaliacao.criadaEm
            };
        });
    } catch (error) {
        console.error('Erro ao buscar avaliações pendentes do usuário:', error);
        throw new Error('Não foi possível buscar as avaliações pendentes');
    }
}
async function buscarTodasAvaliacoesPendentes() {
    try {
        const avaliacoes = await _prisma.prisma.avaliacao.findMany({
            where: {
                status: 'PENDENTE'
            },
            include: {
                periodo: true,
                avaliador: {
                    select: {
                        id: true,
                        nome: true,
                        email: true
                    }
                },
                avaliado: {
                    select: {
                        id: true,
                        nome: true,
                        setor: true,
                        departamento: true
                    }
                }
            },
            orderBy: [
                {
                    periodo: {
                        dataFim: 'asc'
                    }
                },
                {
                    avaliador: {
                        nome: 'asc'
                    }
                }
            ]
        });
        return avaliacoes.map((avaliacao)=>{
            const dataLimite = avaliacao.periodo.dataFim;
            const diasRestantes = (0, _datefns.differenceInDays)(dataLimite, new Date());
            const urgencia = calcularUrgencia(diasRestantes);
            return {
                id: avaliacao.id,
                periodoId: avaliacao.periodoId,
                periodo: {
                    id: avaliacao.periodo.id,
                    nome: avaliacao.periodo.nome,
                    dataInicio: avaliacao.periodo.dataInicio,
                    dataFim: avaliacao.periodo.dataFim,
                    status: avaliacao.periodo.status
                },
                avaliadorId: avaliacao.avaliadorId,
                avaliador: avaliacao.avaliador,
                avaliadoId: avaliacao.avaliadoId,
                avaliado: avaliacao.avaliado,
                status: avaliacao.status,
                dataLimite,
                diasRestantes,
                urgencia,
                criadaEm: avaliacao.criadaEm
            };
        });
    } catch (error) {
        console.error('Erro ao buscar todas as avaliações pendentes:', error);
        throw new Error('Não foi possível buscar as avaliações pendentes');
    }
}
async function buscarAvaliacoesParaNotificacao(diasAntecedencia = 3) {
    try {
        const dataLimite = (0, _datefns.addDays)(new Date(), diasAntecedencia);
        const avaliacoes = await _prisma.prisma.avaliacao.findMany({
            where: {
                status: 'PENDENTE',
                periodo: {
                    dataFim: {
                        lte: dataLimite
                    }
                }
            },
            include: {
                periodo: true,
                avaliador: {
                    select: {
                        id: true,
                        nome: true,
                        email: true
                    }
                },
                avaliado: {
                    select: {
                        id: true,
                        nome: true,
                        setor: true,
                        departamento: true
                    }
                }
            },
            orderBy: {
                periodo: {
                    dataFim: 'asc'
                }
            }
        });
        return avaliacoes.map((avaliacao)=>{
            const dataLimite = avaliacao.periodo.dataFim;
            const diasRestantes = (0, _datefns.differenceInDays)(dataLimite, new Date());
            const urgencia = calcularUrgencia(diasRestantes);
            return {
                id: avaliacao.id,
                periodoId: avaliacao.periodoId,
                periodo: {
                    id: avaliacao.periodo.id,
                    nome: avaliacao.periodo.nome,
                    dataInicio: avaliacao.periodo.dataInicio,
                    dataFim: avaliacao.periodo.dataFim,
                    status: avaliacao.periodo.status
                },
                avaliadorId: avaliacao.avaliadorId,
                avaliador: avaliacao.avaliador,
                avaliadoId: avaliacao.avaliadoId,
                avaliado: avaliacao.avaliado,
                status: avaliacao.status,
                dataLimite,
                diasRestantes,
                urgencia,
                criadaEm: avaliacao.criadaEm
            };
        });
    } catch (error) {
        console.error('Erro ao buscar avaliações para notificação:', error);
        throw new Error('Não foi possível buscar as avaliações para notificação');
    }
}
async function gerarEstatisticasNotificacoes(usuarioId) {
    try {
        const avaliacoes = usuarioId ? await buscarAvaliacoesPendentesUsuario(usuarioId) : await buscarTodasAvaliacoesPendentes();
        const stats = {
            totalPendentes: avaliacoes.length,
            criticas: 0,
            altas: 0,
            medias: 0,
            baixas: 0,
            vencidas: 0,
            proximasVencer: 0
        };
        avaliacoes.forEach((avaliacao)=>{
            // Contar por urgência
            switch(avaliacao.urgencia){
                case 'critica':
                    stats.criticas++;
                    break;
                case 'alta':
                    stats.altas++;
                    break;
                case 'media':
                    stats.medias++;
                    break;
                case 'baixa':
                    stats.baixas++;
                    break;
            }
            // Contar vencidas
            if (avaliacao.diasRestantes < 0) {
                stats.vencidas++;
            }
            // Contar próximas a vencer (3 dias)
            if (avaliacao.diasRestantes >= 0 && avaliacao.diasRestantes <= 3) {
                stats.proximasVencer++;
            }
        });
        return stats;
    } catch (error) {
        console.error('Erro ao gerar estatísticas de notificações:', error);
        throw new Error('Não foi possível gerar as estatísticas');
    }
}
async function buscarConfiguracaoNotificacao(usuarioId) {
    try {
        // Por enquanto, retornamos uma configuração padrão
        // Em uma implementação real, isso viria do banco de dados
        return {
            id: `config-${usuarioId}`,
            usuarioId,
            notificacoesEmail: true,
            notificacoesInterface: true,
            diasAntecedencia: 3,
            horarioEnvio: '09:00',
            frequenciaLembretes: 'diario',
            ativo: true
        };
    } catch (error) {
        console.error('Erro ao buscar configuração de notificação:', error);
        return null;
    }
}
async function deveReceberNotificacao(usuarioId, tipoNotificacao) {
    try {
        const config = await buscarConfiguracaoNotificacao(usuarioId);
        if (!config || !config.ativo) {
            return false;
        }
        if (tipoNotificacao === 'email') {
            return config.notificacoesEmail;
        }
        if (tipoNotificacao === 'interface') {
            return config.notificacoesInterface;
        }
        return false;
    } catch (error) {
        console.error('Erro ao verificar se deve receber notificação:', error);
        return false;
    }
}
function formatarMensagemNotificacao(avaliacao, tipo) {
    const nomeAvaliado = avaliacao.avaliado.nome;
    const nomePeriodo = avaliacao.periodo.nome;
    const diasRestantes = avaliacao.diasRestantes;
    switch(tipo){
        case 'lembrete':
            return {
                titulo: 'Lembrete: Avaliação Pendente',
                mensagem: `Você tem uma avaliação pendente de ${nomeAvaliado} no período "${nomePeriodo}". ${diasRestantes > 0 ? `Restam ${diasRestantes} dias para o prazo.` : 'O prazo vence hoje!'}`
            };
        case 'urgente':
            return {
                titulo: 'Urgente: Avaliação Próxima do Vencimento',
                mensagem: `A avaliação de ${nomeAvaliado} no período "${nomePeriodo}" vence em ${diasRestantes} dia(s). Complete a avaliação o quanto antes.`
            };
        case 'vencida':
            return {
                titulo: 'Avaliação Vencida',
                mensagem: `A avaliação de ${nomeAvaliado} no período "${nomePeriodo}" está vencida há ${Math.abs(diasRestantes)} dia(s). Complete a avaliação imediatamente.`
            };
        default:
            return {
                titulo: 'Avaliação Pendente',
                mensagem: `Você tem uma avaliação pendente de ${nomeAvaliado} no período "${nomePeriodo}".`
            };
    }
}

//# sourceMappingURL=data:application/json;base64,