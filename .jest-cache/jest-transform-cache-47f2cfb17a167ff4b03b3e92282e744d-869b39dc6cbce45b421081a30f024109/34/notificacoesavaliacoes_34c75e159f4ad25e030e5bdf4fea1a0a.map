{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\utils\\notificacoes-avaliacoes.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma';\nimport { addDays, differenceInDays, isAfter, isBefore } from 'date-fns';\n\n// Tipos para notificações\nexport interface AvaliacaoPendente {\n  id: string;\n  periodoId: string;\n  periodo: {\n    id: string;\n    nome: string;\n    dataInicio: Date;\n    dataFim: Date;\n    status: string;\n  };\n  avaliadorId: string;\n  avaliador: {\n    id: string;\n    nome: string;\n    email: string;\n  };\n  avaliadoId: string;\n  avaliado: {\n    id: string;\n    nome: string;\n    setor?: string;\n    departamento?: string;\n  };\n  status: string;\n  dataLimite: Date;\n  diasRestantes: number;\n  urgencia: 'baixa' | 'media' | 'alta' | 'critica';\n  criadaEm: Date;\n}\n\nexport interface NotificacaoConfig {\n  id: string;\n  usuarioId: string;\n  notificacoesEmail: boolean;\n  notificacoesInterface: boolean;\n  diasAntecedencia: number;\n  horarioEnvio: string; // HH:mm\n  frequenciaLembretes: 'diario' | 'semanal' | 'personalizado';\n  ativo: boolean;\n}\n\nexport interface EstatisticasNotificacoes {\n  totalPendentes: number;\n  criticas: number;\n  altas: number;\n  medias: number;\n  baixas: number;\n  vencidas: number;\n  proximasVencer: number; // próximas 3 dias\n}\n\n/**\n * Calcula a urgência baseada nos dias restantes\n */\nexport function calcularUrgencia(diasRestantes: number): 'baixa' | 'media' | 'alta' | 'critica' {\n  if (diasRestantes < 0) return 'critica'; // Vencida\n  if (diasRestantes <= 1) return 'critica';\n  if (diasRestantes <= 3) return 'alta';\n  if (diasRestantes <= 7) return 'media';\n  return 'baixa';\n}\n\n/**\n * Busca todas as avaliações pendentes de um usuário específico\n */\nexport async function buscarAvaliacoesPendentesUsuario(\n  usuarioId: string\n): Promise<AvaliacaoPendente[]> {\n  try {\n    const avaliacoes = await prisma.avaliacao.findMany({\n      where: {\n        avaliadorId: usuarioId,\n        status: 'PENDENTE'\n      },\n      include: {\n        periodo: true,\n        avaliador: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliado: {\n          select: {\n            id: true,\n            nome: true,\n            setor: true,\n            departamento: true\n          }\n        }\n      },\n      orderBy: {\n        periodo: {\n          dataFim: 'asc'\n        }\n      }\n    });\n\n    return avaliacoes.map(avaliacao => {\n      const dataLimite = avaliacao.periodo.dataFim;\n      const diasRestantes = differenceInDays(dataLimite, new Date());\n      const urgencia = calcularUrgencia(diasRestantes);\n\n      return {\n        id: avaliacao.id,\n        periodoId: avaliacao.periodoId,\n        periodo: {\n          id: avaliacao.periodo.id,\n          nome: avaliacao.periodo.nome,\n          dataInicio: avaliacao.periodo.dataInicio,\n          dataFim: avaliacao.periodo.dataFim,\n          status: avaliacao.periodo.status\n        },\n        avaliadorId: avaliacao.avaliadorId,\n        avaliador: avaliacao.avaliador,\n        avaliadoId: avaliacao.avaliadoId,\n        avaliado: avaliacao.avaliado,\n        status: avaliacao.status,\n        dataLimite,\n        diasRestantes,\n        urgencia,\n        criadaEm: avaliacao.criadaEm\n      };\n    });\n  } catch (error) {\n    console.error('Erro ao buscar avaliações pendentes do usuário:', error);\n    throw new Error('Não foi possível buscar as avaliações pendentes');\n  }\n}\n\n/**\n * Busca todas as avaliações pendentes do sistema\n */\nexport async function buscarTodasAvaliacoesPendentes(): Promise<AvaliacaoPendente[]> {\n  try {\n    const avaliacoes = await prisma.avaliacao.findMany({\n      where: {\n        status: 'PENDENTE'\n      },\n      include: {\n        periodo: true,\n        avaliador: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliado: {\n          select: {\n            id: true,\n            nome: true,\n            setor: true,\n            departamento: true\n          }\n        }\n      },\n      orderBy: [\n        {\n          periodo: {\n            dataFim: 'asc'\n          }\n        },\n        {\n          avaliador: {\n            nome: 'asc'\n          }\n        }\n      ]\n    });\n\n    return avaliacoes.map(avaliacao => {\n      const dataLimite = avaliacao.periodo.dataFim;\n      const diasRestantes = differenceInDays(dataLimite, new Date());\n      const urgencia = calcularUrgencia(diasRestantes);\n\n      return {\n        id: avaliacao.id,\n        periodoId: avaliacao.periodoId,\n        periodo: {\n          id: avaliacao.periodo.id,\n          nome: avaliacao.periodo.nome,\n          dataInicio: avaliacao.periodo.dataInicio,\n          dataFim: avaliacao.periodo.dataFim,\n          status: avaliacao.periodo.status\n        },\n        avaliadorId: avaliacao.avaliadorId,\n        avaliador: avaliacao.avaliador,\n        avaliadoId: avaliacao.avaliadoId,\n        avaliado: avaliacao.avaliado,\n        status: avaliacao.status,\n        dataLimite,\n        diasRestantes,\n        urgencia,\n        criadaEm: avaliacao.criadaEm\n      };\n    });\n  } catch (error) {\n    console.error('Erro ao buscar todas as avaliações pendentes:', error);\n    throw new Error('Não foi possível buscar as avaliações pendentes');\n  }\n}\n\n/**\n * Busca avaliações que precisam de notificação (próximas do vencimento)\n */\nexport async function buscarAvaliacoesParaNotificacao(\n  diasAntecedencia = 3\n): Promise<AvaliacaoPendente[]> {\n  try {\n    const dataLimite = addDays(new Date(), diasAntecedencia);\n    \n    const avaliacoes = await prisma.avaliacao.findMany({\n      where: {\n        status: 'PENDENTE',\n        periodo: {\n          dataFim: {\n            lte: dataLimite\n          }\n        }\n      },\n      include: {\n        periodo: true,\n        avaliador: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliado: {\n          select: {\n            id: true,\n            nome: true,\n            setor: true,\n            departamento: true\n          }\n        }\n      },\n      orderBy: {\n        periodo: {\n          dataFim: 'asc'\n        }\n      }\n    });\n\n    return avaliacoes.map(avaliacao => {\n      const dataLimite = avaliacao.periodo.dataFim;\n      const diasRestantes = differenceInDays(dataLimite, new Date());\n      const urgencia = calcularUrgencia(diasRestantes);\n\n      return {\n        id: avaliacao.id,\n        periodoId: avaliacao.periodoId,\n        periodo: {\n          id: avaliacao.periodo.id,\n          nome: avaliacao.periodo.nome,\n          dataInicio: avaliacao.periodo.dataInicio,\n          dataFim: avaliacao.periodo.dataFim,\n          status: avaliacao.periodo.status\n        },\n        avaliadorId: avaliacao.avaliadorId,\n        avaliador: avaliacao.avaliador,\n        avaliadoId: avaliacao.avaliadoId,\n        avaliado: avaliacao.avaliado,\n        status: avaliacao.status,\n        dataLimite,\n        diasRestantes,\n        urgencia,\n        criadaEm: avaliacao.criadaEm\n      };\n    });\n  } catch (error) {\n    console.error('Erro ao buscar avaliações para notificação:', error);\n    throw new Error('Não foi possível buscar as avaliações para notificação');\n  }\n}\n\n/**\n * Gera estatísticas de notificações para um usuário\n */\nexport async function gerarEstatisticasNotificacoes(\n  usuarioId?: string\n): Promise<EstatisticasNotificacoes> {\n  try {\n    const avaliacoes = usuarioId \n      ? await buscarAvaliacoesPendentesUsuario(usuarioId)\n      : await buscarTodasAvaliacoesPendentes();\n\n    const stats: EstatisticasNotificacoes = {\n      totalPendentes: avaliacoes.length,\n      criticas: 0,\n      altas: 0,\n      medias: 0,\n      baixas: 0,\n      vencidas: 0,\n      proximasVencer: 0\n    };\n\n    avaliacoes.forEach(avaliacao => {\n      // Contar por urgência\n      switch (avaliacao.urgencia) {\n        case 'critica':\n          stats.criticas++;\n          break;\n        case 'alta':\n          stats.altas++;\n          break;\n        case 'media':\n          stats.medias++;\n          break;\n        case 'baixa':\n          stats.baixas++;\n          break;\n      }\n\n      // Contar vencidas\n      if (avaliacao.diasRestantes < 0) {\n        stats.vencidas++;\n      }\n\n      // Contar próximas a vencer (3 dias)\n      if (avaliacao.diasRestantes >= 0 && avaliacao.diasRestantes <= 3) {\n        stats.proximasVencer++;\n      }\n    });\n\n    return stats;\n  } catch (error) {\n    console.error('Erro ao gerar estatísticas de notificações:', error);\n    throw new Error('Não foi possível gerar as estatísticas');\n  }\n}\n\n/**\n * Busca configurações de notificação de um usuário\n */\nexport async function buscarConfiguracaoNotificacao(\n  usuarioId: string\n): Promise<NotificacaoConfig | null> {\n  try {\n    // Por enquanto, retornamos uma configuração padrão\n    // Em uma implementação real, isso viria do banco de dados\n    return {\n      id: `config-${usuarioId}`,\n      usuarioId,\n      notificacoesEmail: true,\n      notificacoesInterface: true,\n      diasAntecedencia: 3,\n      horarioEnvio: '09:00',\n      frequenciaLembretes: 'diario',\n      ativo: true\n    };\n  } catch (error) {\n    console.error('Erro ao buscar configuração de notificação:', error);\n    return null;\n  }\n}\n\n/**\n * Verifica se um usuário deve receber notificação baseado em suas configurações\n */\nexport async function deveReceberNotificacao(\n  usuarioId: string,\n  tipoNotificacao: 'email' | 'interface'\n): Promise<boolean> {\n  try {\n    const config = await buscarConfiguracaoNotificacao(usuarioId);\n    \n    if (!config || !config.ativo) {\n      return false;\n    }\n\n    if (tipoNotificacao === 'email') {\n      return config.notificacoesEmail;\n    }\n\n    if (tipoNotificacao === 'interface') {\n      return config.notificacoesInterface;\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Erro ao verificar se deve receber notificação:', error);\n    return false;\n  }\n}\n\n/**\n * Formata uma mensagem de notificação\n */\nexport function formatarMensagemNotificacao(\n  avaliacao: AvaliacaoPendente,\n  tipo: 'lembrete' | 'urgente' | 'vencida'\n): { titulo: string; mensagem: string; } {\n  const nomeAvaliado = avaliacao.avaliado.nome;\n  const nomePeriodo = avaliacao.periodo.nome;\n  const diasRestantes = avaliacao.diasRestantes;\n\n  switch (tipo) {\n    case 'lembrete':\n      return {\n        titulo: 'Lembrete: Avaliação Pendente',\n        mensagem: `Você tem uma avaliação pendente de ${nomeAvaliado} no período \"${nomePeriodo}\". ${diasRestantes > 0 ? `Restam ${diasRestantes} dias para o prazo.` : 'O prazo vence hoje!'}`\n      };\n    \n    case 'urgente':\n      return {\n        titulo: 'Urgente: Avaliação Próxima do Vencimento',\n        mensagem: `A avaliação de ${nomeAvaliado} no período \"${nomePeriodo}\" vence em ${diasRestantes} dia(s). Complete a avaliação o quanto antes.`\n      };\n    \n    case 'vencida':\n      return {\n        titulo: 'Avaliação Vencida',\n        mensagem: `A avaliação de ${nomeAvaliado} no período \"${nomePeriodo}\" está vencida há ${Math.abs(diasRestantes)} dia(s). Complete a avaliação imediatamente.`\n      };\n    \n    default:\n      return {\n        titulo: 'Avaliação Pendente',\n        mensagem: `Você tem uma avaliação pendente de ${nomeAvaliado} no período \"${nomePeriodo}\".`\n      };\n  }\n}"],"names":["buscarAvaliacoesParaNotificacao","buscarAvaliacoesPendentesUsuario","buscarConfiguracaoNotificacao","buscarTodasAvaliacoesPendentes","calcularUrgencia","deveReceberNotificacao","formatarMensagemNotificacao","gerarEstatisticasNotificacoes","diasRestantes","usuarioId","avaliacoes","prisma","avaliacao","findMany","where","avaliadorId","status","include","periodo","avaliador","select","id","nome","email","avaliado","setor","departamento","orderBy","dataFim","map","dataLimite","differenceInDays","Date","urgencia","periodoId","dataInicio","avaliadoId","criadaEm","error","console","Error","diasAntecedencia","addDays","lte","stats","totalPendentes","length","criticas","altas","medias","baixas","vencidas","proximasVencer","forEach","notificacoesEmail","notificacoesInterface","horarioEnvio","frequenciaLembretes","ativo","tipoNotificacao","config","tipo","nomeAvaliado","nomePeriodo","titulo","mensagem","Math","abs"],"mappings":"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"}