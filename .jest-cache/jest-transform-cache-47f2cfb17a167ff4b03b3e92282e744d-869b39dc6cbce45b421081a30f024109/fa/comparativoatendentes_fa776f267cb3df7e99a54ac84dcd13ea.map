{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\components\\metricas\\comparativo-atendentes.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Users,\n  TrendingUp,\n  TrendingDown,\n  Minus,\n  Search,\n  X,\n  BarChart3,\n  PieChart,\n  Activity,\n  Award,\n  Target,\n  Clock,\n  FileText,\n  Star,\n  Plus,\n  Filter,\n} from 'lucide-react';\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  LineChart,\n  Line,\n} from 'recharts';\nimport { cn } from '@/lib/utils';\n\n/**\n * Interface para dados de um atendente\n */\nexport interface DadosAtendente {\n  id: string;\n  nome: string;\n  email: string;\n  cargo: string;\n  setor: string;\n  status: 'ativo' | 'inativo' | 'licenca';\n  avatar?: string;\n  dataAdmissao: string;\n  metricas: {\n    documentosCriados: number;\n    avaliacaoMedia: number;\n    produtividade: number;\n    pontualidade: number;\n    qualidade: number;\n    colaboracao: number;\n    inovacao: number;\n    resolucaoProblemas: number;\n    comunicacao: number;\n    lideranca: number;\n    tempoMedioTarefa: number; // em horas\n    tarefasConcluidas: number;\n    tarefasPendentes: number;\n    feedbacksPositivos: number;\n    feedbacksNegativos: number;\n  };\n  tendencias: {\n    documentos: 'up' | 'down' | 'stable';\n    avaliacao: 'up' | 'down' | 'stable';\n    produtividade: 'up' | 'down' | 'stable';\n  };\n}\n\n/**\n * Interface para configurações de comparação\n */\nexport interface ConfiguracaoComparacao {\n  metricasPrincipais: string[];\n  tipoVisualizacao: 'barras' | 'radar' | 'linha' | 'tabela';\n  ordenarPor: string;\n  ordemCrescente: boolean;\n  mostrarTendencias: boolean;\n  destacarMelhor: boolean;\n  destacarPior: boolean;\n}\n\n/**\n * Props do componente\n */\ninterface ComparativoAtendentesProps {\n  atendentes: DadosAtendente[];\n  onSelecionarAtendente?: (atendente: DadosAtendente) => void;\n  onRemoverAtendente?: (id: string) => void;\n  className?: string;\n}\n\n/**\n * Métricas disponíveis para comparação\n */\nconst METRICAS_DISPONIVEIS = [\n  {\n    key: 'documentosCriados',\n    nome: 'Documentos Criados',\n    icone: <FileText className=\"h-4 w-4\" />,\n    tipo: 'numero',\n  },\n  {\n    key: 'avaliacaoMedia',\n    nome: 'Avaliação Média',\n    icone: <Star className=\"h-4 w-4\" />,\n    tipo: 'decimal',\n  },\n  {\n    key: 'produtividade',\n    nome: 'Produtividade',\n    icone: <TrendingUp className=\"h-4 w-4\" />,\n    tipo: 'percentual',\n  },\n  {\n    key: 'pontualidade',\n    nome: 'Pontualidade',\n    icone: <Clock className=\"h-4 w-4\" />,\n    tipo: 'percentual',\n  },\n  {\n    key: 'qualidade',\n    nome: 'Qualidade',\n    icone: <Award className=\"h-4 w-4\" />,\n    tipo: 'percentual',\n  },\n  {\n    key: 'colaboracao',\n    nome: 'Colaboração',\n    icone: <Users className=\"h-4 w-4\" />,\n    tipo: 'percentual',\n  },\n  {\n    key: 'inovacao',\n    nome: 'Inovação',\n    icone: <Target className=\"h-4 w-4\" />,\n    tipo: 'percentual',\n  },\n  {\n    key: 'resolucaoProblemas',\n    nome: 'Resolução de Problemas',\n    icone: <Activity className=\"h-4 w-4\" />,\n    tipo: 'percentual',\n  },\n  {\n    key: 'comunicacao',\n    nome: 'Comunicação',\n    icone: <Users className=\"h-4 w-4\" />,\n    tipo: 'percentual',\n  },\n  {\n    key: 'lideranca',\n    nome: 'Liderança',\n    icone: <Award className=\"h-4 w-4\" />,\n    tipo: 'percentual',\n  },\n  {\n    key: 'tempoMedioTarefa',\n    nome: 'Tempo Médio por Tarefa',\n    icone: <Clock className=\"h-4 w-4\" />,\n    tipo: 'tempo',\n  },\n  {\n    key: 'tarefasConcluidas',\n    nome: 'Tarefas Concluídas',\n    icone: <Target className=\"h-4 w-4\" />,\n    tipo: 'numero',\n  },\n];\n\n/**\n * Componente principal para comparação de atendentes\n */\nexport function ComparativoAtendentes({\n  atendentes,\n  onSelecionarAtendente,\n  onRemoverAtendente,\n  className,\n}: ComparativoAtendentesProps) {\n  const [atendentesSelecionados, setAtendentesSelecionados] = useState<\n    DadosAtendente[]\n  >([]);\n  const [configuracao, setConfiguracao] = useState<ConfiguracaoComparacao>({\n    metricasPrincipais: [\n      'documentosCriados',\n      'avaliacaoMedia',\n      'produtividade',\n      'qualidade',\n    ],\n    tipoVisualizacao: 'barras',\n    ordenarPor: 'avaliacaoMedia',\n    ordemCrescente: false,\n    mostrarTendencias: true,\n    destacarMelhor: true,\n    destacarPior: false,\n  });\n  const [termoBusca, setTermoBusca] = useState('');\n  const [mostrarFiltros, setMostrarFiltros] = useState(false);\n\n  // Filtrar atendentes disponíveis\n  const atendentesDisponiveis = atendentes.filter(\n    atendente =>\n      !atendentesSelecionados.find(sel => sel.id === atendente.id) &&\n      (atendente.nome.toLowerCase().includes(termoBusca.toLowerCase()) ||\n        atendente.email.toLowerCase().includes(termoBusca.toLowerCase()) ||\n        atendente.cargo.toLowerCase().includes(termoBusca.toLowerCase()))\n  );\n\n  // Função para adicionar atendente à comparação\n  const adicionarAtendente = (atendente: DadosAtendente) => {\n    if (atendentesSelecionados.length < 6) {\n      setAtendentesSelecionados(prev => [...prev, atendente]);\n      onSelecionarAtendente?.(atendente);\n    }\n  };\n\n  // Função para remover atendente da comparação\n  const removerAtendente = (id: string) => {\n    setAtendentesSelecionados(prev => prev.filter(a => a.id !== id));\n    onRemoverAtendente?.(id);\n  };\n\n  // Função para obter valor da métrica\n  const obterValorMetrica = (\n    atendente: DadosAtendente,\n    metrica: string\n  ): number => {\n    return (atendente.metricas as any)[metrica] || 0;\n  };\n\n  // Função para formatar valor da métrica\n  const formatarValor = (valor: number, tipo: string): string => {\n    switch (tipo) {\n      case 'percentual':\n        return `${valor}%`;\n      case 'decimal':\n        return valor.toFixed(1);\n      case 'tempo':\n        return `${valor}h`;\n      default:\n        return valor.toString();\n    }\n  };\n\n  // Função para obter ícone de tendência\n  const obterIconeTendencia = (tendencia: 'up' | 'down' | 'stable') => {\n    switch (tendencia) {\n      case 'up':\n        return <TrendingUp className=\"h-3 w-3 text-green-500\" />;\n      case 'down':\n        return <TrendingDown className=\"h-3 w-3 text-red-500\" />;\n      default:\n        return <Minus className=\"h-3 w-3 text-gray-400\" />;\n    }\n  };\n\n  // Preparar dados para gráficos\n  const prepararDadosGrafico = () => {\n    return atendentesSelecionados.map(atendente => {\n      const dados: any = {\n        nome: atendente.nome.split(' ')[0], // Primeiro nome apenas\n        nomeCompleto: atendente.nome,\n      };\n\n      configuracao.metricasPrincipais.forEach(metrica => {\n        dados[metrica] = obterValorMetrica(atendente, metrica);\n      });\n\n      return dados;\n    });\n  };\n\n  // Preparar dados para radar\n  const prepararDadosRadar = () => {\n    const metricas = configuracao.metricasPrincipais.map(key => {\n      const metrica = METRICAS_DISPONIVEIS.find(m => m.key === key);\n      return metrica?.nome || key;\n    });\n\n    return metricas.map(metrica => {\n      const dados: any = { metrica };\n\n      atendentesSelecionados.forEach(atendente => {\n        const key = configuracao.metricasPrincipais.find(k => {\n          const m = METRICAS_DISPONIVEIS.find(met => met.key === k);\n          return m?.nome === metrica;\n        });\n\n        if (key) {\n          dados[atendente.nome.split(' ')[0]] = obterValorMetrica(\n            atendente,\n            key\n          );\n        }\n      });\n\n      return dados;\n    });\n  };\n\n  // Renderizar gráfico baseado no tipo selecionado\n  const renderizarGrafico = () => {\n    const dados = prepararDadosGrafico();\n    const cores = [\n      '#8884d8',\n      '#82ca9d',\n      '#ffc658',\n      '#ff7300',\n      '#8dd1e1',\n      '#d084d0',\n    ];\n\n    switch (configuracao.tipoVisualizacao) {\n      case 'barras':\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart data={dados}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"nome\" />\n              <YAxis />\n              <Tooltip\n                labelFormatter={label => {\n                  const atendente = atendentesSelecionados.find(\n                    a => a.nome.split(' ')[0] === label\n                  );\n                  return atendente?.nome || label;\n                }}\n              />\n              <Legend />\n              {configuracao.metricasPrincipais.map((metrica, index) => {\n                const metricaInfo = METRICAS_DISPONIVEIS.find(\n                  m => m.key === metrica\n                );\n                return (\n                  <Bar\n                    key={metrica}\n                    dataKey={metrica}\n                    fill={cores[index % cores.length]}\n                    name={metricaInfo?.nome || metrica}\n                  />\n                );\n              })}\n            </BarChart>\n          </ResponsiveContainer>\n        );\n\n      case 'radar':\n        const dadosRadar = prepararDadosRadar();\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <RadarChart data={dadosRadar}>\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"metrica\" />\n              <PolarRadiusAxis />\n              {atendentesSelecionados.map((atendente, index) => (\n                <Radar\n                  key={atendente.id}\n                  name={atendente.nome.split(' ')[0]}\n                  dataKey={atendente.nome.split(' ')[0]}\n                  stroke={cores[index % cores.length]}\n                  fill={cores[index % cores.length]}\n                  fillOpacity={0.1}\n                />\n              ))}\n              <Legend />\n            </RadarChart>\n          </ResponsiveContainer>\n        );\n\n      case 'linha':\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={dados}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"nome\" />\n              <YAxis />\n              <Tooltip\n                labelFormatter={label => {\n                  const atendente = atendentesSelecionados.find(\n                    a => a.nome.split(' ')[0] === label\n                  );\n                  return atendente?.nome || label;\n                }}\n              />\n              <Legend />\n              {configuracao.metricasPrincipais.map((metrica, index) => {\n                const metricaInfo = METRICAS_DISPONIVEIS.find(\n                  m => m.key === metrica\n                );\n                return (\n                  <Line\n                    key={metrica}\n                    type=\"monotone\"\n                    dataKey={metrica}\n                    stroke={cores[index % cores.length]}\n                    name={metricaInfo?.nome || metrica}\n                    strokeWidth={2}\n                  />\n                );\n              })}\n            </LineChart>\n          </ResponsiveContainer>\n        );\n\n      default:\n        return (\n          <div className=\"text-center text-gray-500 py-8\">\n            Selecione um tipo de visualização\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Cabeçalho */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users className=\"h-5 w-5\" />\n            <span>Comparativo de Atendentes</span>\n          </CardTitle>\n          <CardDescription>\n            Compare métricas de desempenho entre diferentes atendentes\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {/* Busca e seleção de atendentes */}\n          <div className=\"space-y-4\">\n            <div className=\"flex space-x-2\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Buscar atendentes por nome, email ou cargo...\"\n                  value={termoBusca}\n                  onChange={e => setTermoBusca(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => setMostrarFiltros(!mostrarFiltros)}\n              >\n                <Filter className=\"h-4 w-4 mr-1\" />\n                Filtros\n              </Button>\n            </div>\n\n            {/* Lista de atendentes disponíveis */}\n            {termoBusca && (\n              <div className=\"border rounded-lg p-3 max-h-48 overflow-y-auto\">\n                <div className=\"text-sm font-medium mb-2\">\n                  Atendentes Disponíveis:\n                </div>\n                <div className=\"space-y-2\">\n                  {atendentesDisponiveis.slice(0, 5).map(atendente => (\n                    <div\n                      key={atendente.id}\n                      className=\"flex items-center justify-between p-2 hover:bg-gray-50 rounded cursor-pointer\"\n                      onClick={() => adicionarAtendente(atendente)}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-medium text-blue-600\">\n                            {atendente.nome.charAt(0)}\n                          </span>\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-sm\">\n                            {atendente.nome}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {atendente.cargo} - {atendente.setor}\n                          </div>\n                        </div>\n                      </div>\n                      <Plus className=\"h-4 w-4 text-gray-400\" />\n                    </div>\n                  ))}\n                  {atendentesDisponiveis.length === 0 && (\n                    <div className=\"text-sm text-gray-500 text-center py-2\">\n                      Nenhum atendente encontrado\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Atendentes selecionados */}\n      {atendentesSelecionados.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">\n              Atendentes Selecionados ({atendentesSelecionados.length}/6)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {atendentesSelecionados.map(atendente => (\n                <div\n                  key={atendente.id}\n                  className=\"border rounded-lg p-4 relative\"\n                >\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute top-2 right-2 h-6 w-6 p-0\"\n                    onClick={() => removerAtendente(atendente.id)}\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <span className=\"font-medium text-blue-600\">\n                        {atendente.nome.charAt(0)}\n                      </span>\n                    </div>\n                    <div>\n                      <div className=\"font-medium\">{atendente.nome}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        {atendente.cargo}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Avaliação:</span>\n                      <div className=\"flex items-center space-x-1\">\n                        <span className=\"font-medium\">\n                          {atendente.metricas.avaliacaoMedia.toFixed(1)}\n                        </span>\n                        {configuracao.mostrarTendencias &&\n                          obterIconeTendencia(atendente.tendencias.avaliacao)}\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Documentos:</span>\n                      <div className=\"flex items-center space-x-1\">\n                        <span className=\"font-medium\">\n                          {atendente.metricas.documentosCriados}\n                        </span>\n                        {configuracao.mostrarTendencias &&\n                          obterIconeTendencia(atendente.tendencias.documentos)}\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">\n                        Produtividade:\n                      </span>\n                      <div className=\"flex items-center space-x-1\">\n                        <span className=\"font-medium\">\n                          {atendente.metricas.produtividade}%\n                        </span>\n                        {configuracao.mostrarTendencias &&\n                          obterIconeTendencia(\n                            atendente.tendencias.produtividade\n                          )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <Badge\n                    variant={\n                      atendente.status === 'ativo' ? 'default' : 'secondary'\n                    }\n                    className=\"mt-2\"\n                  >\n                    {atendente.status}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Configurações de comparação */}\n      {atendentesSelecionados.length > 1 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">\n              Configurações de Comparação\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Seleção de métricas */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium\">\n                Métricas para Comparação\n              </Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n                {METRICAS_DISPONIVEIS.map(metrica => (\n                  <div\n                    key={metrica.key}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <Checkbox\n                      id={metrica.key}\n                      checked={configuracao.metricasPrincipais.includes(\n                        metrica.key\n                      )}\n                      onCheckedChange={checked => {\n                        if (checked) {\n                          setConfiguracao(prev => ({\n                            ...prev,\n                            metricasPrincipais: [\n                              ...prev.metricasPrincipais,\n                              metrica.key,\n                            ],\n                          }));\n                        } else {\n                          setConfiguracao(prev => ({\n                            ...prev,\n                            metricasPrincipais: prev.metricasPrincipais.filter(\n                              m => m !== metrica.key\n                            ),\n                          }));\n                        }\n                      }}\n                    />\n                    <Label\n                      htmlFor={metrica.key}\n                      className=\"text-sm flex items-center space-x-1\"\n                    >\n                      {metrica.icone}\n                      <span>{metrica.nome}</span>\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Tipo de visualização */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">\n                  Tipo de Visualização\n                </Label>\n                <Select\n                  value={configuracao.tipoVisualizacao}\n                  onValueChange={valor =>\n                    setConfiguracao(prev => ({\n                      ...prev,\n                      tipoVisualizacao: valor as any,\n                    }))\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"barras\">Gráfico de Barras</SelectItem>\n                    <SelectItem value=\"radar\">Gráfico Radar</SelectItem>\n                    <SelectItem value=\"linha\">Gráfico de Linha</SelectItem>\n                    <SelectItem value=\"tabela\">Tabela Comparativa</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Ordenar Por</Label>\n                <Select\n                  value={configuracao.ordenarPor}\n                  onValueChange={valor =>\n                    setConfiguracao(prev => ({ ...prev, ordenarPor: valor }))\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {METRICAS_DISPONIVEIS.map(metrica => (\n                      <SelectItem key={metrica.key} value={metrica.key}>\n                        {metrica.nome}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Opções adicionais */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"mostrarTendencias\"\n                  checked={configuracao.mostrarTendencias}\n                  onCheckedChange={checked =>\n                    setConfiguracao(prev => ({\n                      ...prev,\n                      mostrarTendencias: !!checked,\n                    }))\n                  }\n                />\n                <Label htmlFor=\"mostrarTendencias\" className=\"text-sm\">\n                  Mostrar Tendências\n                </Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"destacarMelhor\"\n                  checked={configuracao.destacarMelhor}\n                  onCheckedChange={checked =>\n                    setConfiguracao(prev => ({\n                      ...prev,\n                      destacarMelhor: !!checked,\n                    }))\n                  }\n                />\n                <Label htmlFor=\"destacarMelhor\" className=\"text-sm\">\n                  Destacar Melhor\n                </Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"destacarPior\"\n                  checked={configuracao.destacarPior}\n                  onCheckedChange={checked =>\n                    setConfiguracao(prev => ({\n                      ...prev,\n                      destacarPior: !!checked,\n                    }))\n                  }\n                />\n                <Label htmlFor=\"destacarPior\" className=\"text-sm\">\n                  Destacar Pior\n                </Label>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"ordemCrescente\"\n                  checked={configuracao.ordemCrescente}\n                  onCheckedChange={checked =>\n                    setConfiguracao(prev => ({\n                      ...prev,\n                      ordemCrescente: !!checked,\n                    }))\n                  }\n                />\n                <Label htmlFor=\"ordemCrescente\" className=\"text-sm\">\n                  Ordem Crescente\n                </Label>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Visualização comparativa */}\n      {atendentesSelecionados.length > 1 &&\n        configuracao.metricasPrincipais.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                <span>Comparação Visual</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {configuracao.tipoVisualizacao !== 'tabela' ? (\n                renderizarGrafico()\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse border border-gray-200\">\n                    <thead>\n                      <tr className=\"bg-gray-50\">\n                        <th className=\"border border-gray-200 p-3 text-left\">\n                          Atendente\n                        </th>\n                        {configuracao.metricasPrincipais.map(metrica => {\n                          const metricaInfo = METRICAS_DISPONIVEIS.find(\n                            m => m.key === metrica\n                          );\n                          return (\n                            <th\n                              key={metrica}\n                              className=\"border border-gray-200 p-3 text-center\"\n                            >\n                              <div className=\"flex items-center justify-center space-x-1\">\n                                {metricaInfo?.icone}\n                                <span>{metricaInfo?.nome}</span>\n                              </div>\n                            </th>\n                          );\n                        })}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {atendentesSelecionados.map(atendente => (\n                        <tr key={atendente.id} className=\"hover:bg-gray-50\">\n                          <td className=\"border border-gray-200 p-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                                <span className=\"text-sm font-medium text-blue-600\">\n                                  {atendente.nome.charAt(0)}\n                                </span>\n                              </div>\n                              <div>\n                                <div className=\"font-medium\">\n                                  {atendente.nome}\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {atendente.cargo}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          {configuracao.metricasPrincipais.map(metrica => {\n                            const valor = obterValorMetrica(atendente, metrica);\n                            const metricaInfo = METRICAS_DISPONIVEIS.find(\n                              m => m.key === metrica\n                            );\n                            return (\n                              <td\n                                key={metrica}\n                                className=\"border border-gray-200 p-3 text-center\"\n                              >\n                                <span className=\"font-medium\">\n                                  {formatarValor(\n                                    valor,\n                                    metricaInfo?.tipo || 'numero'\n                                  )}\n                                </span>\n                              </td>\n                            );\n                          })}\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n      {/* Estado vazio */}\n      {atendentesSelecionados.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              Nenhum atendente selecionado\n            </h3>\n            <p className=\"text-gray-500 mb-4\">\n              Use a busca acima para encontrar e selecionar atendentes para\n              comparação\n            </p>\n            <p className=\"text-sm text-gray-400\">\n              Você pode comparar até 6 atendentes simultaneamente\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nexport default ComparativoAtendentes;\n"],"names":["ComparativoAtendentes","METRICAS_DISPONIVEIS","key","nome","icone","FileText","className","tipo","Star","TrendingUp","Clock","Award","Users","Target","Activity","atendentes","onSelecionarAtendente","onRemoverAtendente","atendentesSelecionados","setAtendentesSelecionados","useState","configuracao","setConfiguracao","metricasPrincipais","tipoVisualizacao","ordenarPor","ordemCrescente","mostrarTendencias","destacarMelhor","destacarPior","termoBusca","setTermoBusca","mostrarFiltros","setMostrarFiltros","atendentesDisponiveis","filter","atendente","find","sel","id","toLowerCase","includes","email","cargo","adicionarAtendente","length","prev","removerAtendente","a","obterValorMetrica","metrica","metricas","formatarValor","valor","toFixed","toString","obterIconeTendencia","tendencia","TrendingDown","Minus","prepararDadosGrafico","map","dados","split","nomeCompleto","forEach","prepararDadosRadar","m","k","met","renderizarGrafico","cores","ResponsiveContainer","width","height","BarChart","data","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","labelFormatter","label","Legend","index","metricaInfo","Bar","fill","name","dadosRadar","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","Radar","stroke","fillOpacity","LineChart","Line","type","strokeWidth","div","cn","Card","CardHeader","CardTitle","span","CardDescription","CardContent","Search","Input","placeholder","value","onChange","e","target","Button","variant","onClick","Filter","slice","charAt","setor","Plus","size","X","avaliacaoMedia","tendencias","avaliacao","documentosCriados","documentos","produtividade","Badge","status","Label","Checkbox","checked","onCheckedChange","htmlFor","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","BarChart3","table","thead","tr","th","tbody","td","h3","p"],"mappings":"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"}