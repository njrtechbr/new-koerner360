{"version":3,"names":["cov_2mzqhq5o98","actualCoverage","s","POST","esquemaVerificacaoToken","_zod","z","object","token","string","min","request","f","body","json","parse","usuario","_prisma","prisma","findFirst","where","tokenRecuperacao","expiracaoTokenRecuperacao","gt","Date","b","_server","NextResponse","message","status","error","console","ZodError","errors"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\verify-reset-token\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { prisma } from '@/lib/prisma';\n\n// Schema de validação para verificação de token\nconst esquemaVerificacaoToken = z.object({\n  token: z.string().min(1, 'Token é obrigatório'),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validar entrada\n    const { token } = esquemaVerificacaoToken.parse(body);\n\n    // Verificar se o token existe e não expirou\n    const usuario = await prisma.usuario.findFirst({\n      where: {\n        tokenRecuperacao: token,\n        expiracaoTokenRecuperacao: {\n          gt: new Date(), // Token ainda não expirou\n        },\n      },\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { message: 'Token inválido ou expirado' },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ message: 'Token válido' }, { status: 200 });\n  } catch (error) {\n    console.error('Erro na verificação de token:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { message: 'Dados inválidos', errors: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { message: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}