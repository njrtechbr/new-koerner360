1b06aef67c0619acc7f111cb2b018cc1
"use strict";

/* istanbul ignore next */
function cov_1x5gl0y8r9() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\forgot-password\\route.ts";
  var hash = "9c326651e21135316cc0aaa7f63b6254e20240e9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\forgot-password\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 13
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 49
        }
      },
      "6": {
        start: {
          line: 14,
          column: 30
        },
        end: {
          line: 14,
          column: 73
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "8": {
        start: {
          line: 21,
          column: 32
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "9": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "10": {
        start: {
          line: 26,
          column: 21
        },
        end: {
          line: 26,
          column: 41
        }
      },
      "11": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 28,
          column: 61
        }
      },
      "12": {
        start: {
          line: 30,
          column: 24
        },
        end: {
          line: 34,
          column: 10
        }
      },
      "13": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "15": {
        start: {
          line: 45,
          column: 33
        },
        end: {
          line: 45,
          column: 80
        }
      },
      "16": {
        start: {
          line: 46,
          column: 31
        },
        end: {
          line: 46,
          column: 61
        }
      },
      "17": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "18": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 79
        }
      },
      "19": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 118
        }
      },
      "20": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "21": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 62
        }
      },
      "22": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "23": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 74,
          column: 15
        }
      },
      "24": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 19
          }
        },
        loc: {
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 82,
            column: 1
          }
        },
        line: 24
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 38
          }
        }, {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 14
          }
        }, {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 32
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\auth\\forgot-password\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { prisma } from '@/lib/prisma';\nimport crypto from 'crypto';\n\n// Schema de valida\xE7\xE3o para recupera\xE7\xE3o de senha\nconst esquemaRecuperacaoSenha = z.object({\n  email: z.string().email('Email inv\xE1lido'),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validar entrada\n    const { email } = esquemaRecuperacaoSenha.parse(body);\n\n    // Verificar se o usu\xE1rio existe\n    const usuario = await prisma.usuario.findUnique({\n      where: { email },\n    });\n\n    // Por seguran\xE7a, sempre retornamos sucesso mesmo se o email n\xE3o existir\n    // Isso evita que atacantes descubram quais emails est\xE3o cadastrados\n    if (!usuario) {\n      return NextResponse.json(\n        {\n          message:\n            'Se o email estiver cadastrado, voc\xEA receber\xE1 as instru\xE7\xF5es de recupera\xE7\xE3o.',\n        },\n        { status: 200 }\n      );\n    }\n\n    // Gerar token de recupera\xE7\xE3o\n    const tokenRecuperacao = crypto.randomBytes(32).toString('hex');\n    const expiracaoToken = new Date(Date.now() + 3600000); // 1 hora\n\n    // Salvar token no banco de dados\n    await prisma.usuario.update({\n      where: { id: usuario.id },\n      data: {\n        tokenRecuperacao,\n        expiracaoTokenRecuperacao: expiracaoToken,\n      },\n    });\n\n    // TODO: Implementar envio de email\n    // Por enquanto, apenas logamos o token (em produ\xE7\xE3o, isso deve ser removido)\n    console.log(`Token de recupera\xE7\xE3o para ${email}: ${tokenRecuperacao}`);\n    console.log(\n      `Link de recupera\xE7\xE3o: ${process.env.NEXTAUTH_URL}/auth/reset-password?token=${tokenRecuperacao}`\n    );\n\n    return NextResponse.json(\n      {\n        message:\n          'Se o email estiver cadastrado, voc\xEA receber\xE1 as instru\xE7\xF5es de recupera\xE7\xE3o.',\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Erro na recupera\xE7\xE3o de senha:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { message: 'Dados inv\xE1lidos', errors: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { message: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["POST", "esquemaRecuperacaoSenha", "z", "object", "email", "string", "request", "body", "json", "parse", "usuario", "prisma", "findUnique", "where", "NextResponse", "message", "status", "tokenRecuperacao", "crypto", "randomBytes", "toString", "expiracaoToken", "Date", "now", "update", "id", "data", "expiracaoTokenRecuperacao", "console", "log", "process", "env", "NEXTAUTH_URL", "error", "ZodError", "errors"],
      mappings: ";;;;+BAUsBA;;;eAAAA;;;wBAVoB;qBACxB;wBACK;+DACJ;;;;;;AAEnB,gDAAgD;AAChD,MAAMC,0BAA0BC,MAAC,CAACC,MAAM,CAAC;IACvCC,OAAOF,MAAC,CAACG,MAAM,GAAGD,KAAK,CAAC;AAC1B;AAEO,eAAeJ,KAAKM,OAAoB;IAC7C,IAAI;QACF,MAAMC,OAAO,MAAMD,QAAQE,IAAI;QAE/B,kBAAkB;QAClB,MAAM,EAAEJ,KAAK,EAAE,GAAGH,wBAAwBQ,KAAK,CAACF;QAEhD,gCAAgC;QAChC,MAAMG,UAAU,MAAMC,cAAM,CAACD,OAAO,CAACE,UAAU,CAAC;YAC9CC,OAAO;gBAAET;YAAM;QACjB;QAEA,wEAAwE;QACxE,oEAAoE;QACpE,IAAI,CAACM,SAAS;YACZ,OAAOI,oBAAY,CAACN,IAAI,CACtB;gBACEO,SACE;YACJ,GACA;gBAAEC,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,MAAMC,mBAAmBC,eAAM,CAACC,WAAW,CAAC,IAAIC,QAAQ,CAAC;QACzD,MAAMC,iBAAiB,IAAIC,KAAKA,KAAKC,GAAG,KAAK,UAAU,SAAS;QAEhE,iCAAiC;QACjC,MAAMZ,cAAM,CAACD,OAAO,CAACc,MAAM,CAAC;YAC1BX,OAAO;gBAAEY,IAAIf,QAAQe,EAAE;YAAC;YACxBC,MAAM;gBACJT;gBACAU,2BAA2BN;YAC7B;QACF;QAEA,mCAAmC;QACnC,6EAA6E;QAC7EO,QAAQC,GAAG,CAAC,CAAC,0BAA0B,EAAEzB,MAAM,EAAE,EAAEa,kBAAkB;QACrEW,QAAQC,GAAG,CACT,CAAC,qBAAqB,EAAEC,QAAQC,GAAG,CAACC,YAAY,CAAC,2BAA2B,EAAEf,kBAAkB;QAGlG,OAAOH,oBAAY,CAACN,IAAI,CACtB;YACEO,SACE;QACJ,GACA;YAAEC,QAAQ;QAAI;IAElB,EAAE,OAAOiB,OAAO;QACdL,QAAQK,KAAK,CAAC,iCAAiCA;QAE/C,IAAIA,iBAAiB/B,MAAC,CAACgC,QAAQ,EAAE;YAC/B,OAAOpB,oBAAY,CAACN,IAAI,CACtB;gBAAEO,SAAS;gBAAmBoB,QAAQF,MAAME,MAAM;YAAC,GACnD;gBAAEnB,QAAQ;YAAI;QAElB;QAEA,OAAOF,oBAAY,CAACN,IAAI,CACtB;YAAEO,SAAS;QAA2B,GACtC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9c326651e21135316cc0aaa7f63b6254e20240e9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1x5gl0y8r9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1x5gl0y8r9();
cov_1x5gl0y8r9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1x5gl0y8r9().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1x5gl0y8r9().f[0]++;
    cov_1x5gl0y8r9().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1x5gl0y8r9().s[3]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_1x5gl0y8r9().s[4]++, require("zod"));
const _prisma =
/* istanbul ignore next */
(cov_1x5gl0y8r9().s[5]++, require("../../../../lib/prisma"));
const _crypto =
/* istanbul ignore next */
(/*#__PURE__*/cov_1x5gl0y8r9().s[6]++, _interop_require_default(require("crypto")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1x5gl0y8r9().f[1]++;
  cov_1x5gl0y8r9().s[7]++;
  return /* istanbul ignore next */(cov_1x5gl0y8r9().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1x5gl0y8r9().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1x5gl0y8r9().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1x5gl0y8r9().b[0][1]++, {
    default: obj
  });
}
// Schema de validação para recuperação de senha
const esquemaRecuperacaoSenha =
/* istanbul ignore next */
(cov_1x5gl0y8r9().s[8]++, _zod.z.object({
  email: _zod.z.string().email('Email inválido')
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_1x5gl0y8r9().f[2]++;
  cov_1x5gl0y8r9().s[9]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_1x5gl0y8r9().s[10]++, await request.json());
    // Validar entrada
    const {
      email
    } =
    /* istanbul ignore next */
    (cov_1x5gl0y8r9().s[11]++, esquemaRecuperacaoSenha.parse(body));
    // Verificar se o usuário existe
    const usuario =
    /* istanbul ignore next */
    (cov_1x5gl0y8r9().s[12]++, await _prisma.prisma.usuario.findUnique({
      where: {
        email
      }
    }));
    // Por segurança, sempre retornamos sucesso mesmo se o email não existir
    // Isso evita que atacantes descubram quais emails estão cadastrados
    /* istanbul ignore next */
    cov_1x5gl0y8r9().s[13]++;
    if (!usuario) {
      /* istanbul ignore next */
      cov_1x5gl0y8r9().b[2][0]++;
      cov_1x5gl0y8r9().s[14]++;
      return _server.NextResponse.json({
        message: 'Se o email estiver cadastrado, você receberá as instruções de recuperação.'
      }, {
        status: 200
      });
    } else
    /* istanbul ignore next */
    {
      cov_1x5gl0y8r9().b[2][1]++;
    }
    // Gerar token de recuperação
    const tokenRecuperacao =
    /* istanbul ignore next */
    (cov_1x5gl0y8r9().s[15]++, _crypto.default.randomBytes(32).toString('hex'));
    const expiracaoToken =
    /* istanbul ignore next */
    (cov_1x5gl0y8r9().s[16]++, new Date(Date.now() + 3600000)); // 1 hora
    // Salvar token no banco de dados
    /* istanbul ignore next */
    cov_1x5gl0y8r9().s[17]++;
    await _prisma.prisma.usuario.update({
      where: {
        id: usuario.id
      },
      data: {
        tokenRecuperacao,
        expiracaoTokenRecuperacao: expiracaoToken
      }
    });
    // TODO: Implementar envio de email
    // Por enquanto, apenas logamos o token (em produção, isso deve ser removido)
    /* istanbul ignore next */
    cov_1x5gl0y8r9().s[18]++;
    console.log(`Token de recuperação para ${email}: ${tokenRecuperacao}`);
    /* istanbul ignore next */
    cov_1x5gl0y8r9().s[19]++;
    console.log(`Link de recuperação: ${process.env.NEXTAUTH_URL}/auth/reset-password?token=${tokenRecuperacao}`);
    /* istanbul ignore next */
    cov_1x5gl0y8r9().s[20]++;
    return _server.NextResponse.json({
      message: 'Se o email estiver cadastrado, você receberá as instruções de recuperação.'
    }, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1x5gl0y8r9().s[21]++;
    console.error('Erro na recuperação de senha:', error);
    /* istanbul ignore next */
    cov_1x5gl0y8r9().s[22]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1x5gl0y8r9().b[3][0]++;
      cov_1x5gl0y8r9().s[23]++;
      return _server.NextResponse.json({
        message: 'Dados inválidos',
        errors: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1x5gl0y8r9().b[3][1]++;
    }
    cov_1x5gl0y8r9().s[24]++;
    return _server.NextResponse.json({
      message: 'Erro interno do servidor'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQT1NUIiwiZXNxdWVtYVJlY3VwZXJhY2FvU2VuaGEiLCJjb3ZfMXg1Z2wweThyOSIsInMiLCJfem9kIiwieiIsIm9iamVjdCIsImVtYWlsIiwic3RyaW5nIiwicmVxdWVzdCIsImYiLCJib2R5IiwianNvbiIsInBhcnNlIiwidXN1YXJpbyIsIl9wcmlzbWEiLCJwcmlzbWEiLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJ0b2tlblJlY3VwZXJhY2FvIiwiX2NyeXB0byIsImRlZmF1bHQiLCJyYW5kb21CeXRlcyIsInRvU3RyaW5nIiwiZXhwaXJhY2FvVG9rZW4iLCJEYXRlIiwibm93IiwidXBkYXRlIiwiaWQiLCJkYXRhIiwiZXhwaXJhY2FvVG9rZW5SZWN1cGVyYWNhbyIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiZW52IiwiTkVYVEFVVEhfVVJMIiwiZXJyb3IiLCJab2RFcnJvciIsImVycm9ycyJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTmVyZXUgSnJcXERvY3VtZW50c1xcRGV2XFxuZXdcXHNyY1xcYXBwXFxhcGlcXGF1dGhcXGZvcmdvdC1wYXNzd29yZFxccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQC9saWIvcHJpc21hJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuLy8gU2NoZW1hIGRlIHZhbGlkYcOnw6NvIHBhcmEgcmVjdXBlcmHDp8OjbyBkZSBzZW5oYVxuY29uc3QgZXNxdWVtYVJlY3VwZXJhY2FvU2VuaGEgPSB6Lm9iamVjdCh7XG4gIGVtYWlsOiB6LnN0cmluZygpLmVtYWlsKCdFbWFpbCBpbnbDoWxpZG8nKSxcbn0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuICAgIC8vIFZhbGlkYXIgZW50cmFkYVxuICAgIGNvbnN0IHsgZW1haWwgfSA9IGVzcXVlbWFSZWN1cGVyYWNhb1NlbmhhLnBhcnNlKGJvZHkpO1xuXG4gICAgLy8gVmVyaWZpY2FyIHNlIG8gdXN1w6FyaW8gZXhpc3RlXG4gICAgY29uc3QgdXN1YXJpbyA9IGF3YWl0IHByaXNtYS51c3VhcmlvLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgZW1haWwgfSxcbiAgICB9KTtcblxuICAgIC8vIFBvciBzZWd1cmFuw6dhLCBzZW1wcmUgcmV0b3JuYW1vcyBzdWNlc3NvIG1lc21vIHNlIG8gZW1haWwgbsOjbyBleGlzdGlyXG4gICAgLy8gSXNzbyBldml0YSBxdWUgYXRhY2FudGVzIGRlc2N1YnJhbSBxdWFpcyBlbWFpbHMgZXN0w6NvIGNhZGFzdHJhZG9zXG4gICAgaWYgKCF1c3VhcmlvKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgJ1NlIG8gZW1haWwgZXN0aXZlciBjYWRhc3RyYWRvLCB2b2PDqiByZWNlYmVyw6EgYXMgaW5zdHJ1w6fDtWVzIGRlIHJlY3VwZXJhw6fDo28uJyxcbiAgICAgICAgfSxcbiAgICAgICAgeyBzdGF0dXM6IDIwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEdlcmFyIHRva2VuIGRlIHJlY3VwZXJhw6fDo29cbiAgICBjb25zdCB0b2tlblJlY3VwZXJhY2FvID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDMyKS50b1N0cmluZygnaGV4Jyk7XG4gICAgY29uc3QgZXhwaXJhY2FvVG9rZW4gPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgMzYwMDAwMCk7IC8vIDEgaG9yYVxuXG4gICAgLy8gU2FsdmFyIHRva2VuIG5vIGJhbmNvIGRlIGRhZG9zXG4gICAgYXdhaXQgcHJpc21hLnVzdWFyaW8udXBkYXRlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiB1c3VhcmlvLmlkIH0sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHRva2VuUmVjdXBlcmFjYW8sXG4gICAgICAgIGV4cGlyYWNhb1Rva2VuUmVjdXBlcmFjYW86IGV4cGlyYWNhb1Rva2VuLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFRPRE86IEltcGxlbWVudGFyIGVudmlvIGRlIGVtYWlsXG4gICAgLy8gUG9yIGVucXVhbnRvLCBhcGVuYXMgbG9nYW1vcyBvIHRva2VuIChlbSBwcm9kdcOnw6NvLCBpc3NvIGRldmUgc2VyIHJlbW92aWRvKVxuICAgIGNvbnNvbGUubG9nKGBUb2tlbiBkZSByZWN1cGVyYcOnw6NvIHBhcmEgJHtlbWFpbH06ICR7dG9rZW5SZWN1cGVyYWNhb31gKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIGBMaW5rIGRlIHJlY3VwZXJhw6fDo286ICR7cHJvY2Vzcy5lbnYuTkVYVEFVVEhfVVJMfS9hdXRoL3Jlc2V0LXBhc3N3b3JkP3Rva2VuPSR7dG9rZW5SZWN1cGVyYWNhb31gXG4gICAgKTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHtcbiAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAnU2UgbyBlbWFpbCBlc3RpdmVyIGNhZGFzdHJhZG8sIHZvY8OqIHJlY2ViZXLDoSBhcyBpbnN0cnXDp8O1ZXMgZGUgcmVjdXBlcmHDp8Ojby4nLFxuICAgICAgfSxcbiAgICAgIHsgc3RhdHVzOiAyMDAgfVxuICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJybyBuYSByZWN1cGVyYcOnw6NvIGRlIHNlbmhhOicsIGVycm9yKTtcblxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBtZXNzYWdlOiAnRGFkb3MgaW52w6FsaWRvcycsIGVycm9yczogZXJyb3IuZXJyb3JzIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IG1lc3NhZ2U6ICdFcnJvIGludGVybm8gZG8gc2Vydmlkb3InIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBVXNCOzs7Ozs7V0FBQUEsSUFBQTs7Ozs7a0NBVm9COzs7a0NBQ3hCOzs7a0NBQ0s7Ozt3RUFDSjs7Ozs7Ozs7Ozs7Ozs7O0FBRW5CO0FBQ0EsTUFBTUMsdUJBQUE7QUFBQTtBQUFBLENBQUFDLGNBQUEsR0FB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