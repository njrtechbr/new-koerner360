e8dcbecfb3e851e40ff0131c31d1e06f
"use strict";

/* istanbul ignore next */
function cov_ha0qqm5wt() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\avaliacoes.ts";
  var hash = "e53629fb8dcd60e0ec708b3d58c2004b1ff5d3ea";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\avaliacoes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 45,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 40
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 34
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 36
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 38
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 29
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 27
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 28
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 34
        }
      },
      "15": {
        start: {
          line: 46,
          column: 13
        },
        end: {
          line: 46,
          column: 27
        }
      },
      "16": {
        start: {
          line: 48,
          column: 19
        },
        end: {
          line: 48,
          column: 69
        }
      },
      "17": {
        start: {
          line: 50,
          column: 19
        },
        end: {
          line: 50,
          column: 82
        }
      },
      "18": {
        start: {
          line: 52,
          column: 19
        },
        end: {
          line: 52,
          column: 125
        }
      },
      "19": {
        start: {
          line: 54,
          column: 25
        },
        end: {
          line: 54,
          column: 110
        }
      },
      "20": {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 64,
          column: 2
        }
      },
      "21": {
        start: {
          line: 61,
          column: 19
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "22": {
        start: {
          line: 66,
          column: 28
        },
        end: {
          line: 75,
          column: 2
        }
      },
      "23": {
        start: {
          line: 72,
          column: 19
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "24": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 80,
          column: 2
        }
      },
      "25": {
        start: {
          line: 78,
          column: 102
        },
        end: {
          line: 78,
          column: 110
        }
      },
      "26": {
        start: {
          line: 79,
          column: 103
        },
        end: {
          line: 79,
          column: 125
        }
      },
      "27": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 103,
          column: 2
        }
      },
      "28": {
        start: {
          line: 91,
          column: 23
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "29": {
        start: {
          line: 99,
          column: 23
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "30": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 114,
          column: 2
        }
      },
      "31": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 111,
          column: 16
        }
      },
      "32": {
        start: {
          line: 115,
          column: 33
        },
        end: {
          line: 127,
          column: 2
        }
      },
      "33": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 97
        }
      },
      "34": {
        start: {
          line: 128,
          column: 31
        },
        end: {
          line: 164,
          column: 2
        }
      },
      "35": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "36": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 50
        }
      },
      "37": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 147,
          column: 16
        }
      },
      "38": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "39": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 67
        }
      },
      "40": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 16
        }
      },
      "41": {
        start: {
          line: 165,
          column: 27
        },
        end: {
          line: 189,
          column: 2
        }
      },
      "42": {
        start: {
          line: 172,
          column: 19
        },
        end: {
          line: 172,
          column: 44
        }
      },
      "43": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 38
        }
      },
      "44": {
        start: {
          line: 174,
          column: 18
        },
        end: {
          line: 174,
          column: 28
        }
      },
      "45": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 178,
          column: 5
        }
      },
      "46": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 21
        }
      },
      "47": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 182,
          column: 5
        }
      },
      "48": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 47
        }
      },
      "49": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 183,
          column: 16
        }
      },
      "50": {
        start: {
          line: 190,
          column: 31
        },
        end: {
          line: 217,
          column: 2
        }
      },
      "51": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 202,
          column: 5
        }
      },
      "52": {
        start: {
          line: 199,
          column: 23
        },
        end: {
          line: 199,
          column: 48
        }
      },
      "53": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 200,
          column: 42
        }
      },
      "54": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 28
        }
      },
      "55": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 203,
          column: 16
        }
      },
      "56": {
        start: {
          line: 211,
          column: 4
        },
        end: {
          line: 211,
          column: 66
        }
      },
      "57": {
        start: {
          line: 211,
          column: 45
        },
        end: {
          line: 211,
          column: 64
        }
      },
      "58": {
        start: {
          line: 218,
          column: 29
        },
        end: {
          line: 237,
          column: 2
        }
      },
      "59": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 230,
          column: 5
        }
      },
      "60": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 67
        }
      },
      "61": {
        start: {
          line: 231,
          column: 4
        },
        end: {
          line: 231,
          column: 16
        }
      },
      "62": {
        start: {
          line: 238,
          column: 31
        },
        end: {
          line: 268,
          column: 2
        }
      },
      "63": {
        start: {
          line: 247,
          column: 54
        },
        end: {
          line: 247,
          column: 68
        }
      },
      "64": {
        start: {
          line: 253,
          column: 23
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "65": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 261,
          column: 5
        }
      },
      "66": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 67
        }
      },
      "67": {
        start: {
          line: 262,
          column: 4
        },
        end: {
          line: 262,
          column: 16
        }
      },
      "68": {
        start: {
          line: 269,
          column: 22
        },
        end: {
          line: 271,
          column: 2
        }
      },
      "69": {
        start: {
          line: 273,
          column: 4
        },
        end: {
          line: 302,
          column: 5
        }
      },
      "70": {
        start: {
          line: 274,
          column: 26
        },
        end: {
          line: 274,
          column: 44
        }
      },
      "71": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 279,
          column: 10
        }
      },
      "72": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "73": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 293,
          column: 14
        }
      },
      "74": {
        start: {
          line: 287,
          column: 54
        },
        end: {
          line: 291,
          column: 25
        }
      },
      "75": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 301,
          column: 10
        }
      },
      "76": {
        start: {
          line: 305,
          column: 19
        },
        end: {
          line: 305,
          column: 51
        }
      },
      "77": {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 306,
          column: 40
        }
      },
      "78": {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 309,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 36
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 34
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 30
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 34
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 34
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 25
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 23
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 24
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 30
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 61,
            column: 14
          },
          end: {
            line: 61,
            column: 15
          }
        },
        loc: {
          start: {
            line: 61,
            column: 19
          },
          end: {
            line: 63,
            column: 9
          }
        },
        line: 61
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 72,
            column: 14
          },
          end: {
            line: 72,
            column: 15
          }
        },
        loc: {
          start: {
            line: 72,
            column: 19
          },
          end: {
            line: 74,
            column: 9
          }
        },
        line: 72
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 78,
            column: 95
          },
          end: {
            line: 78,
            column: 96
          }
        },
        loc: {
          start: {
            line: 78,
            column: 102
          },
          end: {
            line: 78,
            column: 110
          }
        },
        line: 78
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 79,
            column: 96
          },
          end: {
            line: 79,
            column: 97
          }
        },
        loc: {
          start: {
            line: 79,
            column: 103
          },
          end: {
            line: 79,
            column: 125
          }
        },
        line: 79
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 91,
            column: 18
          },
          end: {
            line: 91,
            column: 19
          }
        },
        loc: {
          start: {
            line: 91,
            column: 23
          },
          end: {
            line: 93,
            column: 13
          }
        },
        line: 91
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 99,
            column: 18
          },
          end: {
            line: 99,
            column: 19
          }
        },
        loc: {
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 101,
            column: 13
          }
        },
        line: 99
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 109,
            column: 10
          },
          end: {
            line: 109,
            column: 11
          }
        },
        loc: {
          start: {
            line: 109,
            column: 24
          },
          end: {
            line: 112,
            column: 1
          }
        },
        line: 109
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 119,
            column: 10
          },
          end: {
            line: 119,
            column: 11
          }
        },
        loc: {
          start: {
            line: 119,
            column: 18
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 119
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 142,
            column: 10
          },
          end: {
            line: 142,
            column: 11
          }
        },
        loc: {
          start: {
            line: 142,
            column: 18
          },
          end: {
            line: 148,
            column: 1
          }
        },
        line: 142
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 153,
            column: 10
          },
          end: {
            line: 153,
            column: 11
          }
        },
        loc: {
          start: {
            line: 153,
            column: 18
          },
          end: {
            line: 159,
            column: 1
          }
        },
        line: 153
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 171,
            column: 10
          },
          end: {
            line: 171,
            column: 11
          }
        },
        loc: {
          start: {
            line: 171,
            column: 18
          },
          end: {
            line: 184,
            column: 1
          }
        },
        line: 171
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 196,
            column: 10
          },
          end: {
            line: 196,
            column: 11
          }
        },
        loc: {
          start: {
            line: 196,
            column: 18
          },
          end: {
            line: 204,
            column: 1
          }
        },
        line: 196
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 209,
            column: 10
          },
          end: {
            line: 209,
            column: 11
          }
        },
        loc: {
          start: {
            line: 209,
            column: 18
          },
          end: {
            line: 212,
            column: 1
          }
        },
        line: 209
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 211,
            column: 36
          },
          end: {
            line: 211,
            column: 37
          }
        },
        loc: {
          start: {
            line: 211,
            column: 45
          },
          end: {
            line: 211,
            column: 64
          }
        },
        line: 211
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 226,
            column: 10
          },
          end: {
            line: 226,
            column: 11
          }
        },
        loc: {
          start: {
            line: 226,
            column: 18
          },
          end: {
            line: 232,
            column: 1
          }
        },
        line: 226
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 247,
            column: 47
          },
          end: {
            line: 247,
            column: 48
          }
        },
        loc: {
          start: {
            line: 247,
            column: 54
          },
          end: {
            line: 247,
            column: 68
          }
        },
        line: 247
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 253,
            column: 18
          },
          end: {
            line: 253,
            column: 19
          }
        },
        loc: {
          start: {
            line: 253,
            column: 23
          },
          end: {
            line: 255,
            column: 13
          }
        },
        line: 253
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 257,
            column: 10
          },
          end: {
            line: 257,
            column: 11
          }
        },
        loc: {
          start: {
            line: 257,
            column: 18
          },
          end: {
            line: 263,
            column: 1
          }
        },
        line: 257
      },
      "30": {
        name: "validarDados",
        decl: {
          start: {
            line: 272,
            column: 9
          },
          end: {
            line: 272,
            column: 21
          }
        },
        loc: {
          start: {
            line: 272,
            column: 36
          },
          end: {
            line: 303,
            column: 1
          }
        },
        line: 272
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 287,
            column: 46
          },
          end: {
            line: 287,
            column: 47
          }
        },
        loc: {
          start: {
            line: 287,
            column: 54
          },
          end: {
            line: 291,
            column: 25
          }
        },
        line: 287
      },
      "32": {
        name: "validarQueryParams",
        decl: {
          start: {
            line: 304,
            column: 9
          },
          end: {
            line: 304,
            column: 27
          }
        },
        loc: {
          start: {
            line: 304,
            column: 50
          },
          end: {
            line: 307,
            column: 1
          }
        },
        line: 304
      },
      "33": {
        name: "validarBody",
        decl: {
          start: {
            line: 308,
            column: 9
          },
          end: {
            line: 308,
            column: 20
          }
        },
        loc: {
          start: {
            line: 308,
            column: 35
          },
          end: {
            line: 310,
            column: 1
          }
        },
        line: 308
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 79,
            column: 103
          },
          end: {
            line: 79,
            column: 125
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 103
          },
          end: {
            line: 79,
            column: 111
          }
        }, {
          start: {
            line: 79,
            column: 115
          },
          end: {
            line: 79,
            column: 125
          }
        }],
        line: 79
      },
      "1": {
        loc: {
          start: {
            line: 121,
            column: 11
          },
          end: {
            line: 121,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 11
          },
          end: {
            line: 121,
            column: 34
          }
        }, {
          start: {
            line: 121,
            column: 38
          },
          end: {
            line: 121,
            column: 67
          }
        }, {
          start: {
            line: 121,
            column: 71
          },
          end: {
            line: 121,
            column: 96
          }
        }],
        line: 121
      },
      "2": {
        loc: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "3": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 23
          }
        }, {
          start: {
            line: 144,
            column: 27
          },
          end: {
            line: 144,
            column: 42
          }
        }],
        line: 144
      },
      "4": {
        loc: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "5": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 155,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 155,
            column: 23
          }
        }, {
          start: {
            line: 155,
            column: 27
          },
          end: {
            line: 155,
            column: 39
          }
        }],
        line: 155
      },
      "6": {
        loc: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "7": {
        loc: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "8": {
        loc: {
          start: {
            line: 181,
            column: 15
          },
          end: {
            line: 181,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 15
          },
          end: {
            line: 181,
            column: 30
          }
        }, {
          start: {
            line: 181,
            column: 34
          },
          end: {
            line: 181,
            column: 46
          }
        }],
        line: 181
      },
      "9": {
        loc: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "10": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 198,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 198,
            column: 23
          }
        }, {
          start: {
            line: 198,
            column: 27
          },
          end: {
            line: 198,
            column: 39
          }
        }],
        line: 198
      },
      "11": {
        loc: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "12": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 228,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 228,
            column: 23
          }
        }, {
          start: {
            line: 228,
            column: 27
          },
          end: {
            line: 228,
            column: 39
          }
        }],
        line: 228
      },
      "13": {
        loc: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "14": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 259,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 259,
            column: 23
          }
        }, {
          start: {
            line: 259,
            column: 27
          },
          end: {
            line: 259,
            column: 39
          }
        }],
        line: 259
      },
      "15": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\avaliacoes.ts"],
      sourcesContent: ["import { z } from 'zod';\n\n// Schema base para valida\xE7\xE3o de UUID\nconst uuidSchema = z.string().uuid('ID deve ser um UUID v\xE1lido');\n\n// Schema para valida\xE7\xE3o de data\nconst dateSchema = z.string().datetime('Data deve estar no formato ISO 8601');\n\n// Schema para valida\xE7\xE3o de nota (1-5)\nconst notaSchema = z.number()\n  .int('Nota deve ser um n\xFAmero inteiro')\n  .min(1, 'Nota m\xEDnima \xE9 1')\n  .max(5, 'Nota m\xE1xima \xE9 5');\n\n// Schema para valida\xE7\xE3o de coment\xE1rio\nconst comentarioSchema = z.string()\n  .max(1000, 'Coment\xE1rio deve ter no m\xE1ximo 1000 caracteres')\n  .optional();\n\n// Schema para valida\xE7\xE3o de status de avalia\xE7\xE3o\nconst statusAvaliacaoSchema = z.enum(['PENDENTE', 'CONCLUIDA', 'CANCELADA'], {\n  errorMap: () => ({ message: 'Status deve ser PENDENTE, CONCLUIDA ou CANCELADA' })\n});\n\n// Schema para valida\xE7\xE3o de status de per\xEDodo\nconst statusPeriodoSchema = z.enum(['PLANEJADO', 'ATIVO', 'FINALIZADO', 'CANCELADO'], {\n  errorMap: () => ({ message: 'Status deve ser PLANEJADO, ATIVO, FINALIZADO ou CANCELADO' })\n});\n\n// Schema para valida\xE7\xE3o de pagina\xE7\xE3o\nconst paginacaoSchema = z.object({\n  page: z.string()\n    .regex(/^\\d+$/, 'P\xE1gina deve ser um n\xFAmero')\n    .transform(Number)\n    .refine(val => val >= 1, 'P\xE1gina deve ser maior que 0')\n    .optional()\n    .default('1'),\n  limit: z.string()\n    .regex(/^\\d+$/, 'Limite deve ser um n\xFAmero')\n    .transform(Number)\n    .refine(val => val >= 1 && val <= 100, 'Limite deve estar entre 1 e 100')\n    .optional()\n    .default('10')\n});\n\n// Schema para valida\xE7\xE3o de ordena\xE7\xE3o\nconst ordenacaoSchema = z.object({\n  orderBy: z.enum(['nome', 'dataInicio', 'dataFim', 'criadoEm', 'dataAvaliacao', 'nota'], {\n    errorMap: () => ({ message: 'Campo de ordena\xE7\xE3o inv\xE1lido' })\n  }).optional().default('dataAvaliacao'),\n  orderDirection: z.enum(['asc', 'desc'], {\n    errorMap: () => ({ message: 'Dire\xE7\xE3o de ordena\xE7\xE3o deve ser asc ou desc' })\n  }).optional().default('desc')\n});\n\n// SCHEMAS PARA AVALIA\xC7\xD5ES\n\n// Schema para cria\xE7\xE3o de avalia\xE7\xE3o\nexport const criarAvaliacaoSchema = z.object({\n  avaliadoId: uuidSchema,\n  periodoId: uuidSchema,\n  nota: notaSchema,\n  comentario: comentarioSchema,\n}).refine(async (data) => {\n  // Valida\xE7\xE3o customizada ser\xE1 feita no endpoint\n  return true;\n}, {\n  message: 'Dados de avalia\xE7\xE3o inv\xE1lidos'\n});\n\n// Schema para atualiza\xE7\xE3o de avalia\xE7\xE3o\nexport const atualizarAvaliacaoSchema = z.object({\n  nota: notaSchema.optional(),\n  comentario: comentarioSchema,\n  status: statusAvaliacaoSchema.optional(),\n}).refine((data) => {\n  // Pelo menos um campo deve ser fornecido\n  return data.nota !== undefined || data.comentario !== undefined || data.status !== undefined;\n}, {\n  message: 'Pelo menos um campo deve ser fornecido para atualiza\xE7\xE3o',\n  path: ['root']\n});\n\n// Schema para filtros de consulta de avalia\xE7\xF5es\nexport const filtrosAvaliacaoSchema = z.object({\n  periodoId: uuidSchema.optional(),\n  avaliadoId: uuidSchema.optional(),\n  avaliadorId: uuidSchema.optional(),\n  status: statusAvaliacaoSchema.optional(),\n  notaMinima: z.string()\n    .regex(/^[1-5]$/, 'Nota m\xEDnima deve estar entre 1 e 5')\n    .transform(Number)\n    .optional(),\n  notaMaxima: z.string()\n    .regex(/^[1-5]$/, 'Nota m\xE1xima deve estar entre 1 e 5')\n    .transform(Number)\n    .optional(),\n  dataInicio: dateSchema.optional(),\n  dataFim: dateSchema.optional(),\n  setor: z.string().max(100, 'Setor deve ter no m\xE1ximo 100 caracteres').optional(),\n  departamento: z.string().max(100, 'Departamento deve ter no m\xE1ximo 100 caracteres').optional(),\n  cargo: z.string().max(100, 'Cargo deve ter no m\xE1ximo 100 caracteres').optional(),\n  ...paginacaoSchema.shape,\n  ...ordenacaoSchema.shape\n}).refine((data) => {\n  // Validar que nota m\xEDnima n\xE3o seja maior que nota m\xE1xima\n  if (data.notaMinima && data.notaMaxima) {\n    return data.notaMinima <= data.notaMaxima;\n  }\n  return true;\n}, {\n  message: 'Nota m\xEDnima n\xE3o pode ser maior que nota m\xE1xima',\n  path: ['notaMaxima']\n}).refine((data) => {\n  // Validar que data in\xEDcio n\xE3o seja posterior \xE0 data fim\n  if (data.dataInicio && data.dataFim) {\n    return new Date(data.dataInicio) <= new Date(data.dataFim);\n  }\n  return true;\n}, {\n  message: 'Data de in\xEDcio n\xE3o pode ser posterior \xE0 data de fim',\n  path: ['dataFim']\n});\n\n// SCHEMAS PARA PER\xCDODOS DE AVALIA\xC7\xC3O\n\n// Schema para cria\xE7\xE3o de per\xEDodo\nexport const criarPeriodoSchema = z.object({\n  nome: z.string()\n    .min(1, 'Nome \xE9 obrigat\xF3rio')\n    .max(100, 'Nome deve ter no m\xE1ximo 100 caracteres')\n    .trim(),\n  descricao: z.string()\n    .max(500, 'Descri\xE7\xE3o deve ter no m\xE1ximo 500 caracteres')\n    .trim()\n    .optional(),\n  dataInicio: dateSchema,\n  dataFim: dateSchema,\n  status: statusPeriodoSchema.optional().default('PLANEJADO'),\n}).refine((data) => {\n  const inicio = new Date(data.dataInicio);\n  const fim = new Date(data.dataFim);\n  const agora = new Date();\n  \n  // Data de in\xEDcio deve ser anterior \xE0 data de fim\n  if (inicio >= fim) {\n    return false;\n  }\n  \n  // Se status for ATIVO, per\xEDodo deve estar dentro das datas\n  if (data.status === 'ATIVO') {\n    return agora >= inicio && agora <= fim;\n  }\n  \n  return true;\n}, {\n  message: 'Datas do per\xEDodo s\xE3o inv\xE1lidas ou incompat\xEDveis com o status',\n  path: ['dataFim']\n});\n\n// Schema para atualiza\xE7\xE3o de per\xEDodo\nexport const atualizarPeriodoSchema = z.object({\n  nome: z.string()\n    .min(1, 'Nome \xE9 obrigat\xF3rio')\n    .max(100, 'Nome deve ter no m\xE1ximo 100 caracteres')\n    .trim()\n    .optional(),\n  descricao: z.string()\n    .max(500, 'Descri\xE7\xE3o deve ter no m\xE1ximo 500 caracteres')\n    .trim()\n    .optional(),\n  dataInicio: dateSchema.optional(),\n  dataFim: dateSchema.optional(),\n  status: statusPeriodoSchema.optional(),\n}).refine((data) => {\n  // Se ambas as datas forem fornecidas, validar\n  if (data.dataInicio && data.dataFim) {\n    const inicio = new Date(data.dataInicio);\n    const fim = new Date(data.dataFim);\n    return inicio < fim;\n  }\n  return true;\n}, {\n  message: 'Data de in\xEDcio deve ser anterior \xE0 data de fim',\n  path: ['dataFim']\n}).refine((data) => {\n  // Pelo menos um campo deve ser fornecido\n  return Object.values(data).some(value => value !== undefined);\n}, {\n  message: 'Pelo menos um campo deve ser fornecido para atualiza\xE7\xE3o',\n  path: ['root']\n});\n\n// Schema para filtros de consulta de per\xEDodos\nexport const filtrosPeriodoSchema = z.object({\n  status: statusPeriodoSchema.optional(),\n  dataInicio: dateSchema.optional(),\n  dataFim: dateSchema.optional(),\n  criadoPor: uuidSchema.optional(),\n  nome: z.string().max(100, 'Nome deve ter no m\xE1ximo 100 caracteres').optional(),\n  ...paginacaoSchema.shape,\n  ...ordenacaoSchema.shape\n}).refine((data) => {\n  // Validar que data in\xEDcio n\xE3o seja posterior \xE0 data fim\n  if (data.dataInicio && data.dataFim) {\n    return new Date(data.dataInicio) <= new Date(data.dataFim);\n  }\n  return true;\n}, {\n  message: 'Data de in\xEDcio n\xE3o pode ser posterior \xE0 data de fim',\n  path: ['dataFim']\n});\n\n// SCHEMAS PARA RELAT\xD3RIOS\n\n// Schema para filtros de relat\xF3rio\nexport const filtrosRelatorioSchema = z.object({\n  periodoId: uuidSchema.optional(),\n  avaliadoId: uuidSchema.optional(),\n  avaliadorId: uuidSchema.optional(),\n  setor: z.string().max(100, 'Setor deve ter no m\xE1ximo 100 caracteres').optional(),\n  departamento: z.string().max(100, 'Departamento deve ter no m\xE1ximo 100 caracteres').optional(),\n  cargo: z.string().max(100, 'Cargo deve ter no m\xE1ximo 100 caracteres').optional(),\n  dataInicio: dateSchema.optional(),\n  dataFim: dateSchema.optional(),\n  incluirDetalhes: z.string()\n    .transform(val => val === 'true')\n    .optional()\n    .default('false'),\n  formato: z.enum(['resumo', 'detalhado', 'estatisticas'], {\n    errorMap: () => ({ message: 'Formato deve ser resumo, detalhado ou estatisticas' })\n  }).optional().default('resumo'),\n}).refine((data) => {\n  // Validar que data in\xEDcio n\xE3o seja posterior \xE0 data fim\n  if (data.dataInicio && data.dataFim) {\n    return new Date(data.dataInicio) <= new Date(data.dataFim);\n  }\n  return true;\n}, {\n  message: 'Data de in\xEDcio n\xE3o pode ser posterior \xE0 data de fim',\n  path: ['dataFim']\n});\n\n// SCHEMAS PARA PAR\xC2METROS DE ROTA\n\n// Schema para valida\xE7\xE3o de ID em par\xE2metros de rota\nexport const idParamSchema = z.object({\n  id: uuidSchema\n});\n\n// TIPOS TYPESCRIPT DERIVADOS DOS SCHEMAS\n\nexport type CriarAvaliacaoInput = z.infer<typeof criarAvaliacaoSchema>;\nexport type AtualizarAvaliacaoInput = z.infer<typeof atualizarAvaliacaoSchema>;\nexport type FiltrosAvaliacaoInput = z.infer<typeof filtrosAvaliacaoSchema>;\n\nexport type CriarPeriodoInput = z.infer<typeof criarPeriodoSchema>;\nexport type AtualizarPeriodoInput = z.infer<typeof atualizarPeriodoSchema>;\nexport type FiltrosPeriodoInput = z.infer<typeof filtrosPeriodoSchema>;\n\nexport type FiltrosRelatorioInput = z.infer<typeof filtrosRelatorioSchema>;\nexport type IdParamInput = z.infer<typeof idParamSchema>;\n\n// FUN\xC7\xD5ES UTILIT\xC1RIAS PARA VALIDA\xC7\xC3O\n\n/**\n * Valida dados de entrada e retorna resultado tipado\n * @param schema Schema Zod para valida\xE7\xE3o\n * @param data Dados a serem validados\n * @returns Resultado da valida\xE7\xE3o\n */\nexport function validarDados<T>(schema: z.ZodSchema<T>, data: unknown) {\n  try {\n    const resultado = schema.parse(data);\n    return { sucesso: true, dados: resultado, erro: null };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return {\n        sucesso: false,\n        dados: null,\n        erro: {\n          message: 'Dados inv\xE1lidos',\n          details: error.errors.map(err => ({\n            campo: err.path.join('.'),\n            mensagem: err.message,\n            valorRecebido: err.received\n          }))\n        }\n      };\n    }\n    return {\n      sucesso: false,\n      dados: null,\n      erro: { message: 'Erro de valida\xE7\xE3o desconhecido' }\n    };\n  }\n}\n\n/**\n * Middleware para valida\xE7\xE3o autom\xE1tica de query parameters\n * @param schema Schema para valida\xE7\xE3o\n * @param searchParams URLSearchParams da requisi\xE7\xE3o\n * @returns Dados validados ou erro\n */\nexport function validarQueryParams<T>(schema: z.ZodSchema<T>, searchParams: URLSearchParams) {\n  const params = Object.fromEntries(searchParams);\n  return validarDados(schema, params);\n}\n\n/**\n * Middleware para valida\xE7\xE3o autom\xE1tica de body da requisi\xE7\xE3o\n * @param schema Schema para valida\xE7\xE3o\n * @param body Body da requisi\xE7\xE3o j\xE1 parseado\n * @returns Dados validados ou erro\n */\nexport function validarBody<T>(schema: z.ZodSchema<T>, body: unknown) {\n  return validarDados(schema, body);\n}"],
      names: ["atualizarAvaliacaoSchema", "atualizarPeriodoSchema", "criarAvaliacaoSchema", "criarPeriodoSchema", "filtrosAvaliacaoSchema", "filtrosPeriodoSchema", "filtrosRelatorioSchema", "idParamSchema", "validarBody", "validarDados", "validarQueryParams", "uuidSchema", "z", "string", "uuid", "dateSchema", "datetime", "notaSchema", "number", "int", "min", "max", "comentarioSchema", "optional", "statusAvaliacaoSchema", "enum", "errorMap", "message", "statusPeriodoSchema", "paginacaoSchema", "object", "page", "regex", "transform", "Number", "refine", "val", "default", "limit", "ordenacaoSchema", "orderBy", "orderDirection", "avaliadoId", "periodoId", "nota", "comentario", "data", "status", "undefined", "path", "avaliadorId", "notaMinima", "notaMaxima", "dataInicio", "dataFim", "setor", "departamento", "cargo", "shape", "Date", "nome", "trim", "descricao", "inicio", "fim", "agora", "Object", "values", "some", "value", "criadoPor", "incluirDetalhes", "formato", "id", "schema", "resultado", "parse", "sucesso", "dados", "erro", "error", "ZodError", "details", "errors", "map", "err", "campo", "join", "mensagem", "valorRecebido", "received", "searchParams", "params", "fromEntries", "body"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e53629fb8dcd60e0ec708b3d58c2004b1ff5d3ea"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ha0qqm5wt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ha0qqm5wt();
cov_ha0qqm5wt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[0]++;
  cov_ha0qqm5wt().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_ha0qqm5wt().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_ha0qqm5wt().s[3]++;
_export(exports, {
  get atualizarAvaliacaoSchema() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[1]++;
    cov_ha0qqm5wt().s[4]++;
    return atualizarAvaliacaoSchema;
  },
  get atualizarPeriodoSchema() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[2]++;
    cov_ha0qqm5wt().s[5]++;
    return atualizarPeriodoSchema;
  },
  get criarAvaliacaoSchema() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[3]++;
    cov_ha0qqm5wt().s[6]++;
    return criarAvaliacaoSchema;
  },
  get criarPeriodoSchema() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[4]++;
    cov_ha0qqm5wt().s[7]++;
    return criarPeriodoSchema;
  },
  get filtrosAvaliacaoSchema() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[5]++;
    cov_ha0qqm5wt().s[8]++;
    return filtrosAvaliacaoSchema;
  },
  get filtrosPeriodoSchema() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[6]++;
    cov_ha0qqm5wt().s[9]++;
    return filtrosPeriodoSchema;
  },
  get filtrosRelatorioSchema() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[7]++;
    cov_ha0qqm5wt().s[10]++;
    return filtrosRelatorioSchema;
  },
  get idParamSchema() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[8]++;
    cov_ha0qqm5wt().s[11]++;
    return idParamSchema;
  },
  get validarBody() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[9]++;
    cov_ha0qqm5wt().s[12]++;
    return validarBody;
  },
  get validarDados() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[10]++;
    cov_ha0qqm5wt().s[13]++;
    return validarDados;
  },
  get validarQueryParams() {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[11]++;
    cov_ha0qqm5wt().s[14]++;
    return validarQueryParams;
  }
});
const _zod =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[15]++, require("zod"));
// Schema base para validação de UUID
const uuidSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[16]++, _zod.z.string().uuid('ID deve ser um UUID válido'));
// Schema para validação de data
const dateSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[17]++, _zod.z.string().datetime('Data deve estar no formato ISO 8601'));
// Schema para validação de nota (1-5)
const notaSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[18]++, _zod.z.number().int('Nota deve ser um número inteiro').min(1, 'Nota mínima é 1').max(5, 'Nota máxima é 5'));
// Schema para validação de comentário
const comentarioSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[19]++, _zod.z.string().max(1000, 'Comentário deve ter no máximo 1000 caracteres').optional());
// Schema para validação de status de avaliação
const statusAvaliacaoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[20]++, _zod.z.enum(['PENDENTE', 'CONCLUIDA', 'CANCELADA'], {
  errorMap: () => {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[12]++;
    cov_ha0qqm5wt().s[21]++;
    return {
      message: 'Status deve ser PENDENTE, CONCLUIDA ou CANCELADA'
    };
  }
}));
// Schema para validação de status de período
const statusPeriodoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[22]++, _zod.z.enum(['PLANEJADO', 'ATIVO', 'FINALIZADO', 'CANCELADO'], {
  errorMap: () => {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[13]++;
    cov_ha0qqm5wt().s[23]++;
    return {
      message: 'Status deve ser PLANEJADO, ATIVO, FINALIZADO ou CANCELADO'
    };
  }
}));
// Schema para validação de paginação
const paginacaoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[24]++, _zod.z.object({
  page: _zod.z.string().regex(/^\d+$/, 'Página deve ser um número').transform(Number).refine(val => {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[14]++;
    cov_ha0qqm5wt().s[25]++;
    return val >= 1;
  }, 'Página deve ser maior que 0').optional().default('1'),
  limit: _zod.z.string().regex(/^\d+$/, 'Limite deve ser um número').transform(Number).refine(val => {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[15]++;
    cov_ha0qqm5wt().s[26]++;
    return /* istanbul ignore next */(cov_ha0qqm5wt().b[0][0]++, val >= 1) &&
    /* istanbul ignore next */
    (cov_ha0qqm5wt().b[0][1]++, val <= 100);
  }, 'Limite deve estar entre 1 e 100').optional().default('10')
}));
// Schema para validação de ordenação
const ordenacaoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[27]++, _zod.z.object({
  orderBy: _zod.z.enum(['nome', 'dataInicio', 'dataFim', 'criadoEm', 'dataAvaliacao', 'nota'], {
    errorMap: () => {
      /* istanbul ignore next */
      cov_ha0qqm5wt().f[16]++;
      cov_ha0qqm5wt().s[28]++;
      return {
        message: 'Campo de ordenação inválido'
      };
    }
  }).optional().default('dataAvaliacao'),
  orderDirection: _zod.z.enum(['asc', 'desc'], {
    errorMap: () => {
      /* istanbul ignore next */
      cov_ha0qqm5wt().f[17]++;
      cov_ha0qqm5wt().s[29]++;
      return {
        message: 'Direção de ordenação deve ser asc ou desc'
      };
    }
  }).optional().default('desc')
}));
const criarAvaliacaoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[30]++, _zod.z.object({
  avaliadoId: uuidSchema,
  periodoId: uuidSchema,
  nota: notaSchema,
  comentario: comentarioSchema
}).refine(async data => {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[18]++;
  cov_ha0qqm5wt().s[31]++;
  // Validação customizada será feita no endpoint
  return true;
}, {
  message: 'Dados de avaliação inválidos'
}));
const atualizarAvaliacaoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[32]++, _zod.z.object({
  nota: notaSchema.optional(),
  comentario: comentarioSchema,
  status: statusAvaliacaoSchema.optional()
}).refine(data => {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[19]++;
  cov_ha0qqm5wt().s[33]++;
  // Pelo menos um campo deve ser fornecido
  return /* istanbul ignore next */(cov_ha0qqm5wt().b[1][0]++, data.nota !== undefined) ||
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[1][1]++, data.comentario !== undefined) ||
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[1][2]++, data.status !== undefined);
}, {
  message: 'Pelo menos um campo deve ser fornecido para atualização',
  path: ['root']
}));
const filtrosAvaliacaoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[34]++, _zod.z.object({
  periodoId: uuidSchema.optional(),
  avaliadoId: uuidSchema.optional(),
  avaliadorId: uuidSchema.optional(),
  status: statusAvaliacaoSchema.optional(),
  notaMinima: _zod.z.string().regex(/^[1-5]$/, 'Nota mínima deve estar entre 1 e 5').transform(Number).optional(),
  notaMaxima: _zod.z.string().regex(/^[1-5]$/, 'Nota máxima deve estar entre 1 e 5').transform(Number).optional(),
  dataInicio: dateSchema.optional(),
  dataFim: dateSchema.optional(),
  setor: _zod.z.string().max(100, 'Setor deve ter no máximo 100 caracteres').optional(),
  departamento: _zod.z.string().max(100, 'Departamento deve ter no máximo 100 caracteres').optional(),
  cargo: _zod.z.string().max(100, 'Cargo deve ter no máximo 100 caracteres').optional(),
  ...paginacaoSchema.shape,
  ...ordenacaoSchema.shape
}).refine(data => {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[20]++;
  cov_ha0qqm5wt().s[35]++;
  // Validar que nota mínima não seja maior que nota máxima
  if (
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[3][0]++, data.notaMinima) &&
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[3][1]++, data.notaMaxima)) {
    /* istanbul ignore next */
    cov_ha0qqm5wt().b[2][0]++;
    cov_ha0qqm5wt().s[36]++;
    return data.notaMinima <= data.notaMaxima;
  } else
  /* istanbul ignore next */
  {
    cov_ha0qqm5wt().b[2][1]++;
  }
  cov_ha0qqm5wt().s[37]++;
  return true;
}, {
  message: 'Nota mínima não pode ser maior que nota máxima',
  path: ['notaMaxima']
}).refine(data => {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[21]++;
  cov_ha0qqm5wt().s[38]++;
  // Validar que data início não seja posterior à data fim
  if (
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[5][0]++, data.dataInicio) &&
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[5][1]++, data.dataFim)) {
    /* istanbul ignore next */
    cov_ha0qqm5wt().b[4][0]++;
    cov_ha0qqm5wt().s[39]++;
    return new Date(data.dataInicio) <= new Date(data.dataFim);
  } else
  /* istanbul ignore next */
  {
    cov_ha0qqm5wt().b[4][1]++;
  }
  cov_ha0qqm5wt().s[40]++;
  return true;
}, {
  message: 'Data de início não pode ser posterior à data de fim',
  path: ['dataFim']
}));
const criarPeriodoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[41]++, _zod.z.object({
  nome: _zod.z.string().min(1, 'Nome é obrigatório').max(100, 'Nome deve ter no máximo 100 caracteres').trim(),
  descricao: _zod.z.string().max(500, 'Descrição deve ter no máximo 500 caracteres').trim().optional(),
  dataInicio: dateSchema,
  dataFim: dateSchema,
  status: statusPeriodoSchema.optional().default('PLANEJADO')
}).refine(data => {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[22]++;
  const inicio =
  /* istanbul ignore next */
  (cov_ha0qqm5wt().s[42]++, new Date(data.dataInicio));
  const fim =
  /* istanbul ignore next */
  (cov_ha0qqm5wt().s[43]++, new Date(data.dataFim));
  const agora =
  /* istanbul ignore next */
  (cov_ha0qqm5wt().s[44]++, new Date());
  // Data de início deve ser anterior à data de fim
  /* istanbul ignore next */
  cov_ha0qqm5wt().s[45]++;
  if (inicio >= fim) {
    /* istanbul ignore next */
    cov_ha0qqm5wt().b[6][0]++;
    cov_ha0qqm5wt().s[46]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_ha0qqm5wt().b[6][1]++;
  }
  // Se status for ATIVO, período deve estar dentro das datas
  cov_ha0qqm5wt().s[47]++;
  if (data.status === 'ATIVO') {
    /* istanbul ignore next */
    cov_ha0qqm5wt().b[7][0]++;
    cov_ha0qqm5wt().s[48]++;
    return /* istanbul ignore next */(cov_ha0qqm5wt().b[8][0]++, agora >= inicio) &&
    /* istanbul ignore next */
    (cov_ha0qqm5wt().b[8][1]++, agora <= fim);
  } else
  /* istanbul ignore next */
  {
    cov_ha0qqm5wt().b[7][1]++;
  }
  cov_ha0qqm5wt().s[49]++;
  return true;
}, {
  message: 'Datas do período são inválidas ou incompatíveis com o status',
  path: ['dataFim']
}));
const atualizarPeriodoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[50]++, _zod.z.object({
  nome: _zod.z.string().min(1, 'Nome é obrigatório').max(100, 'Nome deve ter no máximo 100 caracteres').trim().optional(),
  descricao: _zod.z.string().max(500, 'Descrição deve ter no máximo 500 caracteres').trim().optional(),
  dataInicio: dateSchema.optional(),
  dataFim: dateSchema.optional(),
  status: statusPeriodoSchema.optional()
}).refine(data => {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[23]++;
  cov_ha0qqm5wt().s[51]++;
  // Se ambas as datas forem fornecidas, validar
  if (
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[10][0]++, data.dataInicio) &&
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[10][1]++, data.dataFim)) {
    /* istanbul ignore next */
    cov_ha0qqm5wt().b[9][0]++;
    const inicio =
    /* istanbul ignore next */
    (cov_ha0qqm5wt().s[52]++, new Date(data.dataInicio));
    const fim =
    /* istanbul ignore next */
    (cov_ha0qqm5wt().s[53]++, new Date(data.dataFim));
    /* istanbul ignore next */
    cov_ha0qqm5wt().s[54]++;
    return inicio < fim;
  } else
  /* istanbul ignore next */
  {
    cov_ha0qqm5wt().b[9][1]++;
  }
  cov_ha0qqm5wt().s[55]++;
  return true;
}, {
  message: 'Data de início deve ser anterior à data de fim',
  path: ['dataFim']
}).refine(data => {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[24]++;
  cov_ha0qqm5wt().s[56]++;
  // Pelo menos um campo deve ser fornecido
  return Object.values(data).some(value => {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[25]++;
    cov_ha0qqm5wt().s[57]++;
    return value !== undefined;
  });
}, {
  message: 'Pelo menos um campo deve ser fornecido para atualização',
  path: ['root']
}));
const filtrosPeriodoSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[58]++, _zod.z.object({
  status: statusPeriodoSchema.optional(),
  dataInicio: dateSchema.optional(),
  dataFim: dateSchema.optional(),
  criadoPor: uuidSchema.optional(),
  nome: _zod.z.string().max(100, 'Nome deve ter no máximo 100 caracteres').optional(),
  ...paginacaoSchema.shape,
  ...ordenacaoSchema.shape
}).refine(data => {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[26]++;
  cov_ha0qqm5wt().s[59]++;
  // Validar que data início não seja posterior à data fim
  if (
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[12][0]++, data.dataInicio) &&
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[12][1]++, data.dataFim)) {
    /* istanbul ignore next */
    cov_ha0qqm5wt().b[11][0]++;
    cov_ha0qqm5wt().s[60]++;
    return new Date(data.dataInicio) <= new Date(data.dataFim);
  } else
  /* istanbul ignore next */
  {
    cov_ha0qqm5wt().b[11][1]++;
  }
  cov_ha0qqm5wt().s[61]++;
  return true;
}, {
  message: 'Data de início não pode ser posterior à data de fim',
  path: ['dataFim']
}));
const filtrosRelatorioSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[62]++, _zod.z.object({
  periodoId: uuidSchema.optional(),
  avaliadoId: uuidSchema.optional(),
  avaliadorId: uuidSchema.optional(),
  setor: _zod.z.string().max(100, 'Setor deve ter no máximo 100 caracteres').optional(),
  departamento: _zod.z.string().max(100, 'Departamento deve ter no máximo 100 caracteres').optional(),
  cargo: _zod.z.string().max(100, 'Cargo deve ter no máximo 100 caracteres').optional(),
  dataInicio: dateSchema.optional(),
  dataFim: dateSchema.optional(),
  incluirDetalhes: _zod.z.string().transform(val => {
    /* istanbul ignore next */
    cov_ha0qqm5wt().f[27]++;
    cov_ha0qqm5wt().s[63]++;
    return val === 'true';
  }).optional().default('false'),
  formato: _zod.z.enum(['resumo', 'detalhado', 'estatisticas'], {
    errorMap: () => {
      /* istanbul ignore next */
      cov_ha0qqm5wt().f[28]++;
      cov_ha0qqm5wt().s[64]++;
      return {
        message: 'Formato deve ser resumo, detalhado ou estatisticas'
      };
    }
  }).optional().default('resumo')
}).refine(data => {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[29]++;
  cov_ha0qqm5wt().s[65]++;
  // Validar que data início não seja posterior à data fim
  if (
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[14][0]++, data.dataInicio) &&
  /* istanbul ignore next */
  (cov_ha0qqm5wt().b[14][1]++, data.dataFim)) {
    /* istanbul ignore next */
    cov_ha0qqm5wt().b[13][0]++;
    cov_ha0qqm5wt().s[66]++;
    return new Date(data.dataInicio) <= new Date(data.dataFim);
  } else
  /* istanbul ignore next */
  {
    cov_ha0qqm5wt().b[13][1]++;
  }
  cov_ha0qqm5wt().s[67]++;
  return true;
}, {
  message: 'Data de início não pode ser posterior à data de fim',
  path: ['dataFim']
}));
const idParamSchema =
/* istanbul ignore next */
(cov_ha0qqm5wt().s[68]++, _zod.z.object({
  id: uuidSchema
}));
function validarDados(schema, data) {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[30]++;
  cov_ha0qqm5wt().s[69]++;
  try {
    const resultado =
    /* istanbul ignore next */
    (cov_ha0qqm5wt().s[70]++, schema.parse(data));
    /* istanbul ignore next */
    cov_ha0qqm5wt().s[71]++;
    return {
      sucesso: true,
      dados: resultado,
      erro: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_ha0qqm5wt().s[72]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_ha0qqm5wt().b[15][0]++;
      cov_ha0qqm5wt().s[73]++;
      return {
        sucesso: false,
        dados: null,
        erro: {
          message: 'Dados inválidos',
          details: error.errors.map(err => {
            /* istanbul ignore next */
            cov_ha0qqm5wt().f[31]++;
            cov_ha0qqm5wt().s[74]++;
            return {
              campo: err.path.join('.'),
              mensagem: err.message,
              valorRecebido: err.received
            };
          })
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_ha0qqm5wt().b[15][1]++;
    }
    cov_ha0qqm5wt().s[75]++;
    return {
      sucesso: false,
      dados: null,
      erro: {
        message: 'Erro de validação desconhecido'
      }
    };
  }
}
function validarQueryParams(schema, searchParams) {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[32]++;
  const params =
  /* istanbul ignore next */
  (cov_ha0qqm5wt().s[76]++, Object.fromEntries(searchParams));
  /* istanbul ignore next */
  cov_ha0qqm5wt().s[77]++;
  return validarDados(schema, params);
}
function validarBody(schema, body) {
  /* istanbul ignore next */
  cov_ha0qqm5wt().f[33]++;
  cov_ha0qqm5wt().s[78]++;
  return validarDados(schema, body);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,