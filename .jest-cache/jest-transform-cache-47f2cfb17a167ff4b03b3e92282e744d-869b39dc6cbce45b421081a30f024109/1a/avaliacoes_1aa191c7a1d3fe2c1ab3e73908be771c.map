{"version":3,"names":["atualizarAvaliacaoSchema","cov_ha0qqm5wt","f","s","atualizarPeriodoSchema","criarAvaliacaoSchema","criarPeriodoSchema","filtrosAvaliacaoSchema","filtrosPeriodoSchema","filtrosRelatorioSchema","idParamSchema","validarBody","validarDados","validarQueryParams","uuidSchema","_zod","z","string","uuid","dateSchema","datetime","notaSchema","number","int","min","max","comentarioSchema","optional","statusAvaliacaoSchema","enum","errorMap","message","statusPeriodoSchema","paginacaoSchema","object","page","regex","transform","Number","refine","val","default","limit","b","ordenacaoSchema","orderBy","orderDirection","avaliadoId","periodoId","nota","comentario","data","status","undefined","path","avaliadorId","notaMinima","notaMaxima","dataInicio","dataFim","setor","departamento","cargo","shape","Date","nome","trim","descricao","inicio","fim","agora","Object","values","some","value","criadoPor","incluirDetalhes","formato","id","schema","resultado","parse","sucesso","dados","erro","error","ZodError","details","errors","map","err","campo","join","mensagem","valorRecebido","received","searchParams","params","fromEntries","body"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\validations\\avaliacoes.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Schema base para validação de UUID\nconst uuidSchema = z.string().uuid('ID deve ser um UUID válido');\n\n// Schema para validação de data\nconst dateSchema = z.string().datetime('Data deve estar no formato ISO 8601');\n\n// Schema para validação de nota (1-5)\nconst notaSchema = z.number()\n  .int('Nota deve ser um número inteiro')\n  .min(1, 'Nota mínima é 1')\n  .max(5, 'Nota máxima é 5');\n\n// Schema para validação de comentário\nconst comentarioSchema = z.string()\n  .max(1000, 'Comentário deve ter no máximo 1000 caracteres')\n  .optional();\n\n// Schema para validação de status de avaliação\nconst statusAvaliacaoSchema = z.enum(['PENDENTE', 'CONCLUIDA', 'CANCELADA'], {\n  errorMap: () => ({ message: 'Status deve ser PENDENTE, CONCLUIDA ou CANCELADA' })\n});\n\n// Schema para validação de status de período\nconst statusPeriodoSchema = z.enum(['PLANEJADO', 'ATIVO', 'FINALIZADO', 'CANCELADO'], {\n  errorMap: () => ({ message: 'Status deve ser PLANEJADO, ATIVO, FINALIZADO ou CANCELADO' })\n});\n\n// Schema para validação de paginação\nconst paginacaoSchema = z.object({\n  page: z.string()\n    .regex(/^\\d+$/, 'Página deve ser um número')\n    .transform(Number)\n    .refine(val => val >= 1, 'Página deve ser maior que 0')\n    .optional()\n    .default('1'),\n  limit: z.string()\n    .regex(/^\\d+$/, 'Limite deve ser um número')\n    .transform(Number)\n    .refine(val => val >= 1 && val <= 100, 'Limite deve estar entre 1 e 100')\n    .optional()\n    .default('10')\n});\n\n// Schema para validação de ordenação\nconst ordenacaoSchema = z.object({\n  orderBy: z.enum(['nome', 'dataInicio', 'dataFim', 'criadoEm', 'dataAvaliacao', 'nota'], {\n    errorMap: () => ({ message: 'Campo de ordenação inválido' })\n  }).optional().default('dataAvaliacao'),\n  orderDirection: z.enum(['asc', 'desc'], {\n    errorMap: () => ({ message: 'Direção de ordenação deve ser asc ou desc' })\n  }).optional().default('desc')\n});\n\n// SCHEMAS PARA AVALIAÇÕES\n\n// Schema para criação de avaliação\nexport const criarAvaliacaoSchema = z.object({\n  avaliadoId: uuidSchema,\n  periodoId: uuidSchema,\n  nota: notaSchema,\n  comentario: comentarioSchema,\n}).refine(async (data) => {\n  // Validação customizada será feita no endpoint\n  return true;\n}, {\n  message: 'Dados de avaliação inválidos'\n});\n\n// Schema para atualização de avaliação\nexport const atualizarAvaliacaoSchema = z.object({\n  nota: notaSchema.optional(),\n  comentario: comentarioSchema,\n  status: statusAvaliacaoSchema.optional(),\n}).refine((data) => {\n  // Pelo menos um campo deve ser fornecido\n  return data.nota !== undefined || data.comentario !== undefined || data.status !== undefined;\n}, {\n  message: 'Pelo menos um campo deve ser fornecido para atualização',\n  path: ['root']\n});\n\n// Schema para filtros de consulta de avaliações\nexport const filtrosAvaliacaoSchema = z.object({\n  periodoId: uuidSchema.optional(),\n  avaliadoId: uuidSchema.optional(),\n  avaliadorId: uuidSchema.optional(),\n  status: statusAvaliacaoSchema.optional(),\n  notaMinima: z.string()\n    .regex(/^[1-5]$/, 'Nota mínima deve estar entre 1 e 5')\n    .transform(Number)\n    .optional(),\n  notaMaxima: z.string()\n    .regex(/^[1-5]$/, 'Nota máxima deve estar entre 1 e 5')\n    .transform(Number)\n    .optional(),\n  dataInicio: dateSchema.optional(),\n  dataFim: dateSchema.optional(),\n  setor: z.string().max(100, 'Setor deve ter no máximo 100 caracteres').optional(),\n  departamento: z.string().max(100, 'Departamento deve ter no máximo 100 caracteres').optional(),\n  cargo: z.string().max(100, 'Cargo deve ter no máximo 100 caracteres').optional(),\n  ...paginacaoSchema.shape,\n  ...ordenacaoSchema.shape\n}).refine((data) => {\n  // Validar que nota mínima não seja maior que nota máxima\n  if (data.notaMinima && data.notaMaxima) {\n    return data.notaMinima <= data.notaMaxima;\n  }\n  return true;\n}, {\n  message: 'Nota mínima não pode ser maior que nota máxima',\n  path: ['notaMaxima']\n}).refine((data) => {\n  // Validar que data início não seja posterior à data fim\n  if (data.dataInicio && data.dataFim) {\n    return new Date(data.dataInicio) <= new Date(data.dataFim);\n  }\n  return true;\n}, {\n  message: 'Data de início não pode ser posterior à data de fim',\n  path: ['dataFim']\n});\n\n// SCHEMAS PARA PERÍODOS DE AVALIAÇÃO\n\n// Schema para criação de período\nexport const criarPeriodoSchema = z.object({\n  nome: z.string()\n    .min(1, 'Nome é obrigatório')\n    .max(100, 'Nome deve ter no máximo 100 caracteres')\n    .trim(),\n  descricao: z.string()\n    .max(500, 'Descrição deve ter no máximo 500 caracteres')\n    .trim()\n    .optional(),\n  dataInicio: dateSchema,\n  dataFim: dateSchema,\n  status: statusPeriodoSchema.optional().default('PLANEJADO'),\n}).refine((data) => {\n  const inicio = new Date(data.dataInicio);\n  const fim = new Date(data.dataFim);\n  const agora = new Date();\n  \n  // Data de início deve ser anterior à data de fim\n  if (inicio >= fim) {\n    return false;\n  }\n  \n  // Se status for ATIVO, período deve estar dentro das datas\n  if (data.status === 'ATIVO') {\n    return agora >= inicio && agora <= fim;\n  }\n  \n  return true;\n}, {\n  message: 'Datas do período são inválidas ou incompatíveis com o status',\n  path: ['dataFim']\n});\n\n// Schema para atualização de período\nexport const atualizarPeriodoSchema = z.object({\n  nome: z.string()\n    .min(1, 'Nome é obrigatório')\n    .max(100, 'Nome deve ter no máximo 100 caracteres')\n    .trim()\n    .optional(),\n  descricao: z.string()\n    .max(500, 'Descrição deve ter no máximo 500 caracteres')\n    .trim()\n    .optional(),\n  dataInicio: dateSchema.optional(),\n  dataFim: dateSchema.optional(),\n  status: statusPeriodoSchema.optional(),\n}).refine((data) => {\n  // Se ambas as datas forem fornecidas, validar\n  if (data.dataInicio && data.dataFim) {\n    const inicio = new Date(data.dataInicio);\n    const fim = new Date(data.dataFim);\n    return inicio < fim;\n  }\n  return true;\n}, {\n  message: 'Data de início deve ser anterior à data de fim',\n  path: ['dataFim']\n}).refine((data) => {\n  // Pelo menos um campo deve ser fornecido\n  return Object.values(data).some(value => value !== undefined);\n}, {\n  message: 'Pelo menos um campo deve ser fornecido para atualização',\n  path: ['root']\n});\n\n// Schema para filtros de consulta de períodos\nexport const filtrosPeriodoSchema = z.object({\n  status: statusPeriodoSchema.optional(),\n  dataInicio: dateSchema.optional(),\n  dataFim: dateSchema.optional(),\n  criadoPor: uuidSchema.optional(),\n  nome: z.string().max(100, 'Nome deve ter no máximo 100 caracteres').optional(),\n  ...paginacaoSchema.shape,\n  ...ordenacaoSchema.shape\n}).refine((data) => {\n  // Validar que data início não seja posterior à data fim\n  if (data.dataInicio && data.dataFim) {\n    return new Date(data.dataInicio) <= new Date(data.dataFim);\n  }\n  return true;\n}, {\n  message: 'Data de início não pode ser posterior à data de fim',\n  path: ['dataFim']\n});\n\n// SCHEMAS PARA RELATÓRIOS\n\n// Schema para filtros de relatório\nexport const filtrosRelatorioSchema = z.object({\n  periodoId: uuidSchema.optional(),\n  avaliadoId: uuidSchema.optional(),\n  avaliadorId: uuidSchema.optional(),\n  setor: z.string().max(100, 'Setor deve ter no máximo 100 caracteres').optional(),\n  departamento: z.string().max(100, 'Departamento deve ter no máximo 100 caracteres').optional(),\n  cargo: z.string().max(100, 'Cargo deve ter no máximo 100 caracteres').optional(),\n  dataInicio: dateSchema.optional(),\n  dataFim: dateSchema.optional(),\n  incluirDetalhes: z.string()\n    .transform(val => val === 'true')\n    .optional()\n    .default('false'),\n  formato: z.enum(['resumo', 'detalhado', 'estatisticas'], {\n    errorMap: () => ({ message: 'Formato deve ser resumo, detalhado ou estatisticas' })\n  }).optional().default('resumo'),\n}).refine((data) => {\n  // Validar que data início não seja posterior à data fim\n  if (data.dataInicio && data.dataFim) {\n    return new Date(data.dataInicio) <= new Date(data.dataFim);\n  }\n  return true;\n}, {\n  message: 'Data de início não pode ser posterior à data de fim',\n  path: ['dataFim']\n});\n\n// SCHEMAS PARA PARÂMETROS DE ROTA\n\n// Schema para validação de ID em parâmetros de rota\nexport const idParamSchema = z.object({\n  id: uuidSchema\n});\n\n// TIPOS TYPESCRIPT DERIVADOS DOS SCHEMAS\n\nexport type CriarAvaliacaoInput = z.infer<typeof criarAvaliacaoSchema>;\nexport type AtualizarAvaliacaoInput = z.infer<typeof atualizarAvaliacaoSchema>;\nexport type FiltrosAvaliacaoInput = z.infer<typeof filtrosAvaliacaoSchema>;\n\nexport type CriarPeriodoInput = z.infer<typeof criarPeriodoSchema>;\nexport type AtualizarPeriodoInput = z.infer<typeof atualizarPeriodoSchema>;\nexport type FiltrosPeriodoInput = z.infer<typeof filtrosPeriodoSchema>;\n\nexport type FiltrosRelatorioInput = z.infer<typeof filtrosRelatorioSchema>;\nexport type IdParamInput = z.infer<typeof idParamSchema>;\n\n// FUNÇÕES UTILITÁRIAS PARA VALIDAÇÃO\n\n/**\n * Valida dados de entrada e retorna resultado tipado\n * @param schema Schema Zod para validação\n * @param data Dados a serem validados\n * @returns Resultado da validação\n */\nexport function validarDados<T>(schema: z.ZodSchema<T>, data: unknown) {\n  try {\n    const resultado = schema.parse(data);\n    return { sucesso: true, dados: resultado, erro: null };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return {\n        sucesso: false,\n        dados: null,\n        erro: {\n          message: 'Dados inválidos',\n          details: error.errors.map(err => ({\n            campo: err.path.join('.'),\n            mensagem: err.message,\n            valorRecebido: err.received\n          }))\n        }\n      };\n    }\n    return {\n      sucesso: false,\n      dados: null,\n      erro: { message: 'Erro de validação desconhecido' }\n    };\n  }\n}\n\n/**\n * Middleware para validação automática de query parameters\n * @param schema Schema para validação\n * @param searchParams URLSearchParams da requisição\n * @returns Dados validados ou erro\n */\nexport function validarQueryParams<T>(schema: z.ZodSchema<T>, searchParams: URLSearchParams) {\n  const params = Object.fromEntries(searchParams);\n  return validarDados(schema, params);\n}\n\n/**\n * Middleware para validação automática de body da requisição\n * @param schema Schema para validação\n * @param body Body da requisição já parseado\n * @returns Dados validados ou erro\n */\nexport function validarBody<T>(schema: z.ZodSchema<T>, body: unknown) {\n  return validarDados(schema, body);\n}"],"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","ignoreList":[]}