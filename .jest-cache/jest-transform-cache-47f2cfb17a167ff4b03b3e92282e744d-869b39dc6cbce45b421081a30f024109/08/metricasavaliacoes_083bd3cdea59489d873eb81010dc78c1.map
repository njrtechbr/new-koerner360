{"version":3,"names":["buscarAvaliacoesComFiltros","cov_16vyaceovy","f","s","buscarMetricasConsolidadas","buscarRankingAtendentes","calcularDesvioPadrao","calcularDistribuicaoNotas","calcularMedia","calcularMediana","calcularMetricasAtendente","calcularMetricasPeriodo","gerarComparativoTemporal","prisma","_prisma","PrismaClient","valores","length","b","soma","reduce","acc","valor","Number","toFixed","valoresOrdenados","sort","a","meio","Math","floor","media","variancia","pow","sqrt","notas","distribuicao","nota1","nota2","nota3","nota4","nota5","forEach","nota","filtros","where","status","StatusAvaliacao","CONCLUIDA","periodoIds","periodoId","in","atendenteIds","avaliadoId","setores","avaliado","setor","departamentos","departamento","dataInicio","dataFim","dataAvaliacao","gte","lte","notaMinima","undefined","notaMaxima","avaliacao","findMany","include","usuario","periodo","avaliador","orderBy","atendenteId","avaliacoes","map","av","atendente","nomeAtendente","nome","totalAvaliacoes","mediana","desvioPadrao","min","max","distribuicaoNotas","periodoAvaliacao","findUnique","id","nomePeriodo","mediaGeral","medianaGeral","desvioPadraoGeral","distribuicaoGeral","metricasPorAtendente","notasGerais","avaliacoesPorAtendente","push","avaliacoesAtendente","Object","entries","periodos","StatusPeriodo","ATIVO","FINALIZADO","comparativo","atendentesAvaliados","periodosAtivos","atendentesUnicos","Set","periodosUnicos","size","limite","ranking","slice"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\utils\\metricas-avaliacoes.ts"],"sourcesContent":["import { PrismaClient } from '@/generated/prisma';\nimport { StatusAvaliacao, StatusPeriodo } from '@/generated/prisma';\n\nconst prisma = new PrismaClient();\n\n// Tipos para as métricas calculadas\nexport interface MetricasAtendente {\n  atendenteId: string;\n  nomeAtendente: string;\n  setor: string;\n  departamento?: string;\n  totalAvaliacoes: number;\n  media: number;\n  mediana: number;\n  desvioPadrao: number;\n  notaMinima: number;\n  notaMaxima: number;\n  distribuicaoNotas: DistribuicaoNotas;\n}\n\nexport interface DistribuicaoNotas {\n  nota1: number;\n  nota2: number;\n  nota3: number;\n  nota4: number;\n  nota5: number;\n}\n\nexport interface MetricasPeriodo {\n  periodoId: string;\n  nomePeriodo: string;\n  dataInicio: Date;\n  dataFim: Date;\n  totalAvaliacoes: number;\n  mediaGeral: number;\n  medianaGeral: number;\n  desvioPadraoGeral: number;\n  distribuicaoGeral: DistribuicaoNotas;\n  metricasPorAtendente: MetricasAtendente[];\n}\n\nexport interface ComparativoTemporal {\n  periodoId: string;\n  nomePeriodo: string;\n  dataInicio: Date;\n  dataFim: Date;\n  mediaGeral: number;\n  totalAvaliacoes: number;\n}\n\nexport interface FiltrosMetricas {\n  periodoIds?: string[];\n  atendenteIds?: string[];\n  setores?: string[];\n  departamentos?: string[];\n  dataInicio?: Date;\n  dataFim?: Date;\n  notaMinima?: number;\n  notaMaxima?: number;\n}\n\n/**\n * Calcula a média de um array de números\n */\nexport function calcularMedia(valores: number[]): number {\n  if (valores.length === 0) return 0;\n  const soma = valores.reduce((acc, valor) => acc + valor, 0);\n  return Number((soma / valores.length).toFixed(2));\n}\n\n/**\n * Calcula a mediana de um array de números\n */\nexport function calcularMediana(valores: number[]): number {\n  if (valores.length === 0) return 0;\n  \n  const valoresOrdenados = [...valores].sort((a, b) => a - b);\n  const meio = Math.floor(valoresOrdenados.length / 2);\n  \n  if (valoresOrdenados.length % 2 === 0) {\n    return Number(((valoresOrdenados[meio - 1] + valoresOrdenados[meio]) / 2).toFixed(2));\n  } else {\n    return valoresOrdenados[meio];\n  }\n}\n\n/**\n * Calcula o desvio padrão de um array de números\n */\nexport function calcularDesvioPadrao(valores: number[]): number {\n  if (valores.length === 0) return 0;\n  \n  const media = calcularMedia(valores);\n  const variancia = valores.reduce((acc, valor) => {\n    return acc + Math.pow(valor - media, 2);\n  }, 0) / valores.length;\n  \n  return Number(Math.sqrt(variancia).toFixed(2));\n}\n\n/**\n * Calcula a distribuição de notas (1-5)\n */\nexport function calcularDistribuicaoNotas(notas: number[]): DistribuicaoNotas {\n  const distribuicao: DistribuicaoNotas = {\n    nota1: 0,\n    nota2: 0,\n    nota3: 0,\n    nota4: 0,\n    nota5: 0\n  };\n  \n  notas.forEach(nota => {\n    switch (nota) {\n      case 1:\n        distribuicao.nota1++;\n        break;\n      case 2:\n        distribuicao.nota2++;\n        break;\n      case 3:\n        distribuicao.nota3++;\n        break;\n      case 4:\n        distribuicao.nota4++;\n        break;\n      case 5:\n        distribuicao.nota5++;\n        break;\n    }\n  });\n  \n  return distribuicao;\n}\n\n/**\n * Busca avaliações com filtros aplicados\n */\nexport async function buscarAvaliacoesComFiltros(filtros: FiltrosMetricas = {}) {\n  const where: any = {\n    status: StatusAvaliacao.CONCLUIDA\n  };\n  \n  // Filtros por período\n  if (filtros.periodoIds && filtros.periodoIds.length > 0) {\n    where.periodoId = {\n      in: filtros.periodoIds\n    };\n  }\n  \n  // Filtros por atendente\n  if (filtros.atendenteIds && filtros.atendenteIds.length > 0) {\n    where.avaliadoId = {\n      in: filtros.atendenteIds\n    };\n  }\n  \n  // Filtros por setor/departamento\n  if (filtros.setores && filtros.setores.length > 0) {\n    where.avaliado = {\n      setor: {\n        in: filtros.setores\n      }\n    };\n  }\n  \n  if (filtros.departamentos && filtros.departamentos.length > 0) {\n    where.avaliado = {\n      ...where.avaliado,\n      departamento: {\n        in: filtros.departamentos\n      }\n    };\n  }\n  \n  // Filtros por data\n  if (filtros.dataInicio || filtros.dataFim) {\n    where.dataAvaliacao = {};\n    if (filtros.dataInicio) {\n      where.dataAvaliacao.gte = filtros.dataInicio;\n    }\n    if (filtros.dataFim) {\n      where.dataAvaliacao.lte = filtros.dataFim;\n    }\n  }\n  \n  // Filtros por nota\n  if (filtros.notaMinima !== undefined || filtros.notaMaxima !== undefined) {\n    where.nota = {};\n    if (filtros.notaMinima !== undefined) {\n      where.nota.gte = filtros.notaMinima;\n    }\n    if (filtros.notaMaxima !== undefined) {\n      where.nota.lte = filtros.notaMaxima;\n    }\n  }\n  \n  return await prisma.avaliacao.findMany({\n    where,\n    include: {\n      avaliado: {\n        include: {\n          usuario: true\n        }\n      },\n      periodo: true,\n      avaliador: true\n    },\n    orderBy: {\n      dataAvaliacao: 'desc'\n    }\n  });\n}\n\n/**\n * Calcula métricas para um atendente específico\n */\nexport async function calcularMetricasAtendente(\n  atendenteId: string,\n  filtros: FiltrosMetricas = {}\n): Promise<MetricasAtendente | null> {\n  const avaliacoes = await buscarAvaliacoesComFiltros({\n    ...filtros,\n    atendenteIds: [atendenteId]\n  });\n  \n  if (avaliacoes.length === 0) return null;\n  \n  const notas = avaliacoes.map(av => av.nota);\n  const atendente = avaliacoes[0].avaliado;\n  \n  return {\n    atendenteId,\n    nomeAtendente: atendente.usuario.nome,\n    setor: atendente.setor,\n    departamento: atendente.departamento || undefined,\n    totalAvaliacoes: avaliacoes.length,\n    media: calcularMedia(notas),\n    mediana: calcularMediana(notas),\n    desvioPadrao: calcularDesvioPadrao(notas),\n    notaMinima: Math.min(...notas),\n    notaMaxima: Math.max(...notas),\n    distribuicaoNotas: calcularDistribuicaoNotas(notas)\n  };\n}\n\n/**\n * Calcula métricas para um período específico\n */\nexport async function calcularMetricasPeriodo(\n  periodoId: string,\n  filtros: FiltrosMetricas = {}\n): Promise<MetricasPeriodo | null> {\n  const periodo = await prisma.periodoAvaliacao.findUnique({\n    where: { id: periodoId }\n  });\n  \n  if (!periodo) return null;\n  \n  const avaliacoes = await buscarAvaliacoesComFiltros({\n    ...filtros,\n    periodoIds: [periodoId]\n  });\n  \n  if (avaliacoes.length === 0) {\n    return {\n      periodoId,\n      nomePeriodo: periodo.nome,\n      dataInicio: periodo.dataInicio,\n      dataFim: periodo.dataFim,\n      totalAvaliacoes: 0,\n      mediaGeral: 0,\n      medianaGeral: 0,\n      desvioPadraoGeral: 0,\n      distribuicaoGeral: {\n        nota1: 0,\n        nota2: 0,\n        nota3: 0,\n        nota4: 0,\n        nota5: 0\n      },\n      metricasPorAtendente: []\n    };\n  }\n  \n  const notasGerais = avaliacoes.map(av => av.nota);\n  \n  // Agrupar avaliações por atendente\n  const avaliacoesPorAtendente = avaliacoes.reduce((acc, avaliacao) => {\n    const atendenteId = avaliacao.avaliadoId;\n    if (!acc[atendenteId]) {\n      acc[atendenteId] = [];\n    }\n    acc[atendenteId].push(avaliacao);\n    return acc;\n  }, {} as Record<string, typeof avaliacoes>);\n  \n  // Calcular métricas por atendente\n  const metricasPorAtendente: MetricasAtendente[] = [];\n  \n  for (const [atendenteId, avaliacoesAtendente] of Object.entries(avaliacoesPorAtendente)) {\n    const notas = avaliacoesAtendente.map(av => av.nota);\n    const atendente = avaliacoesAtendente[0].avaliado;\n    \n    metricasPorAtendente.push({\n      atendenteId,\n      nomeAtendente: atendente.usuario.nome,\n      setor: atendente.setor,\n      departamento: atendente.departamento || undefined,\n      totalAvaliacoes: avaliacoesAtendente.length,\n      media: calcularMedia(notas),\n      mediana: calcularMediana(notas),\n      desvioPadrao: calcularDesvioPadrao(notas),\n      notaMinima: Math.min(...notas),\n      notaMaxima: Math.max(...notas),\n      distribuicaoNotas: calcularDistribuicaoNotas(notas)\n    });\n  }\n  \n  return {\n    periodoId,\n    nomePeriodo: periodo.nome,\n    dataInicio: periodo.dataInicio,\n    dataFim: periodo.dataFim,\n    totalAvaliacoes: avaliacoes.length,\n    mediaGeral: calcularMedia(notasGerais),\n    medianaGeral: calcularMediana(notasGerais),\n    desvioPadraoGeral: calcularDesvioPadrao(notasGerais),\n    distribuicaoGeral: calcularDistribuicaoNotas(notasGerais),\n    metricasPorAtendente: metricasPorAtendente.sort((a, b) => b.media - a.media)\n  };\n}\n\n/**\n * Gera comparativo temporal entre períodos\n */\nexport async function gerarComparativoTemporal(\n  filtros: FiltrosMetricas = {}\n): Promise<ComparativoTemporal[]> {\n  const periodos = await prisma.periodoAvaliacao.findMany({\n    where: {\n      status: {\n        in: [StatusPeriodo.ATIVO, StatusPeriodo.FINALIZADO]\n      },\n      ...(filtros.periodoIds && {\n        id: {\n          in: filtros.periodoIds\n        }\n      })\n    },\n    orderBy: {\n      dataInicio: 'asc'\n    }\n  });\n  \n  const comparativo: ComparativoTemporal[] = [];\n  \n  for (const periodo of periodos) {\n    const avaliacoes = await buscarAvaliacoesComFiltros({\n      ...filtros,\n      periodoIds: [periodo.id]\n    });\n    \n    const notas = avaliacoes.map(av => av.nota);\n    \n    comparativo.push({\n      periodoId: periodo.id,\n      nomePeriodo: periodo.nome,\n      dataInicio: periodo.dataInicio,\n      dataFim: periodo.dataFim,\n      mediaGeral: calcularMedia(notas),\n      totalAvaliacoes: avaliacoes.length\n    });\n  }\n  \n  return comparativo;\n}\n\n/**\n * Busca métricas consolidadas com filtros\n */\nexport async function buscarMetricasConsolidadas(\n  filtros: FiltrosMetricas = {}\n) {\n  const avaliacoes = await buscarAvaliacoesComFiltros(filtros);\n  \n  if (avaliacoes.length === 0) {\n    return {\n      totalAvaliacoes: 0,\n      mediaGeral: 0,\n      medianaGeral: 0,\n      desvioPadraoGeral: 0,\n      distribuicaoGeral: {\n        nota1: 0,\n        nota2: 0,\n        nota3: 0,\n        nota4: 0,\n        nota5: 0\n      },\n      atendentesAvaliados: 0,\n      periodosAtivos: 0\n    };\n  }\n  \n  const notas = avaliacoes.map(av => av.nota);\n  const atendentesUnicos = new Set(avaliacoes.map(av => av.avaliadoId));\n  const periodosUnicos = new Set(avaliacoes.map(av => av.periodoId));\n  \n  return {\n    totalAvaliacoes: avaliacoes.length,\n    mediaGeral: calcularMedia(notas),\n    medianaGeral: calcularMediana(notas),\n    desvioPadraoGeral: calcularDesvioPadrao(notas),\n    distribuicaoGeral: calcularDistribuicaoNotas(notas),\n    atendentesAvaliados: atendentesUnicos.size,\n    periodosAtivos: periodosUnicos.size\n  };\n}\n\n/**\n * Busca ranking de atendentes por média de avaliações\n */\nexport async function buscarRankingAtendentes(\n  filtros: FiltrosMetricas = {},\n  limite: number = 10\n): Promise<MetricasAtendente[]> {\n  const avaliacoes = await buscarAvaliacoesComFiltros(filtros);\n  \n  // Agrupar por atendente\n  const avaliacoesPorAtendente = avaliacoes.reduce((acc, avaliacao) => {\n    const atendenteId = avaliacao.avaliadoId;\n    if (!acc[atendenteId]) {\n      acc[atendenteId] = [];\n    }\n    acc[atendenteId].push(avaliacao);\n    return acc;\n  }, {} as Record<string, typeof avaliacoes>);\n  \n  const ranking: MetricasAtendente[] = [];\n  \n  for (const [atendenteId, avaliacoesAtendente] of Object.entries(avaliacoesPorAtendente)) {\n    const notas = avaliacoesAtendente.map(av => av.nota);\n    const atendente = avaliacoesAtendente[0].avaliado;\n    \n    ranking.push({\n      atendenteId,\n      nomeAtendente: atendente.usuario.nome,\n      setor: atendente.setor,\n      departamento: atendente.departamento || undefined,\n      totalAvaliacoes: avaliacoesAtendente.length,\n      media: calcularMedia(notas),\n      mediana: calcularMediana(notas),\n      desvioPadrao: calcularDesvioPadrao(notas),\n      notaMinima: Math.min(...notas),\n      notaMaxima: Math.max(...notas),\n      distribuicaoNotas: calcularDistribuicaoNotas(notas)\n    });\n  }\n  \n  return ranking\n    .sort((a, b) => b.media - a.media)\n    .slice(0, limite);\n}"],"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","ignoreList":[]}