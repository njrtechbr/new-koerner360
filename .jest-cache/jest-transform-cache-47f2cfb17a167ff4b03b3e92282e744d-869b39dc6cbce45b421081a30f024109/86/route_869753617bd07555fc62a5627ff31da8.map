{"version":3,"names":["DELETE","cov_osr0csnta","f","s","GET","PUT","request","params","session","_nextauth","getServerSession","_auth","authOptions","user","id","b","_server","NextResponse","json","error","status","resultadoValidacao","_avaliacoes","validarDados","idParamSchema","sucesso","details","erro","dados","usuario","_prisma","prisma","findUnique","where","select","userType","_client","TipoUsuario","ADMIN","GESTOR","_periodostatusupdater","middlewareAtualizacaoStatus","periodo","periodoAvaliacao","include","criadoPor","nome","email","avaliacoes","avaliador","avaliado","cargo","setor","_count","console","resultadoValidacaoId","body","validarBody","atualizarPeriodoSchema","dadosValidados","periodoExistente","nomeExistente","findFirst","not","StatusPeriodo","ATIVO","periodosAtivos","findMany","length","map","p","CANCELADO","avaliacoesConcluidas","avaliacao","count","periodoId","dataInicio","dataFim","novaDataInicio","Date","novaDataFim","periodosConflitantes","in","PLANEJADO","OR","AND","lte","gte","conflitos","periodoAtualizado","update","data","undefined","atualizadoEm","delete","message"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\periodos-avaliacao\\[id]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { TipoUsuario, StatusPeriodo } from '@prisma/client';\nimport {\n  atualizarPeriodoSchema,\n  idParamSchema,\n  validarBody,\n  validarDados\n} from '@/lib/validations/avaliacoes';\nimport { middlewareAtualizacaoStatus } from '@/lib/utils/periodo-status-updater';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n// GET /api/periodos-avaliacao/[id] - Buscar período específico\nexport async function GET(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Validar parâmetro ID\n    const resultadoValidacao = validarDados(idParamSchema, params);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'ID inválido', \n          details: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n\n    const { id } = resultadoValidacao.dados;\n\n    // Verificar permissões do usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN e GESTOR podem visualizar períodos\n    if (usuario.userType !== TipoUsuario.ADMIN && usuario.userType !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { error: 'Sem permissão para visualizar períodos de avaliação' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos períodos antes de buscar\n    await middlewareAtualizacaoStatus();\n\n    // Buscar o período\n    const periodo = await prisma.periodoAvaliacao.findUnique({\n      where: { id },\n      include: {\n        criadoPor: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        avaliacoes: {\n          include: {\n            avaliador: {\n              select: {\n                id: true,\n                nome: true,\n                email: true\n              }\n            },\n            avaliado: {\n              select: {\n                id: true,\n                usuario: {\n                  select: {\n                    nome: true,\n                    email: true\n                  }\n                },\n                cargo: true,\n                setor: true\n              }\n            }\n          }\n        },\n        _count: {\n          select: {\n            avaliacoes: true\n          }\n        }\n      }\n    });\n\n    if (!periodo) {\n      return NextResponse.json(\n        { error: 'Período não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(periodo);\n\n  } catch (error) {\n    console.error('Erro ao buscar período:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/periodos-avaliacao/[id] - Atualizar período\nexport async function PUT(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Validar parâmetro ID\n    const resultadoValidacaoId = validarDados(idParamSchema, params);\n    if (!resultadoValidacaoId.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'ID inválido', \n          details: resultadoValidacaoId.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n\n    const { id } = resultadoValidacaoId.dados;\n    const body = await request.json();\n    \n    // Validar dados de atualização\n    const resultadoValidacao = validarBody(atualizarPeriodoSchema, body);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'Dados inválidos', \n          details: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n    \n    const dadosValidados = resultadoValidacao.dados;\n\n    // Verificar permissões do usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN e GESTOR podem atualizar períodos\n    if (usuario.userType !== TipoUsuario.ADMIN && usuario.userType !== TipoUsuario.GESTOR) {\n      return NextResponse.json(\n        { error: 'Sem permissão para atualizar períodos de avaliação' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos períodos antes de atualizar\n    await middlewareAtualizacaoStatus();\n\n    // Verificar se o período existe\n    const periodoExistente = await prisma.periodoAvaliacao.findUnique({\n      where: { id },\n      include: {\n        _count: {\n          select: {\n            avaliacoes: true\n          }\n        }\n      }\n    });\n\n    if (!periodoExistente) {\n      return NextResponse.json(\n        { error: 'Período não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o nome já existe (se estiver sendo alterado)\n    if (dadosValidados.nome && dadosValidados.nome !== periodoExistente.nome) {\n      const nomeExistente = await prisma.periodoAvaliacao.findFirst({\n        where: {\n          nome: dadosValidados.nome,\n          id: { not: id }\n        }\n      });\n\n      if (nomeExistente) {\n        return NextResponse.json(\n          { error: 'Já existe um período com este nome' },\n          { status: 409 }\n        );\n      }\n    }\n\n    // Verificar regras de negócio para mudança de status\n    if (dadosValidados.status && dadosValidados.status !== periodoExistente.status) {\n      // Não permitir ativar período se há avaliações pendentes em outros períodos ativos\n      if (dadosValidados.status === StatusPeriodo.ATIVO) {\n        const periodosAtivos = await prisma.periodoAvaliacao.findMany({\n          where: {\n            status: StatusPeriodo.ATIVO,\n            id: { not: id }\n          }\n        });\n\n        if (periodosAtivos.length > 0) {\n          return NextResponse.json(\n            { \n              error: 'Não é possível ativar este período pois já existe outro período ativo',\n              periodosAtivos: periodosAtivos.map(p => ({ id: p.id, nome: p.nome }))\n            },\n            { status: 409 }\n          );\n        }\n      }\n\n      // Não permitir cancelar período se há avaliações concluídas\n      if (dadosValidados.status === StatusPeriodo.CANCELADO) {\n        const avaliacoesConcluidas = await prisma.avaliacao.count({\n          where: {\n            periodoId: id,\n            status: 'CONCLUIDA'\n          }\n        });\n\n        if (avaliacoesConcluidas > 0) {\n          return NextResponse.json(\n            { error: 'Não é possível cancelar período com avaliações concluídas' },\n            { status: 409 }\n          );\n        }\n      }\n    }\n\n    // Verificar conflito de datas (se estiver alterando datas)\n    if (dadosValidados.dataInicio || dadosValidados.dataFim) {\n      const novaDataInicio = dadosValidados.dataInicio ? new Date(dadosValidados.dataInicio) : periodoExistente.dataInicio;\n      const novaDataFim = dadosValidados.dataFim ? new Date(dadosValidados.dataFim) : periodoExistente.dataFim;\n\n      const periodosConflitantes = await prisma.periodoAvaliacao.findMany({\n        where: {\n          id: { not: id },\n          status: {\n            in: [StatusPeriodo.ATIVO, StatusPeriodo.PLANEJADO]\n          },\n          OR: [\n            {\n              AND: [\n                { dataInicio: { lte: novaDataInicio } },\n                { dataFim: { gte: novaDataInicio } }\n              ]\n            },\n            {\n              AND: [\n                { dataInicio: { lte: novaDataFim } },\n                { dataFim: { gte: novaDataFim } }\n              ]\n            },\n            {\n              AND: [\n                { dataInicio: { gte: novaDataInicio } },\n                { dataFim: { lte: novaDataFim } }\n              ]\n            }\n          ]\n        }\n      });\n\n      if (periodosConflitantes.length > 0) {\n        return NextResponse.json(\n          { \n            error: 'Há conflito de datas com outros períodos ativos ou planejados',\n            conflitos: periodosConflitantes.map(p => ({\n              id: p.id,\n              nome: p.nome,\n              dataInicio: p.dataInicio,\n              dataFim: p.dataFim\n            }))\n          },\n          { status: 409 }\n        );\n      }\n    }\n\n    // Atualizar o período\n    const periodoAtualizado = await prisma.periodoAvaliacao.update({\n      where: { id },\n      data: {\n        ...dadosValidados,\n        dataInicio: dadosValidados.dataInicio ? new Date(dadosValidados.dataInicio) : undefined,\n        dataFim: dadosValidados.dataFim ? new Date(dadosValidados.dataFim) : undefined,\n        atualizadoEm: new Date()\n      },\n      include: {\n        criadoPor: {\n          select: {\n            id: true,\n            nome: true,\n            email: true\n          }\n        },\n        _count: {\n          select: {\n            avaliacoes: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json(periodoAtualizado);\n\n  } catch (error) {\n    console.error('Erro ao atualizar período:', error);\n    \n\n\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/periodos-avaliacao/[id] - Deletar período\nexport async function DELETE(\n  request: NextRequest,\n  { params }: RouteParams\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Não autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Validar parâmetro ID\n    const resultadoValidacao = validarDados(idParamSchema, params);\n    if (!resultadoValidacao.sucesso) {\n      return NextResponse.json(\n        { \n          error: 'ID inválido', \n          details: resultadoValidacao.erro?.details \n        },\n        { status: 400 }\n      );\n    }\n\n    const { id } = resultadoValidacao.dados;\n\n    // Verificar permissões do usuário\n    const usuario = await prisma.usuario.findUnique({\n      where: { id: session.user.id },\n      select: { userType: true }\n    });\n\n    if (!usuario) {\n      return NextResponse.json(\n        { error: 'Usuário não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Apenas ADMIN pode deletar períodos\n    if (usuario.userType !== TipoUsuario.ADMIN) {\n      return NextResponse.json(\n        { error: 'Sem permissão para deletar períodos de avaliação' },\n        { status: 403 }\n      );\n    }\n\n    // Atualizar automaticamente os status dos períodos antes de deletar\n    await middlewareAtualizacaoStatus();\n\n    // Verificar se o período existe\n    const periodoExistente = await prisma.periodoAvaliacao.findUnique({\n      where: { id },\n      include: {\n        _count: {\n          select: {\n            avaliacoes: true\n          }\n        }\n      }\n    });\n\n    if (!periodoExistente) {\n      return NextResponse.json(\n        { error: 'Período não encontrado' },\n        { status: 404 }\n      );\n    }\n\n    // Não permitir deletar período com avaliações\n    if (periodoExistente._count.avaliacoes > 0) {\n      return NextResponse.json(\n        { error: 'Não é possível deletar período que possui avaliações' },\n        { status: 409 }\n      );\n    }\n\n    // Deletar o período\n    await prisma.periodoAvaliacao.delete({\n      where: { id }\n    });\n\n    return NextResponse.json(\n      { message: 'Período deletado com sucesso' },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('Erro ao deletar período:', error);\n    return NextResponse.json(\n      { error: 'Erro interno do servidor' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}