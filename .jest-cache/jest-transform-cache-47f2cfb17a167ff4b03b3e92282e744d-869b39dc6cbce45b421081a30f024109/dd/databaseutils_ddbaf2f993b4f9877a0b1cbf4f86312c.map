{"version":3,"names":["aplicarPaginacao","cov_1r3vbveu5f","f","s","avaliacaoJaExisteNoPeriodo","construirFiltroAtendentes","construirFiltroFeedbacks","construirFiltroUsuarios","cpfJaExiste","criarResultadoPaginado","emailJaExiste","formatarCPF","formatarTelefone","gerarPeriodoAvaliacao","validarCPF","validarEmail","params","pagina","Math","max","b","limite","min","skip","take","dados","total","totalPaginas","ceil","filtros","where","userType","ativo","email","contains","mode","nome","status","setor","cargo","dataAdmissaoInicio","dataAdmissaoFim","dataAdmissao","gte","lte","tipo","prioridade","autorId","responsavelId","dataInicio","dataFim","criadoEm","cpf","cpfLimpo","replace","length","test","soma","i","parseInt","charAt","resto","regex","excluirId","atendente","_prisma","default","findFirst","id","not","usuario","toLowerCase","telefone","telefoneLimpo","data","Date","ano","getFullYear","mes","getMonth","toString","padStart","atendenteId","periodo","avaliacao"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\database-utils.ts"],"sourcesContent":["import prisma from './prisma';\nimport {\n  FiltroUsuarios,\n  FiltroAtendentes,\n  FiltroFeedbacks,\n  ParametrosPaginacao,\n  ResultadoPaginado,\n} from './types';\n\n/**\n * Utilitários para operações de banco de dados\n */\n\n// Função para aplicar paginação\nexport const aplicarPaginacao = (params: ParametrosPaginacao) => {\n  const pagina = Math.max(1, params.pagina || 1);\n  const limite = Math.min(100, Math.max(1, params.limite || 10));\n  const skip = (pagina - 1) * limite;\n\n  return {\n    skip,\n    take: limite,\n    pagina,\n    limite,\n  };\n};\n\n// Função para criar resultado paginado\nexport const criarResultadoPaginado = <T>(\n  dados: T[],\n  total: number,\n  pagina: number,\n  limite: number\n): ResultadoPaginado<T> => {\n  return {\n    dados,\n    total,\n    pagina,\n    limite,\n    totalPaginas: Math.ceil(total / limite),\n  };\n};\n\n// Função para construir filtros de usuários\nexport const construirFiltroUsuarios = (filtros: FiltroUsuarios) => {\n  const where: any = {};\n\n  if (filtros.userType) {\n    where.userType = filtros.userType;\n  }\n\n  if (typeof filtros.ativo === 'boolean') {\n    where.ativo = filtros.ativo;\n  }\n\n  if (filtros.email) {\n    where.email = {\n      contains: filtros.email,\n      mode: 'insensitive',\n    };\n  }\n\n  if (filtros.nome) {\n    where.nome = {\n      contains: filtros.nome,\n      mode: 'insensitive',\n    };\n  }\n\n  return where;\n};\n\n// Função para construir filtros de atendentes\nexport const construirFiltroAtendentes = (filtros: FiltroAtendentes) => {\n  const where: any = {};\n\n  if (filtros.status) {\n    where.status = filtros.status;\n  }\n\n  if (filtros.setor) {\n    where.setor = {\n      contains: filtros.setor,\n      mode: 'insensitive',\n    };\n  }\n\n  if (filtros.cargo) {\n    where.cargo = {\n      contains: filtros.cargo,\n      mode: 'insensitive',\n    };\n  }\n\n  if (filtros.dataAdmissaoInicio || filtros.dataAdmissaoFim) {\n    where.dataAdmissao = {};\n\n    if (filtros.dataAdmissaoInicio) {\n      where.dataAdmissao.gte = filtros.dataAdmissaoInicio;\n    }\n\n    if (filtros.dataAdmissaoFim) {\n      where.dataAdmissao.lte = filtros.dataAdmissaoFim;\n    }\n  }\n\n  return where;\n};\n\n// Função para construir filtros de feedbacks\nexport const construirFiltroFeedbacks = (filtros: FiltroFeedbacks) => {\n  const where: any = {};\n\n  if (filtros.tipo) {\n    where.tipo = filtros.tipo;\n  }\n\n  if (filtros.status) {\n    where.status = filtros.status;\n  }\n\n  if (filtros.prioridade) {\n    where.prioridade = filtros.prioridade;\n  }\n\n  if (filtros.autorId) {\n    where.autorId = filtros.autorId;\n  }\n\n  if (filtros.responsavelId) {\n    where.responsavelId = filtros.responsavelId;\n  }\n\n  if (filtros.dataInicio || filtros.dataFim) {\n    where.criadoEm = {};\n\n    if (filtros.dataInicio) {\n      where.criadoEm.gte = filtros.dataInicio;\n    }\n\n    if (filtros.dataFim) {\n      where.criadoEm.lte = filtros.dataFim;\n    }\n  }\n\n  return where;\n};\n\n// Função para validar CPF\nexport const validarCPF = (cpf: string): boolean => {\n  // Remove caracteres não numéricos\n  const cpfLimpo = cpf.replace(/\\D/g, '');\n\n  // Verifica se tem 11 dígitos\n  if (cpfLimpo.length !== 11) {\n    return false;\n  }\n\n  // Verifica se todos os dígitos são iguais\n  if (/^(\\d)\\1{10}$/.test(cpfLimpo)) {\n    return false;\n  }\n\n  // Validação dos dígitos verificadores\n  let soma = 0;\n  for (let i = 0; i < 9; i++) {\n    soma += parseInt(cpfLimpo.charAt(i)) * (10 - i);\n  }\n\n  let resto = 11 - (soma % 11);\n  if (resto === 10 || resto === 11) {\n    resto = 0;\n  }\n\n  if (resto !== parseInt(cpfLimpo.charAt(9))) {\n    return false;\n  }\n\n  soma = 0;\n  for (let i = 0; i < 10; i++) {\n    soma += parseInt(cpfLimpo.charAt(i)) * (11 - i);\n  }\n\n  resto = 11 - (soma % 11);\n  if (resto === 10 || resto === 11) {\n    resto = 0;\n  }\n\n  return resto === parseInt(cpfLimpo.charAt(10));\n};\n\n// Função para validar email\nexport const validarEmail = (email: string): boolean => {\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return regex.test(email);\n};\n\n// Função para verificar se CPF já existe\nexport const cpfJaExiste = async (\n  cpf: string,\n  excluirId?: string\n): Promise<boolean> => {\n  const cpfLimpo = cpf.replace(/\\D/g, '');\n\n  const atendente = await prisma.atendente.findFirst({\n    where: {\n      cpf: cpfLimpo,\n      ...(excluirId && { id: { not: excluirId } }),\n    },\n  });\n\n  return !!atendente;\n};\n\n// Função para verificar se email já existe\nexport const emailJaExiste = async (\n  email: string,\n  excluirId?: string\n): Promise<boolean> => {\n  const usuario = await prisma.usuario.findFirst({\n    where: {\n      email: email.toLowerCase(),\n      ...(excluirId && { id: { not: excluirId } }),\n    },\n  });\n\n  return !!usuario;\n};\n\n// Função para formatar CPF\nexport const formatarCPF = (cpf: string): string => {\n  const cpfLimpo = cpf.replace(/\\D/g, '');\n  return cpfLimpo.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\n};\n\n// Função para formatar telefone\nexport const formatarTelefone = (telefone: string): string => {\n  const telefoneLimpo = telefone.replace(/\\D/g, '');\n\n  if (telefoneLimpo.length === 10) {\n    return telefoneLimpo.replace(/(\\d{2})(\\d{4})(\\d{4})/, '($1) $2-$3');\n  } else if (telefoneLimpo.length === 11) {\n    return telefoneLimpo.replace(/(\\d{2})(\\d{5})(\\d{4})/, '($1) $2-$3');\n  }\n\n  return telefone;\n};\n\n// Função para gerar período de avaliação (formato: YYYY-MM)\nexport const gerarPeriodoAvaliacao = (data: Date = new Date()): string => {\n  const ano = data.getFullYear();\n  const mes = (data.getMonth() + 1).toString().padStart(2, '0');\n  return `${ano}-${mes}`;\n};\n\n// Função para verificar se já existe avaliação no período\nexport const avaliacaoJaExisteNoPeriodo = async (\n  atendenteId: string,\n  periodo: string,\n  excluirId?: string\n): Promise<boolean> => {\n  const avaliacao = await prisma.avaliacao.findFirst({\n    where: {\n      atendenteId,\n      periodo,\n      ...(excluirId && { id: { not: excluirId } }),\n    },\n  });\n\n  return !!avaliacao;\n};\n"],"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","ignoreList":[]}