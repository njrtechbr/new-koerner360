{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\components\\__tests__\\preferencias\\configuracoes-notificacao.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { ConfiguracoesNotificacao } from '../../preferencias/configuracoes-notificacao';\nimport { usePreferenciasNotificacao } from '../../../hooks/use-preferencias-notificacao';\nimport { useToast } from '../../../hooks/use-toast';\nimport { PREFERENCIAS_DEFAULTS } from '../../../lib/types/preferencias-notificacao';\n\n// Mock dos hooks\nvi.mock('../../../hooks/use-preferencias-notificacao');\nvi.mock('../../../hooks/use-toast');\n\n// Mock das preferências de teste\nconst mockPreferencias = {\n  id: '1',\n  usuarioId: 'user-1',\n  ativo: true,\n  emailAtivo: true,\n  formatoEmail: 'html' as const,\n  idioma: 'pt-BR' as const,\n  conteudo: {\n    incluirDetalhesAvaliacao: true,\n    incluirLinkDireto: true,\n    incluirResumoEstatisticas: false,\n  },\n  urgenciaMinima: 'media' as const,\n  tipos: {\n    pendente: {\n      ativo: true,\n      frequencia: 'diaria' as const,\n      diasAntecedencia: 1,\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n    vencida: {\n      ativo: true,\n      frequencia: 'imediata' as const,\n      diasAntecedencia: 0,\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: true,\n      incluirFeriados: true,\n    },\n    proximaVencimento: {\n      ativo: true,\n      frequencia: 'semanal' as const,\n      diasAntecedencia: 3,\n      horarioEnvio: '10:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n    nova: {\n      ativo: false,\n      frequencia: 'imediata' as const,\n      diasAntecedencia: 0,\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n    completada: {\n      ativo: false,\n      frequencia: 'imediata' as const,\n      diasAntecedencia: 0,\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n    personalizada: {\n      ativo: false,\n      frequencia: 'diaria' as const,\n      diasAntecedencia: 1,\n      horarioEnvio: '09:00',\n      incluirFinsDeSemanaSemana: false,\n      incluirFeriados: false,\n    },\n  },\n  filtros: {\n    apenasMinhasAvaliacoes: false,\n    apenasAvaliacoesQueAvalia: true,\n  },\n  pausada: false,\n  pausadaAte: null,\n  motivoPausa: null,\n  criadaEm: new Date().toISOString(),\n  atualizadaEm: new Date().toISOString(),\n};\n\nconst mockHookReturn = {\n  preferencias: mockPreferencias,\n  carregando: false,\n  erro: null,\n  pausada: false,\n  buscarPreferencias: vi.fn(),\n  atualizarPreferencias: vi.fn(),\n  resetarPreferencias: vi.fn(),\n  pausarNotificacoes: vi.fn(),\n  retomarNotificacoes: vi.fn(),\n  verificarNotificacoesPausadas: vi.fn(),\n};\n\nconst mockToast = vi.fn();\n\ndescribe('ConfiguracoesNotificacao', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    (usePreferenciasNotificacao as any).mockReturnValue(mockHookReturn);\n    (useToast as any).mockReturnValue({ toast: mockToast });\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  describe('Renderização', () => {\n    it('deve renderizar configurações de notificação', () => {\n      render(<ConfiguracoesNotificacao />);\n\n      expect(screen.getByText('Configurações de Notificação')).toBeInTheDocument();\n      expect(screen.getByText('Configurações Gerais')).toBeInTheDocument();\n      expect(screen.getByText('Tipos de Notificação')).toBeInTheDocument();\n    });\n\n    it('deve exibir estado de carregamento', () => {\n      (usePreferenciasNotificacao as any).mockReturnValue({\n        ...mockHookReturn,\n        carregando: true,\n        preferencias: null,\n      });\n\n      render(<ConfiguracoesNotificacao />);\n\n      expect(screen.getByText('Carregando configurações...')).toBeInTheDocument();\n    });\n\n    it('deve exibir erro quando houver falha', () => {\n      const errorMessage = 'Erro ao carregar configurações';\n      (usePreferenciasNotificacao as any).mockReturnValue({\n        ...mockHookReturn,\n        erro: errorMessage,\n        preferencias: null,\n      });\n\n      render(<ConfiguracoesNotificacao />);\n\n      expect(screen.getByText(errorMessage)).toBeInTheDocument();\n    });\n\n    it('deve exibir valores padrão quando não há preferências', () => {\n      (usePreferenciasNotificacao as any).mockReturnValue({\n        ...mockHookReturn,\n        preferencias: null,\n      });\n\n      render(<ConfiguracoesNotificacao />);\n\n      // Verificar se os valores padrão são exibidos\n      const switchAtivo = screen.getByLabelText('Ativar notificações');\n      expect(switchAtivo).toBeChecked(); // PREFERENCIAS_DEFAULTS.ativo é true\n    });\n  });\n\n  describe('Configurações Gerais', () => {\n    it('deve alterar ativação geral das notificações', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchAtivo = screen.getByLabelText('Ativar notificações');\n      fireEvent.click(switchAtivo);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            ativo: false, // Era true, agora false\n          })\n        );\n      });\n    });\n\n    it('deve alterar ativação de e-mail', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchEmail = screen.getByLabelText('Ativar notificações por e-mail');\n      fireEvent.click(switchEmail);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            emailAtivo: false,\n          })\n        );\n      });\n    });\n\n    it('deve alterar formato do e-mail', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const seletorFormato = screen.getByLabelText('Formato do e-mail');\n      fireEvent.change(seletorFormato, { target: { value: 'texto' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            formatoEmail: 'texto',\n          })\n        );\n      });\n    });\n\n    it('deve alterar idioma', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const seletorIdioma = screen.getByLabelText('Idioma');\n      fireEvent.change(seletorIdioma, { target: { value: 'en-US' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            idioma: 'en-US',\n          })\n        );\n      });\n    });\n\n    it('deve alterar urgência mínima', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const seletorUrgencia = screen.getByLabelText('Urgência mínima');\n      fireEvent.change(seletorUrgencia, { target: { value: 'alta' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            urgenciaMinima: 'alta',\n          })\n        );\n      });\n    });\n  });\n\n  describe('Configurações de Conteúdo', () => {\n    it('deve alterar inclusão de detalhes da avaliação', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchDetalhes = screen.getByLabelText('Incluir detalhes da avaliação');\n      fireEvent.click(switchDetalhes);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            conteudo: expect.objectContaining({\n              incluirDetalhesAvaliacao: false,\n            }),\n          })\n        );\n      });\n    });\n\n    it('deve alterar inclusão de link direto', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchLink = screen.getByLabelText('Incluir link direto');\n      fireEvent.click(switchLink);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            conteudo: expect.objectContaining({\n              incluirLinkDireto: false,\n            }),\n          })\n        );\n      });\n    });\n\n    it('deve alterar inclusão de resumo de estatísticas', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchResumo = screen.getByLabelText('Incluir resumo de estatísticas');\n      fireEvent.click(switchResumo);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            conteudo: expect.objectContaining({\n              incluirResumoEstatisticas: true, // Era false, agora true\n            }),\n          })\n        );\n      });\n    });\n  });\n\n  describe('Tipos de Notificação', () => {\n    it('deve ativar/desativar tipo de notificação', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchPendente = screen.getByLabelText('Ativar notificações de avaliação pendente');\n      fireEvent.click(switchPendente);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            tipos: expect.objectContaining({\n              pendente: expect.objectContaining({\n                ativo: false, // Era true, agora false\n              }),\n            }),\n          })\n        );\n      });\n    });\n\n    it('deve alterar frequência de notificação', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const seletorFrequencia = screen.getByLabelText('Frequência para avaliação pendente');\n      fireEvent.change(seletorFrequencia, { target: { value: 'semanal' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            tipos: expect.objectContaining({\n              pendente: expect.objectContaining({\n                frequencia: 'semanal',\n              }),\n            }),\n          })\n        );\n      });\n    });\n\n    it('deve alterar dias de antecedência', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const inputDias = screen.getByLabelText('Dias de antecedência para avaliação pendente');\n      fireEvent.change(inputDias, { target: { value: '3' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            tipos: expect.objectContaining({\n              pendente: expect.objectContaining({\n                diasAntecedencia: 3,\n              }),\n            }),\n          })\n        );\n      });\n    });\n\n    it('deve alterar horário de envio', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const inputHorario = screen.getByLabelText('Horário de envio para avaliação pendente');\n      fireEvent.change(inputHorario, { target: { value: '14:30' } });\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            tipos: expect.objectContaining({\n              pendente: expect.objectContaining({\n                horarioEnvio: '14:30',\n              }),\n            }),\n          })\n        );\n      });\n    });\n\n    it('deve alterar inclusão de fins de semana', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchFimSemana = screen.getByLabelText('Incluir fins de semana para avaliação pendente');\n      fireEvent.click(switchFimSemana);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            tipos: expect.objectContaining({\n              pendente: expect.objectContaining({\n                incluirFinsDeSemanaSemana: true, // Era false, agora true\n              }),\n            }),\n          })\n        );\n      });\n    });\n\n    it('deve alterar inclusão de feriados', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchFeriados = screen.getByLabelText('Incluir feriados para avaliação pendente');\n      fireEvent.click(switchFeriados);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            tipos: expect.objectContaining({\n              pendente: expect.objectContaining({\n                incluirFeriados: true, // Era false, agora true\n              }),\n            }),\n          })\n        );\n      });\n    });\n  });\n\n  describe('Filtros', () => {\n    it('deve alterar filtro de apenas minhas avaliações', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchMinhas = screen.getByLabelText('Apenas minhas avaliações');\n      fireEvent.click(switchMinhas);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            filtros: expect.objectContaining({\n              apenasMinhasAvaliacoes: true, // Era false, agora true\n            }),\n          })\n        );\n      });\n    });\n\n    it('deve alterar filtro de avaliações que eu avalio', async () => {\n      mockHookReturn.atualizarPreferencias.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchAvalio = screen.getByLabelText('Avaliações que eu avalio');\n      fireEvent.click(switchAvalio);\n\n      await waitFor(() => {\n        expect(mockHookReturn.atualizarPreferencias).toHaveBeenCalledWith(\n          expect.objectContaining({\n            filtros: expect.objectContaining({\n              apenasAvaliacoesQueAvalia: false, // Era true, agora false\n            }),\n          })\n        );\n      });\n    });\n  });\n\n  describe('Pausa de Notificações', () => {\n    it('deve pausar notificações', async () => {\n      mockHookReturn.pausarNotificacoes.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const inputDataFim = screen.getByLabelText('Pausar até');\n      const inputMotivo = screen.getByLabelText('Motivo (opcional)');\n      const botaoPausar = screen.getByText('Pausar Notificações');\n\n      fireEvent.change(inputDataFim, { target: { value: '2024-12-31' } });\n      fireEvent.change(inputMotivo, { target: { value: 'Férias' } });\n      fireEvent.click(botaoPausar);\n\n      await waitFor(() => {\n        expect(mockHookReturn.pausarNotificacoes).toHaveBeenCalledWith(\n          expect.any(Date),\n          'Férias'\n        );\n      });\n    });\n\n    it('deve retomar notificações', async () => {\n      (usePreferenciasNotificacao as any).mockReturnValue({\n        ...mockHookReturn,\n        pausada: true,\n        preferencias: {\n          ...mockPreferencias,\n          pausada: true,\n          pausadaAte: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n          motivoPausa: 'Férias',\n        },\n      });\n\n      mockHookReturn.retomarNotificacoes.mockResolvedValueOnce(true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const botaoRetomar = screen.getByText('Retomar Notificações');\n      fireEvent.click(botaoRetomar);\n\n      await waitFor(() => {\n        expect(mockHookReturn.retomarNotificacoes).toHaveBeenCalled();\n      });\n    });\n\n    it('deve exibir status de pausa', () => {\n      (usePreferenciasNotificacao as any).mockReturnValue({\n        ...mockHookReturn,\n        pausada: true,\n        preferencias: {\n          ...mockPreferencias,\n          pausada: true,\n          pausadaAte: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n          motivoPausa: 'Férias',\n        },\n      });\n\n      render(<ConfiguracoesNotificacao />);\n\n      expect(screen.getByText(/Notificações pausadas até/)).toBeInTheDocument();\n      expect(screen.getByText(/Motivo: Férias/)).toBeInTheDocument();\n    });\n\n    it('deve validar data de pausa', async () => {\n      render(<ConfiguracoesNotificacao />);\n\n      const inputDataFim = screen.getByLabelText('Pausar até');\n      const botaoPausar = screen.getByText('Pausar Notificações');\n\n      // Tentar pausar com data no passado\n      fireEvent.change(inputDataFim, { target: { value: '2020-01-01' } });\n      fireEvent.click(botaoPausar);\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith(\n          expect.objectContaining({\n            title: 'Erro',\n            description: 'A data deve ser no futuro',\n            variant: 'destructive',\n          })\n        );\n      });\n\n      expect(mockHookReturn.pausarNotificacoes).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Reset de Configurações', () => {\n    it('deve resetar configurações para padrão', async () => {\n      mockHookReturn.resetarPreferencias.mockResolvedValueOnce(true);\n      window.confirm = vi.fn(() => true);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const botaoReset = screen.getByText('Restaurar Padrões');\n      fireEvent.click(botaoReset);\n\n      await waitFor(() => {\n        expect(mockHookReturn.resetarPreferencias).toHaveBeenCalled();\n      });\n    });\n\n    it('deve cancelar reset se usuário não confirmar', async () => {\n      window.confirm = vi.fn(() => false);\n\n      render(<ConfiguracoesNotificacao />);\n\n      const botaoReset = screen.getByText('Restaurar Padrões');\n      fireEvent.click(botaoReset);\n\n      expect(mockHookReturn.resetarPreferencias).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Validações', () => {\n    it('deve validar horário de envio', async () => {\n      render(<ConfiguracoesNotificacao />);\n\n      const inputHorario = screen.getByLabelText('Horário de envio para avaliação pendente');\n      fireEvent.change(inputHorario, { target: { value: '25:00' } });\n\n      // O input type=\"time\" deve automaticamente validar o formato\n      expect(inputHorario).toHaveValue('25:00'); // Valor inválido\n    });\n\n    it('deve validar dias de antecedência', async () => {\n      render(<ConfiguracoesNotificacao />);\n\n      const inputDias = screen.getByLabelText('Dias de antecedência para avaliação pendente');\n      fireEvent.change(inputDias, { target: { value: '-1' } });\n\n      // O input type=\"number\" com min=\"0\" deve validar automaticamente\n      expect(inputDias).toHaveValue(-1); // Valor inválido\n    });\n  });\n\n  describe('Acessibilidade', () => {\n    it('deve ter labels apropriados para screen readers', () => {\n      render(<ConfiguracoesNotificacao />);\n\n      expect(screen.getByLabelText('Ativar notificações')).toBeInTheDocument();\n      expect(screen.getByLabelText('Ativar notificações por e-mail')).toBeInTheDocument();\n      expect(screen.getByLabelText('Formato do e-mail')).toBeInTheDocument();\n      expect(screen.getByLabelText('Idioma')).toBeInTheDocument();\n    });\n\n    it('deve ter navegação por teclado funcional', () => {\n      render(<ConfiguracoesNotificacao />);\n\n      const switchAtivo = screen.getByLabelText('Ativar notificações');\n      switchAtivo.focus();\n      expect(document.activeElement).toBe(switchAtivo);\n    });\n\n    it('deve ter descrições adequadas para campos complexos', () => {\n      render(<ConfiguracoesNotificacao />);\n\n      // Verificar se há textos explicativos\n      expect(screen.getByText(/Configurações gerais de notificação/)).toBeInTheDocument();\n    });\n  });\n\n  describe('Estados de Erro', () => {\n    it('deve exibir erro ao falhar ao atualizar preferências', async () => {\n      mockHookReturn.atualizarPreferencias.mockRejectedValueOnce(new Error('Erro de rede'));\n\n      render(<ConfiguracoesNotificacao />);\n\n      const switchAtivo = screen.getByLabelText('Ativar notificações');\n      fireEvent.click(switchAtivo);\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith(\n          expect.objectContaining({\n            title: 'Erro',\n            variant: 'destructive',\n          })\n        );\n      });\n    });\n\n    it('deve exibir erro ao falhar ao pausar notificações', async () => {\n      mockHookReturn.pausarNotificacoes.mockRejectedValueOnce(new Error('Erro de rede'));\n\n      render(<ConfiguracoesNotificacao />);\n\n      const inputDataFim = screen.getByLabelText('Pausar até');\n      const botaoPausar = screen.getByText('Pausar Notificações');\n\n      fireEvent.change(inputDataFim, { target: { value: '2024-12-31' } });\n      fireEvent.click(botaoPausar);\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith(\n          expect.objectContaining({\n            title: 'Erro',\n            variant: 'destructive',\n          })\n        );\n      });\n    });\n\n    it('deve exibir erro ao falhar ao retomar notificações', async () => {\n      (usePreferenciasNotificacao as any).mockReturnValue({\n        ...mockHookReturn,\n        pausada: true,\n      });\n\n      mockHookReturn.retomarNotificacoes.mockRejectedValueOnce(new Error('Erro de rede'));\n\n      render(<ConfiguracoesNotificacao />);\n\n      const botaoRetomar = screen.getByText('Retomar Notificações');\n      fireEvent.click(botaoRetomar);\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith(\n          expect.objectContaining({\n            title: 'Erro',\n            variant: 'destructive',\n          })\n        );\n      });\n    });\n  });\n});"],"names":["vi","mock","mockPreferencias","id","usuarioId","ativo","emailAtivo","formatoEmail","idioma","conteudo","incluirDetalhesAvaliacao","incluirLinkDireto","incluirResumoEstatisticas","urgenciaMinima","tipos","pendente","frequencia","diasAntecedencia","horarioEnvio","incluirFinsDeSemanaSemana","incluirFeriados","vencida","proximaVencimento","nova","completada","personalizada","filtros","apenasMinhasAvaliacoes","apenasAvaliacoesQueAvalia","pausada","pausadaAte","motivoPausa","criadaEm","Date","toISOString","atualizadaEm","mockHookReturn","preferencias","carregando","erro","buscarPreferencias","fn","atualizarPreferencias","resetarPreferencias","pausarNotificacoes","retomarNotificacoes","verificarNotificacoesPausadas","mockToast","describe","beforeEach","clearAllMocks","usePreferenciasNotificacao","mockReturnValue","useToast","toast","afterEach","resetAllMocks","it","render","ConfiguracoesNotificacao","expect","screen","getByText","toBeInTheDocument","errorMessage","switchAtivo","getByLabelText","toBeChecked","mockResolvedValueOnce","fireEvent","click","waitFor","toHaveBeenCalledWith","objectContaining","switchEmail","seletorFormato","change","target","value","seletorIdioma","seletorUrgencia","switchDetalhes","switchLink","switchResumo","switchPendente","seletorFrequencia","inputDias","inputHorario","switchFimSemana","switchFeriados","switchMinhas","switchAvalio","inputDataFim","inputMotivo","botaoPausar","any","now","botaoRetomar","toHaveBeenCalled","title","description","variant","not","window","confirm","botaoReset","toHaveValue","focus","document","activeElement","toBe","mockRejectedValueOnce","Error"],"mappings":"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"}