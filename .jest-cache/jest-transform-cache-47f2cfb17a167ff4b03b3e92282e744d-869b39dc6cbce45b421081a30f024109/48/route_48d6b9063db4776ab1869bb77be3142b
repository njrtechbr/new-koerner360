f90d03ed765405f29711ce23405f8f0c
"use strict";

/* istanbul ignore next */
function cov_2mwxx5q3f3() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\route.ts";
  var hash = "b610c2387d93caca329124b50ae88dd46d9641f5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 18
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "9": {
        start: {
          line: 24,
          column: 14
        },
        end: {
          line: 24,
          column: 45
        }
      },
      "10": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 49
        }
      },
      "11": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 69
        }
      },
      "12": {
        start: {
          line: 27,
          column: 13
        },
        end: {
          line: 27,
          column: 27
        }
      },
      "13": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "14": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 80
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "16": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "18": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "19": {
        start: {
          line: 52,
          column: 28
        },
        end: {
          line: 52,
          column: 74
        }
      },
      "20": {
        start: {
          line: 54,
          column: 26
        },
        end: {
          line: 105,
          column: 10
        }
      },
      "21": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "22": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "23": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "24": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "25": {
        start: {
          line: 122,
          column: 22
        },
        end: {
          line: 122,
          column: 127
        }
      },
      "26": {
        start: {
          line: 123,
          column: 29
        },
        end: {
          line: 123,
          column: 105
        }
      },
      "27": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      },
      "28": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 58
        }
      },
      "29": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "30": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 165,
          column: 15
        }
      },
      "31": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      },
      "32": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 341,
          column: 5
        }
      },
      "33": {
        start: {
          line: 177,
          column: 24
        },
        end: {
          line: 177,
          column: 80
        }
      },
      "34": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "35": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 183,
          column: 15
        }
      },
      "36": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "37": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 194,
          column: 15
        }
      },
      "38": {
        start: {
          line: 197,
          column: 28
        },
        end: {
          line: 197,
          column: 74
        }
      },
      "39": {
        start: {
          line: 199,
          column: 32
        },
        end: {
          line: 199,
          column: 52
        }
      },
      "40": {
        start: {
          line: 201,
          column: 31
        },
        end: {
          line: 201,
          column: 90
        }
      },
      "41": {
        start: {
          line: 203,
          column: 35
        },
        end: {
          line: 210,
          column: 10
        }
      },
      "42": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "43": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 216,
          column: 15
        }
      },
      "44": {
        start: {
          line: 219,
          column: 33
        },
        end: {
          line: 219,
          column: 35
        }
      },
      "45": {
        start: {
          line: 220,
          column: 32
        },
        end: {
          line: 220,
          column: 34
        }
      },
      "46": {
        start: {
          line: 221,
          column: 27
        },
        end: {
          line: 221,
          column: 29
        }
      },
      "47": {
        start: {
          line: 223,
          column: 33
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "48": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "49": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "50": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 67
        }
      },
      "51": {
        start: {
          line: 246,
          column: 32
        },
        end: {
          line: 246,
          column: 53
        }
      },
      "52": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 253,
          column: 17
        }
      },
      "53": {
        start: {
          line: 252,
          column: 20
        },
        end: {
          line: 252,
          column: 52
        }
      },
      "54": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 52
        }
      },
      "55": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 46
        }
      },
      "56": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "57": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 264,
          column: 15
        }
      },
      "58": {
        start: {
          line: 267,
          column: 36
        },
        end: {
          line: 299,
          column: 10
        }
      },
      "59": {
        start: {
          line: 269,
          column: 30
        },
        end: {
          line: 286,
          column: 14
        }
      },
      "60": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 297,
          column: 15
        }
      },
      "61": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 29
        }
      },
      "62": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 325,
          column: 11
        }
      },
      "63": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 61
        }
      },
      "64": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "65": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "66": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 340,
          column: 11
        }
      },
      "67": {
        start: {
          line: 344,
          column: 4
        },
        end: {
          line: 436,
          column: 5
        }
      },
      "68": {
        start: {
          line: 346,
          column: 24
        },
        end: {
          line: 346,
          column: 80
        }
      },
      "69": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "70": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 352,
          column: 15
        }
      },
      "71": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 361,
          column: 9
        }
      },
      "72": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 360,
          column: 15
        }
      },
      "73": {
        start: {
          line: 363,
          column: 28
        },
        end: {
          line: 363,
          column: 74
        }
      },
      "74": {
        start: {
          line: 365,
          column: 35
        },
        end: {
          line: 372,
          column: 10
        }
      },
      "75": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "76": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 378,
          column: 15
        }
      },
      "77": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 417,
          column: 11
        }
      },
      "78": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 390,
          column: 15
        }
      },
      "79": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 399,
          column: 15
        }
      },
      "80": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 416,
          column: 15
        }
      },
      "81": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 420,
          column: 11
        }
      },
      "82": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 422,
          column: 59
        }
      },
      "83": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "84": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 429,
          column: 15
        }
      },
      "85": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 435,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 18
          }
        },
        loc: {
          start: {
            line: 28,
            column: 40
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 28
      },
      "5": {
        name: "PUT",
        decl: {
          start: {
            line: 174,
            column: 15
          },
          end: {
            line: 174,
            column: 18
          }
        },
        loc: {
          start: {
            line: 174,
            column: 40
          },
          end: {
            line: 342,
            column: 1
          }
        },
        line: 174
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 267,
            column: 70
          },
          end: {
            line: 267,
            column: 71
          }
        },
        loc: {
          start: {
            line: 267,
            column: 82
          },
          end: {
            line: 299,
            column: 9
          }
        },
        line: 267
      },
      "7": {
        name: "DELETE",
        decl: {
          start: {
            line: 343,
            column: 15
          },
          end: {
            line: 343,
            column: 21
          }
        },
        loc: {
          start: {
            line: 343,
            column: 43
          },
          end: {
            line: 437,
            column: 1
          }
        },
        line: 343
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 381,
            column: 42
          },
          end: {
            line: 381,
            column: 43
          }
        },
        loc: {
          start: {
            line: 381,
            column: 54
          },
          end: {
            line: 417,
            column: 9
          }
        },
        line: 381
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "3": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "4": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 49
          }
        }, {
          start: {
            line: 114,
            column: 53
          },
          end: {
            line: 114,
            column: 92
          }
        }],
        line: 114
      },
      "5": {
        loc: {
          start: {
            line: 122,
            column: 22
          },
          end: {
            line: 122,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 49
          },
          end: {
            line: 122,
            column: 120
          }
        }, {
          start: {
            line: 122,
            column: 123
          },
          end: {
            line: 122,
            column: 127
          }
        }],
        line: 122
      },
      "6": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "7": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "8": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "9": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "10": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "11": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 253,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 253,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "12": {
        loc: {
          start: {
            line: 248,
            column: 20
          },
          end: {
            line: 251,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 20
          },
          end: {
            line: 251,
            column: 33
          }
        }, {
          start: {
            line: 251,
            column: 37
          },
          end: {
            line: 251,
            column: 46
          }
        }],
        line: 248
      },
      "13": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "14": {
        loc: {
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "15": {
        loc: {
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "16": {
        loc: {
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 361,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "17": {
        loc: {
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "18": {
        loc: {
          start: {
            line: 423,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport {\n  idAtendenteSchema,\n  atualizarAtendenteSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n  validacaoAtendentes,\n} from '@/lib/validations/atendentes';\nimport { ZodError } from 'zod';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * GET /api/atendentes/[id]\n * Busca um atendente espec\xEDfico por ID\n */\nexport async function GET(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'N\xE3o autorizado' }, { status: 401 });\n    }\n\n    // Verificar permiss\xF5es\n    if (!['ADMIN', 'GERENTE', 'ATENDENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Buscar atendente\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n            ativo: true,\n            criadoEm: true,\n            atualizadoEm: true,\n          },\n        },\n        documentos: {\n          select: {\n            id: true,\n            tipo: true,\n            numero: true,\n            dataEmissao: true,\n            orgaoEmissor: true,\n            arquivo: true,\n            criadoEm: true,\n          },\n          orderBy: {\n            criadoEm: 'desc',\n          },\n        },\n        historicoAlteracoes: {\n          select: {\n            id: true,\n            tipo: true,\n            descricao: true,\n            dadosAnteriores: true,\n            dadosNovos: true,\n            criadoEm: true,\n            criadoPorId: true,\n          },\n          orderBy: {\n            criadoEm: 'desc',\n          },\n          take: 10, // \xDAltimas 10 altera\xE7\xF5es\n        },\n        _count: {\n          select: {\n            documentos: true,\n            historicoAlteracoes: true,\n          },\n        },\n      },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o atendente pode ver apenas seus pr\xF3prios dados\n    if (\n      session.user.userType === 'ATENDENTE' &&\n      atendente.usuarioId !== session.user.id\n    ) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Calcular estat\xEDsticas adicionais\n    const idade = atendente.dataNascimento\n      ? validacaoAtendentes.calcularIdade(atendente.dataNascimento)\n      : null;\n\n    const tempoEmpresa = validacaoAtendentes.calcularTempoEmpresa(\n      atendente.dataAdmissao\n    );\n\n    return NextResponse.json({\n      atendente: {\n        id: atendente.id,\n        cpf: atendente.cpf,\n        rg: atendente.rg,\n        dataNascimento: atendente.dataNascimento,\n        telefone: atendente.telefone,\n        celular: atendente.celular,\n        endereco: atendente.endereco,\n        cep: atendente.cep,\n        cidade: atendente.cidade,\n        estado: atendente.estado,\n        dataAdmissao: atendente.dataAdmissao,\n        cargo: atendente.cargo,\n        setor: atendente.setor,\n        departamento: atendente.departamento,\n        salario: atendente.salario,\n        status: atendente.status,\n        observacoes: atendente.observacoes,\n        foto: atendente.foto,\n        criadoEm: atendente.criadoEm,\n        atualizadoEm: atendente.atualizadoEm,\n        usuario: atendente.usuario,\n        documentos: atendente.documentos,\n        historicoAlteracoes: atendente.historicoAlteracoes,\n        estatisticas: {\n          idade,\n          tempoEmpresaMeses: tempoEmpresa,\n          totalDocumentos: atendente._count.documentos,\n          totalAlteracoes: atendente._count.historicoAlteracoes,\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao buscar atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PUT /api/atendentes/[id]\n * Atualiza um atendente espec\xEDfico\n */\nexport async function PUT(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'N\xE3o autorizado' }, { status: 401 });\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN e GERENTE podem atualizar)\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Extrair dados do corpo da requisi\xE7\xE3o\n    const dadosRequisicao = await request.json();\n\n    // Validar dados\n    const dadosValidados = atualizarAtendenteSchema.parse(dadosRequisicao);\n\n    // Verificar se o atendente existe\n    const atendenteExistente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      include: {\n        usuario: true,\n      },\n    });\n\n    if (!atendenteExistente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Preparar dados para atualiza\xE7\xE3o\n    const dadosAtualizacao: any = {};\n    const dadosAnteriores: any = {};\n    const dadosNovos: any = {};\n\n    // Mapear campos que podem ser atualizados\n    const camposPermitidos = [\n      'rg',\n      'dataNascimento',\n      'telefone',\n      'celular',\n      'endereco',\n      'cep',\n      'cidade',\n      'estado',\n      'dataAdmissao',\n      'cargo',\n      'setor',\n      'departamento',\n      'salario',\n      'status',\n      'observacoes',\n      'foto',\n    ];\n\n    for (const campo of camposPermitidos) {\n      if (dadosValidados[campo] !== undefined) {\n        // Armazenar valor anterior\n        dadosAnteriores[campo] = atendenteExistente[campo];\n\n        // Preparar novo valor\n        let novoValor = dadosValidados[campo];\n\n        // Converter datas se necess\xE1rio\n        if (['dataNascimento', 'dataAdmissao'].includes(campo) && novoValor) {\n          novoValor = new Date(novoValor);\n        }\n\n        dadosAtualizacao[campo] = novoValor;\n        dadosNovos[campo] = novoValor;\n      }\n    }\n\n    // Se n\xE3o h\xE1 dados para atualizar\n    if (Object.keys(dadosAtualizacao).length === 0) {\n      return NextResponse.json(\n        { erro: 'Nenhum dado v\xE1lido fornecido para atualiza\xE7\xE3o' },\n        { status: 400 }\n      );\n    }\n\n    // Atualizar atendente em uma transa\xE7\xE3o\n    const atendenteAtualizado = await prisma.$transaction(async tx => {\n      // Atualizar dados do atendente\n      const atendente = await tx.atendente.update({\n        where: { id: atendenteId },\n        data: dadosAtualizacao,\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n              ativo: true,\n              criadoEm: true,\n              atualizadoEm: true,\n            },\n          },\n        },\n      });\n\n      // Registrar no hist\xF3rico de altera\xE7\xF5es\n      await tx.historicoAlteracaoAtendente.create({\n        data: {\n          atendenteId: atendenteId,\n          tipo: 'ATUALIZACAO',\n          descricao: `Dados do atendente atualizados: ${Object.keys(dadosNovos).join(', ')}`,\n          dadosAnteriores: JSON.stringify(dadosAnteriores),\n          dadosNovos: JSON.stringify(dadosNovos),\n          criadoPorId: session.user.id,\n        },\n      });\n\n      return atendente;\n    });\n\n    return NextResponse.json({\n      mensagem: 'Atendente atualizado com sucesso',\n      atendente: {\n        id: atendenteAtualizado.id,\n        cpf: atendenteAtualizado.cpf,\n        rg: atendenteAtualizado.rg,\n        dataNascimento: atendenteAtualizado.dataNascimento,\n        telefone: atendenteAtualizado.telefone,\n        celular: atendenteAtualizado.celular,\n        endereco: atendenteAtualizado.endereco,\n        cep: atendenteAtualizado.cep,\n        cidade: atendenteAtualizado.cidade,\n        estado: atendenteAtualizado.estado,\n        dataAdmissao: atendenteAtualizado.dataAdmissao,\n        cargo: atendenteAtualizado.cargo,\n        setor: atendenteAtualizado.setor,\n        departamento: atendenteAtualizado.departamento,\n        salario: atendenteAtualizado.salario,\n        status: atendenteAtualizado.status,\n        observacoes: atendenteAtualizado.observacoes,\n        foto: atendenteAtualizado.foto,\n        criadoEm: atendenteAtualizado.criadoEm,\n        atualizadoEm: atendenteAtualizado.atualizadoEm,\n        usuario: atendenteAtualizado.usuario,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/atendentes/[id]\n * Remove um atendente (soft delete)\n */\nexport async function DELETE(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'N\xE3o autorizado' }, { status: 401 });\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN pode deletar)\n    if (session.user.userType !== 'ADMIN') {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Verificar se o atendente existe\n    const atendenteExistente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      include: {\n        usuario: true,\n      },\n    });\n\n    if (!atendenteExistente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Realizar soft delete em uma transa\xE7\xE3o\n    await prisma.$transaction(async tx => {\n      // Desativar usu\xE1rio relacionado\n      await tx.usuario.update({\n        where: { id: atendenteExistente.usuarioId },\n        data: { ativo: false },\n      });\n\n      // Atualizar status do atendente para INATIVO\n      await tx.atendente.update({\n        where: { id: atendenteId },\n        data: { status: 'INATIVO' },\n      });\n\n      // Registrar no hist\xF3rico de altera\xE7\xF5es\n      await tx.historicoAlteracaoAtendente.create({\n        data: {\n          atendenteId: atendenteId,\n          tipo: 'EXCLUSAO',\n          descricao: 'Atendente removido do sistema (soft delete)',\n          dadosAnteriores: JSON.stringify({\n            status: atendenteExistente.status,\n            usuarioAtivo: atendenteExistente.usuario.ativo,\n          }),\n          dadosNovos: JSON.stringify({\n            status: 'INATIVO',\n            usuarioAtivo: false,\n          }),\n          criadoPorId: session.user.id,\n        },\n      });\n    });\n\n    return NextResponse.json({\n      mensagem: 'Atendente removido com sucesso',\n    });\n  } catch (error) {\n    console.error('Erro ao remover atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["DELETE", "GET", "PUT", "request", "params", "session", "getServerSession", "authOptions", "user", "NextResponse", "json", "erro", "status", "includes", "userType", "MENSAGENS_ERRO_ATENDENTES", "SEM_PERMISSAO", "atendenteId", "idAtendenteSchema", "parse", "id", "atendente", "prisma", "findUnique", "where", "include", "usuario", "select", "nome", "email", "ativo", "criadoEm", "atualizadoEm", "documentos", "tipo", "numero", "dataEmissao", "orgaoEmissor", "arquivo", "orderBy", "historicoAlteracoes", "descricao", "dadosAnteriores", "dadosNovos", "criadoPorId", "take", "_count", "ATENDENTE_NAO_ENCONTRADO", "usuarioId", "idade", "dataNascimento", "validacaoAtendentes", "calcularIdade", "tempoEmpresa", "calcularTempoEmpresa", "dataAdmissao", "cpf", "rg", "telefone", "celular", "endereco", "cep", "cidade", "estado", "cargo", "setor", "departamento", "salario", "observacoes", "foto", "estatisticas", "tempoEmpresaMeses", "totalDocumentos", "totalAlteracoes", "error", "console", "ZodError", "DADOS_INVALIDOS", "detalhes", "errors", "ERRO_INTERNO", "dadosRequisicao", "dadosValidados", "atualizarAtendenteSchema", "atendenteExistente", "dadosAtualizacao", "camposPermitidos", "campo", "undefined", "novoValor", "Date", "Object", "keys", "length", "atendenteAtualizado", "$transaction", "tx", "update", "data", "historicoAlteracaoAtendente", "create", "join", "JSON", "stringify", "mensagem", "usuarioAtivo"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b610c2387d93caca329124b50ae88dd46d9641f5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mwxx5q3f3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mwxx5q3f3();
cov_2mwxx5q3f3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2mwxx5q3f3().f[0]++;
  cov_2mwxx5q3f3().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2mwxx5q3f3().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_2mwxx5q3f3().f[1]++;
    cov_2mwxx5q3f3().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_2mwxx5q3f3().f[2]++;
    cov_2mwxx5q3f3().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_2mwxx5q3f3().f[3]++;
    cov_2mwxx5q3f3().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_2mwxx5q3f3().s[7]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_2mwxx5q3f3().s[8]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_2mwxx5q3f3().s[9]++, require("../../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(cov_2mwxx5q3f3().s[10]++, require("../../../../lib/prisma"));
const _atendentes =
/* istanbul ignore next */
(cov_2mwxx5q3f3().s[11]++, require("../../../../lib/validations/atendentes"));
const _zod =
/* istanbul ignore next */
(cov_2mwxx5q3f3().s[12]++, require("zod"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2mwxx5q3f3().f[4]++;
  cov_2mwxx5q3f3().s[13]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[14]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[15]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[0][0]++;
      cov_2mwxx5q3f3().s[16]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[0][1]++;
    }
    // Verificar permissões
    cov_2mwxx5q3f3().s[17]++;
    if (!['ADMIN', 'GERENTE', 'ATENDENTE'].includes(session.user.userType)) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[1][0]++;
      cov_2mwxx5q3f3().s[18]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[1][1]++;
    }
    // Validar ID
    const atendenteId =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[19]++, _atendentes.idAtendenteSchema.parse(params.id));
    // Buscar atendente
    const atendente =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[20]++, await _prisma.prisma.atendente.findUnique({
      where: {
        id: atendenteId
      },
      include: {
        usuario: {
          select: {
            id: true,
            nome: true,
            email: true,
            ativo: true,
            criadoEm: true,
            atualizadoEm: true
          }
        },
        documentos: {
          select: {
            id: true,
            tipo: true,
            numero: true,
            dataEmissao: true,
            orgaoEmissor: true,
            arquivo: true,
            criadoEm: true
          },
          orderBy: {
            criadoEm: 'desc'
          }
        },
        historicoAlteracoes: {
          select: {
            id: true,
            tipo: true,
            descricao: true,
            dadosAnteriores: true,
            dadosNovos: true,
            criadoEm: true,
            criadoPorId: true
          },
          orderBy: {
            criadoEm: 'desc'
          },
          take: 10
        },
        _count: {
          select: {
            documentos: true,
            historicoAlteracoes: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[21]++;
    if (!atendente) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[2][0]++;
      cov_2mwxx5q3f3().s[22]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[2][1]++;
    }
    // Verificar se o atendente pode ver apenas seus próprios dados
    cov_2mwxx5q3f3().s[23]++;
    if (
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().b[4][0]++, session.user.userType === 'ATENDENTE') &&
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().b[4][1]++, atendente.usuarioId !== session.user.id)) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[3][0]++;
      cov_2mwxx5q3f3().s[24]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[3][1]++;
    }
    // Calcular estatísticas adicionais
    const idade =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[25]++, atendente.dataNascimento ?
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().b[5][0]++, _atendentes.validacaoAtendentes.calcularIdade(atendente.dataNascimento)) :
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().b[5][1]++, null));
    const tempoEmpresa =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[26]++, _atendentes.validacaoAtendentes.calcularTempoEmpresa(atendente.dataAdmissao));
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[27]++;
    return _server.NextResponse.json({
      atendente: {
        id: atendente.id,
        cpf: atendente.cpf,
        rg: atendente.rg,
        dataNascimento: atendente.dataNascimento,
        telefone: atendente.telefone,
        celular: atendente.celular,
        endereco: atendente.endereco,
        cep: atendente.cep,
        cidade: atendente.cidade,
        estado: atendente.estado,
        dataAdmissao: atendente.dataAdmissao,
        cargo: atendente.cargo,
        setor: atendente.setor,
        departamento: atendente.departamento,
        salario: atendente.salario,
        status: atendente.status,
        observacoes: atendente.observacoes,
        foto: atendente.foto,
        criadoEm: atendente.criadoEm,
        atualizadoEm: atendente.atualizadoEm,
        usuario: atendente.usuario,
        documentos: atendente.documentos,
        historicoAlteracoes: atendente.historicoAlteracoes,
        estatisticas: {
          idade,
          tempoEmpresaMeses: tempoEmpresa,
          totalDocumentos: atendente._count.documentos,
          totalAlteracoes: atendente._count.historicoAlteracoes
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[28]++;
    console.error('Erro ao buscar atendente:', error);
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[29]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[6][0]++;
      cov_2mwxx5q3f3().s[30]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[6][1]++;
    }
    cov_2mwxx5q3f3().s[31]++;
    return _server.NextResponse.json({
      erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2mwxx5q3f3().f[5]++;
  cov_2mwxx5q3f3().s[32]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[33]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[34]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[7][0]++;
      cov_2mwxx5q3f3().s[35]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[7][1]++;
    }
    // Verificar permissões (apenas ADMIN e GERENTE podem atualizar)
    cov_2mwxx5q3f3().s[36]++;
    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[8][0]++;
      cov_2mwxx5q3f3().s[37]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[8][1]++;
    }
    // Validar ID
    const atendenteId =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[38]++, _atendentes.idAtendenteSchema.parse(params.id));
    // Extrair dados do corpo da requisição
    const dadosRequisicao =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[39]++, await request.json());
    // Validar dados
    const dadosValidados =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[40]++, _atendentes.atualizarAtendenteSchema.parse(dadosRequisicao));
    // Verificar se o atendente existe
    const atendenteExistente =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[41]++, await _prisma.prisma.atendente.findUnique({
      where: {
        id: atendenteId
      },
      include: {
        usuario: true
      }
    }));
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[42]++;
    if (!atendenteExistente) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[9][0]++;
      cov_2mwxx5q3f3().s[43]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[9][1]++;
    }
    // Preparar dados para atualização
    const dadosAtualizacao =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[44]++, {});
    const dadosAnteriores =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[45]++, {});
    const dadosNovos =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[46]++, {});
    // Mapear campos que podem ser atualizados
    const camposPermitidos =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[47]++, ['rg', 'dataNascimento', 'telefone', 'celular', 'endereco', 'cep', 'cidade', 'estado', 'dataAdmissao', 'cargo', 'setor', 'departamento', 'salario', 'status', 'observacoes', 'foto']);
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[48]++;
    for (const campo of camposPermitidos) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().s[49]++;
      if (dadosValidados[campo] !== undefined) {
        /* istanbul ignore next */
        cov_2mwxx5q3f3().b[10][0]++;
        cov_2mwxx5q3f3().s[50]++;
        // Armazenar valor anterior
        dadosAnteriores[campo] = atendenteExistente[campo];
        // Preparar novo valor
        let novoValor =
        /* istanbul ignore next */
        (cov_2mwxx5q3f3().s[51]++, dadosValidados[campo]);
        // Converter datas se necessário
        /* istanbul ignore next */
        cov_2mwxx5q3f3().s[52]++;
        if (
        /* istanbul ignore next */
        (cov_2mwxx5q3f3().b[12][0]++, ['dataNascimento', 'dataAdmissao'].includes(campo)) &&
        /* istanbul ignore next */
        (cov_2mwxx5q3f3().b[12][1]++, novoValor)) {
          /* istanbul ignore next */
          cov_2mwxx5q3f3().b[11][0]++;
          cov_2mwxx5q3f3().s[53]++;
          novoValor = new Date(novoValor);
        } else
        /* istanbul ignore next */
        {
          cov_2mwxx5q3f3().b[11][1]++;
        }
        cov_2mwxx5q3f3().s[54]++;
        dadosAtualizacao[campo] = novoValor;
        /* istanbul ignore next */
        cov_2mwxx5q3f3().s[55]++;
        dadosNovos[campo] = novoValor;
      } else
      /* istanbul ignore next */
      {
        cov_2mwxx5q3f3().b[10][1]++;
      }
    }
    // Se não há dados para atualizar
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[56]++;
    if (Object.keys(dadosAtualizacao).length === 0) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[13][0]++;
      cov_2mwxx5q3f3().s[57]++;
      return _server.NextResponse.json({
        erro: 'Nenhum dado válido fornecido para atualização'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[13][1]++;
    }
    // Atualizar atendente em uma transação
    const atendenteAtualizado =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[58]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().f[6]++;
      // Atualizar dados do atendente
      const atendente =
      /* istanbul ignore next */
      (cov_2mwxx5q3f3().s[59]++, await tx.atendente.update({
        where: {
          id: atendenteId
        },
        data: dadosAtualizacao,
        include: {
          usuario: {
            select: {
              id: true,
              nome: true,
              email: true,
              ativo: true,
              criadoEm: true,
              atualizadoEm: true
            }
          }
        }
      }));
      // Registrar no histórico de alterações
      /* istanbul ignore next */
      cov_2mwxx5q3f3().s[60]++;
      await tx.historicoAlteracaoAtendente.create({
        data: {
          atendenteId: atendenteId,
          tipo: 'ATUALIZACAO',
          descricao: `Dados do atendente atualizados: ${Object.keys(dadosNovos).join(', ')}`,
          dadosAnteriores: JSON.stringify(dadosAnteriores),
          dadosNovos: JSON.stringify(dadosNovos),
          criadoPorId: session.user.id
        }
      });
      /* istanbul ignore next */
      cov_2mwxx5q3f3().s[61]++;
      return atendente;
    }));
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[62]++;
    return _server.NextResponse.json({
      mensagem: 'Atendente atualizado com sucesso',
      atendente: {
        id: atendenteAtualizado.id,
        cpf: atendenteAtualizado.cpf,
        rg: atendenteAtualizado.rg,
        dataNascimento: atendenteAtualizado.dataNascimento,
        telefone: atendenteAtualizado.telefone,
        celular: atendenteAtualizado.celular,
        endereco: atendenteAtualizado.endereco,
        cep: atendenteAtualizado.cep,
        cidade: atendenteAtualizado.cidade,
        estado: atendenteAtualizado.estado,
        dataAdmissao: atendenteAtualizado.dataAdmissao,
        cargo: atendenteAtualizado.cargo,
        setor: atendenteAtualizado.setor,
        departamento: atendenteAtualizado.departamento,
        salario: atendenteAtualizado.salario,
        status: atendenteAtualizado.status,
        observacoes: atendenteAtualizado.observacoes,
        foto: atendenteAtualizado.foto,
        criadoEm: atendenteAtualizado.criadoEm,
        atualizadoEm: atendenteAtualizado.atualizadoEm,
        usuario: atendenteAtualizado.usuario
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[63]++;
    console.error('Erro ao atualizar atendente:', error);
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[64]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[14][0]++;
      cov_2mwxx5q3f3().s[65]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[14][1]++;
    }
    cov_2mwxx5q3f3().s[66]++;
    return _server.NextResponse.json({
      erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2mwxx5q3f3().f[7]++;
  cov_2mwxx5q3f3().s[67]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[68]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[69]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[15][0]++;
      cov_2mwxx5q3f3().s[70]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[15][1]++;
    }
    // Verificar permissões (apenas ADMIN pode deletar)
    cov_2mwxx5q3f3().s[71]++;
    if (session.user.userType !== 'ADMIN') {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[16][0]++;
      cov_2mwxx5q3f3().s[72]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[16][1]++;
    }
    // Validar ID
    const atendenteId =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[73]++, _atendentes.idAtendenteSchema.parse(params.id));
    // Verificar se o atendente existe
    const atendenteExistente =
    /* istanbul ignore next */
    (cov_2mwxx5q3f3().s[74]++, await _prisma.prisma.atendente.findUnique({
      where: {
        id: atendenteId
      },
      include: {
        usuario: true
      }
    }));
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[75]++;
    if (!atendenteExistente) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[17][0]++;
      cov_2mwxx5q3f3().s[76]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[17][1]++;
    }
    // Realizar soft delete em uma transação
    cov_2mwxx5q3f3().s[77]++;
    await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().f[8]++;
      cov_2mwxx5q3f3().s[78]++;
      // Desativar usuário relacionado
      await tx.usuario.update({
        where: {
          id: atendenteExistente.usuarioId
        },
        data: {
          ativo: false
        }
      });
      // Atualizar status do atendente para INATIVO
      /* istanbul ignore next */
      cov_2mwxx5q3f3().s[79]++;
      await tx.atendente.update({
        where: {
          id: atendenteId
        },
        data: {
          status: 'INATIVO'
        }
      });
      // Registrar no histórico de alterações
      /* istanbul ignore next */
      cov_2mwxx5q3f3().s[80]++;
      await tx.historicoAlteracaoAtendente.create({
        data: {
          atendenteId: atendenteId,
          tipo: 'EXCLUSAO',
          descricao: 'Atendente removido do sistema (soft delete)',
          dadosAnteriores: JSON.stringify({
            status: atendenteExistente.status,
            usuarioAtivo: atendenteExistente.usuario.ativo
          }),
          dadosNovos: JSON.stringify({
            status: 'INATIVO',
            usuarioAtivo: false
          }),
          criadoPorId: session.user.id
        }
      });
    });
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[81]++;
    return _server.NextResponse.json({
      mensagem: 'Atendente removido com sucesso'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[82]++;
    console.error('Erro ao remover atendente:', error);
    /* istanbul ignore next */
    cov_2mwxx5q3f3().s[83]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_2mwxx5q3f3().b[18][0]++;
      cov_2mwxx5q3f3().s[84]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mwxx5q3f3().b[18][1]++;
    }
    cov_2mwxx5q3f3().s[85]++;
    return _server.NextResponse.json({
      erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,