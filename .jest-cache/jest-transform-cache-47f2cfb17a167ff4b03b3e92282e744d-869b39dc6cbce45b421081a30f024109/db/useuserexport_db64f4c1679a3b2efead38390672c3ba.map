{"version":3,"names":["cov_dv3txjdiq","actualCoverage","s","default","f","_default","useUserExport","exportando","setExportando","_react","useState","progresso","setProgresso","controladorAbort","setControladorAbort","gerarNomeArquivo","formato","prefixo","b","agora","Date","timestamp","toISOString","slice","replace","filtrarCampos","usuario","opcoes","incluirCampos","excluirCampos","length","usuarioFiltrado","forEach","campo","aplicarFiltros","usuarios","filtros","filter","status","ativo","tipo","dataInicio","dataUsuario","criadoEm","dataFim","exportarParaCSV","dados","nomeArquivo","_sonner","toast","error","cabecalhos","Object","keys","linhasCabecalho","join","linhasDados","map","item","cabecalho","valor","undefined","includes","csvContent","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","revokeObjectURL","exportarParaJSON","jsonContent","JSON","stringify","exportarParaXLSX","XLSX","Promise","resolve","then","_interop_require_wildcard","require","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","writeFile","console","exportarUsuarios","warning","controller","AbortController","usuariosFiltrados","signal","aborted","dadosProcessados","Error","success","exportarTodosUsuarios","response","fetch","method","headers","ok","data","json","baixarTemplate","templateData","id","nome","email","atualizadoEm","cancelarExportacao","abort","info"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-user-export.ts"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { toast } from 'sonner';\nimport { Usuario } from '@/types/usuario';\n\nexport type FormatoExportacao = 'csv' | 'json' | 'xlsx';\n\nexport interface OpcoesExportacao {\n  formato: FormatoExportacao;\n  incluirCampos?: string[];\n  excluirCampos?: string[];\n  filtros?: {\n    status?: 'ativo' | 'inativo';\n    tipo?: 'ADMIN' | 'GESTOR' | 'ATENDENTE';\n    dataInicio?: string;\n    dataFim?: string;\n  };\n  nomeArquivo?: string;\n}\n\nexport interface UseUserExportReturn {\n  exportando: boolean;\n  progresso: number;\n  exportarUsuarios: (\n    usuarios: Usuario[],\n    opcoes: OpcoesExportacao\n  ) => Promise<void>;\n  exportarTodosUsuarios: (opcoes: OpcoesExportacao) => Promise<void>;\n  baixarTemplate: (formato: FormatoExportacao) => void;\n  cancelarExportacao: () => void;\n}\n\nexport function useUserExport(): UseUserExportReturn {\n  const [exportando, setExportando] = useState(false);\n  const [progresso, setProgresso] = useState(0);\n  const [controladorAbort, setControladorAbort] =\n    useState<AbortController | null>(null);\n\n  const gerarNomeArquivo = (\n    formato: FormatoExportacao,\n    prefixo: string = 'usuarios'\n  ): string => {\n    const agora = new Date();\n    const timestamp = agora.toISOString().slice(0, 19).replace(/[T:]/g, '-');\n    return `${prefixo}_${timestamp}.${formato}`;\n  };\n\n  const filtrarCampos = (\n    usuario: Usuario,\n    opcoes: OpcoesExportacao\n  ): Partial<Usuario> => {\n    const { incluirCampos, excluirCampos } = opcoes;\n\n    if (incluirCampos && incluirCampos.length > 0) {\n      const usuarioFiltrado: Partial<Usuario> = {};\n      incluirCampos.forEach(campo => {\n        if (campo in usuario) {\n          (usuarioFiltrado as any)[campo] = (usuario as any)[campo];\n        }\n      });\n      return usuarioFiltrado;\n    }\n\n    if (excluirCampos && excluirCampos.length > 0) {\n      const usuarioFiltrado = { ...usuario };\n      excluirCampos.forEach(campo => {\n        delete (usuarioFiltrado as any)[campo];\n      });\n      return usuarioFiltrado;\n    }\n\n    return usuario;\n  };\n\n  const aplicarFiltros = (\n    usuarios: Usuario[],\n    opcoes: OpcoesExportacao\n  ): Usuario[] => {\n    const { filtros } = opcoes;\n\n    if (!filtros) return usuarios;\n\n    return usuarios.filter(usuario => {\n      if (filtros.status && usuario.ativo !== (filtros.status === 'ativo')) {\n        return false;\n      }\n\n      if (filtros.tipo && usuario.tipo !== filtros.tipo) {\n        return false;\n      }\n\n      if (filtros.dataInicio) {\n        const dataUsuario = new Date(usuario.criadoEm);\n        const dataInicio = new Date(filtros.dataInicio);\n        if (dataUsuario < dataInicio) {\n          return false;\n        }\n      }\n\n      if (filtros.dataFim) {\n        const dataUsuario = new Date(usuario.criadoEm);\n        const dataFim = new Date(filtros.dataFim);\n        if (dataUsuario > dataFim) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  };\n\n  const exportarParaCSV = (\n    dados: Partial<Usuario>[],\n    nomeArquivo: string\n  ): void => {\n    if (dados.length === 0) {\n      toast.error('Nenhum dado para exportar');\n      return;\n    }\n\n    const cabecalhos = Object.keys(dados[0]);\n    const linhasCabecalho = cabecalhos.join(',');\n\n    const linhasDados = dados.map(item =>\n      cabecalhos\n        .map(cabecalho => {\n          const valor = (item as any)[cabecalho];\n          if (valor === null || valor === undefined) return '';\n          if (typeof valor === 'string' && valor.includes(',')) {\n            return `\"${valor.replace(/\"/g, '\"\"')}\"`;\n          }\n          return valor;\n        })\n        .join(',')\n    );\n\n    const csvContent = [linhasCabecalho, ...linhasDados].join('\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = nomeArquivo;\n    link.click();\n\n    URL.revokeObjectURL(link.href);\n  };\n\n  const exportarParaJSON = (\n    dados: Partial<Usuario>[],\n    nomeArquivo: string\n  ): void => {\n    if (dados.length === 0) {\n      toast.error('Nenhum dado para exportar');\n      return;\n    }\n\n    const jsonContent = JSON.stringify(dados, null, 2);\n    const blob = new Blob([jsonContent], {\n      type: 'application/json;charset=utf-8;',\n    });\n\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = nomeArquivo;\n    link.click();\n\n    URL.revokeObjectURL(link.href);\n  };\n\n  const exportarParaXLSX = async (\n    dados: Partial<Usuario>[],\n    nomeArquivo: string\n  ): Promise<void> => {\n    try {\n      // Importação dinâmica para reduzir o bundle size\n      const XLSX = await import('xlsx');\n\n      if (dados.length === 0) {\n        toast.error('Nenhum dado para exportar');\n        return;\n      }\n\n      const worksheet = XLSX.utils.json_to_sheet(dados);\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Usuários');\n\n      XLSX.writeFile(workbook, nomeArquivo);\n    } catch (error) {\n      console.error('Erro ao exportar para XLSX:', error);\n      toast.error(\n        'Erro ao exportar arquivo Excel. Verifique se a biblioteca está instalada.'\n      );\n    }\n  };\n\n  const exportarUsuarios = async (\n    usuarios: Usuario[],\n    opcoes: OpcoesExportacao\n  ): Promise<void> => {\n    if (exportando) {\n      toast.warning('Já existe uma exportação em andamento');\n      return;\n    }\n\n    try {\n      setExportando(true);\n      setProgresso(0);\n\n      const controller = new AbortController();\n      setControladorAbort(controller);\n\n      // Simular progresso\n      setProgresso(10);\n\n      // Aplicar filtros\n      const usuariosFiltrados = aplicarFiltros(usuarios, opcoes);\n      setProgresso(30);\n\n      if (controller.signal.aborted) return;\n\n      // Filtrar campos\n      const dadosProcessados = usuariosFiltrados.map(usuario =>\n        filtrarCampos(usuario, opcoes)\n      );\n      setProgresso(60);\n\n      if (controller.signal.aborted) return;\n\n      const nomeArquivo =\n        opcoes.nomeArquivo || gerarNomeArquivo(opcoes.formato);\n\n      // Exportar conforme o formato\n      switch (opcoes.formato) {\n        case 'csv':\n          exportarParaCSV(dadosProcessados, nomeArquivo);\n          break;\n        case 'json':\n          exportarParaJSON(dadosProcessados, nomeArquivo);\n          break;\n        case 'xlsx':\n          await exportarParaXLSX(dadosProcessados, nomeArquivo);\n          break;\n        default:\n          throw new Error(`Formato não suportado: ${opcoes.formato}`);\n      }\n\n      setProgresso(100);\n\n      if (!controller.signal.aborted) {\n        toast.success(`Arquivo exportado com sucesso: ${nomeArquivo}`);\n      }\n    } catch (error) {\n      console.error('Erro na exportação:', error);\n      toast.error('Erro ao exportar dados dos usuários');\n    } finally {\n      setExportando(false);\n      setProgresso(0);\n      setControladorAbort(null);\n    }\n  };\n\n  const exportarTodosUsuarios = async (\n    opcoes: OpcoesExportacao\n  ): Promise<void> => {\n    try {\n      setExportando(true);\n      setProgresso(0);\n\n      // Buscar todos os usuários da API\n      const response = await fetch('/api/usuarios?limite=1000', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao buscar usuários');\n      }\n\n      const data = await response.json();\n      setProgresso(20);\n\n      await exportarUsuarios(data.usuarios || [], opcoes);\n    } catch (error) {\n      console.error('Erro ao buscar usuários para exportação:', error);\n      toast.error('Erro ao buscar dados dos usuários');\n      setExportando(false);\n      setProgresso(0);\n    }\n  };\n\n  const baixarTemplate = (formato: FormatoExportacao): void => {\n    const templateData = [\n      {\n        id: 'exemplo',\n        nome: 'Nome do Usuário',\n        email: 'usuario@exemplo.com',\n        tipo: 'ATENDENTE',\n        ativo: true,\n        criadoEm: new Date().toISOString(),\n        atualizadoEm: new Date().toISOString(),\n      },\n    ];\n\n    const nomeArquivo = gerarNomeArquivo(formato, 'template_usuarios');\n\n    switch (formato) {\n      case 'csv':\n        exportarParaCSV(templateData, nomeArquivo);\n        break;\n      case 'json':\n        exportarParaJSON(templateData, nomeArquivo);\n        break;\n      case 'xlsx':\n        exportarParaXLSX(templateData, nomeArquivo);\n        break;\n    }\n\n    toast.success(`Template baixado: ${nomeArquivo}`);\n  };\n\n  const cancelarExportacao = (): void => {\n    if (controladorAbort) {\n      controladorAbort.abort();\n      setControladorAbort(null);\n      setExportando(false);\n      setProgresso(0);\n      toast.info('Exportação cancelada');\n    }\n  };\n\n  return {\n    exportando,\n    progresso,\n    exportarUsuarios,\n    exportarTodosUsuarios,\n    baixarTemplate,\n    cancelarExportacao,\n  };\n}\n\nexport default useUserExport;\n"],"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","ignoreList":[]}