{"version":3,"names":["cov_9iory5xbj","actualCoverage","s","default","f","_default","useUserSearch","useDebounce","value","delay","debouncedValue","setDebouncedValue","_react","useState","useEffect","handler","setTimeout","clearTimeout","listarUsuarios","carregando","erro","_useusuarios","useUsuarios","filtros","setFiltros","termo","perfil","status","ordenarPor","ordem","paginacao","setPaginacao","paginaAtual","itensPorPagina","resultados","setResultados","usuarios","totalEncontrados","historico","setHistorico","buscaAtiva","setBuscaAtiva","ultimaBusca","setUltimaBusca","termoBuscaDebounced","filtrosAtivos","useMemo","ativos","trim","b","push","dataInicio","dataFim","converterFiltrosParaParametros","useCallback","filtrosBusca","config","parametros","pagina","limite","busca","ativo","executarBusca","configPaginacao","filtrosUsados","paginacaoUsada","inicioTempo","Date","now","resposta","tempoResposta","novoResultado","totalItens","novoHistorico","id","toString","timestamp","prev","slice","error","console","atualizarFiltro","campo","valor","atualizarFiltros","novosFiltros","limparFiltros","irParaPagina","alterarItensPorPagina","quantidade","aplicarBuscaHistorico","item","removerDoHistorico","filter","limparHistorico","exportarResultados","formato","length","Error","dados","map","usuario","ID","Nome","nome","Email","email","Perfil","Status","criadoEm","toLocaleDateString","atualizadoEm","cabecalho","Object","keys","join","linhas","linha","values","csv","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","toISOString","split","click","json","JSON","stringify","temFiltrosAtivos","temResultados","podeExportar"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\hooks\\use-user-search.ts"],"sourcesContent":["'use client';\n\nimport { useState, useCallback, useEffect, useMemo } from 'react';\nimport {\n  useUsuarios,\n  type ParametrosListagem,\n  type Usuario,\n  type PaginacaoInfo,\n} from './use-usuarios';\nimport { useDebounce } from './use-debounce';\n\n// Tipos para filtros de busca\nexport interface FiltrosBusca {\n  termo: string;\n  perfil: 'ADMIN' | 'GESTOR' | 'ATENDENTE' | 'TODOS';\n  status: 'ATIVO' | 'INATIVO' | 'TODOS';\n  dataInicio?: string;\n  dataFim?: string;\n  ordenarPor: 'nome' | 'email' | 'criadoEm' | 'atualizadoEm';\n  ordem: 'asc' | 'desc';\n}\n\nexport interface ConfiguracaoPaginacao {\n  paginaAtual: number;\n  itensPorPagina: number;\n}\n\nexport interface ResultadoBusca {\n  usuarios: Usuario[];\n  paginacao: PaginacaoInfo | null;\n  totalEncontrados: number;\n  tempoResposta?: number;\n}\n\nexport interface HistoricoBusca {\n  id: string;\n  termo: string;\n  filtros: FiltrosBusca;\n  timestamp: Date;\n  resultados: number;\n}\n\n/**\n * Hook personalizado para debounce\n */\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\n/**\n * Hook para busca avançada de usuários\n * Fornece funcionalidades de busca, filtros, paginação e histórico\n */\nexport function useUserSearch() {\n  const { listarUsuarios, carregando, erro } = useUsuarios();\n\n  // Estado dos filtros\n  const [filtros, setFiltros] = useState<FiltrosBusca>({\n    termo: '',\n    perfil: 'TODOS',\n    status: 'TODOS',\n    ordenarPor: 'nome',\n    ordem: 'asc',\n  });\n\n  // Estado da paginação\n  const [paginacao, setPaginacao] = useState<ConfiguracaoPaginacao>({\n    paginaAtual: 1,\n    itensPorPagina: 10,\n  });\n\n  // Estado dos resultados\n  const [resultados, setResultados] = useState<ResultadoBusca>({\n    usuarios: [],\n    paginacao: null,\n    totalEncontrados: 0,\n  });\n\n  // Estado do histórico\n  const [historico, setHistorico] = useState<HistoricoBusca[]>([]);\n\n  // Estado de busca ativa\n  const [buscaAtiva, setBuscaAtiva] = useState(false);\n  const [ultimaBusca, setUltimaBusca] = useState<Date | null>(null);\n\n  // Debounce do termo de busca\n  const termoBuscaDebounced = useDebounce(filtros.termo, 500);\n\n  // Filtros ativos (excluindo valores padrão)\n  const filtrosAtivos = useMemo(() => {\n    const ativos: string[] = [];\n\n    if (filtros.termo.trim()) ativos.push(`Termo: \"${filtros.termo}\"`);\n    if (filtros.perfil !== 'TODOS') ativos.push(`Perfil: ${filtros.perfil}`);\n    if (filtros.status !== 'TODOS') ativos.push(`Status: ${filtros.status}`);\n    if (filtros.dataInicio) ativos.push(`Data início: ${filtros.dataInicio}`);\n    if (filtros.dataFim) ativos.push(`Data fim: ${filtros.dataFim}`);\n    if (filtros.ordenarPor !== 'nome' || filtros.ordem !== 'asc') {\n      ativos.push(`Ordenação: ${filtros.ordenarPor} (${filtros.ordem})`);\n    }\n\n    return ativos;\n  }, [filtros]);\n\n  /**\n   * Converter filtros para parâmetros da API\n   */\n  const converterFiltrosParaParametros = useCallback(\n    (\n      filtrosBusca: FiltrosBusca,\n      config: ConfiguracaoPaginacao\n    ): ParametrosListagem => {\n      const parametros: ParametrosListagem = {\n        pagina: config.paginaAtual,\n        limite: config.itensPorPagina,\n        ordenarPor: filtrosBusca.ordenarPor,\n        ordem: filtrosBusca.ordem,\n      };\n\n      if (filtrosBusca.termo.trim()) {\n        parametros.busca = filtrosBusca.termo.trim();\n      }\n\n      if (filtrosBusca.perfil !== 'TODOS') {\n        parametros.perfil = filtrosBusca.perfil;\n      }\n\n      if (filtrosBusca.status !== 'TODOS') {\n        parametros.ativo = filtrosBusca.status === 'ATIVO';\n      }\n\n      return parametros;\n    },\n    []\n  );\n\n  /**\n   * Executar busca\n   */\n  const executarBusca = useCallback(\n    async (\n      filtrosBusca?: FiltrosBusca,\n      configPaginacao?: ConfiguracaoPaginacao\n    ) => {\n      const filtrosUsados = filtrosBusca || filtros;\n      const paginacaoUsada = configPaginacao || paginacao;\n\n      try {\n        setBuscaAtiva(true);\n        const inicioTempo = Date.now();\n\n        const parametros = converterFiltrosParaParametros(\n          filtrosUsados,\n          paginacaoUsada\n        );\n        const resposta = await listarUsuarios(parametros);\n\n        const tempoResposta = Date.now() - inicioTempo;\n\n        const novoResultado: ResultadoBusca = {\n          usuarios: resposta.usuarios,\n          paginacao: resposta.paginacao,\n          totalEncontrados: resposta.paginacao.totalItens,\n          tempoResposta,\n        };\n\n        setResultados(novoResultado);\n        setUltimaBusca(new Date());\n\n        // Adicionar ao histórico se houver termo de busca\n        if (filtrosUsados.termo.trim()) {\n          const novoHistorico: HistoricoBusca = {\n            id: Date.now().toString(),\n            termo: filtrosUsados.termo,\n            filtros: { ...filtrosUsados },\n            timestamp: new Date(),\n            resultados: resposta.paginacao.totalItens,\n          };\n\n          setHistorico(prev => [novoHistorico, ...prev.slice(0, 9)]); // Manter apenas 10 itens\n        }\n\n        return novoResultado;\n      } catch (error) {\n        console.error('Erro na busca:', error);\n        throw error;\n      } finally {\n        setBuscaAtiva(false);\n      }\n    },\n    [filtros, paginacao, converterFiltrosParaParametros, listarUsuarios]\n  );\n\n  /**\n   * Atualizar filtro específico\n   */\n  const atualizarFiltro = useCallback(\n    <K extends keyof FiltrosBusca>(campo: K, valor: FiltrosBusca[K]) => {\n      setFiltros(prev => ({ ...prev, [campo]: valor }));\n\n      // Reset da paginação quando filtros mudam\n      if (campo !== 'ordenarPor' && campo !== 'ordem') {\n        setPaginacao(prev => ({ ...prev, paginaAtual: 1 }));\n      }\n    },\n    []\n  );\n\n  /**\n   * Atualizar múltiplos filtros\n   */\n  const atualizarFiltros = useCallback(\n    (novosFiltros: Partial<FiltrosBusca>) => {\n      setFiltros(prev => ({ ...prev, ...novosFiltros }));\n      setPaginacao(prev => ({ ...prev, paginaAtual: 1 }));\n    },\n    []\n  );\n\n  /**\n   * Limpar todos os filtros\n   */\n  const limparFiltros = useCallback(() => {\n    setFiltros({\n      termo: '',\n      perfil: 'TODOS',\n      status: 'TODOS',\n      ordenarPor: 'nome',\n      ordem: 'asc',\n    });\n    setPaginacao({ paginaAtual: 1, itensPorPagina: 10 });\n  }, []);\n\n  /**\n   * Ir para página específica\n   */\n  const irParaPagina = useCallback((pagina: number) => {\n    setPaginacao(prev => ({ ...prev, paginaAtual: pagina }));\n  }, []);\n\n  /**\n   * Alterar itens por página\n   */\n  const alterarItensPorPagina = useCallback((quantidade: number) => {\n    setPaginacao({ paginaAtual: 1, itensPorPagina: quantidade });\n  }, []);\n\n  /**\n   * Aplicar busca do histórico\n   */\n  const aplicarBuscaHistorico = useCallback(\n    (item: HistoricoBusca) => {\n      setFiltros(item.filtros);\n      setPaginacao({\n        paginaAtual: 1,\n        itensPorPagina: paginacao.itensPorPagina,\n      });\n    },\n    [paginacao.itensPorPagina]\n  );\n\n  /**\n   * Remover item do histórico\n   */\n  const removerDoHistorico = useCallback((id: string) => {\n    setHistorico(prev => prev.filter(item => item.id !== id));\n  }, []);\n\n  /**\n   * Limpar histórico\n   */\n  const limparHistorico = useCallback(() => {\n    setHistorico([]);\n  }, []);\n\n  /**\n   * Exportar resultados da busca\n   */\n  const exportarResultados = useCallback(\n    (formato: 'csv' | 'json' = 'csv') => {\n      if (resultados.usuarios.length === 0) {\n        throw new Error('Nenhum resultado para exportar');\n      }\n\n      const dados = resultados.usuarios.map(usuario => ({\n        ID: usuario.id,\n        Nome: usuario.nome,\n        Email: usuario.email,\n        Perfil: usuario.perfil,\n        Status: usuario.ativo ? 'Ativo' : 'Inativo',\n        'Criado em': new Date(usuario.criadoEm).toLocaleDateString('pt-BR'),\n        'Atualizado em': new Date(usuario.atualizadoEm).toLocaleDateString(\n          'pt-BR'\n        ),\n      }));\n\n      if (formato === 'csv') {\n        const cabecalho = Object.keys(dados[0]).join(',');\n        const linhas = dados.map(linha => Object.values(linha).join(','));\n        const csv = [cabecalho, ...linhas].join('\\n');\n\n        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = `usuarios_busca_${new Date().toISOString().split('T')[0]}.csv`;\n        link.click();\n      } else {\n        const json = JSON.stringify(dados, null, 2);\n        const blob = new Blob([json], {\n          type: 'application/json;charset=utf-8;',\n        });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = `usuarios_busca_${new Date().toISOString().split('T')[0]}.json`;\n        link.click();\n      }\n    },\n    [resultados.usuarios]\n  );\n\n  // Executar busca automaticamente quando filtros com debounce mudarem\n  useEffect(() => {\n    if (termoBuscaDebounced !== filtros.termo) {\n      return; // Aguardar debounce\n    }\n\n    executarBusca();\n  }, [\n    termoBuscaDebounced,\n    filtros.perfil,\n    filtros.status,\n    filtros.dataInicio,\n    filtros.dataFim,\n    filtros.ordenarPor,\n    filtros.ordem,\n    paginacao,\n  ]);\n\n  return {\n    // Estado\n    filtros,\n    paginacao,\n    resultados,\n    historico,\n    filtrosAtivos,\n    buscaAtiva,\n    ultimaBusca,\n    carregando,\n    erro,\n\n    // Ações de filtros\n    atualizarFiltro,\n    atualizarFiltros,\n    limparFiltros,\n\n    // Ações de paginação\n    irParaPagina,\n    alterarItensPorPagina,\n\n    // Ações de busca\n    executarBusca,\n\n    // Ações de histórico\n    aplicarBuscaHistorico,\n    removerDoHistorico,\n    limparHistorico,\n\n    // Utilitários\n    exportarResultados,\n\n    // Computed\n    temFiltrosAtivos: filtrosAtivos.length > 0,\n    temResultados: resultados.usuarios.length > 0,\n    podeExportar: resultados.usuarios.length > 0,\n  };\n}\n\nexport default useUserSearch;\n"],"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","ignoreList":[]}