5cf9b28d15cd739570f90ca12c58165f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _lembretes = require("../lembretes");
// Mock do Prisma
const mockPrisma = {
    lembrete: {
        findMany: jest.fn(),
        findUnique: jest.fn(),
        create: jest.fn(),
        update: jest.fn(),
        delete: jest.fn(),
        deleteMany: jest.fn(),
        count: jest.fn()
    },
    usuario: {
        findMany: jest.fn()
    },
    avaliacao: {
        findMany: jest.fn()
    }
};
// Mock do serviço de e-mail
const mockEmailService = {
    enviarEmail: jest.fn(),
    enviarLembrete: jest.fn()
};
// Mock dos lembretes de teste
const mockLembrete = {
    id: '1',
    usuarioId: 'user1',
    avaliacaoId: 'aval1',
    tipo: 'prazo_vencimento',
    status: 'pendente',
    titulo: 'Lembrete de Prazo',
    mensagem: 'Sua avaliação vence em 3 dias.',
    dataEnvio: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
    dataEnviado: null,
    tentativas: 0,
    maxTentativas: 3,
    intervaloTentativas: 60,
    ultimaFalha: null,
    metadados: {
        nomeAvaliacao: 'Avaliação Anual 2024',
        prazo: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        avaliador: 'João Silva',
        diasAntecedencia: 3
    },
    criadoEm: new Date().toISOString(),
    atualizadoEm: new Date().toISOString()
};
const mockLembretes = [
    mockLembrete,
    {
        ...mockLembrete,
        id: '2',
        tipo: 'avaliacao_pendente',
        status: 'enviado',
        dataEnviado: new Date().toISOString(),
        tentativas: 1
    },
    {
        ...mockLembrete,
        id: '3',
        tipo: 'followup',
        status: 'falhado',
        tentativas: 3,
        ultimaFalha: 'Erro de conexão SMTP'
    }
];
const mockEstatisticas = {
    total: 50,
    pendentes: 15,
    enviados: 30,
    falhados: 5,
    porTipo: {
        prazo_vencimento: 20,
        avaliacao_pendente: 15,
        followup: 10,
        personalizado: 5
    },
    porStatus: {
        pendente: 15,
        enviado: 30,
        falhado: 5
    },
    taxaSucesso: 85.7,
    mediaTempoEnvio: 2.5
};
(0, _globals.describe)('LembretesService', ()=>{
    let service;
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
        service = new _lembretes.LembretesService(mockPrisma, mockEmailService);
    });
    (0, _globals.afterEach)(()=>{
        jest.resetAllMocks();
    });
    (0, _globals.describe)('buscarLembretes', ()=>{
        (0, _globals.it)('deve buscar lembretes com filtros padrão', async ()=>{
            mockPrisma.lembrete.findMany.mockResolvedValueOnce(mockLembretes);
            mockPrisma.lembrete.count.mockResolvedValueOnce(3);
            const resultado = await service.buscarLembretes();
            (0, _globals.expect)(mockPrisma.lembrete.findMany).toHaveBeenCalledWith({
                include: {
                    usuario: {
                        select: {
                            id: true,
                            nome: true,
                            email: true
                        }
                    },
                    avaliacao: {
                        select: {
                            id: true,
                            titulo: true,
                            prazo: true,
                            status: true
                        }
                    }
                },
                orderBy: {
                    dataEnvio: 'asc'
                },
                skip: 0,
                take: 50
            });
            (0, _globals.expect)(resultado.lembretes).toEqual(mockLembretes);
            (0, _globals.expect)(resultado.total).toBe(3);
        });
        (0, _globals.it)('deve aplicar filtros específicos', async ()=>{
            mockPrisma.lembrete.findMany.mockResolvedValueOnce([
                mockLembrete
            ]);
            mockPrisma.lembrete.count.mockResolvedValueOnce(1);
            const filtros = {
                usuarioId: 'user1',
                avaliacaoId: 'aval1',
                tipo: 'prazo_vencimento',
                status: 'pendente',
                dataInicio: '2024-01-01',
                dataFim: '2024-12-31',
                pagina: 2,
                limite: 10
            };
            await service.buscarLembretes(filtros);
            (0, _globals.expect)(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(_globals.expect.objectContaining({
                where: {
                    usuarioId: 'user1',
                    avaliacaoId: 'aval1',
                    tipo: 'prazo_vencimento',
                    status: 'pendente',
                    dataEnvio: {
                        gte: new Date('2024-01-01'),
                        lte: new Date('2024-12-31')
                    }
                },
                skip: 10,
                take: 10
            }));
        });
        (0, _globals.it)('deve aplicar busca por texto', async ()=>{
            mockPrisma.lembrete.findMany.mockResolvedValueOnce([
                mockLembrete
            ]);
            mockPrisma.lembrete.count.mockResolvedValueOnce(1);
            await service.buscarLembretes({
                busca: 'avaliação'
            });
            (0, _globals.expect)(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(_globals.expect.objectContaining({
                where: {
                    OR: [
                        {
                            titulo: {
                                contains: 'avaliação',
                                mode: 'insensitive'
                            }
                        },
                        {
                            mensagem: {
                                contains: 'avaliação',
                                mode: 'insensitive'
                            }
                        }
                    ]
                }
            }));
        });
        (0, _globals.it)('deve aplicar ordenação personalizada', async ()=>{
            mockPrisma.lembrete.findMany.mockResolvedValueOnce(mockLembretes);
            mockPrisma.lembrete.count.mockResolvedValueOnce(3);
            await service.buscarLembretes({
                ordenarPor: 'tentativas',
                ordem: 'desc'
            });
            (0, _globals.expect)(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(_globals.expect.objectContaining({
                orderBy: {
                    tentativas: 'desc'
                }
            }));
        });
    });
    (0, _globals.describe)('buscarLembrete', ()=>{
        (0, _globals.it)('deve buscar lembrete por ID', async ()=>{
            mockPrisma.lembrete.findUnique.mockResolvedValueOnce(mockLembrete);
            const resultado = await service.buscarLembrete('1');
            (0, _globals.expect)(mockPrisma.lembrete.findUnique).toHaveBeenCalledWith({
                where: {
                    id: '1'
                },
                include: {
                    usuario: {
                        select: {
                            id: true,
                            nome: true,
                            email: true
                        }
                    },
                    avaliacao: {
                        select: {
                            id: true,
                            titulo: true,
                            prazo: true,
                            status: true
                        }
                    }
                }
            });
            (0, _globals.expect)(resultado).toEqual(mockLembrete);
        });
        (0, _globals.it)('deve retornar null se lembrete não encontrado', async ()=>{
            mockPrisma.lembrete.findUnique.mockResolvedValueOnce(null);
            const resultado = await service.buscarLembrete('999');
            (0, _globals.expect)(resultado).toBeNull();
        });
    });
    (0, _globals.describe)('criarLembrete', ()=>{
        (0, _globals.it)('deve criar novo lembrete', async ()=>{
            const dadosLembrete = {
                usuarioId: 'user1',
                avaliacaoId: 'aval1',
                tipo: 'prazo_vencimento',
                titulo: 'Novo Lembrete',
                mensagem: 'Mensagem do lembrete',
                dataEnvio: new Date(Date.now() + 24 * 60 * 60 * 1000),
                metadados: {
                    diasAntecedencia: 1
                }
            };
            mockPrisma.lembrete.create.mockResolvedValueOnce({
                ...mockLembrete,
                ...dadosLembrete
            });
            const resultado = await service.criarLembrete(dadosLembrete);
            (0, _globals.expect)(mockPrisma.lembrete.create).toHaveBeenCalledWith({
                data: {
                    ...dadosLembrete,
                    status: 'pendente',
                    tentativas: 0,
                    maxTentativas: 3,
                    intervaloTentativas: 60
                },
                include: {
                    usuario: {
                        select: {
                            id: true,
                            nome: true,
                            email: true
                        }
                    },
                    avaliacao: {
                        select: {
                            id: true,
                            titulo: true,
                            prazo: true,
                            status: true
                        }
                    }
                }
            });
            (0, _globals.expect)(resultado.tipo).toBe('prazo_vencimento');
            (0, _globals.expect)(resultado.status).toBe('pendente');
        });
        (0, _globals.it)('deve aplicar configurações padrão', async ()=>{
            const dadosMinimos = {
                usuarioId: 'user1',
                tipo: 'personalizado',
                titulo: 'Lembrete Simples',
                mensagem: 'Mensagem simples',
                dataEnvio: new Date()
            };
            mockPrisma.lembrete.create.mockResolvedValueOnce({
                ...mockLembrete,
                ...dadosMinimos
            });
            await service.criarLembrete(dadosMinimos);
            (0, _globals.expect)(mockPrisma.lembrete.create).toHaveBeenCalledWith(_globals.expect.objectContaining({
                data: _globals.expect.objectContaining({
                    maxTentativas: 3,
                    intervaloTentativas: 60,
                    status: 'pendente',
                    tentativas: 0
                })
            }));
        });
    });
    (0, _globals.describe)('atualizarLembrete', ()=>{
        (0, _globals.it)('deve atualizar lembrete existente', async ()=>{
            const dadosAtualizacao = {
                titulo: 'Título Atualizado',
                mensagem: 'Mensagem atualizada',
                dataEnvio: new Date(Date.now() + 48 * 60 * 60 * 1000)
            };
            const lembreteAtualizado = {
                ...mockLembrete,
                ...dadosAtualizacao
            };
            mockPrisma.lembrete.update.mockResolvedValueOnce(lembreteAtualizado);
            const resultado = await service.atualizarLembrete('1', dadosAtualizacao);
            (0, _globals.expect)(mockPrisma.lembrete.update).toHaveBeenCalledWith({
                where: {
                    id: '1'
                },
                data: dadosAtualizacao,
                include: {
                    usuario: {
                        select: {
                            id: true,
                            nome: true,
                            email: true
                        }
                    },
                    avaliacao: {
                        select: {
                            id: true,
                            titulo: true,
                            prazo: true,
                            status: true
                        }
                    }
                }
            });
            (0, _globals.expect)(resultado.titulo).toBe('Título Atualizado');
        });
        (0, _globals.it)('deve lançar erro se lembrete não encontrado', async ()=>{
            mockPrisma.lembrete.update.mockRejectedValueOnce(new Error('Record not found'));
            await (0, _globals.expect)(service.atualizarLembrete('999', {
                titulo: 'Novo título'
            })).rejects.toThrow();
        });
    });
    (0, _globals.describe)('removerLembrete', ()=>{
        (0, _globals.it)('deve remover lembrete', async ()=>{
            mockPrisma.lembrete.delete.mockResolvedValueOnce(mockLembrete);
            const resultado = await service.removerLembrete('1');
            (0, _globals.expect)(mockPrisma.lembrete.delete).toHaveBeenCalledWith({
                where: {
                    id: '1'
                }
            });
            (0, _globals.expect)(resultado).toEqual(mockLembrete);
        });
        (0, _globals.it)('deve lançar erro se lembrete não encontrado', async ()=>{
            mockPrisma.lembrete.delete.mockRejectedValueOnce(new Error('Record not found'));
            await (0, _globals.expect)(service.removerLembrete('999')).rejects.toThrow();
        });
    });
    (0, _globals.describe)('removerLembretes', ()=>{
        (0, _globals.it)('deve remover múltiplos lembretes', async ()=>{
            mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({
                count: 3
            });
            const resultado = await service.removerLembretes([
                '1',
                '2',
                '3'
            ]);
            (0, _globals.expect)(mockPrisma.lembrete.deleteMany).toHaveBeenCalledWith({
                where: {
                    id: {
                        in: [
                            '1',
                            '2',
                            '3'
                        ]
                    }
                }
            });
            (0, _globals.expect)(resultado.removidos).toBe(3);
        });
        (0, _globals.it)('deve remover lembretes com filtros', async ()=>{
            mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({
                count: 5
            });
            const filtros = {
                status: 'falhado',
                dataInicio: '2024-01-01',
                dataFim: '2024-06-30'
            };
            await service.removerLembretes(undefined, filtros);
            (0, _globals.expect)(mockPrisma.lembrete.deleteMany).toHaveBeenCalledWith({
                where: {
                    status: 'falhado',
                    dataEnvio: {
                        gte: new Date('2024-01-01'),
                        lte: new Date('2024-06-30')
                    }
                }
            });
        });
    });
    (0, _globals.describe)('reenviarLembrete', ()=>{
        (0, _globals.it)('deve reenviar lembrete com sucesso', async ()=>{
            const lembreteParaReenvio = {
                ...mockLembrete,
                status: 'falhado',
                tentativas: 1
            };
            mockPrisma.lembrete.findUnique.mockResolvedValueOnce(lembreteParaReenvio);
            mockEmailService.enviarLembrete.mockResolvedValueOnce(true);
            mockPrisma.lembrete.update.mockResolvedValueOnce({
                ...lembreteParaReenvio,
                status: 'enviado',
                dataEnviado: new Date(),
                tentativas: 2
            });
            const resultado = await service.reenviarLembrete('1');
            (0, _globals.expect)(mockEmailService.enviarLembrete).toHaveBeenCalledWith(lembreteParaReenvio);
            (0, _globals.expect)(mockPrisma.lembrete.update).toHaveBeenCalledWith({
                where: {
                    id: '1'
                },
                data: {
                    status: 'enviado',
                    dataEnviado: _globals.expect.any(Date),
                    tentativas: 2,
                    ultimaFalha: null
                }
            });
            (0, _globals.expect)(resultado.status).toBe('enviado');
            (0, _globals.expect)(resultado.tentativas).toBe(2);
        });
        (0, _globals.it)('deve falhar ao atingir máximo de tentativas', async ()=>{
            const lembreteEsgotado = {
                ...mockLembrete,
                status: 'falhado',
                tentativas: 3,
                maxTentativas: 3
            };
            mockPrisma.lembrete.findUnique.mockResolvedValueOnce(lembreteEsgotado);
            await (0, _globals.expect)(service.reenviarLembrete('1')).rejects.toThrow('Máximo de tentativas atingido');
        });
        (0, _globals.it)('deve registrar falha no envio', async ()=>{
            const lembreteParaReenvio = {
                ...mockLembrete,
                status: 'pendente',
                tentativas: 1
            };
            mockPrisma.lembrete.findUnique.mockResolvedValueOnce(lembreteParaReenvio);
            mockEmailService.enviarLembrete.mockRejectedValueOnce(new Error('Falha no envio de e-mail'));
            mockPrisma.lembrete.update.mockResolvedValueOnce({
                ...lembreteParaReenvio,
                status: 'falhado',
                tentativas: 2,
                ultimaFalha: 'Falha no envio de e-mail'
            });
            const resultado = await service.reenviarLembrete('1');
            (0, _globals.expect)(mockPrisma.lembrete.update).toHaveBeenCalledWith({
                where: {
                    id: '1'
                },
                data: {
                    status: 'falhado',
                    tentativas: 2,
                    ultimaFalha: 'Falha no envio de e-mail'
                }
            });
            (0, _globals.expect)(resultado.status).toBe('falhado');
            (0, _globals.expect)(resultado.ultimaFalha).toBe('Falha no envio de e-mail');
        });
    });
    (0, _globals.describe)('reenviarLembretes', ()=>{
        (0, _globals.it)('deve reenviar múltiplos lembretes', async ()=>{
            const lembretesFalhados = [
                {
                    ...mockLembrete,
                    id: '1',
                    status: 'falhado'
                },
                {
                    ...mockLembrete,
                    id: '2',
                    status: 'falhado'
                }
            ];
            mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesFalhados);
            mockEmailService.enviarLembrete.mockResolvedValueOnce(true).mockResolvedValueOnce(true);
            mockPrisma.lembrete.update.mockResolvedValueOnce({
                ...lembretesFalhados[0],
                status: 'enviado'
            }).mockResolvedValueOnce({
                ...lembretesFalhados[1],
                status: 'enviado'
            });
            const resultado = await service.reenviarLembretes([
                '1',
                '2'
            ]);
            (0, _globals.expect)(resultado.reenviados).toBe(2);
            (0, _globals.expect)(resultado.falhados).toBe(0);
        });
        (0, _globals.it)('deve contar falhas no reenvio em lote', async ()=>{
            const lembretesFalhados = [
                {
                    ...mockLembrete,
                    id: '1',
                    status: 'falhado'
                },
                {
                    ...mockLembrete,
                    id: '2',
                    status: 'falhado'
                }
            ];
            mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesFalhados);
            mockEmailService.enviarLembrete.mockResolvedValueOnce(true).mockRejectedValueOnce(new Error('Falha'));
            mockPrisma.lembrete.update.mockResolvedValueOnce({
                ...lembretesFalhados[0],
                status: 'enviado'
            }).mockResolvedValueOnce({
                ...lembretesFalhados[1],
                status: 'falhado'
            });
            const resultado = await service.reenviarLembretes([
                '1',
                '2'
            ]);
            (0, _globals.expect)(resultado.reenviados).toBe(1);
            (0, _globals.expect)(resultado.falhados).toBe(1);
        });
    });
    (0, _globals.describe)('marcarComoEnviado', ()=>{
        (0, _globals.it)('deve marcar lembrete como enviado', async ()=>{
            const lembreteEnviado = {
                ...mockLembrete,
                status: 'enviado',
                dataEnviado: new Date(),
                tentativas: 1
            };
            mockPrisma.lembrete.update.mockResolvedValueOnce(lembreteEnviado);
            const resultado = await service.marcarComoEnviado('1');
            (0, _globals.expect)(mockPrisma.lembrete.update).toHaveBeenCalledWith({
                where: {
                    id: '1'
                },
                data: {
                    status: 'enviado',
                    dataEnviado: _globals.expect.any(Date),
                    tentativas: _globals.expect.any(Number)
                }
            });
            (0, _globals.expect)(resultado.status).toBe('enviado');
            (0, _globals.expect)(resultado.dataEnviado).toBeTruthy();
        });
    });
    (0, _globals.describe)('reagendarLembrete', ()=>{
        (0, _globals.it)('deve reagendar lembrete para nova data', async ()=>{
            const novaData = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
            const lembreteReagendado = {
                ...mockLembrete,
                dataEnvio: novaData,
                status: 'pendente',
                tentativas: 0
            };
            mockPrisma.lembrete.update.mockResolvedValueOnce(lembreteReagendado);
            const resultado = await service.reagendarLembrete('1', novaData);
            (0, _globals.expect)(mockPrisma.lembrete.update).toHaveBeenCalledWith({
                where: {
                    id: '1'
                },
                data: {
                    dataEnvio: novaData,
                    status: 'pendente',
                    tentativas: 0,
                    dataEnviado: null,
                    ultimaFalha: null
                }
            });
            (0, _globals.expect)(resultado.dataEnvio).toEqual(novaData.toISOString());
            (0, _globals.expect)(resultado.status).toBe('pendente');
        });
        (0, _globals.it)('deve validar data futura', async ()=>{
            const dataPassada = new Date(Date.now() - 24 * 60 * 60 * 1000);
            await (0, _globals.expect)(service.reagendarLembrete('1', dataPassada)).rejects.toThrow('Data de envio deve ser futura');
        });
    });
    (0, _globals.describe)('buscarLembretesPendentes', ()=>{
        (0, _globals.it)('deve buscar lembretes prontos para envio', async ()=>{
            const lembretesPendentes = [
                {
                    ...mockLembrete,
                    dataEnvio: new Date(Date.now() - 60 * 1000)
                }
            ];
            mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesPendentes);
            const resultado = await service.buscarLembretesPendentes();
            (0, _globals.expect)(mockPrisma.lembrete.findMany).toHaveBeenCalledWith({
                where: {
                    status: 'pendente',
                    dataEnvio: {
                        lte: _globals.expect.any(Date)
                    }
                },
                include: {
                    usuario: {
                        select: {
                            id: true,
                            nome: true,
                            email: true
                        }
                    },
                    avaliacao: {
                        select: {
                            id: true,
                            titulo: true,
                            prazo: true,
                            status: true
                        }
                    }
                },
                orderBy: {
                    dataEnvio: 'asc'
                }
            });
            (0, _globals.expect)(resultado).toEqual(lembretesPendentes);
        });
        (0, _globals.it)('deve limitar quantidade de lembretes', async ()=>{
            await service.buscarLembretesPendentes(10);
            (0, _globals.expect)(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(_globals.expect.objectContaining({
                take: 10
            }));
        });
    });
    (0, _globals.describe)('buscarEstatisticas', ()=>{
        (0, _globals.it)('deve buscar estatísticas básicas', async ()=>{
            mockPrisma.lembrete.count.mockImplementation(({ where })=>{
                if (where?.status === 'pendente') return Promise.resolve(15);
                if (where?.status === 'enviado') return Promise.resolve(30);
                if (where?.status === 'falhado') return Promise.resolve(5);
                return Promise.resolve(50);
            });
            const resultado = await service.buscarEstatisticas();
            (0, _globals.expect)(resultado.total).toBe(50);
            (0, _globals.expect)(resultado.pendentes).toBe(15);
            (0, _globals.expect)(resultado.enviados).toBe(30);
            (0, _globals.expect)(resultado.falhados).toBe(5);
            (0, _globals.expect)(resultado.taxaSucesso).toBeCloseTo(85.7, 1);
        });
        (0, _globals.it)('deve buscar estatísticas com filtros', async ()=>{
            const filtros = {
                usuarioId: 'user1',
                tipo: 'prazo_vencimento',
                dataInicio: '2024-01-01',
                dataFim: '2024-12-31'
            };
            mockPrisma.lembrete.count.mockResolvedValueOnce(25);
            await service.buscarEstatisticas(filtros);
            (0, _globals.expect)(mockPrisma.lembrete.count).toHaveBeenCalledWith(_globals.expect.objectContaining({
                where: {
                    usuarioId: 'user1',
                    tipo: 'prazo_vencimento',
                    dataEnvio: {
                        gte: new Date('2024-01-01'),
                        lte: new Date('2024-12-31')
                    }
                }
            }));
        });
    });
    (0, _globals.describe)('limparLembretesAntigos', ()=>{
        (0, _globals.it)('deve remover lembretes antigos enviados', async ()=>{
            mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({
                count: 20
            });
            const resultado = await service.limparLembretesAntigos(60);
            const dataLimite = new Date();
            dataLimite.setDate(dataLimite.getDate() - 60);
            (0, _globals.expect)(mockPrisma.lembrete.deleteMany).toHaveBeenCalledWith({
                where: {
                    status: 'enviado',
                    dataEnviado: {
                        lt: _globals.expect.any(Date)
                    }
                }
            });
            (0, _globals.expect)(resultado.removidos).toBe(20);
        });
        (0, _globals.it)('deve usar período padrão de 30 dias', async ()=>{
            mockPrisma.lembrete.deleteMany.mockResolvedValueOnce({
                count: 15
            });
            await service.limparLembretesAntigos();
            (0, _globals.expect)(mockPrisma.lembrete.deleteMany).toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('processarFilaEnvio', ()=>{
        (0, _globals.it)('deve processar fila de lembretes pendentes', async ()=>{
            const lembretesPendentes = [
                {
                    ...mockLembrete,
                    id: '1'
                },
                {
                    ...mockLembrete,
                    id: '2'
                }
            ];
            mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesPendentes);
            mockEmailService.enviarLembrete.mockResolvedValueOnce(true).mockResolvedValueOnce(true);
            mockPrisma.lembrete.update.mockResolvedValueOnce({
                ...lembretesPendentes[0],
                status: 'enviado'
            }).mockResolvedValueOnce({
                ...lembretesPendentes[1],
                status: 'enviado'
            });
            const resultado = await service.processarFilaEnvio();
            (0, _globals.expect)(resultado.processados).toBe(2);
            (0, _globals.expect)(resultado.enviados).toBe(2);
            (0, _globals.expect)(resultado.falhados).toBe(0);
        });
        (0, _globals.it)('deve tratar falhas no processamento', async ()=>{
            const lembretesPendentes = [
                {
                    ...mockLembrete,
                    id: '1'
                },
                {
                    ...mockLembrete,
                    id: '2'
                }
            ];
            mockPrisma.lembrete.findMany.mockResolvedValueOnce(lembretesPendentes);
            mockEmailService.enviarLembrete.mockResolvedValueOnce(true).mockRejectedValueOnce(new Error('Falha SMTP'));
            mockPrisma.lembrete.update.mockResolvedValueOnce({
                ...lembretesPendentes[0],
                status: 'enviado'
            }).mockResolvedValueOnce({
                ...lembretesPendentes[1],
                status: 'falhado'
            });
            const resultado = await service.processarFilaEnvio();
            (0, _globals.expect)(resultado.processados).toBe(2);
            (0, _globals.expect)(resultado.enviados).toBe(1);
            (0, _globals.expect)(resultado.falhados).toBe(1);
        });
        (0, _globals.it)('deve respeitar limite de processamento', async ()=>{
            await service.processarFilaEnvio(5);
            (0, _globals.expect)(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(_globals.expect.objectContaining({
                take: 5
            }));
        });
    });
    (0, _globals.describe)('Tratamento de Erros', ()=>{
        (0, _globals.it)('deve tratar erro de conexão com banco', async ()=>{
            mockPrisma.lembrete.findMany.mockRejectedValueOnce(new Error('Database connection failed'));
            await (0, _globals.expect)(service.buscarLembretes()).rejects.toThrow('Database connection failed');
        });
        (0, _globals.it)('deve tratar erro de validação', async ()=>{
            mockPrisma.lembrete.create.mockRejectedValueOnce(new Error('Validation failed'));
            await (0, _globals.expect)(service.criarLembrete({
                usuarioId: 'user1',
                tipo: 'personalizado',
                titulo: 'Teste',
                mensagem: 'Teste',
                dataEnvio: new Date()
            })).rejects.toThrow('Validation failed');
        });
    });
    (0, _globals.describe)('Performance', ()=>{
        (0, _globals.it)('deve usar índices apropriados para consultas', async ()=>{
            await service.buscarLembretes({
                usuarioId: 'user1',
                status: 'pendente',
                tipo: 'prazo_vencimento'
            });
            // Verificar se a consulta usa campos indexados
            (0, _globals.expect)(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(_globals.expect.objectContaining({
                where: _globals.expect.objectContaining({
                    usuarioId: 'user1',
                    status: 'pendente',
                    tipo: 'prazo_vencimento'
                })
            }));
        });
        (0, _globals.it)('deve limitar resultados para evitar sobrecarga', async ()=>{
            await service.buscarLembretes({
                limite: 1000
            });
            // Verificar se o limite é respeitado (máximo 100)
            (0, _globals.expect)(mockPrisma.lembrete.findMany).toHaveBeenCalledWith(_globals.expect.objectContaining({
                take: 100
            }));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,