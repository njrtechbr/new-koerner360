{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\lib\\services\\agendador-email.ts"],"sourcesContent":["'use client';\n\nimport {\n  GerenciadorEmailNotificacoes,\n  obterGerenciadorEmail,\n  TipoNotificacaoEmail,\n  DestinatarioEmail\n} from '@/lib/utils/email-notificacoes';\nimport {\n  buscarAvaliacoesPendentes,\n  buscarAvaliacoesParaNotificacao,\n  calcularUrgenciaAvaliacao,\n  AvaliacaoPendente\n} from '@/lib/utils/notificacoes-avaliacoes';\n\n/**\n * Interface para configuração do agendador\n */\nexport interface ConfiguracaoAgendador {\n  intervaloVerificacao: number; // em minutos\n  horarioInicioExpediente: string; // HH:mm\n  horarioFimExpediente: string; // HH:mm\n  diasUteis: number[]; // 0-6 (domingo-sábado)\n  tentativasMaximas: number;\n  intervaloTentativas: number; // em minutos\n  ativo: boolean;\n}\n\n/**\n * Interface para tarefa agendada\n */\nexport interface TarefaAgendada {\n  id: string;\n  tipo: TipoNotificacaoEmail;\n  avaliacaoId: string;\n  usuarioId: string;\n  destinatario: DestinatarioEmail;\n  dataAgendamento: Date;\n  dataExecucao?: Date;\n  tentativas: number;\n  status: 'pendente' | 'executada' | 'falhada' | 'cancelada';\n  erro?: string;\n  prioridade: 'baixa' | 'media' | 'alta' | 'critica';\n}\n\n/**\n * Interface para estatísticas do agendador\n */\nexport interface EstatisticasAgendador {\n  tarefasPendentes: number;\n  tarefasExecutadas: number;\n  tarefasFalhadas: number;\n  proximaExecucao?: Date;\n  ultimaExecucao?: Date;\n  taxaSucesso: number;\n}\n\n/**\n * Classe para gerenciar agendamento automático de e-mails\n */\nexport class AgendadorEmail {\n  private configuracao: ConfiguracaoAgendador;\n  private tarefas: Map<string, TarefaAgendada> = new Map();\n  private intervalos: Map<string, NodeJS.Timeout> = new Map();\n  private gerenciadorEmail: GerenciadorEmailNotificacoes;\n  private executando = false;\n\n  constructor(configuracao?: Partial<ConfiguracaoAgendador>) {\n    this.configuracao = {\n      intervaloVerificacao: 30, // 30 minutos\n      horarioInicioExpediente: '08:00',\n      horarioFimExpediente: '18:00',\n      diasUteis: [1, 2, 3, 4, 5], // Segunda a sexta\n      tentativasMaximas: 3,\n      intervaloTentativas: 5, // 5 minutos\n      ativo: true,\n      ...configuracao\n    };\n\n    this.gerenciadorEmail = obterGerenciadorEmail();\n  }\n\n  /**\n   * Inicia o agendador\n   */\n  iniciar(): void {\n    if (!this.configuracao.ativo) {\n      console.log('Agendador de e-mail está desativado');\n      return;\n    }\n\n    console.log('Iniciando agendador de e-mail...');\n    \n    // Verifica imediatamente\n    this.verificarEExecutarTarefas();\n    \n    // Agenda verificações periódicas\n    const intervalo = setInterval(() => {\n      this.verificarEExecutarTarefas();\n    }, this.configuracao.intervaloVerificacao * 60 * 1000);\n    \n    this.intervalos.set('principal', intervalo);\n  }\n\n  /**\n   * Para o agendador\n   */\n  parar(): void {\n    console.log('Parando agendador de e-mail...');\n    \n    for (const [nome, intervalo] of this.intervalos) {\n      clearInterval(intervalo);\n      this.intervalos.delete(nome);\n    }\n  }\n\n  /**\n   * Agenda uma nova tarefa de e-mail\n   */\n  agendarTarefa(\n    tipo: TipoNotificacaoEmail,\n    avaliacao: AvaliacaoPendente,\n    destinatario: DestinatarioEmail,\n    dataAgendamento?: Date\n  ): string {\n    const id = `${tipo}_${avaliacao.id}_${destinatario.id}_${Date.now()}`;\n    \n    const urgencia = calcularUrgenciaAvaliacao(avaliacao);\n    let prioridade: TarefaAgendada['prioridade'] = 'media';\n    \n    switch (urgencia) {\n      case 'critica':\n        prioridade = 'critica';\n        break;\n      case 'alta':\n        prioridade = 'alta';\n        break;\n      case 'media':\n        prioridade = 'media';\n        break;\n      case 'baixa':\n        prioridade = 'baixa';\n        break;\n    }\n\n    const tarefa: TarefaAgendada = {\n      id,\n      tipo,\n      avaliacaoId: avaliacao.id,\n      usuarioId: destinatario.id,\n      destinatario,\n      dataAgendamento: dataAgendamento || new Date(),\n      tentativas: 0,\n      status: 'pendente',\n      prioridade\n    };\n\n    this.tarefas.set(id, tarefa);\n    console.log(`Tarefa agendada: ${id} para ${dataAgendamento?.toISOString() || 'agora'}`);\n    \n    return id;\n  }\n\n  /**\n   * Cancela uma tarefa agendada\n   */\n  cancelarTarefa(id: string): boolean {\n    const tarefa = this.tarefas.get(id);\n    if (!tarefa || tarefa.status !== 'pendente') {\n      return false;\n    }\n\n    tarefa.status = 'cancelada';\n    this.tarefas.set(id, tarefa);\n    console.log(`Tarefa cancelada: ${id}`);\n    \n    return true;\n  }\n\n  /**\n   * Verifica e executa tarefas pendentes\n   */\n  private async verificarEExecutarTarefas(): Promise<void> {\n    if (this.executando) {\n      return;\n    }\n\n    this.executando = true;\n    \n    try {\n      const agora = new Date();\n      const tarefasPendentes = Array.from(this.tarefas.values())\n        .filter(tarefa => \n          tarefa.status === 'pendente' && \n          tarefa.dataAgendamento <= agora\n        )\n        .sort((a, b) => {\n          // Ordena por prioridade e depois por data\n          const prioridadeOrder = { critica: 4, alta: 3, media: 2, baixa: 1 };\n          const diffPrioridade = prioridadeOrder[b.prioridade] - prioridadeOrder[a.prioridade];\n          \n          if (diffPrioridade !== 0) {\n            return diffPrioridade;\n          }\n          \n          return a.dataAgendamento.getTime() - b.dataAgendamento.getTime();\n        });\n\n      console.log(`Verificando ${tarefasPendentes.length} tarefas pendentes`);\n\n      for (const tarefa of tarefasPendentes) {\n        if (this.deveExecutarAgora(tarefa)) {\n          await this.executarTarefa(tarefa);\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar tarefas:', error);\n    } finally {\n      this.executando = false;\n    }\n  }\n\n  /**\n   * Verifica se uma tarefa deve ser executada agora\n   */\n  private deveExecutarAgora(tarefa: TarefaAgendada): boolean {\n    const agora = new Date();\n    \n    // Verifica se está no horário de expediente\n    if (!this.estaNoHorarioExpediente(agora)) {\n      // Tarefas críticas podem ser executadas fora do expediente\n      if (tarefa.prioridade !== 'critica') {\n        return false;\n      }\n    }\n\n    // Verifica se é dia útil\n    if (!this.configuracao.diasUteis.includes(agora.getDay())) {\n      // Tarefas críticas podem ser executadas em fins de semana\n      if (tarefa.prioridade !== 'critica') {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifica se está no horário de expediente\n   */\n  private estaNoHorarioExpediente(data: Date): boolean {\n    const hora = data.getHours();\n    const minuto = data.getMinutes();\n    const horaAtual = hora * 60 + minuto;\n\n    const [horaInicio, minutoInicio] = this.configuracao.horarioInicioExpediente\n      .split(':')\n      .map(Number);\n    const [horaFim, minutoFim] = this.configuracao.horarioFimExpediente\n      .split(':')\n      .map(Number);\n\n    const inicioExpediente = horaInicio * 60 + minutoInicio;\n    const fimExpediente = horaFim * 60 + minutoFim;\n\n    return horaAtual >= inicioExpediente && horaAtual <= fimExpediente;\n  }\n\n  /**\n   * Executa uma tarefa específica\n   */\n  private async executarTarefa(tarefa: TarefaAgendada): Promise<void> {\n    console.log(`Executando tarefa: ${tarefa.id}`);\n    \n    try {\n      tarefa.tentativas++;\n      tarefa.dataExecucao = new Date();\n\n      // Busca dados atualizados da avaliação\n      const avaliacoesPendentes = await buscarAvaliacoesPendentes(tarefa.usuarioId);\n      const avaliacao = avaliacoesPendentes.find(a => a.id === tarefa.avaliacaoId);\n\n      if (!avaliacao) {\n        tarefa.status = 'cancelada';\n        tarefa.erro = 'Avaliação não encontrada ou já foi concluída';\n        this.tarefas.set(tarefa.id, tarefa);\n        return;\n      }\n\n      let resultado;\n      \n      switch (tarefa.tipo) {\n        case 'avaliacao_pendente':\n          resultado = await this.gerenciadorEmail.enviarNotificacaoAvaliacaoPendente(\n            avaliacao,\n            tarefa.destinatario\n          );\n          break;\n          \n        case 'lembrete_prazo':\n          const diasRestantes = Math.ceil(\n            (avaliacao.prazo.getTime() - Date.now()) / (1000 * 60 * 60 * 24)\n          );\n          resultado = await this.gerenciadorEmail.enviarLembretePrazo(\n            avaliacao,\n            tarefa.destinatario,\n            diasRestantes\n          );\n          break;\n          \n        case 'avaliacao_vencida':\n          resultado = await this.gerenciadorEmail.enviarNotificacaoVencida(\n            avaliacao,\n            tarefa.destinatario\n          );\n          break;\n          \n        case 'resumo_semanal':\n          const todasAvaliacoes = await buscarAvaliacoesPendentes(tarefa.usuarioId);\n          resultado = await this.gerenciadorEmail.enviarResumoSemanal(\n            todasAvaliacoes,\n            tarefa.destinatario\n          );\n          break;\n          \n        default:\n          throw new Error(`Tipo de tarefa não suportado: ${tarefa.tipo}`);\n      }\n\n      if (resultado.sucesso) {\n        tarefa.status = 'executada';\n        console.log(`Tarefa executada com sucesso: ${tarefa.id}`);\n      } else {\n        throw new Error(resultado.erro || 'Erro desconhecido');\n      }\n    } catch (error) {\n      const mensagemErro = error instanceof Error ? error.message : 'Erro desconhecido';\n      console.error(`Erro ao executar tarefa ${tarefa.id}:`, mensagemErro);\n      \n      tarefa.erro = mensagemErro;\n      \n      if (tarefa.tentativas >= this.configuracao.tentativasMaximas) {\n        tarefa.status = 'falhada';\n        console.log(`Tarefa falhada após ${tarefa.tentativas} tentativas: ${tarefa.id}`);\n      } else {\n        // Reagenda para nova tentativa\n        const proximaTentativa = new Date(\n          Date.now() + this.configuracao.intervaloTentativas * 60 * 1000\n        );\n        tarefa.dataAgendamento = proximaTentativa;\n        console.log(`Reagendando tarefa ${tarefa.id} para ${proximaTentativa.toISOString()}`);\n      }\n    }\n\n    this.tarefas.set(tarefa.id, tarefa);\n  }\n\n  /**\n   * Agenda notificações automáticas para avaliações pendentes\n   */\n  async agendarNotificacoesAutomaticas(): Promise<void> {\n    try {\n      console.log('Agendando notificações automáticas...');\n      \n      // Busca todas as avaliações que precisam de notificação\n      const avaliacoesParaNotificacao = await buscarAvaliacoesParaNotificacao(3); // 3 dias de antecedência\n      \n      for (const avaliacao of avaliacoesParaNotificacao) {\n        const destinatario: DestinatarioEmail = {\n          id: avaliacao.usuarioId,\n          nome: avaliacao.nomeUsuario,\n          email: avaliacao.emailUsuario\n        };\n\n        const urgencia = calcularUrgenciaAvaliacao(avaliacao);\n        const agora = new Date();\n        \n        // Determina o tipo de notificação baseado na urgência\n        if (avaliacao.prazo < agora) {\n          // Avaliação vencida\n          this.agendarTarefa('avaliacao_vencida', avaliacao, destinatario);\n        } else {\n          const diasRestantes = Math.ceil(\n            (avaliacao.prazo.getTime() - agora.getTime()) / (1000 * 60 * 60 * 24)\n          );\n          \n          if (diasRestantes <= 1) {\n            // Lembrete urgente\n            this.agendarTarefa('lembrete_prazo', avaliacao, destinatario);\n          } else if (diasRestantes <= 3) {\n            // Lembrete normal\n            const dataAgendamento = new Date(agora.getTime() + 60 * 60 * 1000); // 1 hora\n            this.agendarTarefa('lembrete_prazo', avaliacao, destinatario, dataAgendamento);\n          } else {\n            // Notificação de avaliação pendente\n            const dataAgendamento = new Date(agora.getTime() + 2 * 60 * 60 * 1000); // 2 horas\n            this.agendarTarefa('avaliacao_pendente', avaliacao, destinatario, dataAgendamento);\n          }\n        }\n      }\n      \n      console.log(`${avaliacoesParaNotificacao.length} notificações agendadas`);\n    } catch (error) {\n      console.error('Erro ao agendar notificações automáticas:', error);\n    }\n  }\n\n  /**\n   * Agenda resumos semanais\n   */\n  agendarResumosSemanas(): void {\n    // Agenda para toda segunda-feira às 9h\n    const agora = new Date();\n    const proximaSegunda = new Date(agora);\n    \n    // Calcula próxima segunda-feira\n    const diasAteSegunda = (1 + 7 - agora.getDay()) % 7;\n    proximaSegunda.setDate(agora.getDate() + (diasAteSegunda || 7));\n    proximaSegunda.setHours(9, 0, 0, 0);\n\n    const intervalo = setInterval(async () => {\n      try {\n        console.log('Agendando resumos semanais...');\n        \n        // Aqui você implementaria a lógica para buscar todos os usuários\n        // e agendar resumos semanais para cada um\n        \n        // Exemplo simplificado:\n        // const usuarios = await buscarTodosUsuarios();\n        // for (const usuario of usuarios) {\n        //   const avaliacoes = await buscarAvaliacoesPendentes(usuario.id);\n        //   if (avaliacoes.length > 0) {\n        //     this.agendarTarefa('resumo_semanal', avaliacoes[0], usuario);\n        //   }\n        // }\n        \n      } catch (error) {\n        console.error('Erro ao agendar resumos semanais:', error);\n      }\n    }, 7 * 24 * 60 * 60 * 1000); // A cada 7 dias\n\n    this.intervalos.set('resumo_semanal', intervalo);\n  }\n\n  /**\n   * Obtém estatísticas do agendador\n   */\n  obterEstatisticas(): EstatisticasAgendador {\n    const tarefas = Array.from(this.tarefas.values());\n    \n    const tarefasPendentes = tarefas.filter(t => t.status === 'pendente').length;\n    const tarefasExecutadas = tarefas.filter(t => t.status === 'executada').length;\n    const tarefasFalhadas = tarefas.filter(t => t.status === 'falhada').length;\n    \n    const proximaExecucao = tarefas\n      .filter(t => t.status === 'pendente')\n      .sort((a, b) => a.dataAgendamento.getTime() - b.dataAgendamento.getTime())[0]?.dataAgendamento;\n    \n    const ultimaExecucao = tarefas\n      .filter(t => t.dataExecucao)\n      .sort((a, b) => (b.dataExecucao?.getTime() || 0) - (a.dataExecucao?.getTime() || 0))[0]?.dataExecucao;\n    \n    const totalTarefas = tarefasExecutadas + tarefasFalhadas;\n    const taxaSucesso = totalTarefas > 0 ? (tarefasExecutadas / totalTarefas) * 100 : 0;\n\n    return {\n      tarefasPendentes,\n      tarefasExecutadas,\n      tarefasFalhadas,\n      proximaExecucao,\n      ultimaExecucao,\n      taxaSucesso\n    };\n  }\n\n  /**\n   * Limpa tarefas antigas\n   */\n  limparTarefasAntigas(diasAntigos = 30): void {\n    const dataLimite = new Date(Date.now() - diasAntigos * 24 * 60 * 60 * 1000);\n    \n    for (const [id, tarefa] of this.tarefas) {\n      if (\n        (tarefa.status === 'executada' || tarefa.status === 'falhada' || tarefa.status === 'cancelada') &&\n        tarefa.dataAgendamento < dataLimite\n      ) {\n        this.tarefas.delete(id);\n      }\n    }\n    \n    console.log('Tarefas antigas removidas');\n  }\n\n  /**\n   * Atualiza configuração do agendador\n   */\n  atualizarConfiguracao(novaConfiguracao: Partial<ConfiguracaoAgendador>): void {\n    this.configuracao = {\n      ...this.configuracao,\n      ...novaConfiguracao\n    };\n    \n    console.log('Configuração do agendador atualizada');\n  }\n\n  /**\n   * Obtém configuração atual\n   */\n  obterConfiguracao(): ConfiguracaoAgendador {\n    return { ...this.configuracao };\n  }\n\n  /**\n   * Obtém todas as tarefas\n   */\n  obterTarefas(): TarefaAgendada[] {\n    return Array.from(this.tarefas.values());\n  }\n\n  /**\n   * Obtém tarefa por ID\n   */\n  obterTarefa(id: string): TarefaAgendada | undefined {\n    return this.tarefas.get(id);\n  }\n}\n\n// Instância singleton do agendador\nlet instanciaAgendador: AgendadorEmail | null = null;\n\n/**\n * Obtém instância singleton do agendador de e-mail\n */\nexport function obterAgendadorEmail(configuracao?: Partial<ConfiguracaoAgendador>): AgendadorEmail {\n  if (!instanciaAgendador) {\n    instanciaAgendador = new AgendadorEmail(configuracao);\n  }\n  return instanciaAgendador;\n}\n\n/**\n * Utilitários para agendamento rápido\n */\nexport const agendadorUtils = {\n  /**\n   * Inicia agendador com configuração padrão\n   */\n  iniciarAgendador: (configuracao?: Partial<ConfiguracaoAgendador>) => {\n    const agendador = obterAgendadorEmail(configuracao);\n    agendador.iniciar();\n    agendador.agendarResumosSemanas();\n    return agendador;\n  },\n\n  /**\n   * Para agendador\n   */\n  pararAgendador: () => {\n    if (instanciaAgendador) {\n      instanciaAgendador.parar();\n    }\n  },\n\n  /**\n   * Agenda notificação imediata\n   */\n  agendarNotificacaoImediata: (\n    tipo: TipoNotificacaoEmail,\n    avaliacao: AvaliacaoPendente,\n    destinatario: DestinatarioEmail\n  ) => {\n    const agendador = obterAgendadorEmail();\n    return agendador.agendarTarefa(tipo, avaliacao, destinatario, new Date());\n  },\n\n  /**\n   * Agenda lembrete com antecedência\n   */\n  agendarLembreteComAntecedencia: (\n    avaliacao: AvaliacaoPendente,\n    destinatario: DestinatarioEmail,\n    horasAntecedencia: number\n  ) => {\n    const agendador = obterAgendadorEmail();\n    const dataAgendamento = new Date(Date.now() + horasAntecedencia * 60 * 60 * 1000);\n    return agendador.agendarTarefa('lembrete_prazo', avaliacao, destinatario, dataAgendamento);\n  }\n};"],"names":["AgendadorEmail","agendadorUtils","obterAgendadorEmail","configuracao","tarefas","Map","intervalos","executando","intervaloVerificacao","horarioInicioExpediente","horarioFimExpediente","diasUteis","tentativasMaximas","intervaloTentativas","ativo","gerenciadorEmail","obterGerenciadorEmail","iniciar","console","log","verificarEExecutarTarefas","intervalo","setInterval","set","parar","nome","clearInterval","delete","agendarTarefa","tipo","avaliacao","destinatario","dataAgendamento","id","Date","now","urgencia","calcularUrgenciaAvaliacao","prioridade","tarefa","avaliacaoId","usuarioId","tentativas","status","toISOString","cancelarTarefa","get","agora","tarefasPendentes","Array","from","values","filter","sort","a","b","prioridadeOrder","critica","alta","media","baixa","diffPrioridade","getTime","length","deveExecutarAgora","executarTarefa","error","estaNoHorarioExpediente","includes","getDay","data","hora","getHours","minuto","getMinutes","horaAtual","horaInicio","minutoInicio","split","map","Number","horaFim","minutoFim","inicioExpediente","fimExpediente","dataExecucao","avaliacoesPendentes","buscarAvaliacoesPendentes","find","erro","resultado","enviarNotificacaoAvaliacaoPendente","diasRestantes","Math","ceil","prazo","enviarLembretePrazo","enviarNotificacaoVencida","todasAvaliacoes","enviarResumoSemanal","Error","sucesso","mensagemErro","message","proximaTentativa","agendarNotificacoesAutomaticas","avaliacoesParaNotificacao","buscarAvaliacoesParaNotificacao","nomeUsuario","email","emailUsuario","agendarResumosSemanas","proximaSegunda","diasAteSegunda","setDate","getDate","setHours","obterEstatisticas","t","tarefasExecutadas","tarefasFalhadas","proximaExecucao","ultimaExecucao","totalTarefas","taxaSucesso","limparTarefasAntigas","diasAntigos","dataLimite","atualizarConfiguracao","novaConfiguracao","obterConfiguracao","obterTarefas","obterTarefa","instanciaAgendador","iniciarAgendador","agendador","pararAgendador","agendarNotificacaoImediata","agendarLembreteComAntecedencia","horasAntecedencia"],"mappings":"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"}