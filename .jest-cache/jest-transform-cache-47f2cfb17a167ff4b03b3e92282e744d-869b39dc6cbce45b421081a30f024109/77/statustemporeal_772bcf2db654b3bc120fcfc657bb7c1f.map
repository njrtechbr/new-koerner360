{"version":3,"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\components\\metricas\\status-tempo-real.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport {\n  Wifi,\n  WifiOff,\n  RefreshCw,\n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Pause,\n  Play,\n} from 'lucide-react';\nimport { StatusConexao } from '@/hooks/use-metricas-tempo-real';\nimport { formatDistanceToNow } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\n/**\n * Props do componente de status em tempo real\n */\nexport interface StatusTempoRealProps {\n  status: StatusConexao;\n  carregando?: boolean;\n  ativo?: boolean;\n  intervalo?: number;\n  onForcarAtualizacao?: () => void;\n  onReconectar?: () => void;\n  onToggleAtivo?: (ativo: boolean) => void;\n  className?: string;\n  compacto?: boolean;\n}\n\n/**\n * Componente para exibir status de conexão em tempo real\n */\nexport function StatusTempoReal({\n  status,\n  carregando = false,\n  ativo = true,\n  intervalo = 30000,\n  onForcarAtualizacao,\n  onReconectar,\n  onToggleAtivo,\n  className = '',\n  compacto = false,\n}: StatusTempoRealProps) {\n  // Função para obter cor do status\n  const obterCorStatus = () => {\n    if (!ativo) return 'secondary';\n    if (carregando) return 'default';\n    if (status.conectado) return 'success';\n    if (status.erro) return 'destructive';\n    return 'warning';\n  };\n\n  // Função para obter ícone do status\n  const obterIconeStatus = () => {\n    if (!ativo) return <Pause className=\"h-3 w-3\" />;\n    if (carregando) return <RefreshCw className=\"h-3 w-3 animate-spin\" />;\n    if (status.conectado) return <Wifi className=\"h-3 w-3\" />;\n    if (status.erro) return <WifiOff className=\"h-3 w-3\" />;\n    return <AlertTriangle className=\"h-3 w-3\" />;\n  };\n\n  // Função para obter texto do status\n  const obterTextoStatus = () => {\n    if (!ativo) return 'Pausado';\n    if (carregando) return 'Atualizando...';\n    if (status.conectado) return 'Conectado';\n    if (status.erro) return 'Desconectado';\n    return 'Aguardando...';\n  };\n\n  // Função para obter descrição detalhada\n  const obterDescricaoStatus = () => {\n    if (!ativo) {\n      return 'Atualização automática pausada';\n    }\n\n    if (carregando) {\n      return 'Buscando dados atualizados...';\n    }\n\n    if (status.conectado && status.ultimaAtualizacao) {\n      const tempoDecorrido = formatDistanceToNow(status.ultimaAtualizacao, {\n        addSuffix: true,\n        locale: ptBR,\n      });\n      return `Última atualização ${tempoDecorrido}`;\n    }\n\n    if (status.erro) {\n      return `Erro: ${status.erro}`;\n    }\n\n    return 'Aguardando primeira atualização';\n  };\n\n  // Função para formatar intervalo\n  const formatarIntervalo = (ms: number) => {\n    const segundos = Math.floor(ms / 1000);\n    if (segundos < 60) return `${segundos}s`;\n    const minutos = Math.floor(segundos / 60);\n    return `${minutos}m`;\n  };\n\n  // Renderização compacta\n  if (compacto) {\n    return (\n      <TooltipProvider>\n        <div className={`flex items-center gap-2 ${className}`}>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Badge\n                variant={obterCorStatus() as any}\n                className=\"flex items-center gap-1 cursor-help\"\n              >\n                {obterIconeStatus()}\n                <span className=\"text-xs\">{obterTextoStatus()}</span>\n              </Badge>\n            </TooltipTrigger>\n            <TooltipContent>\n              <div className=\"text-sm\">\n                <p className=\"font-medium\">{obterTextoStatus()}</p>\n                <p className=\"text-muted-foreground\">\n                  {obterDescricaoStatus()}\n                </p>\n                <p className=\"text-xs mt-1\">\n                  Intervalo: {formatarIntervalo(intervalo)}\n                </p>\n                {status.tentativasReconexao > 0 && (\n                  <p className=\"text-xs text-yellow-600\">\n                    Tentativas de reconexão: {status.tentativasReconexao}\n                  </p>\n                )}\n              </div>\n            </TooltipContent>\n          </Tooltip>\n\n          {/* Botões de ação */}\n          <div className=\"flex items-center gap-1\">\n            {onForcarAtualizacao && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={onForcarAtualizacao}\n                    disabled={carregando}\n                    className=\"h-6 w-6 p-0\"\n                  >\n                    <RefreshCw\n                      className={`h-3 w-3 ${carregando ? 'animate-spin' : ''}`}\n                    />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Forçar atualização</p>\n                </TooltipContent>\n              </Tooltip>\n            )}\n\n            {onToggleAtivo && (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onToggleAtivo(!ativo)}\n                    className=\"h-6 w-6 p-0\"\n                  >\n                    {ativo ? (\n                      <Pause className=\"h-3 w-3\" />\n                    ) : (\n                      <Play className=\"h-3 w-3\" />\n                    )}\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{ativo ? 'Pausar' : 'Retomar'} atualização automática</p>\n                </TooltipContent>\n              </Tooltip>\n            )}\n          </div>\n        </div>\n      </TooltipProvider>\n    );\n  }\n\n  // Renderização completa\n  return (\n    <Card className={className}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            {/* Indicador de status */}\n            <div className=\"flex items-center gap-2\">\n              <div\n                className={`\n                w-3 h-3 rounded-full flex items-center justify-center\n                ${status.conectado && ativo ? 'bg-green-500' : ''}\n                ${!status.conectado && ativo ? 'bg-red-500' : ''}\n                ${!ativo ? 'bg-gray-400' : ''}\n                ${carregando ? 'bg-blue-500 animate-pulse' : ''}\n              `}\n              >\n                {carregando && (\n                  <RefreshCw className=\"h-2 w-2 text-white animate-spin\" />\n                )}\n              </div>\n\n              <div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium text-sm\">\n                    {obterTextoStatus()}\n                  </span>\n                  <Badge variant={obterCorStatus() as any} className=\"text-xs\">\n                    {formatarIntervalo(intervalo)}\n                  </Badge>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {obterDescricaoStatus()}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Botões de ação */}\n          <div className=\"flex items-center gap-2\">\n            {status.erro && onReconectar && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onReconectar}\n                className=\"text-xs\"\n              >\n                <Wifi className=\"h-3 w-3 mr-1\" />\n                Reconectar\n              </Button>\n            )}\n\n            {onForcarAtualizacao && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onForcarAtualizacao}\n                disabled={carregando}\n                className=\"text-xs\"\n              >\n                <RefreshCw\n                  className={`h-3 w-3 mr-1 ${carregando ? 'animate-spin' : ''}`}\n                />\n                Atualizar\n              </Button>\n            )}\n\n            {onToggleAtivo && (\n              <Button\n                variant={ativo ? 'secondary' : 'default'}\n                size=\"sm\"\n                onClick={() => onToggleAtivo(!ativo)}\n                className=\"text-xs\"\n              >\n                {ativo ? (\n                  <>\n                    <Pause className=\"h-3 w-3 mr-1\" />\n                    Pausar\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Retomar\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Informações adicionais */}\n        {(status.tentativasReconexao > 0 || status.ultimaAtualizacao) && (\n          <div className=\"mt-3 pt-3 border-t border-border\">\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n              {status.ultimaAtualizacao && (\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"h-3 w-3\" />\n                  <span>\n                    Última atualização:{' '}\n                    {status.ultimaAtualizacao.toLocaleTimeString('pt-BR')}\n                  </span>\n                </div>\n              )}\n\n              {status.tentativasReconexao > 0 && (\n                <div className=\"flex items-center gap-1 text-yellow-600\">\n                  <AlertTriangle className=\"h-3 w-3\" />\n                  <span>Tentativas: {status.tentativasReconexao}</span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n/**\n * Componente de indicador simples de status\n */\nexport function IndicadorStatusSimples({\n  conectado,\n  carregando,\n  ativo = true,\n  className = '',\n}: {\n  conectado: boolean;\n  carregando?: boolean;\n  ativo?: boolean;\n  className?: string;\n}) {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <div className={`flex items-center gap-1 ${className}`}>\n            <div\n              className={`\n              w-2 h-2 rounded-full\n              ${!ativo ? 'bg-gray-400' : ''}\n              ${ativo && conectado && !carregando ? 'bg-green-500' : ''}\n              ${ativo && !conectado && !carregando ? 'bg-red-500' : ''}\n              ${carregando ? 'bg-blue-500 animate-pulse' : ''}\n            `}\n            />\n            <span className=\"text-xs text-muted-foreground\">\n              {!ativo\n                ? 'Pausado'\n                : carregando\n                  ? 'Atualizando'\n                  : conectado\n                    ? 'Online'\n                    : 'Offline'}\n            </span>\n          </div>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>\n            {!ativo\n              ? 'Atualização pausada'\n              : carregando\n                ? 'Buscando dados...'\n                : conectado\n                  ? 'Conectado e atualizado'\n                  : 'Desconectado'}\n          </p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n\nexport default StatusTempoReal;\n"],"names":["IndicadorStatusSimples","StatusTempoReal","status","carregando","ativo","intervalo","onForcarAtualizacao","onReconectar","onToggleAtivo","className","compacto","obterCorStatus","conectado","erro","obterIconeStatus","Pause","RefreshCw","Wifi","WifiOff","AlertTriangle","obterTextoStatus","obterDescricaoStatus","ultimaAtualizacao","tempoDecorrido","formatDistanceToNow","addSuffix","locale","ptBR","formatarIntervalo","ms","segundos","Math","floor","minutos","TooltipProvider","div","Tooltip","TooltipTrigger","asChild","Badge","variant","span","TooltipContent","p","tentativasReconexao","Button","size","onClick","disabled","Play","Card","CardContent","Clock","toLocaleTimeString"],"mappings":"AAAA;;;;;;;;;;;;QAgUgBA;eAAAA;;QAnRAC;eAAAA;;QAuUhB;eAAA;;;;8DAlXkB;wBACK;uBACD;sBACY;yBAM3B;6BAWA;yBAE6B;wBACf;;;;;;AAoBd,SAASA,gBAAgB,EAC9BC,MAAM,EACNC,aAAa,KAAK,EAClBC,QAAQ,IAAI,EACZC,YAAY,KAAK,EACjBC,mBAAmB,EACnBC,YAAY,EACZC,aAAa,EACbC,YAAY,EAAE,EACdC,WAAW,KAAK,EACK;IACrB,kCAAkC;IAClC,MAAMC,iBAAiB;QACrB,IAAI,CAACP,OAAO,OAAO;QACnB,IAAID,YAAY,OAAO;QACvB,IAAID,OAAOU,SAAS,EAAE,OAAO;QAC7B,IAAIV,OAAOW,IAAI,EAAE,OAAO;QACxB,OAAO;IACT;IAEA,oCAAoC;IACpC,MAAMC,mBAAmB;QACvB,IAAI,CAACV,OAAO,qBAAO,qBAACW,kBAAK;YAACN,WAAU;;QACpC,IAAIN,YAAY,qBAAO,qBAACa,sBAAS;YAACP,WAAU;;QAC5C,IAAIP,OAAOU,SAAS,EAAE,qBAAO,qBAACK,iBAAI;YAACR,WAAU;;QAC7C,IAAIP,OAAOW,IAAI,EAAE,qBAAO,qBAACK,oBAAO;YAACT,WAAU;;QAC3C,qBAAO,qBAACU,0BAAa;YAACV,WAAU;;IAClC;IAEA,oCAAoC;IACpC,MAAMW,mBAAmB;QACvB,IAAI,CAAChB,OAAO,OAAO;QACnB,IAAID,YAAY,OAAO;QACvB,IAAID,OAAOU,SAAS,EAAE,OAAO;QAC7B,IAAIV,OAAOW,IAAI,EAAE,OAAO;QACxB,OAAO;IACT;IAEA,wCAAwC;IACxC,MAAMQ,uBAAuB;QAC3B,IAAI,CAACjB,OAAO;YACV,OAAO;QACT;QAEA,IAAID,YAAY;YACd,OAAO;QACT;QAEA,IAAID,OAAOU,SAAS,IAAIV,OAAOoB,iBAAiB,EAAE;YAChD,MAAMC,iBAAiBC,IAAAA,4BAAmB,EAACtB,OAAOoB,iBAAiB,EAAE;gBACnEG,WAAW;gBACXC,QAAQC,YAAI;YACd;YACA,OAAO,CAAC,mBAAmB,EAAEJ,gBAAgB;QAC/C;QAEA,IAAIrB,OAAOW,IAAI,EAAE;YACf,OAAO,CAAC,MAAM,EAAEX,OAAOW,IAAI,EAAE;QAC/B;QAEA,OAAO;IACT;IAEA,iCAAiC;IACjC,MAAMe,oBAAoB,CAACC;QACzB,MAAMC,WAAWC,KAAKC,KAAK,CAACH,KAAK;QACjC,IAAIC,WAAW,IAAI,OAAO,GAAGA,SAAS,CAAC,CAAC;QACxC,MAAMG,UAAUF,KAAKC,KAAK,CAACF,WAAW;QACtC,OAAO,GAAGG,QAAQ,CAAC,CAAC;IACtB;IAEA,wBAAwB;IACxB,IAAIvB,UAAU;QACZ,qBACE,qBAACwB,wBAAe;sBACd,cAAA,sBAACC;gBAAI1B,WAAW,CAAC,wBAAwB,EAAEA,WAAW;;kCACpD,sBAAC2B,gBAAO;;0CACN,qBAACC,uBAAc;gCAACC,OAAO;0CACrB,cAAA,sBAACC,YAAK;oCACJC,SAAS7B;oCACTF,WAAU;;wCAETK;sDACD,qBAAC2B;4CAAKhC,WAAU;sDAAWW;;;;;0CAG/B,qBAACsB,uBAAc;0CACb,cAAA,sBAACP;oCAAI1B,WAAU;;sDACb,qBAACkC;4CAAElC,WAAU;sDAAeW;;sDAC5B,qBAACuB;4CAAElC,WAAU;sDACVY;;sDAEH,sBAACsB;4CAAElC,WAAU;;gDAAe;gDACdmB,kBAAkBvB;;;wCAE/BH,OAAO0C,mBAAmB,GAAG,mBAC5B,sBAACD;4CAAElC,WAAU;;gDAA0B;gDACXP,OAAO0C,mBAAmB;;;;;;;;kCAQ9D,sBAACT;wBAAI1B,WAAU;;4BACZH,qCACC,sBAAC8B,gBAAO;;kDACN,qBAACC,uBAAc;wCAACC,OAAO;kDACrB,cAAA,qBAACO,cAAM;4CACLL,SAAQ;4CACRM,MAAK;4CACLC,SAASzC;4CACT0C,UAAU7C;4CACVM,WAAU;sDAEV,cAAA,qBAACO,sBAAS;gDACRP,WAAW,CAAC,QAAQ,EAAEN,aAAa,iBAAiB,IAAI;;;;kDAI9D,qBAACuC,uBAAc;kDACb,cAAA,qBAACC;sDAAE;;;;;4BAKRnC,+BACC,sBAAC4B,gBAAO;;kDACN,qBAACC,uBAAc;wCAACC,OAAO;kDACrB,cAAA,qBAACO,cAAM;4CACLL,SAAQ;4CACRM,MAAK;4CACLC,SAAS,IAAMvC,cAAc,CAACJ;4CAC9BK,WAAU;sDAETL,sBACC,qBAACW,kBAAK;gDAACN,WAAU;+DAEjB,qBAACwC,iBAAI;gDAACxC,WAAU;;;;kDAItB,qBAACiC,uBAAc;kDACb,cAAA,sBAACC;;gDAAGvC,QAAQ,WAAW;gDAAU;;;;;;;;;;;IAQjD;IAEA,wBAAwB;IACxB,qBACE,qBAAC8C,UAAI;QAACzC,WAAWA;kBACf,cAAA,sBAAC0C,iBAAW;YAAC1C,WAAU;;8BACrB,sBAAC0B;oBAAI1B,WAAU;;sCACb,qBAAC0B;4BAAI1B,WAAU;sCAEb,cAAA,sBAAC0B;gCAAI1B,WAAU;;kDACb,qBAAC0B;wCACC1B,WAAW,CAAC;;gBAEZ,EAAEP,OAAOU,SAAS,IAAIR,QAAQ,iBAAiB,GAAG;gBAClD,EAAE,CAACF,OAAOU,SAAS,IAAIR,QAAQ,eAAe,GAAG;gBACjD,EAAE,CAACA,QAAQ,gBAAgB,GAAG;gBAC9B,EAAED,aAAa,8BAA8B,GAAG;cAClD,CAAC;kDAEEA,4BACC,qBAACa,sBAAS;4CAACP,WAAU;;;kDAIzB,sBAAC0B;;0DACC,sBAACA;gDAAI1B,WAAU;;kEACb,qBAACgC;wDAAKhC,WAAU;kEACbW;;kEAEH,qBAACmB,YAAK;wDAACC,SAAS7B;wDAAyBF,WAAU;kEAChDmB,kBAAkBvB;;;;0DAGvB,qBAACsC;gDAAElC,WAAU;0DACVY;;;;;;;sCAOT,sBAACc;4BAAI1B,WAAU;;gCACZP,OAAOW,IAAI,IAAIN,8BACd,sBAACsC,cAAM;oCACLL,SAAQ;oCACRM,MAAK;oCACLC,SAASxC;oCACTE,WAAU;;sDAEV,qBAACQ,iBAAI;4CAACR,WAAU;;wCAAiB;;;gCAKpCH,qCACC,sBAACuC,cAAM;oCACLL,SAAQ;oCACRM,MAAK;oCACLC,SAASzC;oCACT0C,UAAU7C;oCACVM,WAAU;;sDAEV,qBAACO,sBAAS;4CACRP,WAAW,CAAC,aAAa,EAAEN,aAAa,iBAAiB,IAAI;;wCAC7D;;;gCAKLK,+BACC,qBAACqC,cAAM;oCACLL,SAASpC,QAAQ,cAAc;oCAC/B0C,MAAK;oCACLC,SAAS,IAAMvC,cAAc,CAACJ;oCAC9BK,WAAU;8CAETL,sBACC;;0DACE,qBAACW,kBAAK;gDAACN,WAAU;;4CAAiB;;uDAIpC;;0DACE,qBAACwC,iBAAI;gDAACxC,WAAU;;4CAAiB;;;;;;;;gBAU3CP,CAAAA,OAAO0C,mBAAmB,GAAG,KAAK1C,OAAOoB,iBAAiB,AAAD,mBACzD,qBAACa;oBAAI1B,WAAU;8BACb,cAAA,sBAAC0B;wBAAI1B,WAAU;;4BACZP,OAAOoB,iBAAiB,kBACvB,sBAACa;gCAAI1B,WAAU;;kDACb,qBAAC2C,kBAAK;wCAAC3C,WAAU;;kDACjB,sBAACgC;;4CAAK;4CACgB;4CACnBvC,OAAOoB,iBAAiB,CAAC+B,kBAAkB,CAAC;;;;;4BAKlDnD,OAAO0C,mBAAmB,GAAG,mBAC5B,sBAACT;gCAAI1B,WAAU;;kDACb,qBAACU,0BAAa;wCAACV,WAAU;;kDACzB,sBAACgC;;4CAAK;4CAAavC,OAAO0C,mBAAmB;;;;;;;;;;;AAS/D;AAKO,SAAS5C,uBAAuB,EACrCY,SAAS,EACTT,UAAU,EACVC,QAAQ,IAAI,EACZK,YAAY,EAAE,EAMf;IACC,qBACE,qBAACyB,wBAAe;kBACd,cAAA,sBAACE,gBAAO;;8BACN,qBAACC,uBAAc;oBAACC,OAAO;8BACrB,cAAA,sBAACH;wBAAI1B,WAAW,CAAC,wBAAwB,EAAEA,WAAW;;0CACpD,qBAAC0B;gCACC1B,WAAW,CAAC;;cAEZ,EAAE,CAACL,QAAQ,gBAAgB,GAAG;cAC9B,EAAEA,SAASQ,aAAa,CAACT,aAAa,iBAAiB,GAAG;cAC1D,EAAEC,SAAS,CAACQ,aAAa,CAACT,aAAa,eAAe,GAAG;cACzD,EAAEA,aAAa,8BAA8B,GAAG;YAClD,CAAC;;0CAED,qBAACsC;gCAAKhC,WAAU;0CACb,CAACL,QACE,YACAD,aACE,gBACAS,YACE,WACA;;;;;8BAId,qBAAC8B,uBAAc;8BACb,cAAA,qBAACC;kCACE,CAACvC,QACE,wBACAD,aACE,sBACAS,YACE,2BACA;;;;;;AAMpB;MAEA,WAAeX"}