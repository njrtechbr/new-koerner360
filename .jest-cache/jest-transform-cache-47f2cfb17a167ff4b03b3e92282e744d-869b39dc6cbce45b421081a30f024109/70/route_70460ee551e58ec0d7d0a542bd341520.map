{"version":3,"names":["DELETE","cov_2mwxx5q3f3","f","s","GET","PUT","request","params","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","includes","userType","_atendentes","MENSAGENS_ERRO_ATENDENTES","SEM_PERMISSAO","atendenteId","idAtendenteSchema","parse","id","atendente","_prisma","prisma","findUnique","where","include","usuario","select","nome","email","ativo","criadoEm","atualizadoEm","documentos","tipo","numero","dataEmissao","orgaoEmissor","arquivo","orderBy","historicoAlteracoes","descricao","dadosAnteriores","dadosNovos","criadoPorId","take","_count","ATENDENTE_NAO_ENCONTRADO","usuarioId","idade","dataNascimento","validacaoAtendentes","calcularIdade","tempoEmpresa","calcularTempoEmpresa","dataAdmissao","cpf","rg","telefone","celular","endereco","cep","cidade","estado","cargo","setor","departamento","salario","observacoes","foto","estatisticas","tempoEmpresaMeses","totalDocumentos","totalAlteracoes","error","console","_zod","ZodError","DADOS_INVALIDOS","detalhes","errors","ERRO_INTERNO","dadosRequisicao","dadosValidados","atualizarAtendenteSchema","atendenteExistente","dadosAtualizacao","camposPermitidos","campo","undefined","novoValor","Date","Object","keys","length","atendenteAtualizado","$transaction","tx","update","data","historicoAlteracaoAtendente","create","join","JSON","stringify","mensagem","usuarioAtivo"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport {\n  idAtendenteSchema,\n  atualizarAtendenteSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n  validacaoAtendentes,\n} from '@/lib/validations/atendentes';\nimport { ZodError } from 'zod';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * GET /api/atendentes/[id]\n * Busca um atendente específico por ID\n */\nexport async function GET(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões\n    if (!['ADMIN', 'GERENTE', 'ATENDENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Buscar atendente\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n            ativo: true,\n            criadoEm: true,\n            atualizadoEm: true,\n          },\n        },\n        documentos: {\n          select: {\n            id: true,\n            tipo: true,\n            numero: true,\n            dataEmissao: true,\n            orgaoEmissor: true,\n            arquivo: true,\n            criadoEm: true,\n          },\n          orderBy: {\n            criadoEm: 'desc',\n          },\n        },\n        historicoAlteracoes: {\n          select: {\n            id: true,\n            tipo: true,\n            descricao: true,\n            dadosAnteriores: true,\n            dadosNovos: true,\n            criadoEm: true,\n            criadoPorId: true,\n          },\n          orderBy: {\n            criadoEm: 'desc',\n          },\n          take: 10, // Últimas 10 alterações\n        },\n        _count: {\n          select: {\n            documentos: true,\n            historicoAlteracoes: true,\n          },\n        },\n      },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o atendente pode ver apenas seus próprios dados\n    if (\n      session.user.userType === 'ATENDENTE' &&\n      atendente.usuarioId !== session.user.id\n    ) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Calcular estatísticas adicionais\n    const idade = atendente.dataNascimento\n      ? validacaoAtendentes.calcularIdade(atendente.dataNascimento)\n      : null;\n\n    const tempoEmpresa = validacaoAtendentes.calcularTempoEmpresa(\n      atendente.dataAdmissao\n    );\n\n    return NextResponse.json({\n      atendente: {\n        id: atendente.id,\n        cpf: atendente.cpf,\n        rg: atendente.rg,\n        dataNascimento: atendente.dataNascimento,\n        telefone: atendente.telefone,\n        celular: atendente.celular,\n        endereco: atendente.endereco,\n        cep: atendente.cep,\n        cidade: atendente.cidade,\n        estado: atendente.estado,\n        dataAdmissao: atendente.dataAdmissao,\n        cargo: atendente.cargo,\n        setor: atendente.setor,\n        departamento: atendente.departamento,\n        salario: atendente.salario,\n        status: atendente.status,\n        observacoes: atendente.observacoes,\n        foto: atendente.foto,\n        criadoEm: atendente.criadoEm,\n        atualizadoEm: atendente.atualizadoEm,\n        usuario: atendente.usuario,\n        documentos: atendente.documentos,\n        historicoAlteracoes: atendente.historicoAlteracoes,\n        estatisticas: {\n          idade,\n          tempoEmpresaMeses: tempoEmpresa,\n          totalDocumentos: atendente._count.documentos,\n          totalAlteracoes: atendente._count.historicoAlteracoes,\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao buscar atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PUT /api/atendentes/[id]\n * Atualiza um atendente específico\n */\nexport async function PUT(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN e GERENTE podem atualizar)\n    if (!['ADMIN', 'GERENTE'].includes(session.user.userType)) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Extrair dados do corpo da requisição\n    const dadosRequisicao = await request.json();\n\n    // Validar dados\n    const dadosValidados = atualizarAtendenteSchema.parse(dadosRequisicao);\n\n    // Verificar se o atendente existe\n    const atendenteExistente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      include: {\n        usuario: true,\n      },\n    });\n\n    if (!atendenteExistente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Preparar dados para atualização\n    const dadosAtualizacao: any = {};\n    const dadosAnteriores: any = {};\n    const dadosNovos: any = {};\n\n    // Mapear campos que podem ser atualizados\n    const camposPermitidos = [\n      'rg',\n      'dataNascimento',\n      'telefone',\n      'celular',\n      'endereco',\n      'cep',\n      'cidade',\n      'estado',\n      'dataAdmissao',\n      'cargo',\n      'setor',\n      'departamento',\n      'salario',\n      'status',\n      'observacoes',\n      'foto',\n    ];\n\n    for (const campo of camposPermitidos) {\n      if (dadosValidados[campo] !== undefined) {\n        // Armazenar valor anterior\n        dadosAnteriores[campo] = atendenteExistente[campo];\n\n        // Preparar novo valor\n        let novoValor = dadosValidados[campo];\n\n        // Converter datas se necessário\n        if (['dataNascimento', 'dataAdmissao'].includes(campo) && novoValor) {\n          novoValor = new Date(novoValor);\n        }\n\n        dadosAtualizacao[campo] = novoValor;\n        dadosNovos[campo] = novoValor;\n      }\n    }\n\n    // Se não há dados para atualizar\n    if (Object.keys(dadosAtualizacao).length === 0) {\n      return NextResponse.json(\n        { erro: 'Nenhum dado válido fornecido para atualização' },\n        { status: 400 }\n      );\n    }\n\n    // Atualizar atendente em uma transação\n    const atendenteAtualizado = await prisma.$transaction(async tx => {\n      // Atualizar dados do atendente\n      const atendente = await tx.atendente.update({\n        where: { id: atendenteId },\n        data: dadosAtualizacao,\n        include: {\n          usuario: {\n            select: {\n              id: true,\n              nome: true,\n              email: true,\n              ativo: true,\n              criadoEm: true,\n              atualizadoEm: true,\n            },\n          },\n        },\n      });\n\n      // Registrar no histórico de alterações\n      await tx.historicoAlteracaoAtendente.create({\n        data: {\n          atendenteId: atendenteId,\n          tipo: 'ATUALIZACAO',\n          descricao: `Dados do atendente atualizados: ${Object.keys(dadosNovos).join(', ')}`,\n          dadosAnteriores: JSON.stringify(dadosAnteriores),\n          dadosNovos: JSON.stringify(dadosNovos),\n          criadoPorId: session.user.id,\n        },\n      });\n\n      return atendente;\n    });\n\n    return NextResponse.json({\n      mensagem: 'Atendente atualizado com sucesso',\n      atendente: {\n        id: atendenteAtualizado.id,\n        cpf: atendenteAtualizado.cpf,\n        rg: atendenteAtualizado.rg,\n        dataNascimento: atendenteAtualizado.dataNascimento,\n        telefone: atendenteAtualizado.telefone,\n        celular: atendenteAtualizado.celular,\n        endereco: atendenteAtualizado.endereco,\n        cep: atendenteAtualizado.cep,\n        cidade: atendenteAtualizado.cidade,\n        estado: atendenteAtualizado.estado,\n        dataAdmissao: atendenteAtualizado.dataAdmissao,\n        cargo: atendenteAtualizado.cargo,\n        setor: atendenteAtualizado.setor,\n        departamento: atendenteAtualizado.departamento,\n        salario: atendenteAtualizado.salario,\n        status: atendenteAtualizado.status,\n        observacoes: atendenteAtualizado.observacoes,\n        foto: atendenteAtualizado.foto,\n        criadoEm: atendenteAtualizado.criadoEm,\n        atualizadoEm: atendenteAtualizado.atualizadoEm,\n        usuario: atendenteAtualizado.usuario,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/atendentes/[id]\n * Remove um atendente (soft delete)\n */\nexport async function DELETE(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN pode deletar)\n    if (session.user.userType !== 'ADMIN') {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Verificar se o atendente existe\n    const atendenteExistente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      include: {\n        usuario: true,\n      },\n    });\n\n    if (!atendenteExistente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Realizar soft delete em uma transação\n    await prisma.$transaction(async tx => {\n      // Desativar usuário relacionado\n      await tx.usuario.update({\n        where: { id: atendenteExistente.usuarioId },\n        data: { ativo: false },\n      });\n\n      // Atualizar status do atendente para INATIVO\n      await tx.atendente.update({\n        where: { id: atendenteId },\n        data: { status: 'INATIVO' },\n      });\n\n      // Registrar no histórico de alterações\n      await tx.historicoAlteracaoAtendente.create({\n        data: {\n          atendenteId: atendenteId,\n          tipo: 'EXCLUSAO',\n          descricao: 'Atendente removido do sistema (soft delete)',\n          dadosAnteriores: JSON.stringify({\n            status: atendenteExistente.status,\n            usuarioAtivo: atendenteExistente.usuario.ativo,\n          }),\n          dadosNovos: JSON.stringify({\n            status: 'INATIVO',\n            usuarioAtivo: false,\n          }),\n          criadoPorId: session.user.id,\n        },\n      });\n    });\n\n    return NextResponse.json({\n      mensagem: 'Atendente removido com sucesso',\n    });\n  } catch (error) {\n    console.error('Erro ao remover atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}