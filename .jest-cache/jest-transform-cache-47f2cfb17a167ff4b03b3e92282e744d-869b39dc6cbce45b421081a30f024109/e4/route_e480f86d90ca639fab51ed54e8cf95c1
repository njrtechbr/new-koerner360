36ddadb11b74d7606b9d73f67b5a5437
"use strict";

/* istanbul ignore next */
function cov_2pnuux640m() {
  var path = "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\desativar\\route.ts";
  var hash = "99e6b369c6c24f8cc4ac72216b48702194bfcc29";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\desativar\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 48
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 52
        }
      },
      "7": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 72
        }
      },
      "8": {
        start: {
          line: 16,
          column: 13
        },
        end: {
          line: 16,
          column: 27
        }
      },
      "9": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "10": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 80
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "12": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 26,
          column: 15
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "15": {
        start: {
          line: 37,
          column: 28
        },
        end: {
          line: 37,
          column: 74
        }
      },
      "16": {
        start: {
          line: 39,
          column: 26
        },
        end: {
          line: 53,
          column: 10
        }
      },
      "17": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "18": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "19": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "20": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "21": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "23": {
        start: {
          line: 78,
          column: 32
        },
        end: {
          line: 78,
          column: 52
        }
      },
      "24": {
        start: {
          line: 80,
          column: 60
        },
        end: {
          line: 80,
          column: 119
        }
      },
      "25": {
        start: {
          line: 82,
          column: 32
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "26": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "27": {
        start: {
          line: 89,
          column: 38
        },
        end: {
          line: 96,
          column: 14
        }
      },
      "28": {
        start: {
          line: 98,
          column: 40
        },
        end: {
          line: 105,
          column: 14
        }
      },
      "29": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "30": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "31": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "32": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 61
        }
      },
      "33": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "34": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "35": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 17,
            column: 15
          },
          end: {
            line: 17,
            column: 19
          }
        },
        loc: {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 87,
            column: 60
          },
          end: {
            line: 87,
            column: 61
          }
        },
        loc: {
          start: {
            line: 87,
            column: 72
          },
          end: {
            line: 127,
            column: 9
          }
        },
        line: 87
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 42
          }
        }, {
          start: {
            line: 62,
            column: 46
          },
          end: {
            line: 62,
            column: 70
          }
        }],
        line: 62
      },
      "5": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "6": {
        loc: {
          start: {
            line: 146,
            column: 32
          },
          end: {
            line: 146,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 32
          },
          end: {
            line: 146,
            column: 46
          }
        }, {
          start: {
            line: 146,
            column: 50
          },
          end: {
            line: 146,
            column: 54
          }
        }],
        line: 146
      },
      "7": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\desativar\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { z } from 'zod';\nimport {\n  idAtendenteSchema,\n  desativarAtendenteSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n} from '@/lib/validations/atendentes';\nimport { ZodError } from 'zod';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * POST /api/atendentes/[id]/desativar\n * Desativa um atendente ativo\n */\nexport async function POST(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autentica\xE7\xE3o\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'N\xE3o autorizado' }, { status: 401 });\n    }\n\n    // Verificar permiss\xF5es (apenas ADMIN pode desativar atendentes)\n    if (session.user.userType !== 'ADMIN') {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Buscar atendente com dados do usu\xE1rio\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n            ativo: true,\n          },\n        },\n      },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o atendente j\xE1 est\xE1 inativo\n    if (atendente.status === 'INATIVO' || !atendente.usuario.ativo) {\n      return NextResponse.json(\n        { erro: 'Atendente j\xE1 est\xE1 inativo' },\n        { status: 400 }\n      );\n    }\n\n    // Verificar se \xE9 o pr\xF3prio usu\xE1rio tentando se desativar\n    if (atendente.usuarioId === session.user.id) {\n      return NextResponse.json(\n        { erro: 'Voc\xEA n\xE3o pode desativar sua pr\xF3pria conta' },\n        { status: 400 }\n      );\n    }\n\n    // Extrair dados do corpo da requisi\xE7\xE3o\n    const dadosRequisicao = await request.json();\n\n    // Validar dados\n    const { motivo, tipoDesativacao, dataReativacao } =\n      desativarAtendenteSchema.parse(dadosRequisicao);\n\n    // Salvar dados anteriores para o hist\xF3rico\n    const dadosAnteriores = {\n      statusAtendente: atendente.status,\n      usuarioAtivo: atendente.usuario.ativo,\n    };\n\n    // Usar transa\xE7\xE3o para garantir consist\xEAncia\n    const resultado = await prisma.$transaction(async tx => {\n      // Desativar usu\xE1rio\n      const usuarioAtualizado = await tx.usuario.update({\n        where: { id: atendente.usuarioId },\n        data: { ativo: false },\n      });\n\n      // Atualizar status do atendente para INATIVO\n      const atendenteAtualizado = await tx.atendente.update({\n        where: { id: atendenteId },\n        data: { status: 'INATIVO' },\n      });\n\n      // Registrar no hist\xF3rico de altera\xE7\xF5es\n      await tx.historicoAlteracaoAtendente.create({\n        data: {\n          atendenteId,\n          tipo: 'DESATIVACAO',\n          descricao: `Atendente desativado (${tipoDesativacao.toLowerCase()}) - ${motivo}`,\n          valorAnterior: JSON.stringify(dadosAnteriores),\n          valorNovo: JSON.stringify({\n            statusAtendente: 'INATIVO',\n            usuarioAtivo: false,\n            motivo,\n            tipoDesativacao,\n            dataReativacao,\n          }),\n          criadoPorId: session.user.id,\n        },\n      });\n\n      return {\n        atendente: atendenteAtualizado,\n        usuario: usuarioAtualizado,\n      };\n    });\n\n    return NextResponse.json({\n      mensagem: 'Atendente desativado com sucesso',\n      atendente: {\n        id: resultado.atendente.id,\n        status: resultado.atendente.status,\n        usuario: {\n          id: resultado.usuario.id,\n          nome: resultado.usuario.nome,\n          email: resultado.usuario.email,\n          ativo: resultado.usuario.ativo,\n        },\n        desativadoEm: new Date().toISOString(),\n        desativadoPor: {\n          id: session.user.id,\n          nome: session.user.name,\n        },\n        motivo,\n        tipoDesativacao,\n        dataReativacao: dataReativacao || null,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao desativar atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["POST", "request", "params", "session", "getServerSession", "authOptions", "user", "NextResponse", "json", "erro", "status", "userType", "MENSAGENS_ERRO_ATENDENTES", "SEM_PERMISSAO", "atendenteId", "idAtendenteSchema", "parse", "id", "atendente", "prisma", "findUnique", "where", "include", "usuario", "select", "nome", "email", "ativo", "ATENDENTE_NAO_ENCONTRADO", "usuarioId", "dadosRequisicao", "motivo", "tipoDesativacao", "dataReativacao", "desativarAtendenteSchema", "dadosAnteriores", "statusAtendente", "usuarioAtivo", "resultado", "$transaction", "tx", "usuarioAtualizado", "update", "data", "atendenteAtualizado", "historicoAlteracaoAtendente", "create", "tipo", "descricao", "toLowerCase", "valorAnterior", "JSON", "stringify", "valorNovo", "criadoPorId", "mensagem", "desativadoEm", "Date", "toISOString", "desativadoPor", "name", "error", "console", "ZodError", "DADOS_INVALIDOS", "detalhes", "errors", "ERRO_INTERNO"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "99e6b369c6c24f8cc4ac72216b48702194bfcc29"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2pnuux640m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2pnuux640m();
cov_2pnuux640m().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2pnuux640m().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2pnuux640m().f[0]++;
    cov_2pnuux640m().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2pnuux640m().s[3]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_2pnuux640m().s[4]++, require("next-auth"));
const _auth =
/* istanbul ignore next */
(cov_2pnuux640m().s[5]++, require("../../../../../lib/auth"));
const _prisma =
/* istanbul ignore next */
(cov_2pnuux640m().s[6]++, require("../../../../../lib/prisma"));
const _atendentes =
/* istanbul ignore next */
(cov_2pnuux640m().s[7]++, require("../../../../../lib/validations/atendentes"));
const _zod =
/* istanbul ignore next */
(cov_2pnuux640m().s[8]++, require("zod"));
async function POST(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2pnuux640m().f[1]++;
  cov_2pnuux640m().s[9]++;
  try {
    // Verificar autenticação
    const session =
    /* istanbul ignore next */
    (cov_2pnuux640m().s[10]++, await (0, _nextauth.getServerSession)(_auth.authOptions));
    /* istanbul ignore next */
    cov_2pnuux640m().s[11]++;
    if (!session?.user) {
      /* istanbul ignore next */
      cov_2pnuux640m().b[0][0]++;
      cov_2pnuux640m().s[12]++;
      return _server.NextResponse.json({
        erro: 'Não autorizado'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pnuux640m().b[0][1]++;
    }
    // Verificar permissões (apenas ADMIN pode desativar atendentes)
    cov_2pnuux640m().s[13]++;
    if (session.user.userType !== 'ADMIN') {
      /* istanbul ignore next */
      cov_2pnuux640m().b[1][0]++;
      cov_2pnuux640m().s[14]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pnuux640m().b[1][1]++;
    }
    // Validar ID
    const atendenteId =
    /* istanbul ignore next */
    (cov_2pnuux640m().s[15]++, _atendentes.idAtendenteSchema.parse(params.id));
    // Buscar atendente com dados do usuário
    const atendente =
    /* istanbul ignore next */
    (cov_2pnuux640m().s[16]++, await _prisma.prisma.atendente.findUnique({
      where: {
        id: atendenteId
      },
      include: {
        usuario: {
          select: {
            id: true,
            nome: true,
            email: true,
            ativo: true
          }
        }
      }
    }));
    /* istanbul ignore next */
    cov_2pnuux640m().s[17]++;
    if (!atendente) {
      /* istanbul ignore next */
      cov_2pnuux640m().b[2][0]++;
      cov_2pnuux640m().s[18]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pnuux640m().b[2][1]++;
    }
    // Verificar se o atendente já está inativo
    cov_2pnuux640m().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_2pnuux640m().b[4][0]++, atendente.status === 'INATIVO') ||
    /* istanbul ignore next */
    (cov_2pnuux640m().b[4][1]++, !atendente.usuario.ativo)) {
      /* istanbul ignore next */
      cov_2pnuux640m().b[3][0]++;
      cov_2pnuux640m().s[20]++;
      return _server.NextResponse.json({
        erro: 'Atendente já está inativo'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pnuux640m().b[3][1]++;
    }
    // Verificar se é o próprio usuário tentando se desativar
    cov_2pnuux640m().s[21]++;
    if (atendente.usuarioId === session.user.id) {
      /* istanbul ignore next */
      cov_2pnuux640m().b[5][0]++;
      cov_2pnuux640m().s[22]++;
      return _server.NextResponse.json({
        erro: 'Você não pode desativar sua própria conta'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pnuux640m().b[5][1]++;
    }
    // Extrair dados do corpo da requisição
    const dadosRequisicao =
    /* istanbul ignore next */
    (cov_2pnuux640m().s[23]++, await request.json());
    // Validar dados
    const {
      motivo,
      tipoDesativacao,
      dataReativacao
    } =
    /* istanbul ignore next */
    (cov_2pnuux640m().s[24]++, _atendentes.desativarAtendenteSchema.parse(dadosRequisicao));
    // Salvar dados anteriores para o histórico
    const dadosAnteriores =
    /* istanbul ignore next */
    (cov_2pnuux640m().s[25]++, {
      statusAtendente: atendente.status,
      usuarioAtivo: atendente.usuario.ativo
    });
    // Usar transação para garantir consistência
    const resultado =
    /* istanbul ignore next */
    (cov_2pnuux640m().s[26]++, await _prisma.prisma.$transaction(async tx => {
      /* istanbul ignore next */
      cov_2pnuux640m().f[2]++;
      // Desativar usuário
      const usuarioAtualizado =
      /* istanbul ignore next */
      (cov_2pnuux640m().s[27]++, await tx.usuario.update({
        where: {
          id: atendente.usuarioId
        },
        data: {
          ativo: false
        }
      }));
      // Atualizar status do atendente para INATIVO
      const atendenteAtualizado =
      /* istanbul ignore next */
      (cov_2pnuux640m().s[28]++, await tx.atendente.update({
        where: {
          id: atendenteId
        },
        data: {
          status: 'INATIVO'
        }
      }));
      // Registrar no histórico de alterações
      /* istanbul ignore next */
      cov_2pnuux640m().s[29]++;
      await tx.historicoAlteracaoAtendente.create({
        data: {
          atendenteId,
          tipo: 'DESATIVACAO',
          descricao: `Atendente desativado (${tipoDesativacao.toLowerCase()}) - ${motivo}`,
          valorAnterior: JSON.stringify(dadosAnteriores),
          valorNovo: JSON.stringify({
            statusAtendente: 'INATIVO',
            usuarioAtivo: false,
            motivo,
            tipoDesativacao,
            dataReativacao
          }),
          criadoPorId: session.user.id
        }
      });
      /* istanbul ignore next */
      cov_2pnuux640m().s[30]++;
      return {
        atendente: atendenteAtualizado,
        usuario: usuarioAtualizado
      };
    }));
    /* istanbul ignore next */
    cov_2pnuux640m().s[31]++;
    return _server.NextResponse.json({
      mensagem: 'Atendente desativado com sucesso',
      atendente: {
        id: resultado.atendente.id,
        status: resultado.atendente.status,
        usuario: {
          id: resultado.usuario.id,
          nome: resultado.usuario.nome,
          email: resultado.usuario.email,
          ativo: resultado.usuario.ativo
        },
        desativadoEm: new Date().toISOString(),
        desativadoPor: {
          id: session.user.id,
          nome: session.user.name
        },
        motivo,
        tipoDesativacao,
        dataReativacao:
        /* istanbul ignore next */
        (cov_2pnuux640m().b[6][0]++, dataReativacao) ||
        /* istanbul ignore next */
        (cov_2pnuux640m().b[6][1]++, null)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2pnuux640m().s[32]++;
    console.error('Erro ao desativar atendente:', error);
    /* istanbul ignore next */
    cov_2pnuux640m().s[33]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_2pnuux640m().b[7][0]++;
      cov_2pnuux640m().s[34]++;
      return _server.NextResponse.json({
        erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,
        detalhes: error.errors
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2pnuux640m().b[7][1]++;
    }
    cov_2pnuux640m().s[35]++;
    return _server.NextResponse.json({
      erro: _atendentes.MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,