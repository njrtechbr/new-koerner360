{"version":3,"names":["POST","request","params","cov_2pnuux640m","f","s","session","_nextauth","getServerSession","_auth","authOptions","user","b","_server","NextResponse","json","erro","status","userType","_atendentes","MENSAGENS_ERRO_ATENDENTES","SEM_PERMISSAO","atendenteId","idAtendenteSchema","parse","id","atendente","_prisma","prisma","findUnique","where","include","usuario","select","nome","email","ativo","ATENDENTE_NAO_ENCONTRADO","usuarioId","dadosRequisicao","motivo","tipoDesativacao","dataReativacao","desativarAtendenteSchema","dadosAnteriores","statusAtendente","usuarioAtivo","resultado","$transaction","tx","usuarioAtualizado","update","data","atendenteAtualizado","historicoAlteracaoAtendente","create","tipo","descricao","toLowerCase","valorAnterior","JSON","stringify","valorNovo","criadoPorId","mensagem","desativadoEm","Date","toISOString","desativadoPor","name","error","console","_zod","ZodError","DADOS_INVALIDOS","detalhes","errors","ERRO_INTERNO"],"sources":["C:\\Users\\Nereu Jr\\Documents\\Dev\\new\\src\\app\\api\\atendentes\\[id]\\desativar\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { z } from 'zod';\nimport {\n  idAtendenteSchema,\n  desativarAtendenteSchema,\n  MENSAGENS_ERRO_ATENDENTES,\n} from '@/lib/validations/atendentes';\nimport { ZodError } from 'zod';\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n/**\n * POST /api/atendentes/[id]/desativar\n * Desativa um atendente ativo\n */\nexport async function POST(request: NextRequest, { params }: RouteParams) {\n  try {\n    // Verificar autenticação\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ erro: 'Não autorizado' }, { status: 401 });\n    }\n\n    // Verificar permissões (apenas ADMIN pode desativar atendentes)\n    if (session.user.userType !== 'ADMIN') {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.SEM_PERMISSAO },\n        { status: 403 }\n      );\n    }\n\n    // Validar ID\n    const atendenteId = idAtendenteSchema.parse(params.id);\n\n    // Buscar atendente com dados do usuário\n    const atendente = await prisma.atendente.findUnique({\n      where: { id: atendenteId },\n      include: {\n        usuario: {\n          select: {\n            id: true,\n            nome: true,\n            email: true,\n            ativo: true,\n          },\n        },\n      },\n    });\n\n    if (!atendente) {\n      return NextResponse.json(\n        { erro: MENSAGENS_ERRO_ATENDENTES.ATENDENTE_NAO_ENCONTRADO },\n        { status: 404 }\n      );\n    }\n\n    // Verificar se o atendente já está inativo\n    if (atendente.status === 'INATIVO' || !atendente.usuario.ativo) {\n      return NextResponse.json(\n        { erro: 'Atendente já está inativo' },\n        { status: 400 }\n      );\n    }\n\n    // Verificar se é o próprio usuário tentando se desativar\n    if (atendente.usuarioId === session.user.id) {\n      return NextResponse.json(\n        { erro: 'Você não pode desativar sua própria conta' },\n        { status: 400 }\n      );\n    }\n\n    // Extrair dados do corpo da requisição\n    const dadosRequisicao = await request.json();\n\n    // Validar dados\n    const { motivo, tipoDesativacao, dataReativacao } =\n      desativarAtendenteSchema.parse(dadosRequisicao);\n\n    // Salvar dados anteriores para o histórico\n    const dadosAnteriores = {\n      statusAtendente: atendente.status,\n      usuarioAtivo: atendente.usuario.ativo,\n    };\n\n    // Usar transação para garantir consistência\n    const resultado = await prisma.$transaction(async tx => {\n      // Desativar usuário\n      const usuarioAtualizado = await tx.usuario.update({\n        where: { id: atendente.usuarioId },\n        data: { ativo: false },\n      });\n\n      // Atualizar status do atendente para INATIVO\n      const atendenteAtualizado = await tx.atendente.update({\n        where: { id: atendenteId },\n        data: { status: 'INATIVO' },\n      });\n\n      // Registrar no histórico de alterações\n      await tx.historicoAlteracaoAtendente.create({\n        data: {\n          atendenteId,\n          tipo: 'DESATIVACAO',\n          descricao: `Atendente desativado (${tipoDesativacao.toLowerCase()}) - ${motivo}`,\n          valorAnterior: JSON.stringify(dadosAnteriores),\n          valorNovo: JSON.stringify({\n            statusAtendente: 'INATIVO',\n            usuarioAtivo: false,\n            motivo,\n            tipoDesativacao,\n            dataReativacao,\n          }),\n          criadoPorId: session.user.id,\n        },\n      });\n\n      return {\n        atendente: atendenteAtualizado,\n        usuario: usuarioAtualizado,\n      };\n    });\n\n    return NextResponse.json({\n      mensagem: 'Atendente desativado com sucesso',\n      atendente: {\n        id: resultado.atendente.id,\n        status: resultado.atendente.status,\n        usuario: {\n          id: resultado.usuario.id,\n          nome: resultado.usuario.nome,\n          email: resultado.usuario.email,\n          ativo: resultado.usuario.ativo,\n        },\n        desativadoEm: new Date().toISOString(),\n        desativadoPor: {\n          id: session.user.id,\n          nome: session.user.name,\n        },\n        motivo,\n        tipoDesativacao,\n        dataReativacao: dataReativacao || null,\n      },\n    });\n  } catch (error) {\n    console.error('Erro ao desativar atendente:', error);\n\n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        {\n          erro: MENSAGENS_ERRO_ATENDENTES.DADOS_INVALIDOS,\n          detalhes: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { erro: MENSAGENS_ERRO_ATENDENTES.ERRO_INTERNO },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}